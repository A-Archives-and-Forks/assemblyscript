{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","StaticArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocBuffer","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","x","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","seen","has","seenInSource","seenCodesAtPos","includes","set","withRange","emitDiagnostic","Token","Range","NodeKind","DecoratorKind","LiteralKind","SourceKind","kind","LITERAL","NULL","TRUE","FALSE","Node","typeName","TypeName","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","type","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createNamedType","createSimpleTypeName","extendsType","defaultType","elem","TypeParameterNode","initializer","ParameterNode","parameterKind","args","stmt","DecoratorNode","arguments","decoratorKind","fromNode","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","elements","ArrayLiteralExpression","elementExpressions","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","typeArgs","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","element","ElementAccessExpression","elementExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","NewExpression","NullExpression","names","values","ObjectLiteralExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","flags","RegexpLiteralExpression","patternFlags","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","typeParameters","implementsTypes","members","decorators","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","ExportDefaultStatement","externalName","ExportImportStatement","ExportMember","localName","exportedName","ExpressionStatement","ifTrue","ifFalse","IfStatement","decls","ImportStatement","declarations","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureDeclaration","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","alias","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","TypeNode","typeParameterNodes","NAMEDTYPE","typeArgumentNodes","k","hasGenericComponent","FUNCTIONTYPE","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","flag","nameNode","IDENTIFIER","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","PROPERTYACCESS","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","literalKind","FLOAT","INTEGER","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","CALL","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","super","SOURCE","parent","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","createFunctionDeclaration","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","decorator","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","options","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","Source","nativeFile","File","internalName","parser","Parser","resolver","Resolver","buffer","offset","id","payloadSize","writeI32","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","tableBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","arrayPrototype","staticArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocBufferInstance","allocArrayInstance","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","isDeclaredElement","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","isAny","GET","SET","initializeProperty","initializeMethod","AMBIENT","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","declaredElements","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","ensureGlobal","makeNativeNamespaceDeclaration","memberName","TYPEDEFINITION","mangleInternalName","lookup","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","classInstance","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","AcyclicState","nextFunctionTarget","FUNCTION_TARGET","FIELD_PROTOTYPE","memoryOffset","getterRef","setterRef","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extends","basePtototype","Class","INTERFACE","nextMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","isBuiltinArray","lengthField","base","inheritedTypeArguments","baseName","baseType","target","unchecked","uncheckedOverload","overload","fieldName","field","baseOffset","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","NativeType","FeatureFlags","ExpressionId","SideEffects","UnaryOp","BinaryOp","HostOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","binaryen","_BinaryenModuleCreate","lit","_malloc","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","_free","changetype","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","Auto","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","Unreachable","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","allocI32Array","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","a","b","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","result","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","output","__i32_load8_u","readBuffer","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInit","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetType","_BinaryenEventGetNumParams","_BinaryenEventGetParam","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","getSideEffects","features","All","_BinaryenExpressionGetSideEffects","u8s","numValues","i32s","val","__i32_store","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","Host","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Push","_BinaryenPushGetValue","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","typesToNativeTypes","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","numParameterTypes","nativeTypes","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","functionTypeNode","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","indexedGet","resolvedType","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","PREFIX","Type_0_is_illegal_in_this_context","NONNULL","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","elementType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","BuiltinNames","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","pendingClasses","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","finishResolveClass","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","IndexSignature","pendingIndex","indexOf","splice","derivedPendingClasses","pending","LocalFlags","FlowFlags","ConditionKind","scopedLocals","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","resetBreakContext","branch","slice","temps","Exnref","unsetLocalFlag","addLocal","pop","getTempLocal","SCOPED","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","INITIALIZED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","before","after","min","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","importMemory","sharedMemory","importTable","exportTable","explicitStart","noUnsafe","pedantic","feature","Constraints","RuntimeFeatures","argumentsLength","setArgumentsLength","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","runtimeFeatures","skippedAutoreleases","inlineStack","lazyLibraryFunctions","pendingClassInstanceOf","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","setFeatures","compile","initialize","startFunctionInstance","startFunctionBody","currentFlow","currentBody","addGlobal","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","if","global_get","return","global_set","funcRef","addFunction","nativeParams","nativeResults","flatten","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileFunction","compileClassInstanceOf","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","addGlobalExport","Cannot_export_a_mutable_global","ensureTrampoline","ensureBuiltinArgumentsLength","COMPILED","internalGetterName","internalSetterName","isUnmanaged","subPrefix","compileMembers","compileGlobal","compileEnum","compileClass","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","compileExpression","nativeType","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","Feature_0_is_not_enabled","initializeInStart","origInitExpr","precomputeExpression","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","compileInlineConstant","makeZero","findDecorator","decoratorNodes","isManaged","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","binary","AddI32","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","An_implementation_cannot_be_declared_in_ambient_contexts","local_set","local_get","compileFunctionBody","performAutoreleases","Function_implementation_is_missing_or_not_immediately_following_the_declaration","addFunctionImport","getFunction","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","temp","nativeSizeType","unary","makeAllocation","makeFieldInitializationInConstructor","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","staticMembers","compileField","compileProperty","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","load","local_tee","drop","makeRelease","store","compilePropertyGetter","compilePropertySetter","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","addMemorySegment","byteLength","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","compileFileByPath","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","unreachable","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","makeIsTrueish","evaluateConditionKind","hasSideEffects","tcond","hasIncompatibleLocalStates","popBreakLabel","doCompileWhileStatement","hasScopedLocals","loop","doCompileForStatement","loopLabel","condKind","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","unset","newArgs","makeAbort","numDeclarations","initializers","initAutoreleaseSkipped","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","contextualType","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","retainLeftInThen","isStrictlyAssignableTo","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","makeReplace","nativeFieldType","tempThis","findUsedLocals","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","compileCallIndirect","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","Optional_parameter_must_have_an_initializer","newExpr","oldExpr","temp1","temp2","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","makeCallIndirect","numExpressions","exprs","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","ref_null","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","makeInstanceofClass","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","bufferAddress","arraySegment","addStaticArrayHeader","arrayAddress","alignLog2","nativeArrayType","dataStart","bufferSize","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseClass","baseCtor","allocExpr","theEnum","Object_is_possibly_null","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","v128_zero","ref_is_null","thisLocalIndex","fieldPrototype","codeLocation","messageArg","filenameArg","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","offsetof","checkArgsOptional","Type_0_has_no_property_1","nameof","resultType","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","AbsF32","AbsF64","isNumericLiteral","MaxF32","MaxF64","select","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","immAlign","outType","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","checkFeatureEnabled","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","atomic_rmw","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","memory_size","host","MemorySize","memory_grow","MemoryGrow","memory_copy","memory_fill","isChangeableTo","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","v128_swizzle","SwizzleV8x16","v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","v128_dot","DotI16x8","v128_avgr","AvgrU8x16","AvgrU16x8","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_andnot","AndNotV128","v128_not","NotV128","v128_bitselect","simd_ternary","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","isNaN","isFinite","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","tryDeferASM","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","nativeSizeSize","blocks","outer","addBlockWithSwitch","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","visitThisType","fieldOffset","addBlock","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","USER","currentSource","tn","parseTopLevelStatement","finish","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","createForStatement","elseStatement","createIfStatement","case_","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","i64_to_string","walk","TSDBuilder","unknown","numMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","formatDiagnostic","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","getSource","parseFile","nextFile","getDependee","cls","map","isSet","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","ipos","dirname","origin","readI32","readI64","valueI64"],"mappings":"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GACV,mBACA,iCACA,iBACA,iBACA,iBACA,iBACA,mBACA,yBACA,uBACA,yBACA,wBACA,oBAZF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAetB,SAAYC,GACV,iBACA,yBACA,uCACA,+CACA,yBACA,gCACA,0BACA,8CACA,6BACA,yCACA,mBAXF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAcxB,SAAYC,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,oBACA,kBACA,kCACA,sCACA,8BACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,gCACA,4BACA,gCACA,gCACA,oBACA,kBACA,0BACA,8BACA,0BACA,kBACA,sBACA,0BACA,0BA/CF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAkDxB,SAAYE,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,4BACA,4BACA,8BACA,oDACA,oDACA,oDACA,oDACA,kDACA,kDACA,kDACA,kDACA,oDACA,sDACA,oDACA,sDACA,oDACA,sDACA,oDACA,uDA3GF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KA8GnB,SAAYC,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,iDACA,iDACA,iDACA,iDACA,qCA/KF,CAAY,EAAAA,WAAA,EAAAA,SAAQ,KAkLpB,SAAYC,GACV,+BACA,+BAFF,CAAY,EAAAA,SAAA,EAAAA,OAAM,KAKlB,SAAYC,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBA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C,IACzB,IAAK,OAAQ,OAAOluC,EAAMmR,KAE5B,MAEF,KAAK,IACH,OAAQxS,GACN,IAAK,QAAS,OAAOqB,EAAMoR,MAC3B,IAAK,OAAQ,OAAOpR,EAAMmuC,KAE5B,MAEF,KAAK,IACH,OAAQxvC,GACN,IAAK,QAAS,OAAOqB,EAAMouC,OAKjC,OAAOpuC,EAAMmU,QAGf,SAAgBk6B,EAAsBh6B,GACpC,OAAQA,GACN,KAAKrU,EAAM8iB,SACX,KAAK9iB,EAAMysC,GACX,KAAKzsC,EAAMqN,YACX,KAAKrN,EAAM+kB,QACX,KAAK/kB,EAAMgtC,OACX,KAAKhtC,EAAMotC,KACX,KAAKptC,EAAMiQ,IACX,KAAKjQ,EAAMsiB,IACX,KAAKtiB,EAAMwN,WACX,KAAKxN,EAAMutC,GACX,KAAKvtC,EAAMwtC,MACX,KAAKxtC,EAAM0tC,OACX,KAAK1tC,EAAMymB,UACX,KAAKzmB,EAAMQ,KACX,KAAKR,EAAM6iB,SACX,KAAK7iB,EAAMuiB,IACX,KAAKviB,EAAMguC,KACX,KAAKhuC,EAAMmR,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAYnR,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kB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ChBorB,EAAK3vC,IAAI,EAAAwqC,iBAAiB9gD,IAC1B,MAEF,KAAK,EAAAkrB,aAAaoX,SAChB2jB,EAAK3vC,IAAI,EAAAuqC,iBAAiB7gD,IAG5B,QAAS,EAAAkmD,SAASlmD,EAAMimD,EAAMD,IAxoClC,SAwnCA,0BAA+BhmD,EAAqBimD,EAAiB,IAAIzuD,KAEvE,OADA,EAAA0uD,SAASlmD,EAAMimD,EAAMD,GACdC,I,8EC5xCT,SAAYtrD,GACV,2CACA,mDACA,yCACA,6DACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,uFACA,6IACA,uIACA,uIACA,+GACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MAlJF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAsJ1B,kCAAuCI,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,mBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,iFACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,4DACjB,KAAK,IAAK,MAAO,2DACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iCACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,6CACjB,KAAK,IAAK,MAAO,yEACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,qDACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,wEAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,iGAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,kGAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,yEAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,4BAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,MAAO,MAAO,wFACnB,KAAK,MAAO,MAAO,uGACnB,QAAS,MAAO,M,iBClTpB,4CAAuD,EAAQ,KAE/DvL,EAAOD,QAAU48B,EAEjB,MAAM,OAAEJ,GAAW,EAAQ,GAE3BA,EAAOj6B,UAAUq0D,OAAS,WAKxB,OAAOh6B,EAASi6B,WAAWv2D,KAAKu1B,KAAKihC,aAAoC,IAG3Et6B,EAAOj6B,UAAUw0D,QAAU,WACzB,OAAOn6B,EAASi6B,WAAWv2D,KAAKu1B,KAAKmhC,e,+FCVvC,cASA,OAKA,OAgCA,OAYA,OAyBA,QAQA,OAKA,OAKA,OAgEA,OAQA,OA+EA,IAgCiBC,EApGjB,8BAGE,KAAAp9B,OAAiB,EAAA1vB,OAAOqd,OAExB,KAAAC,UAAiB,EAEjB,KAAAyvC,cAAqB,EAErB,KAAAC,aAAoB,EAEpB,KAAAC,aAAoB,EAEpB,KAAAC,aAAoB,EAEpB,KAAA5/B,WAAkB,EAElB,KAAA6/B,eAAsB,EAEtB,KAAA5vC,WAAkB,EAElB,KAAAC,UAAiB,EAEjB,KAAAiE,cAA2C,KAE3C,KAAAolB,SAAQ,EAER,KAAAumB,UAAiB,EAEjB,KAAAC,UAAiB,EAGjB,KAAA5vC,kBAAyB,EAEzB,KAAAC,gBAAuB,EAGvB,eACE,OAAOvnB,KAAKu5B,QAAU,EAAA1vB,OAAOod,OAI/B,gBACE,OAAOjnB,KAAKu5B,QAAU,EAAA1vB,OAAOod,OAAS,EAAAZ,KAAKixB,QAAU,EAAAjxB,KAAKkxB,QAI5D,gBACE,OAAOv3C,KAAKu5B,QAAU,EAAA1vB,OAAOod,OAAS,EAAAZ,KAAK+wB,QAAU,EAAA/wB,KAAKgxB,QAI5D,qBACE,OAAOr3C,KAAKu5B,QAAU,EAAA1vB,OAAOod,OAAS,EAAAkU,WAAWv0B,IAAM,EAAAu0B,WAAWx0B,IAIpE,mBACE,OAAO3G,KAAKsnB,kBAAoB,GAAKtnB,KAAKunB,gBAAkB,EAI9D,WAAW4vC,GACT,OAAoC,IAA5Bn3D,KAAK0wC,SAAWymB,KAK5B,SAAkBC,GAChB,mBAGA,qCAEA,qCAEA,6BAGA,6BAEA,kCAEA,sCAfF,CAAkB,EAAAA,cAAA,EAAAA,YAAW,KAmB7B,SAAkBC,GAChB,mBAEA,mBAEA,mBAEA,mCAEA,mCATF,CAAkB,EAAAA,kBAAA,EAAAA,gBAAe,KAajC,SAAiBV,GAEF,EAAAvqD,MAAQ,SAER,EAAAkrD,gBAAkB,oBAElB,EAAAC,mBAAqB,uBAErB,EAAAC,OAAS,SAET,EAAAC,MAAQ,QAVvB,CAAiBd,EAAA,EAAAA,cAAA,EAAAA,YAAW,KAc5B,MAAae,UAAiB,EAAA3zC,kBA8C5B,YAAY2O,GACV/W,MAAM+W,EAAQ7lB,aAjChB,KAAA8qD,cAAgC,KAEhC,KAAAtS,YAAoB,EAAAh/B,KAAKG,KAMzB,KAAAoxC,eAAkC,GAElC,KAAAC,eAA4C,IAAIjwD,IAEhD,KAAAkwD,cAA0B,GAE1B,KAAAC,uBAAoC,EAEpC,KAAAC,gBAAe,EAEf,KAAAC,oBAA0C,IAAItwD,IAE9C,KAAAuwD,YAA0B,GAE1B,KAAAC,qBAAsC,IAAIxwD,IAE1C,KAAAywD,uBAA8C,IAAIzwD,IAgnG1C,KAAA0wD,eAAkC,KAClC,KAAAC,eAAkC,KAClC,KAAAC,eAAkC,KAClC,KAAAC,eAAkC,KAzmGxCx4D,KAAK0yB,QAAUA,EACf,IAAI1O,EAAU0O,EAAQ1O,QACtBhkB,KAAK23B,aAAe5Q,QAGlB8oC,IAAI7rC,EAAQoD,WAAY,IAE1B,IAAIznB,EAAS,EAAAu8B,OAAOv6B,SACpB3B,KAAKL,OAASA,EACd,IAAI2oC,EAA6B,EAC7BtkB,EAAQ6C,WAAW,KAAyByhB,GAAgB,EAAAlN,aAAaq9B,SACzEz0C,EAAQ6C,WAAW,KAA0ByhB,GAAgB,EAAAlN,aAAas9B,gBAC1E10C,EAAQ6C,WAAW,KAA0ByhB,GAAgB,EAAAlN,aAAau9B,oBAC1E30C,EAAQ6C,WAAW,KAAsByhB,GAAgB,EAAAlN,aAAaw9B,YACtE50C,EAAQ6C,WAAW,MAAeyhB,GAAgB,EAAAlN,aAAay9B,SAC/D70C,EAAQ6C,WAAW,MAAkByhB,GAAgB,EAAAlN,aAAa09B,SAClE90C,EAAQ6C,WAAW,MAA6ByhB,GAAgB,EAAAlN,aAAa29B,mBAC7E/0C,EAAQ6C,WAAW,OAAqByhB,GAAgB,EAAAlN,aAAa49B,UACrEh1C,EAAQ6C,WAAW,OAA0ByhB,GAAgB,EAAAlN,aAAa69B,gBAC9Et5D,EAAOu5D,YAAY5wB,GA9DrB,eAA2B,OAAOtoC,KAAK0yB,QAAQtN,SAE/C,cAAyB,OAAOplB,KAAK0yB,QAAQ1O,QAkC7C,eAAe0O,GACb,OAAO,IAAIglC,EAAShlC,GAASymC,UA6B/B,UACE,IAAIn1C,EAAUhkB,KAAKgkB,QACfrkB,EAASK,KAAKL,OACd+yB,EAAU1yB,KAAK0yB,QAGnBA,EAAQ0mC,WAAWp1C,GAGnB,IAAIq1C,EAAwB3mC,EAAQa,mBAAmB,EAAA62B,aAAah+C,MAAO,IAAI,EAAAonB,UAAUd,EAAS,GAAI,EAAArM,KAAKG,OAC3G6yC,EAAsBp0C,aAAe,EAAAmlC,aAAah+C,MAClD,IAAIktD,EAAoB,IAAI7xD,MAC5BzH,KAAKu5D,YAAcF,EAAsBtiC,KACzC/2B,KAAKw5D,YAAcF,EAGft1C,EAAQgD,UACVrnB,EAAO85D,UAAU,EAAArP,aAAasP,UAAW,EAAAv+B,WAAWv0B,KAAK,EAAMjH,EAAO0D,IAAI,IAC1E1D,EAAO85D,UAAU,EAAArP,aAAauP,UAAW,EAAAx+B,WAAWv0B,KAAK,EAAMjH,EAAO0D,IAAI,MAE1E1D,EAAO85D,UAAU,EAAArP,aAAasP,UAAW,EAAAv+B,WAAWx0B,KAAK,EAAMhH,EAAOyD,IAAI,IAC1EzD,EAAO85D,UAAU,EAAArP,aAAauP,UAAW,EAAAx+B,WAAWx0B,KAAK,EAAMhH,EAAOyD,IAAI,KAI5E,IAAIw2D,EAAQlnC,EAAQvO,YACpB,IAAK,IAAI0D,KAAQ+xC,EAAMznD,SACjB0V,EAAKlc,OAAOqQ,YAAc,EAAArO,WAAWgf,aACvC3sB,KAAK65D,YAAYhyC,GACjB7nB,KAAK85D,eAAejyC,IAKxB,IAAIkyC,GAAgBT,EAAkBntD,OAClC6qD,EAAgBhzC,EAAQgzC,cAC5B,IAAK+C,GAAgB/C,EAAe,CAClC,IAAI/gD,EAAYojD,EAAsBpjD,WACjC8jD,GAAgB/C,IACnBr3D,EAAO85D,UAAU,EAAArP,aAAa4P,QAAS,EAAA7+B,WAAWx0B,KAAK,EAAMhH,EAAOyD,IAAI,IACxEk2D,EAAkBW,QAChBt6D,EAAOu6D,GACLv6D,EAAOw6D,WAAW,EAAA/P,aAAa4P,QAAS,EAAA7+B,WAAWx0B,KACnDhH,EAAOy6D,SACPz6D,EAAO06D,WAAW,EAAAjQ,aAAa4P,QAASr6D,EAAOyD,IAAI,OAIzD,IAAIk3D,EAAU36D,EAAO46D,YACnBlB,EAAsBp0C,aACtBhP,EAAUukD,aACVvkD,EAAUwkD,cACV,EAAAtiB,mBAAmBkhB,EAAsBhkC,kBACzC11B,EAAO+6D,QAAQpB,IAEjBD,EAAsBsB,SAASh7D,EAAQ26D,GAClCtD,EACAr3D,EAAOi7D,kBAAkBvB,EAAsBp0C,aAAc0xC,EAAYvqD,OAD1DzM,EAAOk7D,SAASP,GAKtC,IAAIQ,EAAgBpoC,EAAQqoC,oBAC5B,GAAID,EAAc/4B,MAChB,GAAI/d,EAAQkzC,SACV,IAAK,IAAIpiC,KAAiBgmC,EACxB96D,KAAKk3D,SACH,EAAApsD,eAAekwD,iEACflmC,EAAc3J,eAAe/f,MAAO0pB,EAAc7P,mBAKxDyN,EAAQ5L,wBAAwB,mBAAoB,EAAAT,KAAKziB,KAAMmjB,QAAQ,EAAG,IAI5E,IAAIoxC,EAAuBn4D,KAAKm4D,qBAChC,EAAG,CACD,IAAI8C,EAAqB,IAAIxzD,MAC7B,IAAK,IAAI8qB,KAAY4lC,EACnB8C,EAAmBvuD,KAAK6lB,GAE1B4lC,EAAqB+C,QACrB,IAAK,IAAI76D,EAAI,EAAGwX,EAAIojD,EAAmB9uD,OAAQ9L,EAAIwX,IAAKxX,EACtDL,KAAKm7D,gBAAgB3hC,UAAUyhC,EAAmB56D,KAAK,SAElD83D,EAAqBp2B,MAG9B,IAAK,IAAI9/B,KAAajC,KAAKo4D,uBAAuBjmD,SAChD,EAAAipD,uBAAuBp7D,KAAMiC,GAI/BtC,EAAO07D,aAAa,EAAAjR,aAAauP,WACN,EAAvB35D,KAAKg4D,iBAAwC,EAAAsD,YAAYt7D,MAClC,EAAvBA,KAAKg4D,iBAAgD,EAAAuD,oBAAoBv7D,MAClD,EAAvBA,KAAKg4D,iBAAgD,EAAAwD,oBAAoBx7D,MAG7E,IAAI23B,EAAe33B,KAAK23B,aACxBA,EAAe8jC,UAAU9jC,EAAc3T,EAAQuC,UAAUywB,UACzDh3C,KAAK23B,aAAeA,EACpBh4B,EAAO07D,aAAa,EAAAjR,aAAasP,WACN,EAAvB15D,KAAKg4D,kBACHh0C,EAAQgD,SACVrnB,EAAO85D,UACL,EAAArP,aAAasP,UACb,EAAAv+B,WAAWv0B,KACX,EACAjH,EAAO0D,IAAIijC,QAAQ3O,GAAe4O,SAAS5O,KAG7Ch4B,EAAO85D,UACL,EAAArP,aAAasP,UACb,EAAAv+B,WAAWx0B,KACX,EACAhH,EAAOyD,IAAIkjC,QAAQ3O,MAMzB,IAAI+jC,EAAiB13C,EAAQ6C,WAAW,KAAoB7C,EAAQ6yC,aAAe,EACnFl3D,EAAOg8D,UACL37D,KAAKgkB,QAAQoD,YAAiCpnB,KAAK43D,eAAezrD,OAC9Dm6B,QAAQs1B,UAAUH,UAAU9jC,EAAc,OAAU5Q,QAAQ,GAAI,KAChE,EACJ20C,EAAiB13C,EAAQ6yC,aAAe,EAAA36B,OAAO0Q,iBAC/C5sC,KAAK43D,eACL5zC,EAAQuV,OACRo9B,EAAYa,OACZkE,GAIE13C,EAAQ4yC,cAAcj3D,EAAOk8D,gBAAgB,IAAK,MAAO,SAAUH,GAGvE,IAAI5D,EAAgB93D,KAAK83D,cACrBzwC,EAAYrnB,KAAKgkB,QAAQqD,UACxBA,IAAWA,EAAY,GAC5B1nB,EAAOm8D,iBAAiBz0C,EAAYywC,EAAc3rD,OAAQ,EAAA+vB,OAAO2Q,gBAAiBirB,EAAen4D,EAAOyD,IAAIikB,IAGxGrD,EAAQ8yC,cACVn3D,EAAOo8D,eAAe,IAAK,MAAO,SAC9B/3C,EAAQkzC,UAAYlzC,EAAQg4C,cAC9Bh8D,KAAKk3D,SACH,EAAApsD,eAAemxD,8DACf,OAIFj4C,EAAQ+yC,cACVp3D,EAAOu8D,eAAe,IAAKvF,EAAYc,OACnCzzC,EAAQkzC,UAAYlzC,EAAQg4C,cAC9Bh8D,KAAKk3D,SACH,EAAApsD,eAAeqxD,8DACf,OAMN,IAAK,IAAIt0C,KAAQ7nB,KAAK0yB,QAAQvO,YAAYhS,SACpC0V,EAAKlc,OAAOqQ,YAAc,EAAArO,WAAWgf,YAAY3sB,KAAKo8D,oBAAoBv0C,GAEhF,OAAOloB,EAMD,oBAAoBkoB,GAC1B,IAAIjU,EAAUiU,EAAKnoB,QACnB,GAAIkU,EAAS,IAAK,IAAKhT,EAAMusB,KAAWvZ,EAAS5T,KAAKq8D,mBAAmBz7D,EAAMusB,GAC/E,IAAI1E,EAAcZ,EAAKY,YACvB,GAAIA,EACF,IAAK,IAAIpoB,EAAI,EAAGwX,EAAI4Q,EAAYtc,OAAQ9L,EAAIwX,IAAKxX,EAAGL,KAAKo8D,oBAAoB3zC,EAAYpoB,IAKrF,mBAAmBO,EAAc2Q,EAAkB+qD,EAAiB,IAC1E,OAAQ/qD,EAAQ3D,MAGd,KAAK,EAAA2R,YAAYwN,mBAcjB,KAAK,EAAAxN,YAAY0K,gBAAiB,CAChC,IAAI2K,EAA6BrjB,EAASqjB,UAC1C,GAAIA,EACF,IAAK,IAAIrC,KAAYqC,EAAUziB,SAAU,CACvC,IAAI8jD,EAAer1D,EACnB,GAAI2xB,EAASzE,GAAG,EAAAzrB,YAAYukB,SAAU,CACpC,IAAI21C,EAAWhqC,EAAStN,aACxBgxC,GAAgBsG,EAAS9vD,UAAU8vD,EAASrgD,YAAY,MAE1Dlc,KAAKq8D,mBAAmBpG,EAAc1jC,EAAU+pC,GAGpD,MAEF,KAAK,EAAA/8C,YAAY6N,mBAAoB,CACnC,IAAIvsB,EAA6B0Q,EAAS8b,gBACtCxsB,GAAQb,KAAKq8D,mBAAmB,EAAA75D,cAAgB5B,EAAMC,EAAQy7D,GAClE,IAAIE,EAA6BjrD,EAAS+b,gBACtCkvC,GAAQx8D,KAAKq8D,mBAAmB,EAAA55D,cAAgB7B,EAAM47D,EAAQF,GAClE,MAIF,KAAK,EAAA/8C,YAAY1G,OACDtH,EAAQuc,GAAG,EAAAzrB,YAAY6rB,QAAU3c,EAAQuc,GAAG,EAAAzrB,YAAY4tB,OAAS,EAAA5tB,YAAY8tB,WAC1EnwB,KAAKgkB,QAAQ6C,WAAW,GAMvC7mB,KAAKL,OAAO88D,gBAAgBlrD,EAAQ0T,aAAcq3C,EAAS17D,GAL3DZ,KAAK8oB,MACH,EAAAhe,eAAe4xD,+BACNnrD,EAAS4Z,eAAe/f,OAKrC,MAEF,KAAK,EAAAmU,YAAYgV,UACEhjB,EAASijB,aAAgBx0B,KAAKgkB,QAAQ6C,WAAW,GAMhE7mB,KAAKL,OAAO88D,gBAAgBlrD,EAAQ0T,aAAcq3C,EAAS17D,GAL3DZ,KAAK8oB,MACH,EAAAhe,eAAe4xD,+BACHnrD,EAAS4Z,eAAe/f,OAKxC,MAEF,KAAK,EAAAmU,YAAY1E,SAAU,CACzB,IAAI0X,EAAqBhhB,EACrB0E,EAAYsc,EAAStc,UACrBA,EAAUuiC,mBAAqBviC,EAAU0gB,eAAexqB,SAE1DomB,EAAWvyB,KAAK28D,iBAAiBpqC,GACjCvyB,KAAK48D,gCAEHrqC,EAASzE,GAAG,EAAAzrB,YAAYw6D,WAAW78D,KAAKL,OAAOi7D,kBAAkBroC,EAAStN,aAAcq3C,EAAS17D,GACrG,MAEF,KAAK,EAAA2e,YAAYgO,SAAU,CACzB,IAAI1sB,EAAoB0Q,EAASwmB,eAC7Bl3B,GAAQb,KAAKq8D,mBAAmB,EAAA75D,cAAgB5B,EAAMC,EAAQy7D,GAClE,IAAIE,EAAoBjrD,EAASymB,eAC7BwkC,GAAQx8D,KAAKq8D,mBAAmB,EAAA55D,cAAgB7B,EAAM47D,EAAQF,GAClE,MAEF,KAAK,EAAA/8C,YAAYiO,MACf,GAAIjc,EAAQuc,GAAG,EAAAzrB,YAAYw6D,UAAW,CACpC,IAAIl9D,EAASK,KAAKL,OAClBA,EAAOi7D,kBAA0BrpD,EAASurD,mBAAoBR,EAAS,EAAA95D,cAAgB5B,GAClF2Q,EAAQuc,GAAG,EAAAzrB,YAAY8tB,WAC1BxwB,EAAOi7D,kBAA0BrpD,EAASwrD,mBAAoBT,EAAS,EAAA75D,cAAgB7B,GAG3F,MAEF,KAAK,EAAA2e,YAAY9E,MAEf,IAAalJ,EAAS7C,KAAKsuD,YAAa,CACtC,IAAIr9D,EAASK,KAAKL,OACdslB,EAAuB1T,EAAS0T,aACpCtlB,EAAO85D,UAAUx0C,EAAc,EAAAkW,WAAWx0B,KAAK,EAAOhH,EAAOyD,IAAYmO,EAASiU,KAClF7lB,EAAO88D,gBAAgBx3C,EAAcq3C,EAAS17D,GAEhD,MAIF,KAAK,EAAA2e,YAAYyU,KACjB,KAAK,EAAAzU,YAAYwU,UACjB,KAAK,EAAAxU,YAAYqT,KACjB,KAAK,EAAArT,YAAYqU,eACjB,KAAK,EAAArU,YAAY0Y,eAAgB,MAEjC,QAASztB,QAAO,GAIlB,IAAIoJ,EAAUrC,EAAQqC,QACtB,GAAIA,EAAS,CACX,IAAIqpD,EAAYX,EAAS17D,GAAQ2Q,EAAQ3D,MAAQ,EAAA2R,YAAY9E,MACzD,EAAA/X,mBACA,EAAAC,kBAEJ,GACE4O,EAAQ3D,MAAQ,EAAA2R,YAAYwU,WAC5BxiB,EAAQ3D,MAAQ,EAAA2R,YAAYqT,KAE5B,IAAK,IAAIzF,KAAUvZ,EAAQzB,SACpBgb,EAAOW,GAAG,EAAAzrB,YAAY6a,SAC3Bld,KAAKq8D,mBAAmBlvC,EAAOvsB,KAAMusB,EAAQ8vC,QAG/C,IAAK,IAAI9vC,KAAUvZ,EAAQzB,SACrBgb,EAAOW,GAAG,EAAAzrB,YAAY84C,UAC1Bn7C,KAAKq8D,mBAAmBlvC,EAAOvsB,KAAMusB,EAAQ8vC,IASrD,eAAe1rD,EAAkB2rD,GAAuB,GACtD,OAAQ3rD,EAAQ3D,MACd,KAAK,EAAA2R,YAAY1G,OACf7Y,KAAKm9D,cAAsB5rD,GAC3B,MAEF,KAAK,EAAAgO,YAAYyU,KACfh0B,KAAKo9D,YAAkB7rD,GACvB,MAEF,KAAK,EAAAgO,YAAYwN,mBACf,IAAKxb,EAAQuc,GAAG,EAAAzrB,YAAYukB,SAAU,CACpC,IAAI2L,EAAWvyB,KAAKolB,SAAS4H,gBAAmCzb,EAAS,MACrEghB,GAAUvyB,KAAKm7D,gBAAgB5oC,GAErC,MAEF,KAAK,EAAAhT,YAAY0K,gBACf,IAAK1Y,EAAQuc,GAAG,EAAAzrB,YAAYukB,SAAU,CACpC,IAAI2L,EAAWvyB,KAAKolB,SAAS0H,aAA6Bvb,EAAS,MAC/DghB,GAAUvyB,KAAKq9D,aAAa9qC,GAElC,MAEF,KAAK,EAAAhT,YAAY6N,mBAAoB,CACnC,IAAIC,EAAsC9b,EAAS8b,gBACnD,GAAIA,EAAiB,CACnB7iB,QAAQ6iB,EAAgBS,GAAG,EAAAzrB,YAAYukB,UACvC,IAAI2L,EAAWvyB,KAAKolB,SAAS4H,gBAAgBK,EAAiB,MAC1DkF,GAAUvyB,KAAKm7D,gBAAgB5oC,GAErC,IAAIjF,EAAsC/b,EAAS+b,gBACnD,GAAIA,EAAiB,CACnB9iB,QAAQ8iB,EAAgBQ,GAAG,EAAAzrB,YAAYukB,UACvC,IAAI2L,EAAWvyB,KAAKolB,SAAS4H,gBAAgBM,EAAiB,MAC1DiF,GAAUvyB,KAAKm7D,gBAAgB5oC,GAErC,MAEF,KAAK,EAAAhT,YAAYwU,UACjB,KAAK,EAAAxU,YAAYqU,eACjB,KAAK,EAAArU,YAAYgV,UACjB,KAAK,EAAAhV,YAAY0Y,eAAgB,MACjC,QAASztB,QAAO,EAAO,EAAA+U,YAAYhO,EAAQ3D,OAE7C,GAAIsvD,EAAgB,CAClB,IAAItpD,EAAUrC,EAAQqC,QACtB,GAAIA,EAAS,IAAK,IAAIrC,KAAWqC,EAAQzB,SAAUnS,KAAKs9D,eAAe/rD,IAK3E,eAAesW,GACb,IAAInoB,EAAUmoB,EAAKnoB,QACnB,GAAIA,EAAS,IAAK,IAAI6R,KAAW7R,EAAQyS,SAAUnS,KAAKs9D,eAAe/rD,GACvE,IAAIkX,EAAcZ,EAAKY,YACvB,GAAIA,EACF,IAAK,IAAIC,KAAcD,EACrBzoB,KAAK65D,YAAYnxC,GACjB1oB,KAAK85D,eAAepxC,GAQ1B,kBAAkB60C,EAAwC/R,GACxD,IAAI3jC,EAEA21C,EADAr5C,EAAcnkB,KAAK0yB,QAAQvO,YAE/B,GAAIA,EAAYpX,IAAIwwD,GAClB11C,EAAO1D,EAAYjjB,IAAIq8D,OAClB,KAAIp5C,EAAYpX,IAAIywD,EAAgBD,EAAiC,EAAAx6D,cAO1E,YAJA/C,KAAK8oB,MACH,EAAAhe,eAAeie,iBACfyiC,EAAWpgD,MAAOmyD,GAJpB11C,EAAO1D,EAAYjjB,IAAIs8D,GAQzBx9D,KAAK65D,YAAYhyC,GAInB,YAAYA,GACV,IAAIA,EAAKiG,GAAG,EAAAzrB,YAAYw6D,UAAxB,CACAh1C,EAAK1a,IAAI,EAAA9K,YAAYw6D,UAGrB,IAAIvpC,EAAgBzL,EAAKyL,cACrBmqC,EAAiBnqC,EAAcrd,UAC/BynD,EAAe19D,KAAKw5D,YACpBF,EAAoB,IAAI7xD,MAC5BzH,KAAKw5D,YAAcF,EAGnB,IAAIqE,EAAe39D,KAAKu5D,YACpBxiC,EAAOzD,EAAcyD,KACzB/2B,KAAKu5D,YAAcxiC,EACnB,IAAK,IAAIzjB,EAAauU,EAAKlc,OAAO2H,WAAYjT,EAAI,EAAGwX,EAAIvE,EAAWnH,OAAQ9L,EAAIwX,IAAKxX,EACnFL,KAAK49D,yBAAyBtqD,EAAWjT,GAAIi5D,GAQ/C,GANAt5D,KAAK69D,mBAAmB9mC,EAAMuiC,GAE9Bt5D,KAAKu5D,YAAcoE,EACnB39D,KAAKw5D,YAAckE,EAGfpE,EAAkBntD,OAAQ,CAC5B,IAAIxM,EAASK,KAAKL,OACdu3B,EAAS5D,EAAc8B,cACvB0oC,EAAY5mC,EAAO/qB,OACnBk4B,EAAW,IAAI58B,MAAkBq2D,GACrC,IAAK,IAAIz9D,EAAI,EAAGA,EAAIy9D,IAAaz9D,EAAGgkC,EAAShkC,GAAK62B,EAAO72B,GAAGqO,KAAK2pC,eACjE14C,EAAO46D,YACLjnC,EAAcrO,aACdw4C,EAAejD,aACfiD,EAAehD,cACfp2B,EACA1kC,EAAO+6D,QAAQpB,IAEjBoE,EAAahxD,KACX/M,EAAOa,KAAK8yB,EAAcrO,aAAc,KAAM,EAAAkW,WAAW2D,SAQ/D,cAAc/Q,GACZ,GAAIA,EAAOD,GAAG,EAAAzrB,YAAYw6D,UAAW,OAAO,EAC5C9uC,EAAO5gB,IAAI,EAAA9K,YAAYw6D,UAEvB,IAAIl9D,EAASK,KAAKL,OACdo+D,EAA0B,EAC1B3a,EAAWr1B,EAAOq1B,SAClByE,EAAkB95B,EAAO85B,gBAE7B,IAAK95B,EAAOD,GAAG,EAAAzrB,YAAYgxB,UAGzB,GAAI+vB,EAAU,CACZ,IAAI8E,EAAeloD,KAAKolB,SAAS+9B,YAAYC,EAAUr1B,EAAOlS,QAC9D,IAAKqsC,EAAc,OAAO,EAC1B,GAAIA,GAAgB,EAAA7hC,KAAKG,KAKvB,OAJAxmB,KAAK8oB,MACH,EAAAhe,eAAe44C,cACfN,EAASh4C,QAEJ,EAET2iB,EAAON,QAAQy6B,OAGV,KAAIL,EAwBT,OAJA7nD,KAAK8oB,MACH,EAAAhe,eAAe44C,cACf31B,EAAO5C,eAAe/f,MAAMg6C,QAEvB,EAxBmB,CAC1B,IAAIuY,EAAe39D,KAAKu5D,YAQxB,GAPIxrC,EAAO9C,aAAa,EAAAzL,eAAezG,QACrC/Y,KAAKu5D,YAAcxrC,EAAOlG,KAAKyL,cAAcyD,MAE/CgnC,EAAW/9D,KAAKg+D,kBAAkBnW,EAAiB,EAAAxhC,KAAKmxB,KACtD,IAEFx3C,KAAKu5D,YAAcoE,EACf39D,KAAKqlD,aAAe,EAAAh/B,KAAKG,KAK3B,OAJAxmB,KAAK8oB,MACH,EAAAhe,eAAeiiD,mCACflF,EAAgBz8C,MAAOpL,KAAKqlD,YAAY35C,WAAY,WAE/C,EAETqiB,EAAON,QAAQztB,KAAKqlD,cAaxB,GAAIt3B,EAAOD,GAAG,EAAAzrB,YAAY2tB,UAAYjC,EAAO9C,aAAa,EAAAzL,eAAe7G,SAGvE,OAFIoV,EAAO9I,cAAgB,EAAAmlC,aAAasP,UAAW15D,KAAKg4D,iBAAmB,EAClEjqC,EAAO9I,cAAgB,EAAAmlC,aAAauP,YAAW35D,KAAKg4D,iBAAmB,IACzE,EAGT,IAAItpD,EAAOqf,EAAOrf,KACduvD,EAAavvD,EAAK2pC,eAClB6lB,EAAqBnwC,EAAOD,GAAG,EAAAzrB,YAAY6rB,QAAUH,EAAOD,GAAG,EAAAzrB,YAAY4tB,OAAS,EAAA5tB,YAAY8tB,UAChGguC,EAAmBpwC,EAAO9C,aAAa,EAAAzL,eAAe1G,QAG1D,GAAIiV,EAAOD,GAAG,EAAAzrB,YAAY2tB,SAGxB,OAAIkuC,GAAsBl+D,KAAKgkB,QAAQ6C,WAAW,IAChDkH,EAAO5gB,IAAI,EAAA9K,YAAY+7D,eACvBC,EAAiBtwC,EAAQA,EAAO7c,aAChCvR,EAAO2+D,gBACLvwC,EAAO9I,aACPs5C,EACAC,EACAP,GACCC,GAEHnwC,EAAO5gB,IAAI,EAAA9K,YAAYw6D,WAChB,IAIP78D,KAAK8oB,MACH,EAAAhe,eAAe2zD,yBACf1wC,EAAO7c,YAAY9F,MAAO,oBAGvB,GAKT,IAAIszD,GAAoB,EAGxB,GAAI7W,EAAiB,CACnB,IAAKkW,EAAU,CACb,IAAIJ,EAAe39D,KAAKu5D,YACpBxrC,EAAO9C,aAAa,EAAAzL,eAAezG,QACrC/Y,KAAKu5D,YAAcxrC,EAAOlG,KAAKyL,cAAcyD,MAE/CgnC,EAAW/9D,KAAKg+D,kBAAkBnW,EAAiBn5C,EACjD,IAEF1O,KAAKu5D,YAAcoE,EAIrB,GAAI,EAAAx9B,gBAAgB49B,IAAa,EAAA1iC,aAAaqP,MAC5C,GAAIwzB,EAAoB,CACtB,IAAIS,EAAeZ,EACnBA,EAAWp+D,EAAOi/D,qBAAqBb,GACnC,EAAA59B,gBAAgB49B,IAAa,EAAA1iC,aAAaqP,QAAOg0B,GAAoB,GACrE1+D,KAAKi4D,oBAAoBlrD,IAAI4xD,IAAe3+D,KAAKi4D,oBAAoBxxC,IAAIs3C,QAE7EW,GAAoB,EAKxB,GAAIA,GAAqB,EAAAv+B,gBAAgB49B,IAAa,EAAA1iC,aAAa6P,UAAW,CAC5E,IAAI2zB,EAAWr0D,OAAO,EAAAooD,iBAAiBmL,IACvC,IAAK,EAAAe,gBAAgBn/D,EAAOo/D,UAAUF,IAAY,CAChD,IAAIz6C,EAAiBpkB,KAAK0yB,QAAQtO,eAClC,GAAIA,EAAerX,IAAI8xD,GAAW,CACnBz6C,EAAeljB,IAAI29D,GACrB/wC,GAAG,EAAAzrB,YAAY2tB,WAAU0uC,GAAoB,KAM9D,GAAIP,EACF,GAAIO,EACF1+D,KAAKsvB,QACH,EAAAxkB,eAAek0D,gCACfnX,EAAgBz8C,WAEb,CAGL,OAFAZ,OAAO,EAAA21B,gBAAgB49B,IAAa,EAAA1iC,aAAaqP,OAClC,EAAAlK,kBAAkBu9B,IAE/B,KAAK,EAAA5iC,WAAWx0B,IACdonB,EAAOoG,kBAAoB,EAC3BpG,EAAOqG,qBAAuBrN,QAAQ,EAAAuqC,iBAAiByM,GAAW,GAClE,MAEF,KAAK,EAAA5iC,WAAWv0B,IACdmnB,EAAOoG,kBAAoB,EAC3BpG,EAAOqG,qBAAuBrN,QAC5B,EAAAwqC,oBAAoBwM,GACpB,EAAAvM,qBAAqBuM,IAEvB,MAEF,KAAK,EAAA5iC,WAAW/zB,IACd2mB,EAAOoG,kBAAoB,EAC3BpG,EAAOuG,mBAAqB,EAAA+gC,iBAAiB0I,GAC7C,MAEF,KAAK,EAAA5iC,WAAW9zB,IACd0mB,EAAOoG,kBAAoB,EAC3BpG,EAAOuG,mBAAqB,EAAAghC,iBAAiByI,GAC7C,MAEF,QAEE,OADAvzD,QAAO,IACA,EAGXujB,EAAO5gB,IAAI,EAAA9K,YAAYgyB,eAOzB0pC,EADEhwC,EAAOD,GAAG,EAAAzrB,YAAYgyB,SACbr0B,KAAKi/D,sBAAsBlxC,EAAQA,EAAOrf,KAAM,IAEhD1O,KAAKk/D,SAASxwD,GAI7B,IAAIuW,EAAe8I,EAAO9I,aAiB1B,OAfIy5C,GACEP,GACFn+D,KAAK8oB,MACH,EAAAhe,eAAekkB,8BACfxkB,OAAO,EAAA20D,cAAc,EAAA1xD,cAAcqL,OAAQiV,EAAOqxC,iBAAiBh0D,MAAO,UAG9EzL,EAAO85D,UAAUx0C,EAAcg5C,GAAY,EAAMj+D,KAAKk/D,SAASxwD,IAC3DA,EAAK2wD,YAAcr/D,KAAKi4D,oBAAoBlrD,IAAIgxD,KAAWA,EAAW/9D,KAAKs/D,WAAWvB,IAC1F/9D,KAAKw5D,YAAY9sD,KACf/M,EAAO06D,WAAWp1C,EAAc84C,KAExBI,GACVx+D,EAAO85D,UAAUx0C,EAAcg5C,GAAaC,EAAoBH,IAE3D,EAMT,YAAYxsD,GACV,GAAIA,EAAQuc,GAAG,EAAAzrB,YAAYw6D,UAAW,OAAO,EAC7CtrD,EAAQpE,IAAI,EAAA9K,YAAYw6D,UAExB,IAAIl9D,EAASK,KAAKL,OACd4/D,EAAiBv/D,KAAK23D,cAC1B33D,KAAK23D,cAAgBpmD,EACrB,IAAIiuD,EAAkC,KAClCC,GAAqB,EACrB/V,EAAWn4C,EAAQuc,GAAG,EAAAzrB,YAAY6rB,QAAU3c,EAAQ0Z,aAAa,EAAAzL,eAAe1G,QAEpF,GAAIvH,EAAQqC,QACV,IAAK,IAAIuZ,KAAU5b,EAAQqC,QAAQzB,SAAU,CAC3C,GAAIgb,EAAOvf,MAAQ,EAAA2R,YAAYgV,UAAW,SAC1C,IAAImrC,GAAc,EACd1uB,EAAiB7jB,EACjBwyC,EAAY3uB,EAAI2uB,UACpB3uB,EAAI7jC,IAAI,EAAA9K,YAAYw6D,UACpB,IAIIkB,EAJAJ,EAAe39D,KAAKu5D,YAKxB,GAJIhoD,EAAQ0Z,aAAa,EAAAzL,eAAezG,QACtC/Y,KAAKu5D,YAAchoD,EAAQsW,KAAKyL,cAAcyD,MAG5C4oC,EACF5B,EAAW/9D,KAAKg+D,kBAAkB2B,EAAW,EAAAt5C,KAAKjjB,IAAG,GAGjD,EAAA+8B,gBAAgB49B,IAAa,EAAA1iC,aAAaqP,QAC5CqzB,EAAWp+D,EAAOi/D,qBAAqBb,GACnC,EAAA59B,gBAAgB49B,IAAa,EAAA1iC,aAAaqP,QACxCn5B,EAAQuc,GAAG,EAAAzrB,YAAY6rB,QACzBluB,KAAK8oB,MACH,EAAAhe,eAAe80D,0EACfD,EAAUv0D,OAGds0D,GAAc,SAGb,GAAqB,MAAjBF,EACTzB,EAAWp+D,EAAOyD,IAAI,OACjB,CAOL,GANIq8D,GACFz/D,KAAK8oB,MACH,EAAAhe,eAAe+0D,kCACH1yC,EAAQhC,eAAe/f,MAAMg6C,OAGzCsE,EAAU,CACZ,IAAIpoD,EAAQi/C,QAAQif,EAAcprC,qBAAsBrN,QAAQ,IAChEvc,QAAQ+7B,SAASjlC,IACjBy8D,EAAWp+D,EAAOyD,IAAIkjC,QAAQhlC,SAE9By8D,EAAWp+D,EAAOmgE,OAAO,EAAAtkC,SAASukC,OAChCpgE,EAAOw6D,WAAWqF,EAAcv6C,aAAc,EAAAkW,WAAWx0B,KACzDhH,EAAOyD,IAAI,IAGf26D,EAAWp+D,EAAOi/D,qBAAqBb,GACnC,EAAA59B,gBAAgB49B,IAAa,EAAA1iC,aAAaqP,QACxCn5B,EAAQuc,GAAG,EAAAzrB,YAAY6rB,QACzBluB,KAAK8oB,MACH,EAAAhe,eAAe80D,0EACfzyC,EAAOjc,YAAY9F,OAGvBs0D,GAAc,GAGlB1/D,KAAKu5D,YAAcoE,EACf+B,GACF//D,EAAO85D,UAAUzoB,EAAI/rB,aAAc,EAAAkW,WAAWx0B,KAAK,EAAMhH,EAAOyD,IAAI,IACpEpD,KAAKw5D,YAAY9sD,KACf1M,KAAKggE,qBAAqBhvB,EAAK+sB,GAAU,IAE3C0B,GAAqB,IAEjB/V,GACF1Y,EAAI7iB,wBAAwBpH,QAAQ,EAAAuqC,iBAAiByM,IAAY,EAAA13C,KAAKjjB,KAClE4tC,EAAIljB,GAAG,EAAAzrB,YAAY4qB,gBACrBttB,EAAO85D,UAAUzoB,EAAI/rB,aAAc,EAAAkW,WAAWx0B,KAAK,EAAOo3D,IAG5Dp+D,EAAO85D,UAAUzoB,EAAI/rB,aAAc,EAAAkW,WAAWx0B,KAAK,EAAOo3D,GAE5D/sB,EAAIxc,aAAc,EAClBirC,GAAqB,GAEvBD,EAA2BxuB,EAI/B,OADAhxC,KAAK23D,cAAgB4H,GACd,EAMT,gBAEEhtC,EAEA0tC,GAA4B,GAE5B,GAAI1tC,EAASzE,GAAG,EAAAzrB,YAAYw6D,UAAW,OAAO,EAC9C,IAAKoD,EAAqB,CACxB,GAAI1tC,EAAStH,aAAa,EAAAzL,eAAe7G,SAAU,OAAO,EAC1D,GAAI4Z,EAAStH,aAAa,EAAAzL,eAAezG,MAEvC,OADA/Y,KAAKm4D,qBAAqB1xC,IAAI8L,IACvB,EAIX,IAAI2tC,EAAelgE,KAAKqlD,YACxB9yB,EAASplB,IAAI,EAAA9K,YAAYw6D,UAEzB,IAIIvC,EAJA36D,EAASK,KAAKL,OACdsW,EAAYsc,EAAStc,UAMzB,GALesc,EAAStwB,UAAUk+D,SAKpB,CAWZ,GARI5tC,EAASzE,GAAG,EAAAzrB,YAAY2tB,UAC1BhwB,KAAK8oB,MACH,EAAAhe,eAAes1D,yDACf7tC,EAASpH,eAAe/f,OAKxBmnB,EAAStH,aAAa,EAAAzL,eAAe5G,UAAW,CAClD,IAAIwmD,EAAiB7sC,EAAS6sC,eAC1BxgD,EAAYpU,OAAO,EAAA20D,cAAc,EAAA1xD,cAAcmL,SAAUwmD,IAC7Dp/D,KAAK8oB,MACH,EAAAhe,eAAekkB,8BACfpQ,EAAUxT,MAAO,YAKrB,IAAIuyD,EAAe39D,KAAKu5D,YACpBxiC,EAAOxE,EAASwE,KACpB/2B,KAAKu5D,YAAcxiC,EACnB,IAAIiJ,EAAQ,IAAIv4B,MAGZitB,EAAQ,EACGze,EAAUygB,YAGrBhC,EAEJ,IAAIiC,EAAiB1gB,EAAU0gB,eAC/B,IAAK,IAAIt2B,EAAI,EAAGwX,EAAI8e,EAAexqB,OAAQ9L,EAAIwX,IAAKxX,IAAKq0B,EAAO,CAC9D,IAAIhmB,EAAOioB,EAAet2B,GACtBqO,EAAK2wD,YACPr/B,EAAMtzB,KACJ/M,EAAO0gE,UAAU3rC,EACf10B,KAAKs/D,WACH3/D,EAAO2gE,UAAU5rC,EAAOhmB,EAAK2pC,mBAInCthB,EAAK03B,aAAa/5B,EAAO,EAAA44B,WAAWoB,WAIxC1uD,KAAKugE,oBAAoBhuC,EAAUyN,GAC9BjJ,EAAKjJ,GAAG,OACX9tB,KAAKwgE,oBAAoBzpC,EAAMiJ,GAC/BhgC,KAAK69D,mBAAmB9mC,EAAMiJ,IAEhChgC,KAAKu5D,YAAcoE,EAGnBrD,EAAU36D,EAAO46D,YACfhoC,EAAStN,aACThP,EAAUukD,aACVvkD,EAAUwkD,cACV,EAAAtiB,mBAAmB5lB,EAAS8C,kBAC5B11B,EAAO+6D,QAAQ16B,EAAOzN,EAAStc,UAAUpH,WAAWwpC,sBAKjD9lB,EAASzE,GAAG,EAAAzrB,YAAY2tB,UAC3BhwB,KAAK8oB,MACH,EAAAhe,eAAe21D,gFACfluC,EAASpH,eAAe/f,OAI5BmnB,EAASplB,IAAI,EAAA9K,YAAY+7D,eACzBC,EAAiB9rC,EAAUA,EAASrhB,aAGpCvR,EAAO+gE,kBACLnuC,EAAStN,aACTs5C,EACAC,EACAvoD,EAAUukD,aACVvkD,EAAUwkD,eAEZH,EAAU36D,EAAOghE,YAAYpuC,EAAStN,cAKxC,OAFAsN,EAASooC,SAASh7D,EAAQ26D,GAC1Bt6D,KAAKqlD,YAAc6a,GACZ,EAID,oBAEN3tC,EAEAyN,EAAgC,MAEhC,IAAIrgC,EAASK,KAAKL,OACdwgE,EAAW31D,OAAO+nB,EAAStwB,UAAUk+D,UACrCtxD,EAAa0jB,EAAStc,UAAUpH,WAChCkoB,EAAO/2B,KAAKu5D,YAGhB,GAAI4G,EAASvyD,MAAQ,EAAAJ,SAASiP,MAC5BujB,EAAQhgC,KAAK4gE,kBAAmCT,EAAU7sD,YAAY,EAAM0sB,OACvE,CAELx1B,OAAO21D,EAASvyD,MAAQ,EAAAJ,SAAS4P,YAGjC5S,OAAO+nB,EAAStwB,UAAUkU,WAG1B3L,QAAQ+nB,EAAS5C,MAAM,EAAAttB,YAAYsY,YAAc,EAAAtY,YAAYutB,IAAM,EAAAvtB,YAAYwtB,MAG/E,IAAI1f,EAAOnQ,KAAK6gE,0BAAgDV,EAAU1vD,WAAY5B,EAAY,GAKlG,GAHKmxB,EACAA,EAAMtzB,KAAKyD,GADJ6vB,EAAQ,CAAE7vB,IAGjB4mB,EAAKjJ,GAAG,KAAuB,CAClC,IAAIgzC,EAAc9gC,EAAM7zB,OACxBnM,KAAKwgE,oBAAoBzpC,EAAMiJ,GAC/BhgC,KAAK69D,mBAAmB9mC,EAAMiJ,GAC9B,IAAI2yB,EAAc57B,EAAK47B,YAAYxiD,EAAMtB,GACrCkyD,EAAUhqC,EAAKiqC,UAAU7wD,EAAMtB,GACnC,GAAImxB,EAAM7zB,OAAS20D,EAAa,CAC9B,IAAIG,EAAOlqC,EAAKw3B,aAAa1/C,GACxB8jD,GAAa57B,EAAK03B,aAAawS,EAAKvsC,MAAO,EAAA44B,WAAWyC,SACvDgR,GAAShqC,EAAK03B,aAAawS,EAAKvsC,MAAO,EAAA44B,WAAWxE,SACtD9oB,EAAM8gC,EAAc,GAAKnhE,EAAO0gE,UAAUY,EAAKvsC,MAAOvkB,GACtD6vB,EAAMtzB,KAAK/M,EAAO2gE,UAAUW,EAAKvsC,MAAO7lB,EAAWwpC,iBACnDthB,EAAKg4B,cAAckS,GAEhBtO,GAAa57B,EAAK5pB,IAAI,GACvB4zD,GAAShqC,EAAK5pB,IAAI,GACtB4pB,EAAK5pB,IAAI,MAKb,GAAIolB,EAASzE,GAAG,EAAAzrB,YAAYsY,aAAc,CACxC,IAAIumD,EAAiBlhE,KAAKgkB,QAAQk9C,eAClC12D,OAAO+nB,EAASzE,GAAG,EAAAzrB,YAAY2vB,WAC/B,IAAI8C,EAAgBtqB,OAAO+nB,EAAS1W,QAEpC,GAF6CrR,OAAOsqB,EAAclnB,MAAQ,EAAA2R,YAAY9E,QAEjFsc,EAAKjJ,GAAG,KAAuB,CAClC,IAAI67B,EAAYn/C,OAAOusB,EAAK6yB,YAAY,EAAA5mD,YAAYsC,QAG/CyxB,EAAKjJ,GAAG,MAMXkS,EAAMtzB,KACJ/M,EAAOu6D,GACLv6D,EAAOwhE,MAAMD,GAAkB,EAAA/lC,WAAWv0B,IAAM,EAAA20B,QAAQs2B,OAAS,EAAAt2B,QAAQq2B,OACvEjyD,EAAO2gE,UAAU3W,EAAUj1B,MAAOwsC,IAEpCvhE,EAAO0gE,UAAU1W,EAAUj1B,MACzB10B,KAAKs/D,WACHt/D,KAAKohE,eAAsBtsC,OAKnC90B,KAAKqhE,qCAA4CvsC,EAAekL,IAElEhgC,KAAKwgE,oBAAoBzpC,EAAMiJ,GAC/BhgC,KAAK69D,mBAAmB9mC,EAAMiJ,GAC9BA,EAAMtzB,KAAK/M,EAAO2gE,UAAU3W,EAAUj1B,MAAO10B,KAAKgkB,QAAQk9C,iBAC1DnqC,EAAK5pB,IAAI,KAIC2nB,EAAeqE,OAASpC,EAAKjJ,GAAG,MAC1C9tB,KAAK8oB,MACH,EAAAhe,eAAew2D,2DACf/uC,EAAStwB,UAAUiP,YAAY9F,YAK1ByD,GAAc,EAAAwX,KAAKG,MAASuQ,EAAKjJ,GAAG,MAC7C9tB,KAAK8oB,MACH,EAAAhe,eAAey2D,+DACfhvC,EAAStwB,UAAU0iD,iBAAiB91C,WAAWzD,OAInD,OAAO40B,EAMT,aAAazN,GACX,GAAIA,EAASzE,GAAG,EAAAzrB,YAAYw6D,UAAW,OAAO,EAC9CtqC,EAASplB,IAAI,EAAA9K,YAAYw6D,UACzB,IACI2E,EADYjvC,EAAStwB,UACuB2R,QAChD,GAAI4tD,EACF,IAAK,IAAIjwD,KAAWiwD,EAAcrvD,SAChC,OAAQZ,EAAQ3D,MACd,KAAK,EAAA2R,YAAY1G,OACf7Y,KAAKm9D,cAAsB5rD,GAC3B,MAEF,KAAK,EAAAgO,YAAYwN,mBACf,IAAKxb,EAAQuc,GAAG,EAAAzrB,YAAYukB,SAAU,CACpC,IAAI2L,EAAWvyB,KAAKolB,SAAS4H,gBAAmCzb,EAAS,MACrEghB,GAAUvyB,KAAKm7D,gBAAgB5oC,GAErC,MAEF,KAAK,EAAAhT,YAAY6N,mBAAoB,CACnC,IAAIC,EAAsC9b,EAAS8b,gBACnD,GAAIA,EAAiB,CACnB7iB,QAAQ6iB,EAAgBS,GAAG,EAAAzrB,YAAYukB,UACvC,IAAI2L,EAAWvyB,KAAKolB,SAAS4H,gBAAgBK,EAAiB,MAC1DkF,GAAUvyB,KAAKm7D,gBAAgB5oC,GAErC,IAAIjF,EAAsC/b,EAAS+b,gBACnD,GAAIA,EAAiB,CACnB9iB,QAAQ8iB,EAAgBQ,GAAG,EAAAzrB,YAAYukB,UACvC,IAAI2L,EAAWvyB,KAAKolB,SAAS4H,gBAAgBM,EAAiB,MAC1DiF,GAAUvyB,KAAKm7D,gBAAgB5oC,GAErC,OAKR,IAAIq6B,EAAer6B,EAASoG,oBACxBi0B,GAAc5sD,KAAKm7D,gBAAgBvO,GACvC,IAAI1/B,EAAkBqF,EAAS3e,QAC/B,GAAIsZ,EACF,IAAK,IAAI3b,KAAW2b,EAAgB/a,SAClC,OAAQZ,EAAQ3D,MACd,KAAK,EAAA2R,YAAYwN,mBACf,IAAKxb,EAAQuc,GAAG,EAAAzrB,YAAYukB,SAAU,CACpC,IAAI2L,EAAWvyB,KAAKolB,SAAS4H,gBAAmCzb,EAAS,MACrEghB,GAAUvyB,KAAKm7D,gBAAgB5oC,GAErC,MAEF,KAAK,EAAAhT,YAAYiO,MACfxtB,KAAKyhE,aAAoBlwD,GACzB,MAEF,KAAK,EAAAgO,YAAYgO,SACfvtB,KAAK0hE,gBAA0BnwD,GAMvC,OAAO,EAIT,aAAaghB,GAGX,OAFAvyB,KAAK2hE,mBAAmBpvC,GACxBvyB,KAAK4hE,mBAAmBrvC,GACjBA,EAASzE,GAAG,EAAAzrB,YAAYw6D,UAIjC,mBAAmBtqC,GAEjB,GAAIA,EAASqF,UAAW,OAAO,EAC/B,IAAIlpB,EAAO6jB,EAAS7jB,KAChBmzD,EAAiB7hE,KAAKgkB,QAAQk9C,eAC9BY,EAAkBpzD,EAAK2pC,eACvB14C,EAASK,KAAKL,OACdoiE,EAAYpiE,EAAOqiE,KAAKtzD,EAAKsoC,SAAUtoC,EAAKof,GAAG,GACjDnuB,EAAO2gE,UAAU,EAAGuB,GACpBC,EAAiBvvC,EAASoF,cAK5B,OAHIjpB,EAAK2wD,YAAW0C,EAAY/hE,KAAKs/D,WAAWyC,IAChDxvC,EAASqF,UAAYj4B,EAAO46D,YAAYhoC,EAASuqC,mBAAoB+E,EAAgBC,EAAiB,KAAMC,GACxGxvC,EAASsF,WAAWtF,EAASplB,IAAI,EAAA9K,YAAYw6D,WAC1C,EAIT,mBAAmBtqC,GACjB,GAAIA,EAASsF,UAAW,OAAO,EAC/B,IAIIkqC,EAJArzD,EAAO6jB,EAAS7jB,KAChBmzD,EAAiB7hE,KAAKgkB,QAAQk9C,eAC9BY,EAAkBpzD,EAAK2pC,eACvB14C,EAASK,KAAKL,OAEd0kC,EAAgC,KAqCpC,OApCI31B,EAAK2wD,WAGP0C,EAAYpiE,EAAO8gC,MAAM,KAAM,CAC7B9gC,EAAOu6D,GACLv6D,EAAOmgE,OAAOgC,GAAmB,EAAA3mC,WAAWv0B,IAAM,EAAA40B,SAAS82B,MAAQ,EAAA92B,SAAS62B,MAE1E1yD,EAAO2gE,UAAU,EAAGwB,GACpBniE,EAAOsiE,UAAU,EACftiE,EAAOqiE,KAAKtzD,EAAKsoC,UAAU,EACzBr3C,EAAO2gE,UAAU,EAAGuB,GACpBC,EAAiBvvC,EAASoF,gBAIhCh4B,EAAO8gC,MAAM,KAAM,CACjB9gC,EAAOuiE,KACLliE,KAAKs/D,WAAW3/D,EAAO2gE,UAAU,EAAGwB,KAEtC9hE,KAAKmiE,YAAYxiE,EAAO2gE,UAAU,EAAGwB,OAGzCniE,EAAO2gE,UAAU,EAAGwB,IACnBA,GACHz9B,EAAW,CAAEy9B,IAEbC,EAAYpiE,EAAO2gE,UAAU,EAAGwB,GAElCvvC,EAASsF,UAAYl4B,EAAO46D,YAAYhoC,EAASwqC,mBAAoB,EAAAn4B,WAAW,CAAEi9B,EAAgBC,IAAoB,EAAA3mC,WAAW2D,KAAMuF,EACrI1kC,EAAOyiE,MAAM1zD,EAAKsoC,SAChBr3C,EAAO2gE,UAAU,EAAGuB,GACpBE,EACAD,EAAiBvvC,EAASoF,eAG1BpF,EAASqF,WAAWrF,EAASplB,IAAI,EAAA9K,YAAYw6D,WAC1C,EAIT,gBAAgBtqC,GAGd,OAFAvyB,KAAKqiE,sBAAsB9vC,GAC3BvyB,KAAKsiE,sBAAsB/vC,GACpBA,EAASzE,GAAG,EAAAzrB,YAAYw6D,UAIjC,sBAAsBtqC,GACpB,IAAIwF,EAAiBxF,EAASwF,eAC9B,GAAIA,EAAgB,CAClB,IAAIoG,EAAMn+B,KAAKm7D,gBAAgBpjC,GAC3BC,EAAiBzF,EAASyF,eAI9B,OAHID,EAAejK,GAAG,EAAAzrB,YAAYw6D,WAAe7kC,IAAkBA,EAAelK,GAAG,EAAAzrB,YAAYw6D,WAC/FtqC,EAASplB,IAAI,EAAA9K,YAAYw6D,UAEpB1+B,EAET,OAAO,EAIT,sBAAsB5L,GACpB,IAAIyF,EAAiBzF,EAASyF,eAC9B,GAAIA,EAAgB,CAClB,IAAImG,EAAMn+B,KAAKm7D,gBAAgBnjC,GAC3BD,EAAiBxF,EAASwF,eAI9B,OAHuB,OAAnBA,GAA2BA,EAAejK,GAAG,EAAAzrB,YAAYw6D,WAAa7kC,EAAelK,GAAG,EAAAzrB,YAAYw6D,WACtGtqC,EAASplB,IAAI,EAAA9K,YAAYw6D,UAEpB1+B,EAET,OAAO,EAMT,iBAAiB7Y,EAAoBi9C,EAAiB,IACpD,IAAI5qC,EAAe8jC,UAAUz7D,KAAK23B,aAAc4qC,GAC5CtmC,EAAU,EAAAD,cAAcr6B,OAAO2jB,EAAQqS,GAG3C,OAFA33B,KAAK43D,eAAelrD,KAAKuvB,GACzBj8B,KAAK23B,aAAe4oB,QAAQ5oB,EAAc5Q,QAAQzB,EAAOnZ,OAAQ,IAC1D8vB,EAIT,mBAAmBumC,GACjB,IAGIC,EAHA/vC,EAAU1yB,KAAK0yB,QACfgwC,EAAehwC,EAAQiwC,kBACvB94C,EAAiBrf,OAAOkoB,EAAQ7I,gBAEhCoc,EAAWjmC,KAAK63D,eACpB,GAAI5xB,EAASl5B,IAAIy1D,GACfC,EAAgBx8B,EAAS/kC,IAAIshE,OACxB,CACL,IAAIr2D,EAASq2D,EAAYr2D,OACrBmZ,EAAS,IAAIjd,WAAWq6D,GAAgBv2D,GAAU,IACtDumB,EAAQkwC,mBAAmBt9C,EAAQ,EAAGuE,EAAerE,GAAIrZ,GAAU,GACnE,IAAK,IAAI9L,EAAI,EAAGA,EAAI8L,IAAU9L,EAC5B,EAAA05B,SAASyoC,EAAYj2D,WAAWlM,GAAIilB,EAAQo9C,GAAgBriE,GAAK,IAEnEoiE,EAAgBziE,KAAK6iE,iBAAiBv9C,GACtC2gB,EAAS94B,IAAIq1D,EAAaC,GAE5B,IAAIltC,EAAMgrB,QAAQkiB,EAAcl9C,OAAQwB,QAAQ27C,IAEhD,OADA1iE,KAAKqlD,YAAcx7B,EAAenb,KAC9B1O,KAAKgkB,QAAQgD,SACRhnB,KAAKL,OAAO0D,IAAIijC,QAAQ/Q,GAAMgR,SAAShR,KAE9C/qB,OAAOk+C,WAAWnzB,IACXv1B,KAAKL,OAAOyD,IAAIkjC,QAAQ/Q,KAKnC,gBAAgB00B,EAAmB93C,EAAyBqT,EAAUxlB,KAAK0yB,QAAQ/I,oBAAoBnE,IACrG,IAAIkN,EAAU1yB,KAAK0yB,QACfvmB,EAASgG,EAAOhG,OAChB6qC,EAAWiT,EAAYjT,SACvB8rB,EAAa32D,EAAS6qC,EACtB2rB,EAAoBjwC,EAAQiwC,kBAE5BI,EAAM,IAAI16D,WAAWs6D,EAAoBG,GAC7CpwC,EAAQkwC,mBAAmBG,EAAK,EAAGv9C,EAAIs9C,GACvC,IAAI7mD,EAAM0mD,EACN1E,EAAahU,EAAY5R,eAC7B,OAAQ4lB,GACN,KAAK,EAAA9iC,WAAWx0B,IACd,OAAQqwC,GACN,KAAK,EACH,IAAK,IAAI32C,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC/B,IAAIiB,EAAQ6Q,EAAO9R,GACnBmK,OAAO,EAAAg2B,kBAAkBl/B,IAAU28D,GACnCzzD,OAAO,EAAA21B,gBAAgB7+B,IAAU,EAAA+5B,aAAaqP,OAC9C,EAAA5Q,QAAQ,EAAAw3B,iBAAiBhwD,GAAQyhE,EAAK9mD,GACtCA,GAAO,EAET,MAEF,KAAK,EACH,IAAK,IAAI5b,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC/B,IAAIiB,EAAQ6Q,EAAO9R,GACnBmK,OAAO,EAAAg2B,kBAAkBl/B,IAAU28D,GACnCzzD,OAAO,EAAA21B,gBAAgB7+B,IAAU,EAAA+5B,aAAaqP,OAC9C,EAAA3Q,SAAS,EAAAu3B,iBAAiBhwD,GAAQyhE,EAAK9mD,GACvCA,GAAO,EAET,MAEF,KAAK,EACH,IAAK,IAAI5b,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC/B,IAAIiB,EAAQ6Q,EAAO9R,GACnBmK,OAAO,EAAAg2B,kBAAkBl/B,IAAU28D,GACnCzzD,OAAO,EAAA21B,gBAAgB7+B,IAAU,EAAA+5B,aAAaqP,OAC9C,EAAAhlB,SAAS,EAAA4rC,iBAAiBhwD,GAAQyhE,EAAK9mD,GACvCA,GAAO,EAET,MAEF,QAASzR,QAAO,GAElB,MAEF,KAAK,EAAA2wB,WAAWv0B,IACd,IAAK,IAAIvG,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC/B,IAAIiB,EAAQ6Q,EAAO9R,GACnBmK,OAAO,EAAAg2B,kBAAkBl/B,IAAU28D,GACnCzzD,OAAO,EAAA21B,gBAAgB7+B,IAAU,EAAA+5B,aAAaqP,OAC9C,EAAAs4B,SAASj8C,QAAQ,EAAAwqC,oBAAoBjwD,GAAQ,EAAAkwD,qBAAqBlwD,IAASyhE,EAAK9mD,GAChFA,GAAO,EAET,MAEF,KAAK,EAAAkf,WAAW/zB,IACd,IAAK,IAAI/G,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC/B,IAAIiB,EAAQ6Q,EAAO9R,GACnBmK,OAAO,EAAAg2B,kBAAkBl/B,IAAU28D,GACnCzzD,OAAO,EAAA21B,gBAAgB7+B,IAAU,EAAA+5B,aAAaqP,OAC9C,EAAA1Q,SAAS,EAAAq7B,iBAAiB/zD,GAAQyhE,EAAK9mD,GACvCA,GAAO,EAET,MAEF,KAAK,EAAAkf,WAAW9zB,IACd,IAAK,IAAIhH,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC/B,IAAIiB,EAAQ6Q,EAAO9R,GACnBmK,OAAO,EAAAg2B,kBAAkBl/B,IAAU28D,GACnCzzD,OAAO,EAAA21B,gBAAgB7+B,IAAU,EAAA+5B,aAAaqP,OAC9C,EAAAzQ,SAAS,EAAAq7B,iBAAiBh0D,GAAQyhE,EAAK9mD,GACvCA,GAAO,EAET,MAEF,QAASzR,QAAO,GAIlB,OAFAA,OAAOyR,GAAO8mD,EAAI52D,QAEXnM,KAAK6iE,iBAAiBE,GAIvB,qBAAqB9Y,EAAmBgZ,GAC9C,IAAIvwC,EAAU1yB,KAAK0yB,QACfiwC,EAAoBjwC,EAAQiwC,kBAC5Bl3C,EAAiBjhB,OAAOkoB,EAAQjH,gBAChCy3C,EAAgB14D,OAAOxK,KAAKolB,SAAS0H,aAAarB,EAAgB,CAAEw+B,KACpEkZ,EAAoBD,EAAcxqC,iBAClC0qC,EAAeH,EAAc39C,OAAOnZ,OAASw2D,EAC7CU,EAAcjgE,IAAIggE,EAAenZ,EAAYjT,UAE7C+rB,EAAM,IAAI16D,WAAWs6D,EAAoBQ,GAC7CzwC,EAAQkwC,mBAAmBG,EAAK,EAAGG,EAAc19C,GAAI29C,GAErD,IAAIG,EAAkBh9B,QAAQ28B,EAAc19C,QAAUo9C,EAOtD,OANAn4D,QAAQkoB,EAAQ1O,QAAQgD,UACxBxc,OAAO04D,EAAcK,WAAW,SAAUD,EAAiBP,EAAKJ,IAChEn4D,OAAO04D,EAAcK,WAAW,YAAaD,EAAiBP,EAAKJ,IACnEn4D,OAAO04D,EAAcK,WAAW,aAAcH,EAAcL,EAAKJ,IACjEn4D,OAAO04D,EAAcK,WAAW,UAAWF,EAAaN,EAAKJ,IAEtD3iE,KAAK6iE,iBAAiBE,GAM/B,yBAAyBxwC,GACvB/nB,OAAO+nB,EAASzE,GAAG,EAAAzrB,YAAYw6D,WAC/B,IAAInoC,EAAQnC,EAASiD,mBACrB,GAAId,GAAS,EAAG,OAAOA,EACvB,IAAIojC,EAAgB93D,KAAK83D,cACrBzwC,EAAYrnB,KAAKgkB,QAAQqD,UAS7B,OARKA,IAAWA,EAAY,GAC5BqN,EAAQrN,EAAYywC,EAAc3rD,QAC7BomB,EAASzE,GAAG,EAAAzrB,YAAYmhE,aAAejxC,EAAStc,UAAUuiC,mBAAqBjmB,EAAStc,UAAU0gB,eAAexqB,SAEpHomB,EAAWvyB,KAAK28D,iBAAiBpqC,IAEnCulC,EAAcprD,KAAK6lB,EAAStN,cAC5BsN,EAASiD,mBAAqBd,EACvBA,EAMT,yBAAyB1gB,EAAsBkC,GAC7C,OAAQlC,EAAUpG,MAChB,KAAK,EAAAJ,SAASmP,iBAAkB,CAC9B,IAAI8mD,EAAsCzvD,EAAWJ,QACrD,IAAK,IAAIvT,EAAI,EAAGwX,EAAI4rD,EAAiBt3D,OAAQ9L,EAAIwX,IAAKxX,EACpDL,KAAK49D,yBAAyB6F,EAAiBpjE,GAAI6V,GAErD,MAEF,KAAK,EAAA1I,SAASsP,gBAAiB,CAC7B,IAAIvL,EAAUvR,KAAK0yB,QAAQgxC,wBAAyC1vD,GAChEzC,IACF/G,OAAO+G,EAAQ3D,MAAQ,EAAA2R,YAAYyU,MAC9BziB,EAAQ0Z,aAAa,EAAAzL,eAAezG,OAAO/Y,KAAKo9D,YAAkB7rD,IAEzE,MAEF,KAAK,EAAA/D,SAASwQ,qBAAsB,CAClC,IAAIzM,EAAUvR,KAAK0yB,QAAQgxC,wBAA8C1vD,GACzE,GAAIzC,EAAS,CAEX,IAAIguD,EAAiBv/D,KAAK23D,cAC1B33D,KAAK23D,cAAgBpmD,EACrB,IAAIkyD,EAA0CzvD,EAAWJ,QACzD,IAAK,IAAIvT,EAAI,EAAGwX,EAAI4rD,EAAiBt3D,OAAQ9L,EAAIwX,IAAKxX,EACpDL,KAAK49D,yBAAyB6F,EAAiBpjE,GAAI6V,GAErDlW,KAAK23D,cAAgB4H,EAEvB,MAEF,KAAK,EAAA/xD,SAASgR,SAAU,CACtB,IAAI/I,EAAmCzB,EAAWyB,aAClD,IAAK,IAAIpV,EAAI,EAAGwX,EAAIpC,EAAatJ,OAAQ9L,EAAIwX,IAAKxX,EAAG,CACnD,IAAIkR,EAAUvR,KAAK0yB,QAAQgxC,wBAAwBjuD,EAAapV,IAC5DkR,IACF/G,OAAO+G,EAAQ3D,MAAQ,EAAA2R,YAAY1G,QAEhCtH,EAAQuc,GAAG,EAAAzrB,YAAY2tB,UACvBze,EAAQ0Z,aAAa,EAAAzL,eAAezG,OACrC/Y,KAAKm9D,cAAsB5rD,IAGjC,MAEF,KAAK,EAAA/D,SAAS6P,iBAAkB,CAC9B,IAAI9L,EAAUvR,KAAK0yB,QAAQgxC,wBAA0C1vD,GACrD,OAAZzC,GAAoBA,EAAQ3D,MAAQ,EAAA2R,YAAY1G,SAC7CtH,EAAQ0Z,aAAa,EAAAzL,eAAezG,OAAO/Y,KAAKm9D,cAAsB5rD,IAE7E,MAEF,KAAK,EAAA/D,SAAS0P,OACqC,MAA3BlJ,EAAWW,cAC/B3U,KAAK2jE,kBACuB3vD,EAAWW,aACMX,EAAWK,MAG1D,MAEF,KAAK,EAAA7G,SAAS2P,cACZnd,KAAK49D,yBAAkD5pD,EAAW9C,YAAagF,GAC/E,MAEF,KAAK,EAAA1I,SAASqQ,OACZ7d,KAAK2jE,kBACe3vD,EAAWW,aACXX,EAAWK,MAE/B,MAEF,KAAK,EAAA7G,SAASiQ,oBACd,KAAK,EAAAjQ,SAASuQ,kBACd,KAAK,EAAAvQ,SAASsQ,qBACd,KAAK,EAAAtQ,SAAS+O,0BACd,KAAK,EAAA/O,SAAS8Q,gBAAiB,MAC/B,QAAS,CACP,IAAI5O,EAAO1P,KAAK4jE,iBAAiB5vD,GAC7B,EAAAmsB,gBAAgBzwB,IAAS,EAAA2rB,aAAa2X,KAAK98B,EAAKxJ,KAAKgD,GACzD,QAMN,iBAEEsE,EAEA6vD,GAAqB,GAErB,IACIn0D,EADA/P,EAASK,KAAKL,OAElB,OAAQqU,EAAUpG,MAChB,KAAK,EAAAJ,SAASiP,MACZ/M,EAAO1P,KAAK8jE,sBAAsC9vD,GAClD,MAEF,KAAK,EAAAxG,SAASkP,MACZhN,EAAO1P,KAAK+jE,sBAAsC/vD,GAClD,MAEF,KAAK,EAAAxG,SAASoP,SACZlN,EAAO1P,KAAKgkE,yBAA4ChwD,GACxD,MAEF,KAAK,EAAAxG,SAASqP,GACZnN,EAAO1P,KAAKikE,mBAAgCjwD,GAC5C,MAEF,KAAK,EAAAxG,SAASvK,MACZyM,EAAO1P,KAAKkkE,sBAAsClwD,GAClD,MAEF,KAAK,EAAAxG,SAAS4P,WACZ1N,EAAO1P,KAAKmkE,2BAAgDnwD,GAC5D,MAEF,KAAK,EAAAxG,SAAS+P,IACZ7N,EAAO1P,KAAKokE,oBAAkCpwD,GAC9C,MAEF,KAAK,EAAAxG,SAASmQ,GACZjO,EAAO1P,KAAKqkE,mBAAgCrwD,GAC5C,MAEF,KAAK,EAAAxG,SAASyQ,OACZvO,EAAO1P,KAAKskE,uBAAwCtwD,EAAW6vD,GAC/D,MAEF,KAAK,EAAAr2D,SAAS2Q,OACZzO,EAAO1P,KAAKukE,uBAAwCvwD,GACpD,MAEF,KAAK,EAAAxG,SAAS4Q,MACZ1O,EAAO1P,KAAKwkE,sBAAsCxwD,GAClD,MAEF,KAAK,EAAAxG,SAAS6Q,IACZ3O,EAAO1P,KAAKykE,oBAAkCzwD,GAC9C,MAEF,KAAK,EAAAxG,SAASgR,UACZ9O,EAAO1P,KAAK0kE,yBAA4C1wD,MAC7CtE,EAAO/P,EAAOsgC,OACzB,MAEF,KAAK,EAAAzyB,SAASiR,KACZ/O,EAAO1P,KAAK2kE,qBAAoC3wD,GAChD,MAEF,KAAK,EAAAxG,SAASkR,MACZhP,EAAO1P,KAAK4kE,sBAAsC5wD,GAClD,MAEF,KAAK,EAAAxG,SAAS8Q,gBAEZte,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACfvb,EAAU5I,OAEZsE,EAAO/P,EAAOklE,cACd,MAEF,QACEr6D,QAAO,GACPkF,EAAO/P,EAAOklE,cAIlB,OADI7kE,KAAKgkB,QAAQmT,WAAWn3B,KAAK8kE,iBAAiBp1D,EAAMsE,EAAU5I,OAC3DsE,EAIT,kBAEE4D,EAEAyxD,GAAe,EAEf/kC,EAAgC,MAEhC,IAAIglC,EAAgB1xD,EAAWnH,OAC1B6zB,KACHA,EAAQ,IAAIv4B,MAAqBu9D,IAC3B74D,OAAS,GAEjB,IAAIxM,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YAChB,IAAK,IAAIl5D,EAAI,EAAGA,EAAI2kE,IAAiB3kE,EAAG,CACtC,IAAIqP,EAAO1P,KAAK4jE,iBAAiBtwD,EAAWjT,GAAI0kE,GAAU1kE,GAAK2kE,EAAgB,GAC/E,OAAQ,EAAA7kC,gBAAgBzwB,IACtB,KAAK,EAAA2rB,aAAayW,MAChB,IAAK,EAAA6jB,aAAajmD,GAAO,CACvB,IAAK,IAAIoY,EAAI,EAAGjQ,EAAI,EAAA+9C,mBAAmBlmD,GAAOoY,EAAIjQ,IAAKiQ,EAAGkY,EAAMtzB,KAAK,EAAAopD,cAAcpmD,EAAMoY,IACzF,MAIJ,QAASkY,EAAMtzB,KAAKgD,GACpB,KAAK,EAAA2rB,aAAa2X,KAEpB,GAAIjc,EAAKpH,MAAM,KAA0C,CACnD,EAAAiiB,yBAAyBliC,IAAOswB,EAAMtzB,KAAK/M,EAAOklE,eACtD,OAGJ,OAAO7kC,EAGD,sBACNhsB,GAEA,IAAIV,EAAaU,EAAUV,WACvB2xD,EAAYjlE,KAAKu5D,YACjB2L,EAAYD,EAAUE,OAC1BnlE,KAAKu5D,YAAc2L,EAEnB,IAAIllC,EAAQhgC,KAAK4gE,kBAAkBttD,GAKnC,OAJK4xD,EAAUv1C,MAAM,MAA0C3vB,KAAKwgE,oBAAoB0E,EAAWllC,GACnGklC,EAAUE,mBACVH,EAAU5V,QAAQ6V,GAClBllE,KAAKu5D,YAAc0L,EACZjlE,KAAKL,OAAO+6D,QAAQ16B,GAGrB,sBACNhsB,GAEA,IAAIrU,EAASK,KAAKL,OAClB,GAAIqU,EAAUR,MAKZ,OAJAxT,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACfvb,EAAUR,MAAMpI,OAEXzL,EAAOklE,cAEhB,IAAI9tC,EAAO/2B,KAAKu5D,YACZjjC,EAAaS,EAAKT,WACtB,GAAkB,MAAdA,EAKF,OAJAt2B,KAAK8oB,MACH,EAAAhe,eAAeu6D,qFACfrxD,EAAU5I,OAELzL,EAAOklE,cAEhB,IAAI7kC,EAAQ,IAAIv4B,MAChBzH,KAAKwgE,oBAAoBzpC,EAAMiJ,GAE/B,IADA,IAAInkB,EAASkb,EAAKlb,OACA,OAAXA,GAAmBA,EAAOya,YAAcA,GAC7Ct2B,KAAKwgE,oBAAoB3kD,EAAQmkB,GAAsB,GACvDnkB,EAASA,EAAOA,OAKlB,OAHAkb,EAAKquC,mBACLplC,EAAMtzB,KAAK/M,EAAO2lE,GAAGhvC,IACrBS,EAAK5pB,IAAI,IACFxN,EAAO+6D,QAAQ16B,GAGhB,yBACNhsB,GAEA,IAAIrU,EAASK,KAAKL,OACd6T,EAAQQ,EAAUR,MACtB,GAAIA,EAKF,OAJAxT,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACf/b,EAAMpI,OAEDzL,EAAOklE,cAGhB,IAAI9tC,EAAO/2B,KAAKu5D,YACZ5L,EAAgB52B,EAAK42B,cACzB,GAAqB,MAAjBA,EAKF,OAJA3tD,KAAK8oB,MACH,EAAAhe,eAAey6D,8EACfvxD,EAAU5I,OAELzL,EAAOklE,cAEhB9tC,EAAK5pB,IAAI,KACT,IAAI6yB,EAAQ,IAAIv4B,MAChBzH,KAAKwgE,oBAAoBzpC,EAAMiJ,GAE/B,IADA,IAAInN,EAAuBkE,EAAKlb,OACzBgX,GAAWA,EAAQ86B,gBAAkBA,GAC1C3tD,KAAKwgE,oBAAoB3tC,EAASmN,GAAsB,GACxDnN,EAAUA,EAAQhX,OAIpB,OAFAkb,EAAKquC,mBACLplC,EAAMtzB,KAAK/M,EAAO2lE,GAAG3X,IACdhuD,EAAO+6D,QAAQ16B,GAGhB,mBAENhsB,GAEA,OAAOhU,KAAKwlE,qBAAqBxxD,EAAW,MAGtC,qBAENA,EAEAyxD,GAEA,IAAI9lE,EAASK,KAAKL,OACdslE,EAAYjlE,KAAKu5D,YAajB/lD,EAAQyxD,EAAUS,iBAClB3uC,EAAOkuC,EAAUE,MAA6B,GAC9CM,GAAW1uC,EAAK4uC,gBAAgBF,GACpC,IAAIG,EAAa7uC,EAAKouC,OACtBnlE,KAAKu5D,YAAcxiC,EAEnB,IAAIT,EAAa,YAAc9iB,EAC/BujB,EAAKT,WAAaA,EAClB,IAAIq3B,EAAgB,eAAiBn6C,EACrCujB,EAAK42B,cAAgBA,EAGrB,IAAIkY,EAAW9uC,EAAKouC,OACpBnlE,KAAKu5D,YAAcsM,EACnB,IAAIC,EAAY,IAAIr+D,MAChByO,EAAOlC,EAAUA,UAQrB,GAPIkC,EAAKtI,MAAQ,EAAAJ,SAASiP,MACxBzc,KAAK4gE,kBAAmC1qD,EAAM5C,YAAY,EAAOwyD,GAEjEA,EAAUp5D,KAAK1M,KAAK4jE,iBAAiB1tD,IAInC2vD,EAASl2C,MAAM,KACjBm2C,EAAUp5D,KACR/M,EAAOklE,eAET9tC,EAAKs4B,QAAQwW,OAGR,CACL7lE,KAAKwgE,oBAAoBqF,EAAUC,GAEnC,IAAIC,EAAWhvC,EAAKouC,OACpBnlE,KAAKu5D,YAAcwM,EACnB,IAAIC,EAAWrmE,EAAOi/D,qBACpB5+D,KAAKimE,cACHjmE,KAAKg+D,kBAAkBhqD,EAAUrB,UAAW,EAAA0T,KAAKjjB,KACjDpD,KAAKqlD,cAMT,GAAgB,GAHD6gB,EAAsBF,GAI/B,EAAAG,eAAeH,IACjBF,EAAUp5D,KACR/M,EAAOuiE,KAAK8D,IAGhBhmE,KAAKwgE,oBAAoBuF,EAAUD,GACnC/uC,EAAKs4B,QAAQwW,OACR,CACL,IAAIO,EAAQL,EAASxX,aAAa,EAAAloC,KAAKziB,MAevC,GAdAkiE,EAAUp5D,KACR/M,EAAO0gE,UAAU+F,EAAM1xC,MAAOsxC,IAEhChmE,KAAKwgE,oBAAoBuF,EAAUD,GACnCA,EAAUp5D,KACR/M,EAAO2lE,GAAG3X,EACRhuD,EAAO2gE,UAAU8F,EAAM1xC,MAAO,EAAAyG,WAAWx0B,OAG7Co/D,EAAShX,cAAcqX,GACvBrvC,EAAKs4B,QAAQ0W,GAIT,EAAA/uC,KAAKqvC,2BAA2BT,EAAY7uC,GAI9C,OAHAvsB,QAAQi7D,GACRR,EAAUqB,gBACVtmE,KAAKu5D,YAAc0L,EACZjlE,KAAKumE,wBAAwBvyD,EAAW+iB,IAMrDvsB,QAAQusB,EAAKyvC,iBACbvB,EAAU5V,QAAQt4B,GAClBkuC,EAAUqB,gBACVtmE,KAAKu5D,YAAc0L,EACnB,IAAI90D,EAAOxQ,EAAO8gC,MAAMnK,EAAY,CAClC32B,EAAO8mE,KAAK9Y,EACVhuD,EAAO+6D,QAAQoL,MAMnB,OAHIb,EAAUn3C,GAAG,OACf3d,EAAOxQ,EAAO8gC,MAAM,KAAM,CAAEtwB,EAAMxQ,EAAOklE,iBAEpC10D,EAGD,sBACN6D,GAEA,OAAOhU,KAAKL,OAAOsgC,MAGb,2BACNjsB,GAEA,OAAOhU,KAAKg+D,kBAAkBhqD,EAAUvD,WAAY,EAAA4V,KAAKG,KAAM,GAGzD,oBAENxS,GAEA,OAAOhU,KAAK0mE,sBAAsB1yD,EAAW,MAGvC,sBAENA,EAEAyxD,GAEA,IAAI9lE,EAASK,KAAKL,OACdslE,EAAYjlE,KAAKu5D,YAqBjB/lD,EAAQyxD,EAAUS,iBAClB1lC,EAAQ,IAAIv4B,MACZsvB,EAAOkuC,EAAUE,MAA6B,GAClDnlE,KAAKu5D,YAAcxiC,EAEnB,IAAIT,EAAa,YAAc9iB,EAC/BujB,EAAKT,WAAaA,EAClB,IAAIq3B,EAAgB,gBAAkBn6C,EACtCujB,EAAK42B,cAAgBA,EACrB,IAAIgZ,EAAY,YAAcnzD,EAG1BlE,EAAc0E,EAAU1E,YACxBA,IACF9E,OACE8E,EAAY1B,MAAQ,EAAAJ,SAAS4P,YAC7B9N,EAAY1B,MAAQ,EAAAJ,SAASgR,UAE/BwhB,EAAMtzB,KAAK1M,KAAK4jE,iBAAiBt0D,KAG/Bm2D,GAAW1uC,EAAK4uC,gBAAgBF,GACpC,IAKIO,EACAY,EANAhB,EAAa7uC,EAAKouC,OAGlBY,EAAWhvC,EAAKouC,OACpBnlE,KAAKu5D,YAAcwM,EAGnB,IAAIpzD,EAAYqB,EAAUrB,UAC1B,GAAIA,GAUF,GAAgB,IAHhBi0D,EAAWV,EANXF,EAAWrmE,EAAOi/D,qBAChB5+D,KAAKimE,cACHjmE,KAAKg+D,kBAAkBrrD,EAAW,EAAA0T,KAAKziB,MACvC5D,KAAKqlD,gBAoBP,OAbI,EAAA8gB,eAAeH,IACjBhmC,EAAMtzB,KACJ/M,EAAOuiE,KAAK8D,IAGhBhmE,KAAKwgE,oBAAoBuF,EAAU/lC,GACnC+lC,EAASX,mBACTruC,EAAKs4B,QAAQ0W,GACb/lE,KAAKwgE,oBAAoBzpC,EAAMiJ,GAC/BjJ,EAAKquC,mBACLH,EAAU5V,QAAQt4B,GAClBkuC,EAAUqB,gBACVtmE,KAAKu5D,YAAc0L,EACZtlE,EAAO+6D,QAAQ16B,QAGxBgmC,EAAWrmE,EAAOyD,IAAI,GACtBwjE,EAAW,EAMb,IAAIR,EAAQrvC,EAAKw3B,aAAa,EAAAloC,KAAKziB,MAC/BijE,EAAY,IAAIp/D,MACpBo/D,EAAUn6D,KACR/M,EAAO0gE,UAAU+F,EAAM1xC,MAAOsxC,IAEhChmE,KAAKwgE,oBAAoBuF,EAAUc,GACnCd,EAASX,mBAETruC,EAAKs4B,QAAQ0W,GACb/lE,KAAKu5D,YAAcxiC,EAGnB,IAAI8uC,EAAW9uC,EAAKouC,OACpBU,EAAS1U,qBAAqB6U,GAC9BhmE,KAAKu5D,YAAcsM,EACnB,IAAIC,EAAY,IAAIr+D,MAChByO,EAAOlC,EAAUA,UACjBkC,EAAKtI,MAAQ,EAAAJ,SAASiP,MACxBzc,KAAK4gE,kBAAmC1qD,EAAM5C,YAAY,EAAOwyD,GAEjEA,EAAUp5D,KAAK1M,KAAK4jE,iBAAiB1tD,IAInC2vD,EAASl2C,MAAM,KACjBm2C,EAAUp5D,KAAK/M,EAAOklE,eAEtB7kE,KAAKwgE,oBAAoBqF,EAAUC,GAErB,GAAZc,EAAgC7vC,EAAKs4B,QAAQwW,GAC5C9uC,EAAK+vC,cAAcjB,GACxBA,EAAST,mBAET,IAAI2B,EAAU,IAAIt/D,MAOlB,GANAs/D,EAAQr6D,KACN/M,EAAO8gC,MAAMktB,EAAemY,KAKzBD,EAAS/3C,GAAG,MAAyB+3C,EAASl2C,MAAM,MAA0D,CACjH,IAAI5Z,EAAc/B,EAAU+B,YAC5B,GAAIA,EAAa,CACf,IAAIixD,EAAWjwC,EAAKouC,OACpBnlE,KAAKu5D,YAAcyN,EACnBD,EAAQr6D,KACN1M,KAAKg+D,kBAAkBjoD,EAAa,EAAAsQ,KAAKG,KAAM,IAEjDxmB,KAAKwgE,oBAAoBwG,EAAUD,GACnCC,EAAS5B,mBACTruC,EAAKs4B,QAAQ2X,GACbhnE,KAAKu5D,YAAcxiC,EASrB,GANAgwC,EAAQr6D,KACN/M,EAAO2lE,GAAGqB,IAKR,EAAA3vC,KAAKqvC,2BAA2BT,EAAY7uC,GAM9C,OALAvsB,QAAQi7D,GACRj7D,QAAQq7D,EAASW,iBACjBzvC,EAAKquC,mBACLH,EAAUqB,gBACVtmE,KAAKu5D,YAAc0L,EACZjlE,KAAK0mE,sBAAsB1yD,EAAW+iB,GA6BjD,OA1BA8vC,EAAUn6D,KACR/M,EAAOu6D,GAAGv6D,EAAO2gE,UAAU8F,EAAM1xC,MAAO,EAAAyG,WAAWx0B,KACjDhH,EAAO+6D,QAAQqM,KAInB/mC,EAAMtzB,KACJ/M,EAAO8gC,MAAMnK,EAAY,CACvB32B,EAAO8mE,KAAKE,EACVhnE,EAAO+6D,QAAQmM,OAIrB9vC,EAAKg4B,cAAcqX,GACnBpmE,KAAKu5D,YAAcxiC,EAGnBA,EAAKquC,mBACLH,EAAU5V,QAAQt4B,GAClBkuC,EAAUqB,gBACNrB,EAAUn3C,GAAG,KACfkS,EAAMtzB,KAAK/M,EAAOklE,eAElB7kE,KAAKwgE,oBAAoBzpC,EAAMiJ,GAEjChgC,KAAKu5D,YAAc0L,EACZtlE,EAAO+6D,QAAQ16B,GAGhB,mBACNhsB,GAEA,IAAIrU,EAASK,KAAKL,OACdyV,EAASpB,EAAUoB,OACnBC,EAAUrB,EAAUqB,QAiBpB2wD,EAAWrmE,EAAOi/D,qBACpB5+D,KAAKimE,cACHjmE,KAAKg+D,kBAAkBhqD,EAAUrB,UAAW,EAAA0T,KAAKziB,MACjD5D,KAAKqlD,cAMT,OAHe6gB,EAAsBF,IAInC,KAAK,EACH,OAAI,EAAAG,eAAeH,GACVrmE,EAAO8gC,MAAM,KAAM,CACxB9gC,EAAOuiE,KAAK8D,GACZhmE,KAAK4jE,iBAAiBxuD,KAGnBpV,KAAK4jE,iBAAiBxuD,GAE/B,KAAK,EACH,OAAI,EAAA+wD,eAAeH,GACV3wD,EACH1V,EAAO8gC,MAAM,KAAM,CACjB9gC,EAAOuiE,KAAK8D,GACZhmE,KAAK4jE,iBAAiBvuD,KAExB1V,EAAOuiE,KAAK8D,GAEX3wD,EACHrV,KAAK4jE,iBAAiBvuD,GACtB1V,EAAOsgC,MAMf,IAAIlJ,EAAO/2B,KAAKu5D,YAGZ0N,EAAY,IAAIx/D,MAChBy/D,EAAWnwC,EAAKouC,OAiBpB,GAhBAnlE,KAAKu5D,YAAc2N,EACnBA,EAAS/V,qBAAqB6U,GAC1B5wD,EAAOxH,MAAQ,EAAAJ,SAASiP,MAC1Bzc,KAAK4gE,kBAAmCxrD,EAAQ9B,YAAY,EAAO2zD,GAEnEA,EAAUv6D,KAAK1M,KAAK4jE,iBAAiBxuD,IAEnC8xD,EAASv3C,MAAM,KACjBs3C,EAAUv6D,KAAK/M,EAAOklE,eAEtB7kE,KAAKwgE,oBAAoB0G,EAAUD,GAErCC,EAAS9B,mBACTplE,KAAKu5D,YAAcxiC,EAGf1hB,EAAS,CACX,IAAI8xD,EAAY,IAAI1/D,MAChB2/D,EAAWrwC,EAAKouC,OAgBpB,OAfAnlE,KAAKu5D,YAAc6N,EACnBA,EAAStV,sBAAsBkU,GAC3B3wD,EAAQzH,MAAQ,EAAAJ,SAASiP,MAC3Bzc,KAAK4gE,kBAAmCvrD,EAAS/B,YAAY,EAAO6zD,GAEpEA,EAAUz6D,KAAK1M,KAAK4jE,iBAAiBvuD,IAEnC+xD,EAASz3C,MAAM,KACjBw3C,EAAUz6D,KAAK/M,EAAOklE,eAEtB7kE,KAAKwgE,oBAAoB4G,EAAUD,GAErCC,EAAShC,mBACTplE,KAAKu5D,YAAcxiC,EACnBA,EAAKswC,cAAcH,EAAUE,GACtBznE,EAAOu6D,GAAG8L,EACfrmE,EAAO+6D,QAAQuM,GACftnE,EAAO+6D,QAAQyM,IASjB,OANApwC,EAAK+vC,cAAcI,GACnBnwC,EAAK+6B,sBAAsBkU,EACzBkB,EAASv3C,MAAM,KACX,KACAu3C,GAECvnE,EAAOu6D,GAAG8L,EACfrmE,EAAO+6D,QAAQuM,IAKb,uBACNjzD,EACA6vD,GAEA,IAAIlkE,EAASK,KAAKL,OACdwQ,EAAsB,EACtB4mB,EAAO/2B,KAAKu5D,YACZ1qD,EAAakoB,EAAKloB,WAGtBkoB,EAAK5pB,IAAI,KAET,IAAIm6D,EAAkBtzD,EAAU1S,MAChC,GAAIgmE,EAAiB,CACnB,GAAIz4D,GAAc,EAAAwX,KAAKG,KAMrB,OALAxmB,KAAK8oB,MACH,EAAAhe,eAAeiiD,mCACfua,EAAgBl8D,MAAOpL,KAAKqlD,YAAY35C,WAAYmD,EAAWnD,YAEjE1L,KAAKqlD,YAAc,EAAAh/B,KAAKG,KACjB7mB,EAAOklE,cAEhB,IAAI0C,EAAc,EACdxwC,EAAKytB,eAAe12B,GAAG,EAAAzrB,YAAY4qB,iBAAgBs6C,GAAe,GAGtEp3D,EAAOnQ,KAAK6gE,0BAA0ByG,EAAiBz4D,EAAY04D,QAC1D14D,GAAc,EAAAwX,KAAKG,OAC5BxmB,KAAK8oB,MACH,EAAAhe,eAAeiiD,mCACf/4C,EAAU5I,MAAO,OAAQyD,EAAWnD,YAEtCyE,EAAOxQ,EAAOklE,eAGhB,IAAI7kC,EAAQ,IAAIv4B,MAIhB,GAHAzH,KAAKwgE,oBAAoBzpC,EAAMiJ,GAC/BhgC,KAAK69D,mBAAmB9mC,EAAMiJ,GAE1BnxB,GAAc,EAAAwX,KAAKG,MAAQwZ,EAAM7zB,OAAQ,CAC3C,IAAI80D,EAAOlqC,EAAKw3B,aAAa1/C,GACzBkoB,EAAKiqC,UAAU7wD,EAAMtB,IAAakoB,EAAK03B,aAAawS,EAAKvsC,MAAO,EAAA44B,WAAWxE,SAC/E9oB,EAAMi6B,QACJt6D,EAAO0gE,UAAUY,EAAKvsC,MAAOvkB,IAE/BA,EAAOxQ,EAAO2gE,UAAUW,EAAKvsC,MAAO7lB,EAAWwpC,gBAC/CthB,EAAKg4B,cAAckS,GAKrB,OAHAlqC,EAAKquC,mBAGDvB,GAAgB1zD,GAAQtB,GAAc,EAAAwX,KAAKG,KACxCwZ,EAAM7zB,QACX6zB,EAAMtzB,KAAKyD,GACJxQ,EAAO+6D,QAAQ16B,EAAOnxB,EAAWwpC,iBAFdloC,EAMxB4mB,EAAK2yB,SACF1pB,EAAM7zB,QACX6zB,EAAMtzB,KAAK/M,EAAO2lE,GAAG96D,OAAOusB,EAAK+2B,mBAAoB,EAAG39C,IAEjDxQ,EAAO+6D,QAAQ16B,IAHIrgC,EAAO2lE,GAAG96D,OAAOusB,EAAK+2B,mBAAoB,EAAG39C,GAOpE6vB,EAAM7zB,QACX6zB,EAAMtzB,KAAK/M,EAAOy6D,OAAOjqD,IAClBxQ,EAAO+6D,QAAQ16B,IAFIrgC,EAAOy6D,OAAOjqD,GAKlC,uBACN6D,GAEA,IAAIrU,EAASK,KAAKL,OAEdgX,EAAQ3C,EAAU2C,MAClB6wD,EAAW7wD,EAAMxK,OACrB,IAAKq7D,EACH,OAAOxnE,KAAKg+D,kBAAkBhqD,EAAUrB,UAAW,EAAA0T,KAAKG,KAAI,GAM9D,IAAIy+C,EAAYjlE,KAAKu5D,YACjBkO,EAAUxC,EAAUS,iBAGpBgC,EAAYzC,EAAU1W,aAAa,EAAAloC,KAAK5iB,KACxCkkE,EAAiBD,EAAUhzC,MAG3BkzC,EAAS,IAAIngE,MAAqB,EAAI+/D,GAC1CI,EAAO,GAAKjoE,EAAO0gE,UACjBsH,EACA3nE,KAAKg+D,kBAAkBhqD,EAAUrB,UAAW,EAAA0T,KAAK5iB,IAAG,IAMtD,IAAIokE,EAAa,EACbC,GAAgB,EACpB,IAAK,IAAIznE,EAAI,EAAGA,EAAImnE,IAAYnnE,EAAG,CACjC,IACImT,EADQmD,EAAMtW,GACAmT,MACdA,EACFo0D,EAAOC,KAAgBloE,EAAO2lE,GAAG,OAASjlE,EAAEqL,SAAS,IAAM,IAAM+7D,EAC/D9nE,EAAOmgE,OAAO,EAAAtkC,SAASy2B,MACrBtyD,EAAO2gE,UAAUqH,EAAgB,EAAAxsC,WAAWx0B,KAC5C3G,KAAKg+D,kBAAkBxqD,EAAO,EAAA6S,KAAK5iB,IAAG,KAM1CqkE,EAAeznE,EAInB4kE,EAAUlW,cAAc2Y,GAGxBE,EAAOC,GAAcloE,EAAO2lE,IAAIwC,GAAgB,EAC1C,OAASA,EAAap8D,SAAS,IAC/B,SACA,IAAM+7D,GAGZ,IAAIM,EAAepoE,EAAO8gC,MAAM,SAAWgnC,EAASG,EAAQ,EAAAzsC,WAAW2D,MACnEkpC,EAAoB,IACpBC,EAAoB,EACxB,IAAK,IAAI5nE,EAAI,EAAGA,EAAImnE,IAAYnnE,EAAG,CACjC,IACIiT,EADQqD,EAAMtW,GACKiT,WACnB0xD,EAAgB1xD,EAAWnH,OAG3B+4D,EAAYD,EAAUE,OAC1BnlE,KAAKu5D,YAAc2L,EACnB,IAAI5uC,EAAa,SAAWmxC,EAC5BvC,EAAU5uC,WAAaA,EAEvB,IAAI4xC,EAAS7nE,GAAKmnE,EAAW,EACzBW,EAAYD,EAAS5xC,EAAa,QAAUj2B,EAAI,GAAGqL,SAAS,IAAM,IAAM+7D,EACxEznC,EAAQ,IAAIv4B,MAAqB,EAAIu9D,GACzChlC,EAAM,GAAK+nC,EACX,IAAI/4B,EAAQ,EACRo5B,GAAa,EACjB,IAAK,IAAItgD,EAAI,EAAGA,EAAIk9C,IAAiBl9C,EAAG,CACtC,IAAIpY,EAAO1P,KAAK4jE,iBAAiBtwD,EAAWwU,IAI5C,GAHI,EAAAqY,gBAAgBzwB,IAAS,EAAA2rB,aAAa2X,MACxChT,EAAMgP,KAAWt/B,GAEfw1D,EAAUv1C,MAAM,KAA0C,CACxDu1C,EAAUp3C,GAAG,OAAuBs6C,GAAa,GACrD,OAGJpoC,EAAM7zB,OAAS6iC,GACXo5B,GAAcF,GAAUhD,EAAUv1C,MAAM,SAC1Cq4C,GAAqB9C,EAAU1yD,OAEjCy1D,GAAuC,MAAlB/C,EAAU1yD,MAG1B41D,GAAYpoE,KAAKwgE,oBAAoB0E,EAAWllC,GACrDklC,EAAUmD,MACR,MAGFnD,EAAUE,mBACVplE,KAAKu5D,YAAc0L,EACnB8C,EAAepoE,EAAO8gC,MAAM0nC,EAAWnoC,EAAO,EAAA7E,WAAW2D,MAQ3D,OANAmmC,EAAUqB,gBAGNwB,GAAgB,IAAG7C,EAAUzyD,QAA6B,GAApBw1D,GAC1C/C,EAAUzyD,QAA6B,KAApBy1D,EAEZF,EAGD,sBACN/zD,GAEA,IAAI+iB,EAAO/2B,KAAKu5D,YAGhBxiC,EAAK5pB,IAAI,KAET,IAAI6yB,EAAQ,IAAIv4B,MAChBzH,KAAK69D,mBAAmB9mC,EAAMiJ,GAG9B,IAAI1+B,EAAQ0S,EAAU1S,MAClB6J,EAA6B,KACjC,GAAI7J,EAAMsM,MAAQ,EAAAJ,SAASuN,IAAK,CAC9B,IAAIutD,EAA0BhnE,EAAOsO,UACjC04D,EAAQn8D,SAAQhB,EAAUm9D,EAAQ,IAMxC,OAJAtoC,EAAMtzB,KACJ1M,KAAKuoE,UAAUp9D,EAAS6I,IAGnBhU,KAAKL,OAAO+6D,QAAQ16B,GAGrB,oBACNhsB,GAQA,OAJAhU,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACfvb,EAAU5I,OAELpL,KAAKL,OAAOklE,cAIb,yBACN7wD,GAEA,IAAIrU,EAASK,KAAKL,OACd8V,EAAezB,EAAUyB,aACzB+yD,EAAkB/yD,EAAatJ,OAC/B4qB,EAAO/2B,KAAKu5D,YACZkP,EAAe,IAAIhhE,MACnB2d,EAAWplB,KAAKolB,SAEpB,IAAK,IAAI/kB,EAAI,EAAGA,EAAImoE,IAAmBnoE,EAAG,CACxC,IAAI6Q,EAAcuE,EAAapV,GAC3BO,EAAOsQ,EAAYtQ,KAAKqL,KACxByC,EAAoB,KACpBqvD,EAA0B,EAC1B2K,GAAyB,EAG7B,GAAIx3D,EAAYxC,KAAM,CAMpB,GALAA,EAAO0W,EAAS+9B,YACdjyC,EAAYxC,KACZqoB,EAAKytB,eACL,EAAA3B,QAAQ9rB,EAAK7B,2BAEVxmB,EAAM,SACPwC,EAAY5B,cACdyuD,EAAW/9D,KAAKg+D,kBAAkB9sD,EAAY5B,YAAaZ,EACzD,IAEFg6D,EAAyB1oE,KAAKi4D,oBAAoBlrD,IAAIgxD,QAInD,KAAI7sD,EAAY5B,YAehB,CACLtP,KAAK8oB,MACH,EAAAhe,eAAe44C,cACfxyC,EAAYtQ,KAAKwK,MAAMg6C,OAEzB,SAfA,GAJA2Y,EAAW/9D,KAAKg+D,kBAAkB9sD,EAAY5B,YAAa,EAAA+W,KAAKmxB,KAAI,IAGpEkxB,EAAyB1oE,KAAKi4D,oBAAoBlrD,IAAIgxD,GAClD/9D,KAAKqlD,aAAe,EAAAh/B,KAAKG,KAAM,CACjCxmB,KAAK8oB,MACH,EAAAhe,eAAeiiD,mCACf77C,EAAY9F,MAAOpL,KAAKqlD,YAAY35C,WAAY,UAElD,SAEFgD,EAAO1O,KAAKqlD,YAYd,IAAIsjB,EAAUz3D,EAAY4c,GAAG,EAAAzrB,YAAY6rB,OACrCqC,GAAW,EACf,GAAIo4C,EACF,GAAI5K,GAEF,GADAA,EAAWp+D,EAAOi/D,qBAAqBb,GACnC,EAAA59B,gBAAgB49B,IAAa,EAAA1iC,aAAaqP,MAAO,CACnD,IAAIjU,EAAQ,IAAI,EAAAhC,MAAM7zB,GAAO,EAAG8N,EAAMqoB,EAAK22B,gBAC3C,OAAQ,EAAAltB,kBAAkBu9B,IACxB,KAAK,EAAA5iC,WAAWx0B,IACd8vB,EAAMtI,wBACJpH,QACE,EAAAuqC,iBAAiByM,GACjB,GAEFrvD,GAEF,MAEF,KAAK,EAAAysB,WAAWv0B,IACd6vB,EAAMtI,wBACJpH,QACE,EAAAwqC,oBAAoBwM,GACpB,EAAAvM,qBAAqBuM,IAEvBrvD,GAEF,MAEF,KAAK,EAAAysB,WAAW/zB,IACdqvB,EAAMrI,sBAA2B,EAAAinC,iBAAiB0I,GAAWrvD,GAC7D,MAEF,KAAK,EAAAysB,WAAW9zB,IACdovB,EAAMrI,sBAAsB,EAAAknC,iBAAiByI,GAAWrvD,GACxD,MAEF,QAEE,OADAlE,QAAO,GACA7K,EAAOklE,cAIlB,IAAIpX,EAAe12B,EAAK02B,aACxB,GAAKA,GACA,GAAIA,EAAa1gD,IAAInM,GAAO,CAC/B,IAAIytB,EAAWo/B,EAAavsD,IAAIN,GAOhC,OANAZ,KAAKyuB,aACH,EAAA3jB,eAAe4jB,uBACfxd,EAAYtQ,KAAKwK,MACjBijB,EAASnd,YAAYtQ,KAAKwK,MAC1BxK,GAEKZ,KAAKL,OAAOklE,oBATF9tC,EAAK02B,aAAeA,EAAe,IAAI7lD,IAW1D6lD,EAAatgD,IAAIvM,EAAM61B,GACvBlG,GAAW,QAGbvwB,KAAK8oB,MACH,EAAAhe,eAAe89D,wCACf13D,EAAY9F,OAMlB,IAAKmlB,EAAU,CACb,IAAIkG,EACJ,GACEvlB,EAAYye,MAAM,EAAAttB,YAAY04C,IAAM,EAAA14C,YAAY6rB,QAChD6I,EAAK2yB,SACL,CACA,IAAIkF,EAAgB73B,EAAK8xC,eAAejoE,GACpCguD,GACGA,EAAc19C,YAAY9F,MAAMO,OAAOkjD,SAQ1C7uD,KAAK8oB,MACH,EAAAhe,eAAe4jB,uBACfxd,EAAYtQ,KAAKwK,MAAOxK,GAT1BZ,KAAKyuB,aACH,EAAA3jB,eAAe4jB,uBACfxd,EAAYtQ,KAAKwK,MACjBwjD,EAAc19C,YAAYtQ,KAAKwK,MAC/BxK,GAQJ61B,EAAQm4B,GAERn4B,EAAQM,EAAK+xC,eAAeloE,EAAM8N,GAEhCi6D,GAAS5xC,EAAK03B,aAAah4B,EAAM/B,MAAO,EAAA44B,WAAWwC,cAClD,CACL,IAAIzhC,EAAW0I,EAAK6yB,YAAYhpD,GAChC,GAAIytB,EAAU,CACZruB,KAAKyuB,aACH,EAAA3jB,eAAe4jB,uBACfxd,EAAYtQ,KAAKwK,MACjBijB,EAASnd,YAAYtQ,KAAKwK,MAC1BxK,GAEF,SAEF61B,EAAQM,EAAK22B,eAAeW,SAAS3/C,EAAM9N,EAAMsQ,GAC7Cy3D,GAAS5xC,EAAK03B,aAAah4B,EAAM/B,MAAO,EAAA44B,WAAWwC,UAEzD,IAAIuP,EAAY3wD,EAAK2wD,UACjBtB,GACEhnC,EAAKiqC,UAAUjD,EAAUrvD,IAAOqoB,EAAK03B,aAAah4B,EAAM/B,MAAO,EAAA44B,WAAWxE,SAC1EuW,GACFtoC,EAAK03B,aAAah4B,EAAM/B,MAAO,EAAA44B,WAAWoB,UAC1C+Z,EAAa/7D,KACX/M,EAAO0gE,UAAU5pC,EAAM/B,MACrBg0C,EACI3K,EACA/9D,KAAKs/D,WAAWvB,OAIxB0K,EAAa/7D,KACX/M,EAAO0gE,UAAU5pC,EAAM/B,MAAOqpC,IAE5BtnC,EAAM/nB,KAAKof,GAAG,MACXiJ,EAAK47B,YAAYoL,EAAUrvD,GAC3BqoB,EAAKq3B,eAAe33B,EAAM/B,MAAO,EAAA44B,WAAWyC,SADVh5B,EAAK03B,aAAah4B,EAAM/B,MAAO,EAAA44B,WAAWyC,YAKjFsP,GAMFoJ,EAAa/7D,KACX/M,EAAO0gE,UAAU5pC,EAAM/B,MACrB10B,KAAKk/D,SAASxwD,KAGlBqoB,EAAK03B,aAAah4B,EAAM/B,MAAO,EAAA44B,WAAW2C,yBACjCx5B,EAAM/nB,KAAKof,GAAG,KACvBiJ,EAAK03B,aAAah4B,EAAM/B,MAAO,EAAA44B,WAAWyC,UAKlD,OAA8B,GAAvB0Y,EAAat8D,OAChB,EACAxM,EAAO+6D,QAAQ+N,GAGb,qBACNz0D,GAEA,OAAOhU,KAAKg+D,kBAAkBhqD,EAAUvD,WAAY,EAAA4V,KAAKG,KACvD,IAII,sBAENxS,GAEA,OAAOhU,KAAKumE,wBAAwBvyD,EAAW,MAGzC,wBAENA,EAEAyxD,GAEA,IAAI9lE,EAASK,KAAKL,OACdslE,EAAYjlE,KAAKu5D,YAejB/lD,EAAQyxD,EAAUS,iBAClB1lC,EAAQ,IAAIv4B,MACZsvB,EAAOkuC,EAAUE,MAA6B,GAC9CM,GAAW1uC,EAAK4uC,gBAAgBF,GACpC,IAAIG,EAAa7uC,EAAKouC,OACtBnlE,KAAKu5D,YAAcxiC,EAEnB,IAAIT,EAAa,eAAiB9iB,EAClCujB,EAAKT,WAAaA,EAClB,IAAIq3B,EAAgB,kBAAoBn6C,EACxCujB,EAAK42B,cAAgBA,EAGrB,IAAIoY,EAAWhvC,EAAKouC,OACpBnlE,KAAKu5D,YAAcwM,EACnB,IAAIC,EAAWrmE,EAAOi/D,qBACpB5+D,KAAKimE,cACHjmE,KAAKg+D,kBAAkBhqD,EAAUrB,UAAW,EAAA0T,KAAKziB,MACjD5D,KAAKqlD,cAGLuhB,EAAWV,EAAsBF,GAGrC,GAAgB,GAAZY,EAKF,OAJA5mE,KAAKwgE,oBAAoBuF,EAAU/lC,GACnCx1B,QAAQusB,EAAKyvC,iBACbvB,EAAUqB,gBACVtmE,KAAKu5D,YAAc0L,EACZtlE,EAAO+6D,QAAQ16B,GAMxB,IAAIomC,EAAQrvC,EAAKw3B,aAAa,EAAAloC,KAAKziB,MACnCo8B,EAAMtzB,KACJ/M,EAAO0gE,UAAU+F,EAAM1xC,MAAOsxC,IAEhChmE,KAAKwgE,oBAAoBuF,EAAU/lC,GACnC+lC,EAASX,mBAETruC,EAAKs4B,QAAQ0W,GACb/lE,KAAKu5D,YAAcxiC,EAGnB,IAAI8uC,EAAW9uC,EAAKouC,OACpBU,EAAS1U,qBAAqB6U,GAC9BhmE,KAAKu5D,YAAcsM,EACnB,IAAIC,EAAY,IAAIr+D,MAChByO,EAAOlC,EAAUA,UAQrB,GAPIkC,EAAKtI,MAAQ,EAAAJ,SAASiP,MACxBzc,KAAK4gE,kBAAmC1qD,EAAM5C,YAAY,EAAOwyD,GAEjEA,EAAUp5D,KAAK1M,KAAK4jE,iBAAiB1tD,IAInC2vD,EAAS/3C,GAAG,KACdg4C,EAAUp5D,KACR/M,EAAOklE,eAEO,GAAZ+B,EAAgC7vC,EAAKs4B,QAAQwW,GAC5C9uC,EAAK+vC,cAAcjB,OACnB,CACL,IAAI+B,EAAS/B,EAAS/3C,GAAG,IAiBzB,GAhBI85C,EACF9B,EAAUp5D,KACR/M,EAAOklE,gBAGT7kE,KAAKwgE,oBAAoBqF,EAAUC,GACnCA,EAAUp5D,KACR/M,EAAO2lE,GAAG3X,KAGE,GAAZiZ,EAAgC7vC,EAAKs4B,QAAQwW,GAC5C9uC,EAAK+vC,cAAcjB,IAKnB+B,GAAU,EAAA5wC,KAAKqvC,2BAA2BT,EAAY7uC,GAKzD,OAJAvsB,QAAQi7D,GACR1uC,EAAKg4B,cAAcqX,GACnBnB,EAAUqB,gBACVtmE,KAAKu5D,YAAc0L,EACZjlE,KAAKumE,wBAAwBvyD,EAAW+iB,GAGnDiJ,EAAMtzB,KACJ/M,EAAOu6D,GAAGv6D,EAAO2gE,UAAU8F,EAAM1xC,MAAO,EAAAyG,WAAWx0B,KACjDhH,EAAO+6D,QAAQoL,KAGnB/uC,EAAKg4B,cAAcqX,GACnBpmE,KAAKu5D,YAAcxiC,EAGnBvsB,QAAQusB,EAAKyvC,iBACbvB,EAAU5V,QAAQt4B,GAClBkuC,EAAUqB,gBACVtmE,KAAKu5D,YAAc0L,EACnB,IAAI90D,EAAOxQ,EAAO8gC,MAAMnK,EAAY,CAClC32B,EAAO8mE,KAAK9Y,EACVhuD,EAAO+6D,QAAQ16B,MAMnB,OAHgB,GAAZ4mC,GAAkC3B,EAAUn3C,GAAG,OACjD3d,EAAOxQ,EAAO8gC,MAAM,KAAM,CAAEtwB,EAAMxQ,EAAOklE,iBAEpC10D,EAMT,sBACEoB,EACAw3D,EACAxB,GAEA/8D,OAAO+G,EAAQuc,GAAG,EAAAzrB,YAAYgyB,QAAU,EAAAhyB,YAAYgxB,WACpD,IAAI3kB,EAAO6C,EAAQ7C,KACnB,SACkB,EAAd64D,IACF74D,EAAKof,GAAG,IACRi7C,EAAej7C,GAAG,IAClBpf,EAAKqzB,KAAOgnC,EAAehnC,MACtB/hC,KAAKqlD,YAAc0jB,GAAgBn7D,MACnC5N,KAAKqlD,YAAc32C,GAAMd,MAE9B,KAAK,EACL,KAAK,EAAc,CACjB,IAAI41B,EAAQ90B,EAAKs6D,yBAAyB,EAAA3iD,KAAKjjB,KAC/C,OAAOpD,KAAKL,OAAOyD,IACY,GAA7BmO,EAAQ4iB,kBACJmS,QAAQ/0B,EAAQ6iB,uBAAyBoP,GAASA,EAClD,GAGR,KAAK,EACL,KAAK,EACL,KAAK,GAAe,CAClB,IAAIL,EAAO5xB,EAAQ7C,KAAKimD,wBAAwB,EAAAtuC,KAAKjjB,KACrD,OAAOpD,KAAKL,OAAOyD,IACY,GAA7BmO,EAAQ4iB,kBACJmS,QAAQ/0B,EAAQ6iB,sBAAwB+O,EACxC,GAGR,KAAK,EACL,KAAK,EACH,OAAOnjC,KAAKL,OAAOyD,IACY,GAA7BmO,EAAQ4iB,kBACJmS,QAAQ/0B,EAAQ6iB,sBAChB,GAGR,KAAK,EACL,KAAK,EACH,IAAK7iB,EAAQmhB,QAAQ1O,QAAQgD,SAC3B,OAAOhnB,KAAKL,OAAOyD,IACY,GAA7BmO,EAAQ4iB,kBACJmS,QAAQ/0B,EAAQ6iB,sBAChB,GAKV,KAAK,EACL,KAAK,EACH,OAAoC,GAA7B7iB,EAAQ4iB,kBACXn0B,KAAKL,OAAO0D,IACVijC,QAAQ/0B,EAAQ6iB,sBAChBmS,SAASh1B,EAAQ6iB,uBAEnBp0B,KAAKL,OAAO0D,IAAI,GAEtB,KAAK,GAEH,IAAMkO,EAAQ0Z,aAAa,EAAAzL,eAAe7G,UAAYowD,GAAkB,EAAA1iD,KAAKxiB,IAC3E,OAAO7D,KAAKL,OAAOmE,IAA0ByN,EAAS+iB,oBAGxDt0B,KAAKqlD,YAAc,EAAAh/B,KAAKxiB,IAE1B,KAAK,GACH,OAAO7D,KAAKL,OAAOkE,IAA0B0N,EAAS+iB,oBAExD,QAEE,OADA9pB,QAAO,GACAxK,KAAKL,OAAOklE,eAKzB,kBACEp0D,EACAs4D,EACAxB,EAAA,GAEA,KAAO92D,EAAW7C,MAAQ,EAAAJ,SAASyN,eACjCxK,EAAuCA,EAAYA,WAIrD,IAAIN,EACJ,OAHAnQ,KAAKqlD,YAAc0jB,EACfA,GAAkB,EAAA1iD,KAAKG,OAAM+gD,GAAe,GAExC92D,EAAW7C,MACjB,KAAK,EAAAJ,SAAS4M,UACZjK,EAAOnQ,KAAKipE,2BAAgDx4D,EAAYs4D,EAAgBxB,GACxF,MAEF,KAAK,EAAA/5D,SAAS6M,OACZlK,EAAOnQ,KAAKkpE,wBAA0Cz4D,EAAYs4D,EAAgBxB,GAClF,MAEF,KAAK,EAAA/5D,SAAS8M,KACZnK,EAAOnQ,KAAKmpE,sBAAsC14D,EAAYs4D,EAAgBxB,GAC9E,MAEF,KAAK,EAAA/5D,SAASkN,MACZvK,EAAOnQ,KAAKopE,uBAAwC34D,EAAYs4D,EAAgBxB,GAChF,MAEF,KAAK,EAAA/5D,SAASoN,cACZzK,EAAOnQ,KAAKqpE,+BAAwD54D,EAAYs4D,EAAgBxB,GAChG,MAEF,KAAK,EAAA/5D,SAASqN,SACZ1K,EAAOnQ,KAAKspE,0BAA8C74D,EAAYs4D,EAAe7xB,mBAAoBqwB,GACzG,MAEF,KAAK,EAAA/5D,SAASiL,WACd,KAAK,EAAAjL,SAASQ,MACd,KAAK,EAAAR,SAASM,KACd,KAAK,EAAAN,SAAS8N,KACd,KAAK,EAAA9N,SAAS6N,MACd,KAAK,EAAA7N,SAASO,KACZoC,EAAOnQ,KAAKupE,4BAAkD94D,EAAYs4D,EAAgBxB,GAC1F,MAEF,KAAK,EAAA/5D,SAASsN,WACZ3K,EAAOnQ,KAAKwpE,4BAAkD/4D,EAAYs4D,EAAgBxB,GAC1F,MAEF,KAAK,EAAA/5D,SAASK,QACZsC,EAAOnQ,KAAKypE,yBAA4Ch5D,EAAYs4D,EAAgBxB,GACpF,MAEF,KAAK,EAAA/5D,SAASuN,IACZ5K,EAAOnQ,KAAK0pE,qBAAoCj5D,EAAYs4D,EAAgBxB,GAC5E,MAEF,KAAK,EAAA/5D,SAAS4L,eACZjJ,EAAOnQ,KAAK2pE,gCAA0Dl5D,EAAYs4D,EAAgBxB,GAClG,MAEF,KAAK,EAAA/5D,SAAS2N,QACZhL,EAAOnQ,KAAK4pE,yBAA4Cn5D,EAAYs4D,EAAgBxB,GACpF,MAEF,KAAK,EAAA/5D,SAASgO,aACZrL,EAAOnQ,KAAK6pE,8BAAsDp5D,EAAYs4D,EAAgBxB,GAC9F,MAEF,KAAK,EAAA/5D,SAASiO,YACZtL,EAAOnQ,KAAK8pE,6BAAoDr5D,EAAYs4D,EAAgBxB,GAC5F,MAEF,QACEvnE,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACf9e,EAAWrF,OAEb+E,EAAOnQ,KAAKL,OAAOklE,cAIvB,IAAIxf,EAAcrlD,KAAKqlD,YACnB0kB,EAAgD,IAA1B,EAAdxC,GAgBZ,OAfIliB,GAAe0jB,EAAe5xB,kBACd,EAAdowB,GACFp3D,EAAOnQ,KAAKgqE,kBAAkB75D,EAAMk1C,EAAa0jB,GAAgB,EAAMgB,EAAMt5D,GAC7Es5D,GAAO,EACP/pE,KAAKqlD,YAAc0jB,GACI,EAAdxB,IACTp3D,EAAOnQ,KAAKgqE,kBAAkB75D,EAAMk1C,EAAa0jB,GAAgB,EAAOgB,EAAMt5D,GAC9Es5D,GAAO,EACP/pE,KAAKqlD,YAAc0jB,IAGnBgB,IAAM55D,EAAOnQ,KAAKiqE,uBAAuB95D,EAAMk1C,IAG/CrlD,KAAKgkB,QAAQmT,WAAWn3B,KAAK8kE,iBAAiB30D,EAAMM,EAAWrF,OAC5D+E,EAIT,qBACEM,EACAs4D,EACAxB,EAAA,GAEA,OAAOvnE,KAAKL,OAAOi/D,qBACjB5+D,KAAKg+D,kBAAkBvtD,EAAYs4D,EAAgBxB,IAK/C,0BAEN92D,EAEA5B,EAEA04D,EAAA,GAGA,IAAIp3D,EAAOnQ,KAAKg+D,kBAAkBvtD,EAAY5B,EAA0B,GAAd04D,GACtDxwC,EAAO/2B,KAAKu5D,YAChB,GAAI1qD,EAAWwwD,YAERr/D,KAAKi4D,oBAAoBlrD,IAAIoD,GAAO,EAEzB,GADFnQ,KAAKkqE,mBAAmB/5D,EAAM4mB,KACzB5mB,EAAOnQ,KAAKs/D,WAAWnvD,IACxCnQ,KAAKi4D,oBAAoBxxC,IAAItW,GAMjC,OAFK4mB,EAAK47B,YAAYxiD,EAAMtB,IAAakoB,EAAK5pB,IAAI,GAC9C4pB,EAAKiqC,UAAU7wD,EAAMtB,IAAakoB,EAAK5pB,IAAI,GACxCgD,EAGT,kBACEA,EAEAqlD,EAEA9kD,EAEAy5D,EAEAJ,EACAve,GAEA,IAAI7rD,EAASK,KAAKL,OAGlB,OAAqB,IAAjB61D,EAAS5nD,MACXpD,OAAsB,IAAfkG,EAAO9C,MACd5N,KAAK8oB,MACH,EAAAhe,eAAeiiD,mCACfvB,EAAWpgD,MAAOoqD,EAAS9pD,WAAYgF,EAAOhF,YAEzC/L,EAAOklE,eAIG,IAAfn0D,EAAO9C,KAA8BjO,EAAOuiE,KAAK/xD,GAGjDqlD,EAAS1nC,GAAG,MAAwBpd,EAAOod,GAAG,MAC5C9tB,KAAKu5D,YAAYyH,UAAU7wD,EAAMqlD,GACnCA,EAAWA,EAASre,gBACXgzB,GAAY3U,EAAS1nC,GAAG,OAAwBpd,EAAOod,GAAG,OAG9D9tB,KAAKgkB,QAAQmD,WAChBhX,EAAOnQ,KAAKoqE,wBAAwBj6D,EAAMqlD,EAAUhK,IAEtDgK,EAAWA,EAASre,iBAElBqe,EAASvd,eAAevnC,IAC1BlG,OAAOgrD,EAAS5nD,MAAQ8C,EAAO9C,MAC/B5N,KAAKqlD,YAAc30C,EACZP,GAELg6D,GAAYz5D,EAAOymC,gBAAgBc,eAAeud,IAEpDhrD,OAAOgrD,EAAS5nD,MAAQ8C,EAAO9C,MAC1B5N,KAAKgkB,QAAQmD,WAChBhX,EAAOnQ,KAAKqqE,uBAAuBl6D,EAAMqlD,EAAU9kD,EAAQ86C,IAE7DxrD,KAAKqlD,YAAc30C,EACZP,IAETnQ,KAAK8oB,MACH,EAAAhe,eAAeiiD,mCACfvB,EAAWpgD,MAAOoqD,EAAS9pD,WAAYgF,EAAOhF,YAEhD1L,KAAKqlD,YAAc30C,EACZ/Q,EAAOklE,iBAKXrP,EAASvd,eAAevnC,IACtBy5D,GACHnqE,KAAK8oB,MACH,EAAAhe,eAAew/D,sDACf9e,EAAWpgD,MAAOoqD,EAAS9pD,WAAYgF,EAAOhF,YAKhD8pD,EAAS1nC,GAAG,GAGVpd,EAAOod,GAAG,GACS,IAAjB0nC,EAAS5nD,KAGQ,IAAf8C,EAAO9C,OACTuC,EAAOxQ,EAAOwhE,MAAM,EAAA5lC,QAAQgvC,WAAYp6D,IAMlB,IAAfO,EAAO9C,OAChBuC,EAAOxQ,EAAOwhE,MAAM,EAAA5lC,QAAQivC,UAAWr6D,IAMhCO,EAAOod,GAAG,GAGE,IAAjB0nC,EAAS5nD,KACP8C,GAAU,EAAA2V,KAAKziB,MACjBuM,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASu3B,MAAO5iD,EAAMxQ,EAAOkE,IAAI,IACtDkmE,GAAO,GAGL55D,EAFOO,EAAOod,GAAG,GACfpd,EAAOod,GAAG,IACLnuB,EAAOwhE,MAAM,EAAA5lC,QAAQkvC,cAAet6D,GAEpCxQ,EAAOwhE,MAAM,EAAA5lC,QAAQmvC,cAAev6D,GAGzCO,EAAOod,GAAG,IACLnuB,EAAOwhE,MAAM,EAAA5lC,QAAQovC,cAAex6D,GAEpCxQ,EAAOwhE,MAAM,EAAA5lC,QAAQqvC,cAAez6D,GAM3CO,GAAU,EAAA2V,KAAKziB,MACjBuM,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASw3B,MAAO7iD,EAAMxQ,EAAOmE,IAAI,IACtDimE,GAAO,GAGL55D,EAFOO,EAAOod,GAAG,GACfpd,EAAOod,GAAG,IACLnuB,EAAOwhE,MAAM,EAAA5lC,QAAQsvC,cAAe16D,GAEpCxQ,EAAOwhE,MAAM,EAAA5lC,QAAQuvC,cAAe36D,GAGzCO,EAAOod,GAAG,IACLnuB,EAAOwhE,MAAM,EAAA5lC,QAAQwvC,cAAe56D,GAEpCxQ,EAAOwhE,MAAM,EAAA5lC,QAAQyvC,cAAe76D,IAOjD3F,OAAuB,GAAhBkG,EAAO8B,MAAyB,sBACvCrC,EAAOxQ,EAAOuiE,KAAK/xD,IAIZqlD,EAAS1nC,GAAG,IAAsBpd,EAAOod,GAAG,GAKjD3d,EAFe,IAAfO,EAAO9C,KACL4nD,EAAS1nC,GAAG,IACPnuB,EAAOwhE,MACZ3L,EAAS1nC,GAAG,GACR,EAAAyN,QAAQ0vC,gBACR,EAAA1vC,QAAQ2vC,gBACZ/6D,GAGKxQ,EAAOwhE,MACZ3L,EAAS1nC,GAAG,GACR,EAAAyN,QAAQ4vC,gBACR,EAAA5vC,QAAQ6vC,gBACZj7D,GAMAqlD,EAAS1nC,GAAG,IACPnuB,EAAOwhE,MACZ3L,EAAS1nC,GAAG,GACR,EAAAyN,QAAQ8vC,gBACR,EAAA9vC,QAAQ+vC,gBACZn7D,GAGKxQ,EAAOwhE,MACZ3L,EAAS1nC,GAAG,GACR,EAAAyN,QAAQgwC,gBACR,EAAAhwC,QAAQiwC,gBACZr7D,GAQFqlD,EAAS1nC,GAAG,IAGVpd,GAAU,EAAA2V,KAAKziB,MACjBuM,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS82B,MAAOniD,EAAMxQ,EAAO0D,IAAI,IACtD0mE,GAAO,GACGr5D,EAAOod,GAAG,MACpB3d,EAAOxQ,EAAOwhE,MAAM,EAAA5lC,QAAQkwC,QAASt7D,IAI9BO,EAAOod,GAAG,KACnB3d,EAAOxQ,EAAOwhE,MACZ3L,EAAS1nC,GAAG,GAAoB,EAAAyN,QAAQmwC,UAAY,EAAAnwC,QAAQowC,UAC5D3rE,KAAKiqE,uBAAuB95D,EAAMqlD,IAEpCuU,GAAO,GAKHvU,EAAS1nC,GAAG,KAEV0nC,EAASzzB,KAAOrxB,EAAOqxB,OACzB5xB,EAAOnQ,KAAKiqE,uBAAuB95D,EAAMqlD,GACzCuU,GAAO,GAMf/pE,KAAKqlD,YAAc30C,EACZq5D,EACH/pE,KAAKiqE,uBAAuB95D,EAAMO,GAClCP,GAGE,2BACNM,EACAs4D,EACAxB,GAEA,IAAIqE,GAAqC,EAAdrE,EAC3B,OAAQ92D,EAAWD,eACjB,KAAK,EAAA2J,cAAcyuC,OACnB,KAAK,EAAAzuC,cAAc4/B,GAAI,CACrB,IAAIhjB,EAAO/2B,KAAKu5D,YACZ7oD,EAAS1Q,KAAKolB,SAAS+9B,YACzB34C,OAAOiG,EAAWC,QAClBqmB,EAAKytB,eACL,EAAA3B,QAAQ9rB,EAAK7B,0BAEf,OAAKxkB,EACE1Q,KAAKg+D,kBAAkBvtD,EAAWA,WAAYC,EAA+B,EAAvBk7D,GADzC5rE,KAAKL,OAAOklE,cAGlC,KAAK,EAAA1qD,cAAc2uC,QAAS,CAC1Bt+C,QAAQiG,EAAWC,QACnB,IAAIP,EAAOnQ,KAAKg+D,kBAAkBvtD,EAAWA,WAAYs4D,EAAe8C,WAAYD,GAChFl9D,EAAO1O,KAAKqlD,YAUhB,OATIrlD,KAAKu5D,YAAYyH,UAAU7wD,EAAMzB,GACnC1O,KAAK8rE,KACH,EAAAhhE,eAAeihE,yBACft7D,EAAWA,WAAWrF,OAEdpL,KAAKgkB,QAAQmD,WACvBhX,EAAOnQ,KAAKoqE,wBAAwBj6D,EAAMzB,EAAM+B,IAElDzQ,KAAKqlD,YAAc32C,EAAKyoC,gBACjBhnC,EAET,KAAK,EAAAgK,cAAc+T,MAiBjB,OAJAluB,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACf9e,EAAWrF,OAENpL,KAAKL,OAAOklE,cAErB,QAASr6D,QAAO,GAElB,OAAOxK,KAAKL,OAAOklE,cAQb,wBACNp0D,EACAs4D,EACAxB,GAEA,IAIIyE,EACA3iB,EACA4iB,EACA3iB,EACAC,EAEAp5C,EAVAxQ,EAASK,KAAKL,OACdkR,EAAOJ,EAAWI,KAClBC,EAAQL,EAAWK,MASnBo7D,GAAW,EAEXt7D,EAAWH,EAAWG,SAC1B,OAAQA,GACN,KAAK,EAAAtD,MAAMgW,SAKT,GAJA0oD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,GACxC1f,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAawB,IAC1D,GAAI4Y,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKi+C,EAAS39C,YAE3B1L,KAAKL,OAAOklE,cAKrB,GAFAoH,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,IAAKi+C,EAAS39C,WAAY49C,EAAU59C,YAExD1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAEhB,OAlBEmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAUIy4C,EAAW37C,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASy3B,MAAO+Y,EAAUC,GAC/C,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS23B,MAAO6Y,EAAUC,GAC/C,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAAS23B,MACT,EAAA33B,SAASy3B,MACb+Y,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS03B,MAAO8Y,EAAUC,GAC/C,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAAS43B,MACT,EAAA53B,SAAS03B,MACb8Y,EACAC,GAEF,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS43B,MAAO4Y,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS63B,MAAO2Y,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS83B,MAAO0Y,EAAUC,GAC/C,MAEF,QACEzhE,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB7kE,KAAKqlD,YAAc,EAAAh/B,KAAKziB,KACxB,MAEF,KAAK,EAAA0J,MAAM8V,YAKT,GAJA4oD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,GACxC1f,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAaoB,IAC1D,GAAIgZ,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKi+C,EAAS39C,YAE3B1L,KAAKL,OAAOklE,cAKrB,GAFAoH,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,IAAKi+C,EAAS39C,WAAY49C,EAAU59C,YAExD1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAEhB,OAlBEmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAUIy4C,EAAW37C,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASq4B,MAAOmY,EAAUC,GAC/C,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASu4B,MACT,EAAAv4B,SAASq4B,MACbmY,EACAC,GAEF,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASu4B,MAAOiY,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASs4B,MAAOkY,EAAUC,GAC/C,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASw4B,MACT,EAAAx4B,SAASs4B,MACbkY,EACAC,GAEF,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASw4B,MAAOgY,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASy4B,MAAO+X,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS04B,MAAO8X,EAAUC,GAC/C,MAEF,QACEzhE,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB7kE,KAAKqlD,YAAc,EAAAh/B,KAAKziB,KACxB,MAEF,KAAK,EAAA0J,MAAMiW,gBAKT,GAJAyoD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,GACxC1f,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAayB,IAC1D,GAAI2Y,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMi+C,EAAS39C,YAE5B1L,KAAKL,OAAOklE,cAKrB,GAFAoH,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,KAAMi+C,EAAS39C,WAAY49C,EAAU59C,YAEzD1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAEhB,OAlBEmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAUIy4C,EAAW37C,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS+3B,MAAOyY,EAAUC,GAC/C,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASi4B,MACT,EAAAj4B,SAAS+3B,MACbyY,EACAC,GAEF,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASi4B,MAAOuY,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASg4B,MAAOwY,EAAUC,GAC/C,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASk4B,MACT,EAAAl4B,SAASg4B,MACbwY,EACAC,GAEF,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASk4B,MAAOsY,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASm4B,MAAOqY,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASo4B,MAAOoY,EAAUC,GAC/C,MAEF,QACEzhE,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB7kE,KAAKqlD,YAAc,EAAAh/B,KAAKziB,KACxB,MAEF,KAAK,EAAA0J,MAAM+V,mBAKT,GAJA2oD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,GACxC1f,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAaqB,IAC1D,GAAI+Y,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMi+C,EAAS39C,YAE5B1L,KAAKL,OAAOklE,cAKrB,GAFAoH,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,KAAMi+C,EAAS39C,WAAY49C,EAAU59C,YAEzD1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAEhB,OAlBEmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAUIy4C,EAAW37C,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS24B,MAAO6X,EAAUC,GAC/C,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAAS64B,MACT,EAAA74B,SAAS24B,MACb6X,EACAC,GAEF,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS64B,MAAO2X,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS44B,MAAO4X,EAAUC,GAC/C,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAAS84B,MACT,EAAA94B,SAAS44B,MACb4X,EACAC,GAEF,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS84B,MAAO0X,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS+4B,MAAOyX,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASg5B,MAAOwX,EAAUC,GAC/C,MAEF,QACEzhE,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB7kE,KAAKqlD,YAAc,EAAAh/B,KAAKziB,KACxB,MAGF,KAAK,EAAA0J,MAAMuuC,qBACX,KAAK,EAAAvuC,MAAM4V,cAUT,GAJA8oD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,GACxC1f,EAAWrpD,KAAKqlD,YAGZz0C,GAAY,EAAAtD,MAAM4V,eAAiBljB,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC/E,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAakB,IAC1D,GAAIkZ,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,QAQN,GAFAw7D,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,EAAA49C,sBAAsBv4C,EAAWG,UAAWy4C,EAAS39C,WAAY49C,EAAU59C,YAE/F1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAEhB,OAlBEmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAUIy4C,EAAW37C,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASy2B,MAAO+Z,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAAS42B,MACT,EAAA52B,SAASy2B,MACb+Z,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS42B,MAAO4Z,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASq3B,MAAOmZ,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASs3B,MAAOkZ,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOwhE,MAAM,EAAA5lC,QAAQ6wC,aAC1BzsE,EAAOmgE,OAAO,EAAAtkC,SAAS6wC,QAASL,EAAUC,IAE5C,MAEF,KAAK,GAEHjsE,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACf9e,EAAWrF,OAEb+E,EAAOxQ,EAAOklE,cACd,MAEF,QACEr6D,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB7kE,KAAKqlD,YAAc,EAAAh/B,KAAKziB,KACxB,MAEF,KAAK,EAAA0J,MAAMwuC,0BACX,KAAK,EAAAxuC,MAAM6V,mBAKT,GAJA6oD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,GACxC1f,EAAWrpD,KAAKqlD,YAGZz0C,GAAY,EAAAtD,MAAM6V,oBAAsBnjB,KAAKqlD,YAAYv3B,GAAG,KAAsB,CACpF,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAamB,IAC1D,GAAIiZ,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,QAQN,GAFAw7D,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,EAAA49C,sBAAsBv4C,EAAWG,UAAWy4C,EAAS39C,WAAY49C,EAAU59C,YAE/F1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAEhB,OAlBEmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAUIy4C,EAAW37C,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS62B,MAAO2Z,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAAS82B,MACT,EAAA92B,SAAS62B,MACb2Z,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS82B,MAAO0Z,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASu3B,MAAOiZ,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASw3B,MAAOgZ,EAAUC,GAC/C,MAEF,KAAK,GACH97D,EAAOxQ,EAAOwhE,MAAM,EAAA5lC,QAAQ+wC,aAC1B3sE,EAAOmgE,OAAO,EAAAtkC,SAAS+wC,QAASP,EAAUC,IAE5C,MAEF,KAAK,GAEHjsE,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACf9e,EAAWrF,OAEb+E,EAAOxQ,EAAOklE,cACd,MAEF,QACEr6D,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB7kE,KAAKqlD,YAAc,EAAAh/B,KAAKziB,KACxB,MAEF,KAAK,EAAA0J,MAAM2uC,OACT,OAAOj8C,KAAKwsE,kBAAkB37D,EAAMC,EAAOi4D,GAE7C,KAAK,EAAAz7D,MAAMsU,YAAasqD,GAAW,EACnC,KAAK,EAAA5+D,MAAM2T,KAKT,GAJA+qD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,GACxC1f,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAaS,KAC1D,GAAI2Z,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKi+C,EAAS39C,YAE3B1L,KAAKL,OAAOklE,cAGrB,GAAIqH,EACFD,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,EAAU,OAC/C,CAGL,GAFA4iB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,IAAKi+C,EAAS39C,WAAY49C,EAAU59C,YAExD1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAhBdmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAWN,OAAQ9Q,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACL,KAAK,EACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASukC,OAAQiM,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASixC,OACT,EAAAjxC,SAASukC,OACbiM,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASixC,OAAQT,EAAUC,GAChD,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASkxC,OAAQV,EAAUC,GAChD,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASmxC,OAAQX,EAAUC,GAChD,MAEF,QACEzhE,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAMuU,aAAcqqD,GAAW,EACpC,KAAK,EAAA5+D,MAAM6T,MAKT,GAJA6qD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,GACxC1f,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAaU,KAC1D,GAAI0Z,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKi+C,EAAS39C,YAE3B1L,KAAKL,OAAOklE,cAGrB,GAAIqH,EACFD,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,EAAU,GACpDC,EAAYtpD,KAAKqlD,gBACZ,CAGL,GAFA4mB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,IAAKi+C,EAAS39C,WAAY49C,EAAU59C,YAExD1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAhBdmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAWN,OAAQ9Q,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACL,KAAK,EACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASoxC,OAAQZ,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASqxC,OACT,EAAArxC,SAASoxC,OACbZ,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASqxC,OAAQb,EAAUC,GAChD,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASsxC,OAAQd,EAAUC,GAChD,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASuxC,OAAQf,EAAUC,GAChD,MAEF,QACEzhE,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAMyU,gBAAiBmqD,GAAW,EACvC,KAAK,EAAA5+D,MAAMwU,SAKT,GAJAkqD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,GACxC1f,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAaW,KAC1D,GAAIyZ,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKi+C,EAAS39C,YAE3B1L,KAAKL,OAAOklE,cAGrB,GAAIqH,EACFF,EAAWhsE,KAAKiqE,uBAAuB+B,EAAU3iB,GACjD4iB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,EAAU,OAC/C,CAGL,GAFA4iB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,IAAKi+C,EAAS39C,WAAY49C,EAAU59C,YAExD1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAhBdmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAWN,OAAQ9Q,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACL,KAAK,EACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASi5B,OAAQuX,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASwxC,OACT,EAAAxxC,SAASi5B,OACbuX,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASwxC,OAAQhB,EAAUC,GAChD,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASyxC,OAAQjB,EAAUC,GAChD,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS0xC,OAAQlB,EAAUC,GAChD,MAEF,QACEzhE,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAM+U,yBAA0B6pD,GAAW,EAChD,KAAK,EAAA5+D,MAAM8U,kBAAmB,CAK5B,GAJA4pD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,GACxC1f,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAaY,KAC1D,GAAIwZ,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMi+C,EAAS39C,YAE5B1L,KAAKL,OAAOklE,cAGrB,IACItyC,EADAmlB,EAAa2R,EAIjB,GAA6B,IAAzBrpD,KAAKqlD,YAAYz3C,MAGnB,GAFAq+D,EAAYjsE,KAAKg+D,kBAAkBltD,EAAO,EAAAuV,KAAKxiB,IAAK,GACpDylD,EAAYtpD,KAAKqlD,cACX9yB,EAAWvyB,KAAKu4D,gBAAiB,CACrC,IAAI4U,EAAYntE,KAAK0yB,QAAQjJ,aAAa,EAAAzmB,YAAYgF,OACtD,IAAKmlE,EAAW,CACdntE,KAAK8oB,MACH,EAAAhe,eAAeu4C,mBACf5yC,EAAWrF,MAAO,SAEpB+E,EAAOxQ,EAAOklE,cACd,MAEF,IAAI5iE,EAAYkrE,EAAUv5D,QAAUu5D,EAAUv5D,QAAQ1S,IAAI,EAAA8B,YAAY8F,KAAO,KAC7E,IAAK7G,EAAW,CACdjC,KAAK8oB,MACH,EAAAhe,eAAeu4C,mBACf5yC,EAAWrF,MAAO,aAEpB+E,EAAOxQ,EAAOklE,cACd,MAEFr6D,OAAOvI,EAAU2L,MAAQ,EAAA2R,YAAYwN,oBACrC/sB,KAAKu4D,eAAiBhmC,EAAWvyB,KAAKolB,SAAS4H,gBAAmC/qB,EAAW,YAc/F,GARA+pE,EAAWhsE,KAAKgqE,kBAAkBgC,EAChChsE,KAAKqlD,YAAa,EAAAh/B,KAAKviB,KACvB,GAAO,EACP+M,GAEFw4C,EAAWrpD,KAAKqlD,YAChB4mB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAO,EAAAuV,KAAKviB,IAAK,GACpDwlD,EAAYtpD,KAAKqlD,cACX9yB,EAAWvyB,KAAKw4D,gBAAiB,CACrC,IAAI2U,EAAYntE,KAAK0yB,QAAQjJ,aAAa,EAAAzmB,YAAY+E,MACtD,IAAKolE,EAAW,CACdntE,KAAK8oB,MACH,EAAAhe,eAAeu4C,mBACf5yC,EAAWrF,MAAO,QAEpB+E,EAAOxQ,EAAOklE,cACd,MAEF,IAAI5iE,EAAYkrE,EAAUv5D,QAAUu5D,EAAUv5D,QAAQ1S,IAAI,EAAA8B,YAAY8F,KAAO,KAC7E,IAAK7G,EAAW,CACdjC,KAAK8oB,MACH,EAAAhe,eAAeu4C,mBACf5yC,EAAWrF,MAAO,YAEpB+E,EAAOxQ,EAAOklE,cACd,MAEFr6D,OAAOvI,EAAU2L,MAAQ,EAAA2R,YAAYwN,oBACrC/sB,KAAKw4D,eAAiBjmC,EAAWvyB,KAAKolB,SAAS4H,gBAAmC/qB,EAAW,MAG3FswB,GAAYvyB,KAAKm7D,gBAAgB5oC,IAGrCpiB,EAAOnQ,KAAKotE,eAAe76C,EAAU,CAAEy5C,EAAUC,GAAax7D,GAC1Dy7D,GAAYx0B,GAAc13C,KAAKqlD,cAEjCl1C,EAAOnQ,KAAKgqE,kBAAkB75D,EAAMnQ,KAAKqlD,YAAa3N,GAAY,GAAO,EAAOjnC,KALlFN,EAAOxQ,EAAOklE,cAQhB,MAEF,KAAK,EAAAv3D,MAAM2U,aAAciqD,GAAW,EACpC,KAAK,EAAA5+D,MAAM0U,MAKT,GAJAgqD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,GACxC1f,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAaa,KAC1D,GAAIuZ,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKi+C,EAAS39C,YAE3B1L,KAAKL,OAAOklE,cAGrB,GAAIqH,EACFF,EAAWhsE,KAAKiqE,uBAAuB+B,EAAU3iB,GACjD4iB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,EAAU,GACpDC,EAAYtpD,KAAKqlD,gBACZ,CAGL,GAFA4mB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,IAAKi+C,EAAS39C,WAAY49C,EAAU59C,YAExD1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAhBdmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAWN,OAAQ9Q,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS6xC,OAAQrB,EAAUC,GAChD,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAAS8xC,OACT,EAAA9xC,SAAS6xC,OACbrB,EACAC,GAEF,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS8xC,OAAQtB,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACL,KAAK,GAIL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASu5B,OAAQiX,EAAUC,GAChD,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAAS+xC,OACT,EAAA/xC,SAASu5B,OACbiX,EACAC,GAEF,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS+xC,OAAQvB,EAAUC,GAChD,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASgyC,OAAQxB,EAAUC,GAChD,MAEF,KAAK,GACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASiyC,OAAQzB,EAAUC,GAChD,MAEF,QACEzhE,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAM6U,eAAgB+pD,GAAW,EACtC,KAAK,EAAA5+D,MAAM4U,QAKT,GAJA8pD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,GACxC1f,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAac,KAC1D,GAAIsZ,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKi+C,EAAS39C,YAE3B1L,KAAKL,OAAOklE,cAGrB,GAAIqH,EACFF,EAAWhsE,KAAKiqE,uBAAuB+B,EAAU3iB,GACjD4iB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,EAAU,GACpDC,EAAYtpD,KAAKqlD,gBACZ,CAGL,GAFA4mB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,IAAKi+C,EAAS39C,WAAY49C,EAAU59C,YAExD1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAhBdmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAWN,OAAQ9Q,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EAIL,KAAK,EACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASw5B,OAAQgX,EAAUC,GAChD,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASkyC,OACT,EAAAlyC,SAASw5B,OACbgX,EACAC,GAEF,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASkyC,OAAQ1B,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACL,KAAK,GAIL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASy5B,OAAQ+W,EAAUC,GAChD,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASmyC,OACT,EAAAnyC,SAASy5B,OACb+W,EACAC,GAEF,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASmyC,OAAQ3B,EAAUC,GAChD,MAEF,KAAK,GAAc,CACjB,IAAI15C,EAAWvyB,KAAKq4D,eACpB,IAAK9lC,EAAU,CACb,IAAI46C,EAAYntE,KAAK0yB,QAAQjJ,aAAa,EAAAzmB,YAAYgF,OACtD,IAAKmlE,EAAW,CACdntE,KAAK8oB,MACH,EAAAhe,eAAeu4C,mBACf5yC,EAAWrF,MAAO,SAEpB+E,EAAOxQ,EAAOklE,cACd,MAEF,IAAI5iE,EAAYkrE,EAAUv5D,QAAUu5D,EAAUv5D,QAAQ1S,IAAI,EAAA8B,YAAY+F,KAAO,KAC7E,IAAK9G,EAAW,CACdjC,KAAK8oB,MACH,EAAAhe,eAAeu4C,mBACf5yC,EAAWrF,MAAO,aAEpB+E,EAAOxQ,EAAOklE,cACd,MAEFr6D,OAAOvI,EAAU2L,MAAQ,EAAA2R,YAAYwN,oBACrC/sB,KAAKq4D,eAAiB9lC,EAAWvyB,KAAKolB,SAAS4H,gBAAmC/qB,EAAW,MAK7FkO,EAHIoiB,GAAYvyB,KAAKm7D,gBAAgB5oC,GAG9BvyB,KAAKotE,eAAe76C,EAAU,CAAEy5C,EAAUC,GAAax7D,GAFvD9Q,EAAOklE,cAIhB,MAEF,KAAK,GAAc,CACjB,IAAItyC,EAAWvyB,KAAKs4D,eACpB,IAAK/lC,EAAU,CACb,IAAI46C,EAAYntE,KAAK0yB,QAAQjJ,aAAa,EAAAzmB,YAAY+E,MACtD,IAAKolE,EAAW,CACdntE,KAAK8oB,MACH,EAAAhe,eAAeu4C,mBACf5yC,EAAWrF,MAAO,QAEpB+E,EAAOxQ,EAAOklE,cACd,MAEF,IAAI5iE,EAAYkrE,EAAUv5D,QAAUu5D,EAAUv5D,QAAQ1S,IAAI,EAAA8B,YAAY+F,KAAO,KAC7E,IAAK9G,EAAW,CACdjC,KAAK8oB,MACH,EAAAhe,eAAeu4C,mBACf5yC,EAAWrF,MAAO,YAEpB+E,EAAOxQ,EAAOklE,cACd,MAEFr6D,OAAOvI,EAAU2L,MAAQ,EAAA2R,YAAYwN,oBACrC/sB,KAAKs4D,eAAiB/lC,EAAWvyB,KAAKolB,SAAS4H,gBAAmC/qB,EAAW,MAK7FkO,EAHIoiB,GAAYvyB,KAAKm7D,gBAAgB5oC,GAG9BvyB,KAAKotE,eAAe76C,EAAU,CAAEy5C,EAAUC,GAAax7D,GAFvD9Q,EAAOklE,cAIhB,MAEF,QACEr6D,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAMuV,yBAA0BqpD,GAAW,EAChD,KAAK,EAAA5+D,MAAMsV,kBAKT,GAJAopD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,EAAe3f,SACvDC,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAa0B,aAC1D,GAAI0Y,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMi+C,EAAS39C,YAE5B1L,KAAKL,OAAOklE,cAKrB,OAFAoH,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,EAAU,GACpDC,EAAYtpD,KAAKqlD,YACTrlD,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACL,KAAK,EACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASo5B,OAAQoX,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASoyC,OAAQ5B,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASoyC,OACT,EAAApyC,SAASo5B,OACboX,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJAjsE,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMpL,KAAKqlD,YAAY35C,YAEpC/L,EAAOklE,cAEhB,QACEr6D,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAMyV,+BAAgCmpD,GAAW,EACtD,KAAK,EAAA5+D,MAAMwV,wBAKT,GAJAkpD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,EAAe3f,SACvDC,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAasB,aAC1D,GAAI8Y,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMi+C,EAAS39C,YAE5B1L,KAAKL,OAAOklE,cAMrB,OAHAmH,EAAWhsE,KAAKiqE,uBAAuB+B,EAAU3iB,GACjD4iB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,EAAU,GACpDC,EAAYtpD,KAAKqlD,YACTrlD,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EAIL,KAAK,EACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASq5B,OAAQmX,EAAUC,GAChD,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASqyC,OAAQ7B,EAAUC,GAChD,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASqyC,OACT,EAAAryC,SAASq5B,OACbmX,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACL,KAAK,GAIL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASs5B,OAAQkX,EAAUC,GAChD,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASsyC,OAAQ9B,EAAUC,GAChD,MAEF,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASsyC,OACT,EAAAtyC,SAASs5B,OACbkX,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJAjsE,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMpL,KAAKqlD,YAAY35C,YAEpC/L,EAAOklE,cAEhB,QACEr6D,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAM2V,2CAA4CipD,GAAW,EAClE,KAAK,EAAA5+D,MAAM0V,oCAKT,GAJAgpD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,EAAe3f,SACvDC,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAauB,eAC1D,GAAI6Y,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,MAAOi+C,EAAS39C,YAE7B1L,KAAKL,OAAOklE,cAMrB,OAHAmH,EAAWhsE,KAAKiqE,uBAAuB+B,EAAU3iB,GACjD4iB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,EAAU,GACpDC,EAAYtpD,KAAKqlD,YACTrlD,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,GACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASs5B,OAAQkX,EAAUC,GAElD,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASs5B,OAAQkX,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASsyC,OAAQ9B,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASsyC,OACT,EAAAtyC,SAASs5B,OACbkX,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJAjsE,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,MAAOpL,KAAKqlD,YAAY35C,YAErC/L,EAAOklE,cAEhB,QACEr6D,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAMiV,iBAAkB2pD,GAAW,EACxC,KAAK,EAAA5+D,MAAMgV,UAKT,GAJA0pD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,EAAe3f,SACvDC,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAae,aAC1D,GAAIqZ,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKi+C,EAAS39C,YAE3B1L,KAAKL,OAAOklE,cAGrB,GAAIqH,EACFD,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,EAAU,GACpDC,EAAYtpD,KAAKqlD,gBACZ,CAGL,GAFA4mB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,IAAKi+C,EAAS39C,WAAY49C,EAAU59C,YAExD1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAhBdmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAWN,OAAQ9Q,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASk5B,OAAQsX,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASuyC,OAAQ/B,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASuyC,OACT,EAAAvyC,SAASk5B,OACbsX,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJAjsE,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKpL,KAAKqlD,YAAY35C,YAEnC/L,EAAOklE,cAEhB,QACEr6D,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAMmV,WAAYypD,GAAW,EAClC,KAAK,EAAA5+D,MAAMkV,IAKT,GAJAwpD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,EAAe3f,SACvDC,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAagB,YAC1D,GAAIoZ,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKi+C,EAAS39C,YAE3B1L,KAAKL,OAAOklE,cAGrB,GAAIqH,EACFD,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,EAAU,GACpDC,EAAYtpD,KAAKqlD,gBACZ,CAGL,GAFA4mB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,IAAKi+C,EAAS39C,WAAY49C,EAAU59C,YAExD1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAhBdmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAWN,OAAQ9Q,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASwyC,MAAOhC,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASwyC,MAAOhC,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASyyC,MAAOjC,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASyyC,MACT,EAAAzyC,SAASwyC,MACbhC,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJAjsE,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKpL,KAAKqlD,YAAY35C,YAEnC/L,EAAOklE,cAEhB,QACEr6D,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAMqV,aAAcupD,GAAW,EACpC,KAAK,EAAA5+D,MAAMoV,MAKT,GAJAspD,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,EAAe3f,SACvDC,EAAWrpD,KAAKqlD,YAGZrlD,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB07B,EAAS17B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAaiB,aAC1D,GAAImZ,EAAU,CACZvpB,EAAOnQ,KAAKmsE,sBAAsBzyC,EAAU7oB,EAAMm7D,EAAUl7D,EAAOL,GACnE,OAOJ,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKi+C,EAAS39C,YAE3B1L,KAAKL,OAAOklE,cAGrB,GAAIqH,EACFD,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,EAAU,GACpDC,EAAYtpD,KAAKqlD,gBACZ,CAGL,GAFA4mB,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,GAC1CC,EAAYtpD,KAAKqlD,cACbkE,EAAa,EAAAljC,KAAKmjC,kBAAkBH,EAAUC,GAAW,IAiB3D,OALAtpD,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,IAAKi+C,EAAS39C,WAAY49C,EAAU59C,YAExD1L,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAhBdmH,EAAWhsE,KAAKgqE,kBAAkBgC,EAChC3iB,EAAUA,EAAWE,GACrB,GAAO,EACP14C,GAEFo7D,EAAYjsE,KAAKgqE,kBAAkBiC,EACjC3iB,EAAWA,EAAYC,GACvB,GAAO,EACPz4C,GAWN,OAAQ9Q,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS0yC,OAAQlC,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS0yC,OAAQlC,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS2yC,OAAQnC,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH97D,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAAS2yC,OACT,EAAA3yC,SAAS0yC,OACblC,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJAjsE,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKpL,KAAKqlD,YAAY35C,YAEnC/L,EAAOklE,cAEhB,QACEr6D,QAAO,GACP2F,EAAOxQ,EAAOklE,cAGlB,MAKF,KAAK,EAAAv3D,MAAMyuC,oBAAqB,CAC9B,IAAIhlB,EAAO/2B,KAAKu5D,YACZqS,EAAqC,GAAdrE,EAC3ByE,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,EAAe8C,WAAYD,GACnEviB,EAAWrpD,KAAKqlD,YAEhB,IAAI+oB,EAAYr3C,EAAKouC,OAOrB,GANAnlE,KAAKu5D,YAAc6U,EACnBA,EAAUjd,qBAAqB6a,GAC/BC,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,EAAiC,EAAvBuiB,GACpDtiB,EAAYD,EAGR0f,GAAkB,EAAA1iD,KAAKziB,MAAQmlE,GAAkB,EAAA1iD,KAAKG,KACxDylD,EAAYjsE,KAAKquE,6BAA6BD,EAAWnC,EAAW3iB,GACpE8kB,EAAUhJ,mBACVplE,KAAKu5D,YAAcxiC,EACnB5mB,EAAOxQ,EAAOu6D,GACZl6D,KAAKimE,cAAc+F,EAAU3iB,GAC7BrpD,KAAKimE,cAAcgG,EAAW3iB,GAC9B3pD,EAAOyD,IAAI,IAEbpD,KAAKqlD,YAAc,EAAAh/B,KAAKziB,SAEnB,CAGL,GAAIylD,EAASgW,UAAW,CACtB,IAAIiP,EAAyBtuE,KAAKi4D,oBAAoBlrD,IAAIi/D,GACtDuC,EAA0BvuE,KAAKi4D,oBAAoBlrD,IAAIk/D,GACvDhL,EAAOlqC,EAAKw3B,aAAalF,GAC7B2iB,EAAWrsE,EAAOsiE,UAAUhB,EAAKvsC,MAAOs3C,GAIxC,IAAIwC,GAAmB,EACnBF,GAA0BC,EACvBD,GAGHrC,EAAYjsE,KAAKs/D,WAAW2M,GAC5BsC,GAA0B,GAH1BC,GAAmB,EAKI,GAAdjH,IACX0E,EAAYjsE,KAAKyuE,iBAAiBxC,EAAW3iB,EAAW8kB,EAAWr3C,IAGrE,IAAI23C,EAAa,IAAIjnE,MACjB6mE,GACFI,EAAWzU,QACTj6D,KAAKmiE,YACHxiE,EAAO2gE,UAAUW,EAAKvsC,MAAO20B,EAAShR,kBAI5C4zB,EAAYjsE,KAAKquE,6BAA6BD,EAAWnC,EAAW3iB,EAAWolB,GAC/EN,EAAUhJ,mBACVplE,KAAKu5D,YAAcxiC,EAEnB5mB,EAAOxQ,EAAOu6D,GACZl6D,KAAKimE,cAAc+F,EAAU3iB,GAC7B4iB,EACAuC,EACIxuE,KAAKs/D,WACH3/D,EAAO2gE,UAAUW,EAAKvsC,MAAO20B,EAAShR,iBAExC14C,EAAO2gE,UAAUW,EAAKvsC,MAAO20B,EAAShR,kBAExCi2B,GAA0BC,IAAyBvuE,KAAKi4D,oBAAoBxxC,IAAItW,GAChF8wD,GAAMlqC,EAAKg4B,cAAckS,QAS7B,GALAgL,EAAYjsE,KAAKquE,6BAA6BD,EAAWnC,EAAW3iB,GACpE8kB,EAAUhJ,mBACVplE,KAAKu5D,YAAcxiC,EAGf5mB,EAAOxQ,EAAO2rC,gBAAgB0gC,GAAU,EAAM,GAChD77D,EAAOxQ,EAAOu6D,GACZl6D,KAAKimE,cAAc+F,EAAUhsE,KAAKqlD,aAClC4mB,EACA97D,OAIG,CACL,IAAIu3D,EAAY3wC,EAAKw3B,aAAalF,GAC7BtyB,EAAK47B,YAAYqZ,EAAU3iB,IAAWtyB,EAAK03B,aAAaiZ,EAAUhzC,MAAO,EAAA44B,WAAWyC,SACrFh5B,EAAKiqC,UAAUgL,EAAU3iB,IAAWtyB,EAAK03B,aAAaiZ,EAAUhzC,MAAO,EAAA44B,WAAWxE,SACtF34C,EAAOxQ,EAAOu6D,GACZl6D,KAAKimE,cAActmE,EAAOsiE,UAAUyF,EAAUhzC,MAAOs3C,GAAW3iB,GAChE4iB,EACAtsE,EAAO2gE,UAAUoH,EAAUhzC,MAAO20B,EAAShR,iBAE7CthB,EAAKg4B,cAAc2Y,GAGvB1nE,KAAKqlD,YAAcgE,EAErB,MAEF,KAAK,EAAA/7C,MAAM0uC,QAAS,CAClB,IAAIjlB,EAAO/2B,KAAKu5D,YACZqS,EAAqC,GAAdrE,EAC3ByE,EAAWhsE,KAAKg+D,kBAAkBntD,EAAMk4D,EAAe8C,WAAYD,GACnEviB,EAAWrpD,KAAKqlD,YAEhB,IAAI+oB,EAAYr3C,EAAKouC,OAOrB,GANAnlE,KAAKu5D,YAAc6U,EACnBA,EAAUtc,sBAAsBka,GAChCC,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOu4C,EAAiC,EAAvBuiB,GACpDtiB,EAAYD,EAGR0f,GAAkB,EAAA1iD,KAAKziB,MAAQmlE,GAAkB,EAAA1iD,KAAKG,KACxDylD,EAAYjsE,KAAKquE,6BAA6BD,EAAWnC,EAAW5iB,GACpE+kB,EAAUhJ,mBACVplE,KAAKu5D,YAAcxiC,EACnB5mB,EAAOxQ,EAAOu6D,GACZl6D,KAAKimE,cAAc+F,EAAU3iB,GAC7B1pD,EAAOyD,IAAI,GACXpD,KAAKimE,cAAcgG,EAAW3iB,IAEhCtpD,KAAKqlD,YAAc,EAAAh/B,KAAKziB,SAEnB,CAGL,GAAIylD,EAASgW,UAAW,CACtB,IAAIiP,EAAyBtuE,KAAKi4D,oBAAoBlrD,IAAIi/D,GACtDuC,EAA0BvuE,KAAKi4D,oBAAoBlrD,IAAIk/D,GACvDhL,EAAOlqC,EAAKw3B,aAAalF,GAC7B2iB,EAAWrsE,EAAOsiE,UAAUhB,EAAKvsC,MAAOs3C,GAIxC,IAAI2C,GAAmB,EACnBL,GAA0BC,EACvBD,GAGHrC,EAAYjsE,KAAKs/D,WAAW2M,GAC5BsC,GAA0B,GAH1BI,GAAmB,EAKI,GAAdpH,IACX0E,EAAYjsE,KAAKyuE,iBAAiBxC,EAAW3iB,EAAW8kB,EAAWr3C,IAGrE,IAAI23C,EAAa,IAAIjnE,MACjB6mE,GAGFI,EAAWzU,QACTj6D,KAAKmiE,YACHxiE,EAAO2gE,UAAUW,EAAKvsC,MAAO20B,EAAShR,kBAI5C4zB,EAAYjsE,KAAKquE,6BAA6BD,EAAWnC,EAAW3iB,EAAWolB,GAC/EN,EAAUhJ,mBACVplE,KAAKu5D,YAAcxiC,EAEnB5mB,EAAOxQ,EAAOu6D,GACZl6D,KAAKimE,cAAc+F,EAAU3iB,GAC7BslB,EACI3uE,KAAKs/D,WACH3/D,EAAO2gE,UAAUW,EAAKvsC,MAAO20B,EAAShR,iBAExC14C,EAAO2gE,UAAUW,EAAKvsC,MAAO20B,EAAShR,gBAC1C4zB,IAEEqC,GAA0BC,IAAyBvuE,KAAKi4D,oBAAoBxxC,IAAItW,GAChF8wD,GAAMlqC,EAAKg4B,cAAckS,QAS7B,GALAgL,EAAYjsE,KAAKquE,6BAA6BD,EAAWnC,EAAW3iB,GACpE8kB,EAAUhJ,mBACVplE,KAAKu5D,YAAcxiC,EAGf5mB,EAAOxQ,EAAO2rC,gBAAgB0gC,GAAU,EAAM,GAChD77D,EAAOxQ,EAAOu6D,GACZl6D,KAAKimE,cAAc+F,EAAU3iB,GAC7Bl5C,EACA87D,OAIG,CACL,IAAIhL,EAAOlqC,EAAKw3B,aAAalF,GACxBtyB,EAAK47B,YAAYqZ,EAAU3iB,IAAWtyB,EAAK03B,aAAawS,EAAKvsC,MAAO,EAAA44B,WAAWyC,SAChFh5B,EAAKiqC,UAAUgL,EAAU3iB,IAAWtyB,EAAK03B,aAAawS,EAAKvsC,MAAO,EAAA44B,WAAWxE,SACjF34C,EAAOxQ,EAAOu6D,GACZl6D,KAAKimE,cAActmE,EAAOsiE,UAAUhB,EAAKvsC,MAAOs3C,GAAW3iB,GAC3D1pD,EAAO2gE,UAAUW,EAAKvsC,MAAO20B,EAAShR,gBACtC4zB,GAEFl1C,EAAKg4B,cAAckS,GAGvBjhE,KAAKqlD,YAAcgE,EAErB,MAEF,QACE7+C,QAAO,GACP2F,EAAOnQ,KAAKL,OAAOklE,cAGvB,IAAKqH,EAAU,OAAO/7D,EACtB,IAAIiV,EAAWplB,KAAKolB,SAChBmU,EAASnU,EAAS2iC,iBAAiBl3C,EAAM7Q,KAAKu5D,aAClD,IAAKhgC,EAAQ,OAAO55B,EAAOklE,cAC3B,IAAIntB,EAAatyB,EAASuiC,iBAAiBpuB,IAAW,EAAAlT,KAAKG,KAC3D,OAAKxmB,KAAKqlD,YAAYupB,uBAAuBl3B,GAOtC13C,KAAK6uE,eACVt1C,EACAppB,EACAnQ,KAAKqlD,YACLx0C,EACAuU,EAAS08B,sBACT18B,EAAS28B,yBACTgnB,GAAkB,EAAA1iD,KAAKG,OAbvBxmB,KAAK8oB,MACH,EAAAhe,eAAeiiD,mCACft8C,EAAWrF,MAAOpL,KAAKqlD,YAAY35C,WAAYgsC,EAAWhsC,YAErD/L,EAAOklE,eAaV,qBACN/X,EACAxrD,EACAygE,EACAvW,GAIA,OAAOxrD,KAAKotE,eAAetgB,EAAkB,CAAEiV,GAAavW,GAAY,GAGlE,sBACNsB,EACAj8C,EACAm7D,EACAl7D,EACA06C,GAEA,IAAIlC,EACJ,GAAIwD,EAAiBh/B,GAAG,EAAAzrB,YAAY2vB,UAAW,CAC7C,IAAI8C,EAAgBtqB,OAAOsiD,EAAiBjxC,QAASrR,OAAOsqB,EAAclnB,MAAQ,EAAA2R,YAAY9E,OAC9F6uC,EAAYwD,EAAiB72C,UAAU0gB,eAAe,QAUtD2yB,EAAYwD,EAAiB72C,UAAU0gB,eAAe,GAExD,IAAIs1C,EAAYjsE,KAAKg+D,kBAAkBltD,EAAOw4C,EAAW,GACzD,OAAOtpD,KAAKotE,eAAetgB,EAAkB,CAAEkf,EAAUC,GAAazgB,GAGhE,kBAAkB/6C,EAAwB62D,EAA6ByB,GAC7E,IACI3jD,EADUplB,KAAK0yB,QACItN,SACnB2R,EAAO/2B,KAAKu5D,YACZhgC,EAASnU,EAAS2iC,iBAAiBt3C,EAAYsmB,GACnD,IAAKwC,EAAQ,OAAOv5B,KAAKL,OAAOklE,cAChC,IAIIntB,EAJAo3B,EAAiB1pD,EAAS08B,sBAC1BrwC,EAAoB2T,EAAS28B,yBAIjC,OAAQxoB,EAAO3rB,MACb,KAAK,EAAA2R,YAAY1G,OAEf,IAAK7Y,KAAKm9D,cAAsB5jC,GAAS,OAAOv5B,KAAKL,OAAOklE,cAG9D,KAAK,EAAAtlD,YAAYoV,MACjB,KAAK,EAAApV,YAAYiO,MACfkqB,EAAmCne,EAAQ7qB,KACvC6qB,EAAOtO,aAAa,EAAAzL,eAAerG,SAASnZ,KAAK+uE,YAAYt+D,GACjE,MAEF,KAAK,EAAA8O,YAAY6N,mBAAoB,CACnC,IAAIE,EAAsCiM,EAAQjM,gBAClD,IAAKA,EAKH,OAJAttB,KAAK8oB,MACH,EAAAhe,eAAekkE,oEACfv+D,EAAWrF,MAAkBmuB,EAAQtU,cAEhCjlB,KAAKL,OAAOklE,cAErB,IAAI7sC,EAAiBh4B,KAAKolB,SAAS4H,gBAAgBM,EAAiB,KAAM,EAAAu1B,UAAW,EAAAhB,WAAWO,QAChG,IAAKpqB,EAAgB,OAAOh4B,KAAKL,OAAOklE,cACxCr6D,OAAyD,GAAlDwtB,EAAe/hB,UAAU0gB,eAAexqB,QAC/CurC,EAAa1f,EAAe/hB,UAAU0gB,eAAe,GACjDrJ,EAAgBrC,aAAa,EAAAzL,eAAerG,SAASnZ,KAAK+uE,YAAYt+D,GAC1E,MAEF,KAAK,EAAA8O,YAAYgO,SAAU,CACzB,IAAIyK,EAA4BuB,EAAQvB,eACxC,IAAKA,EAKH,OAJAh4B,KAAK8oB,MACH,EAAAhe,eAAekkE,oEACfv+D,EAAWrF,MAAkBmuB,EAAQtU,cAEhCjlB,KAAKL,OAAOklE,cAErBr6D,OAAyD,GAAlDwtB,EAAe/hB,UAAU0gB,eAAexqB,QAC/CurC,EAAa1f,EAAe/hB,UAAU0gB,eAAe,GACjDqB,EAAe/M,aAAa,EAAAzL,eAAerG,SAASnZ,KAAK+uE,YAAYt+D,GACzE,MAEF,KAAK,EAAA8O,YAAY0Y,eAAgB,CAC/B,IAAIpc,EAA0B0d,EAAQ1d,OACtCrR,OAAOqR,EAAOjO,MAAQ,EAAA2R,YAAY9E,OAClC,IAAIyd,EAAcnB,EAAKjJ,GAAG,OACtBmhD,EAAqBpzD,EAAQsc,eAAe,EAAA7Y,aAAaM,YAAasY,GAC1E,IAAK+2C,EAAY,CAaf,OAZyBpzD,EAAQsc,eAAe,EAAA7Y,aAAaK,YAAauY,GAOxEl4B,KAAK8oB,MACH,EAAAhe,eAAeokE,+CACfz+D,EAAWrF,MAAeyQ,EAAQoJ,cAPpCjlB,KAAK8oB,MACH,EAAAhe,eAAeg5C,qCACfrzC,EAAWrF,MAAeyQ,EAAQoJ,cAQ/BjlB,KAAKL,OAAOklE,cAErBr6D,OAAqD,GAA9CykE,EAAWh5D,UAAU0gB,eAAexqB,QAC3CurC,EAAau3B,EAAWh5D,UAAU0gB,eAAe,GAC7Cs4C,EAAWhkD,aAAa,EAAAzL,eAAerG,SAASnZ,KAAK+uE,YAAYt+D,IAChEynB,GAAel4B,KAAKgkB,QAAQkzC,UAC/Bl3D,KAAKk3D,SACH,EAAApsD,eAAeqkE,2CACf1+D,EAAWrF,OAGf,MAEF,QAKE,OAJApL,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACf9e,EAAWrF,OAENpL,KAAKL,OAAOklE,cAKvBr6D,OAAOktC,GAAc,EAAArxB,KAAKG,MAC1B,IAAIu7C,EAAY/hE,KAAKg+D,kBAAkBsJ,EAAiB5vB,EAAY,IACpE,OAAO13C,KAAK6uE,eACVt1C,EACAwoC,EACA/hE,KAAKqlD,YACL50C,EACAq+D,EACAr9D,EACAs3D,GAAkB,EAAA1iD,KAAKG,MAK3B,eAEE+S,EAEAwoC,EAEAzrD,EAEAgxD,EAEAwH,EAEAM,EAEAC,GAEA,IAAI1vE,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YAKhB,OAAQhgC,EAAO3rB,MACb,KAAK,EAAA2R,YAAYoV,MACf,OAAIoC,EAAK65B,YAAoBr3B,EAAQ7E,MAAO,EAAA44B,WAAWwC,UAAU,IAC/D9vD,KAAK8oB,MACH,EAAAhe,eAAekkE,oEACf1H,EAAgBl8D,MAAOmuB,EAAOtU,cAEhCjlB,KAAKqlD,YAAcgqB,EAAc91C,EAAQ7qB,KAAO,EAAA2X,KAAKG,KAC9C7mB,EAAOklE,eAET7kE,KAAKsvE,oBAA2B/1C,EAAQwoC,EAAWzrD,EAAW+4D,GAEvE,KAAK,EAAA9vD,YAAY1G,OACf,OAAK7Y,KAAKm9D,cAAsB5jC,GAC5BA,EAAO5J,MAAM,EAAAttB,YAAY6rB,MAAQ,EAAA7rB,YAAY8tB,WAC/CnwB,KAAK8oB,MACH,EAAAhe,eAAekkE,oEACf1H,EAAgBl8D,MAChBmuB,EAAOtU,cAETjlB,KAAKqlD,YAAcgqB,EAAe91C,EAAQ7qB,KAAO,EAAA2X,KAAKG,KAC/C7mB,EAAOklE,eAET7kE,KAAKggE,qBAA6BzmC,EAAQwoC,EAAWsN,GAVZ1vE,EAAOklE,cAYzD,KAAK,EAAAtlD,YAAYiO,MAAO,CACtB,IAAIq6B,EAA0BtuB,EAAQsuB,gBACtC,OACUtuB,EAAQzL,GAAG,EAAAzrB,YAAY8tB,WAE7B4G,EAAKytB,eAAe12B,GAAG,EAAAzrB,YAAYsY,cACnCktC,EASG7nD,KAAKuvE,oBAA2Bh2C,EACrCwoC,EAEA/hE,KAAKg+D,kBAAkBxzD,OAAOskE,GAAiB9uE,KAAKgkB,QAAQuC,WAC5D8oD,IAVArvE,KAAK8oB,MACH,EAAAhe,eAAekkE,oEACf1H,EAAgBl8D,MAAemuB,EAAQtU,cAElCtlB,EAAOklE,eASlB,KAAK,EAAAtlD,YAAY6N,mBAAoB,CACnC,IAAIE,EAAsCiM,EAAQjM,gBAClD,IAAKA,EAKH,OAJAttB,KAAK8oB,MACH,EAAAhe,eAAekkE,oEACf1H,EAAgBl8D,MAAOmuB,EAAOtU,cAEzBtlB,EAAOklE,cAEhB,IAAI7sC,EAAiBh4B,KAAKolB,SAAS4H,gBAAgBM,EAAiB,KAAM,EAAAu1B,UAAW,EAAAhB,WAAWO,QAChG,IAAKpqB,EAAgB,OAAOr4B,EAAOklE,cACnCr6D,OAAyD,GAAlDwtB,EAAe/hB,UAAU0gB,eAAexqB,QAC/C,IAAImK,EAAY0hB,EAAe/hB,UAAU0gB,eAAe,GAGxD,GAFI32B,KAAKi4D,oBAAoBlrD,IAAIg1D,KAAYA,EAAY/hE,KAAKwvE,gBAAgBzN,EAAWzrD,EAAWygB,KAE/Fs4C,EAAK,OAAOrvE,KAAKotE,eAAep1C,EAAgB,CAAE+pC,GAAauF,GAEpE,IAAIj6C,EAAkB7iB,OAA2B+uB,EAAQlM,iBACrD0K,EAAiB/3B,KAAKolB,SAAS4H,gBAAgBK,EAAiB,KAAM,EAAAw1B,UAAW,EAAAhB,WAAWO,QAChG,IAAKrqB,EAAgB,OAAOp4B,EAAOklE,cACnC,IAAIh2D,EAAakpB,EAAe9hB,UAAUpH,WAC1CrE,OAAO8L,GAAazH,GACpB,IAAI4gE,EAAmB5gE,EAAWwpC,eAClC,OAAO14C,EAAO8gC,MAAM,KAAM,CACxBzgC,KAAKotE,eAAep1C,EAAgB,CAAE+pC,GAAauF,GACnDtnE,KAAKotE,eAAer1C,EAAgB,KAAMuvC,IACzCmI,GAEL,KAAK,EAAAlwD,YAAYgO,SAAU,CACzB,IAAIgF,EAA6BgH,EAAQ1d,OACzCrR,OAAO+nB,EAAS3kB,MAAQ,EAAA2R,YAAY9E,OACpC,IAAIud,EAA4BuB,EAAQvB,eACxC,IAAKA,EAKH,OAJAh4B,KAAK8oB,MACH,EAAAhe,eAAekkE,oEACf1H,EAAgBl8D,MAAOmuB,EAAOtU,cAEzBtlB,EAAOklE,cAEhBr6D,OAAyD,GAAlDwtB,EAAe/hB,UAAU0gB,eAAexqB,QAC/C,IAAImK,EAAY0hB,EAAe/hB,UAAU0gB,eAAe,GAGxD,GAFI32B,KAAKi4D,oBAAoBlrD,IAAIg1D,KAAYA,EAAY/hE,KAAKwvE,gBAAgBzN,EAAWzrD,EAAWygB,KAE/Fs4C,EAAK,CACR,IAAIK,EAAW1vE,KAAKg+D,kBAAkBxzD,OAAOskE,GAAiBv8C,EAAS7jB,MACvE,OAAO1O,KAAKotE,eAAep1C,EAAgB,CAAE03C,EAAU3N,GAAauF,GAGtE,IAAIvvC,EAAiBvtB,OAAkB+uB,EAAQxB,gBAC3ClpB,EAAakpB,EAAe9hB,UAAUpH,WACtC4gE,EAAmB5gE,EAAWwpC,eAC9Bq3B,EAAW1vE,KAAKg+D,kBAAkBxzD,OAAOskE,GAAiB9uE,KAAKgkB,QAAQuC,WACvE06C,EAAOlqC,EAAKw3B,aAAa1/C,GACzBsvB,EAAMx+B,EAAO8gC,MAAM,KAAM,CAC3BzgC,KAAKotE,eAAep1C,EAAgB,CAClCr4B,EAAOsiE,UAAUhB,EAAKvsC,MAAOg7C,GAC7B3N,GACCuF,GACHtnE,KAAKotE,eAAer1C,EAAgB,CAClCp4B,EAAO2gE,UAAUW,EAAKvsC,MAAO+6C,IAC5BnI,IACFmI,GAEH,OADA14C,EAAKg4B,cAAckS,GACZ9iC,EAET,KAAK,EAAA5e,YAAY0Y,eAAgB,CAC/B,IAAI1F,EAAmCgH,EAAQ1d,OAC/CrR,OAAO+nB,EAAS3kB,MAAQ,EAAA2R,YAAY9E,OACpC,IAAIyd,EAAcnB,EAAKjJ,GAAG,OACtBm6B,EAAa11B,EAAS4F,eAAe,EAAA7Y,aAAaK,YAAauY,GACnE,IAAK+vB,EAKH,OAJAjoD,KAAK8oB,MACH,EAAAhe,eAAeg5C,qCACfwjB,EAAgBl8D,MAAOmnB,EAAStN,cAE3BtlB,EAAOklE,cAEhB,IAAIoK,EAAa18C,EAAS4F,eAAe,EAAA7Y,aAAaM,YAAasY,GACnE,IAAK+2C,EAMH,OALAjvE,KAAK8oB,MACH,EAAAhe,eAAeokE,+CACf5H,EAAgBl8D,MAAOmnB,EAAStN,cAElCjlB,KAAKqlD,YAAcgqB,EAAMpnB,EAAWhyC,UAAUpH,WAAa,EAAAwX,KAAKG,KACzD7mB,EAAOklE,cAEhBr6D,OAAqD,GAA9CykE,EAAWh5D,UAAU0gB,eAAexqB,QAC3C,IAAImK,EAAY24D,EAAWh5D,UAAU0gB,eAAe,GAChD32B,KAAKi4D,oBAAoBlrD,IAAIg1D,KAAYA,EAAY/hE,KAAKwvE,gBAAgBzN,EAAWzrD,EAAWygB,IACpG,IAAI24C,EAAW1vE,KAAKg+D,kBAAkBxzD,OAAOskE,GAAiBv8C,EAAS7jB,MACnEihE,EAAc3vE,KAAKg+D,kBAAkBxzD,OAAO4kE,GAAkB,EAAA/oD,KAAKjjB,IAAK,GAC5E,GAAIisE,EAAK,CACP,IAAIO,EAAa74C,EAAKw3B,aAAah8B,EAAS7jB,MACxCmhE,EAAc94C,EAAKw3B,aAAavuD,KAAKqlD,aACrCx2C,EAAao5C,EAAWhyC,UAAUpH,WACtCkoB,EAAKg4B,cAAc6gB,GACnB,IAAIzxC,EAAMx+B,EAAO8gC,MAAM,KAAM,CAC3BzgC,KAAKotE,eAAe6B,EAAY,CAC9BtvE,EAAOsiE,UAAU2N,EAAWl7C,MAAOg7C,GACnC/vE,EAAOsiE,UAAU4N,EAAYn7C,MAAOi7C,GACpC5N,GACCuF,GACHtnE,KAAKotE,eAAenlB,EAAY,CAC9BtoD,EAAO2gE,UAAUsP,EAAWl7C,MAAOk7C,EAAWlhE,KAAK2pC,gBACnD14C,EAAO2gE,UAAUuP,EAAYn7C,MAAOm7C,EAAYnhE,KAAK2pC,iBACpDivB,IACFz4D,EAAWwpC,gBAGd,OAFAthB,EAAKg4B,cAAc8gB,GACnB94C,EAAKg4B,cAAc6gB,GACZzxC,EAEP,OAAOn+B,KAAKotE,eAAe6B,EAAY,CACrCS,EACAC,EACA5N,GACCuF,IAQT,OAJAtnE,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACf+3C,EAAgBl8D,OAEXzL,EAAOklE,cAIR,oBAENpuC,EAEAsrC,EAEAzrD,EAEA+4D,GAEA,IAAI1vE,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YACZ7qD,EAAO+nB,EAAM/nB,KACjBlE,OAAOkE,GAAQ,EAAA2X,KAAKG,MACpB,IAAIgQ,EAAaC,EAAM/B,MAQvB,GANIhmB,EAAKof,GAAG,QACLxX,EAAUwX,GAAG,MAAuBiJ,EAAKiqC,UAAUe,EAAWrzD,GAAOqoB,EAAK03B,aAAaj4B,EAAY,EAAA82B,WAAWxE,SAC9G/xB,EAAKq3B,eAAe53B,EAAY,EAAA82B,WAAWxE,UAElD/xB,EAAK03B,aAAaj4B,EAAY,EAAA82B,WAAW0C,aAErCthD,EAAK2wD,UAAW,CAClB,IAAIyQ,EAAkB9vE,KAAKi4D,oBAAoBlrD,IAAIg1D,GACnD,OAAIhrC,EAAK85B,eAAer6B,EAAY,EAAA82B,WAAWwD,eAC7CiR,EAAY/hE,KAAK+vE,YACfhO,EACApiE,EAAO2gE,UAAU9pC,EAAY9nB,EAAK2pC,gBAClCy3B,GAEET,GACFrvE,KAAKqlD,YAAc32C,EACZ/O,EAAOsiE,UAAUzrC,EAAYurC,KAEpC/hE,KAAKqlD,YAAc,EAAAh/B,KAAKG,KACjB7mB,EAAO0gE,UAAU7pC,EAAYurC,MAGtChrC,EAAKq3B,eAAe53B,EAAY,EAAA82B,WAAW2C,wBAC3Cl5B,EAAK03B,aAAaj4B,EAAY,EAAA82B,WAAWoB,UACpCohB,IAAiB/N,EAAY/hE,KAAKs/D,WAAWyC,IAC9CsN,GACFrvE,KAAKqlD,YAAc32C,EACZ/O,EAAOsiE,UAAUzrC,EAAYurC,KAEpC/hE,KAAKqlD,YAAc,EAAAh/B,KAAKG,KACjB7mB,EAAO0gE,UAAU7pC,EAAYurC,KAQxC,OAJIrzD,EAAKof,GAAG,MACLiJ,EAAK47B,YAAYoP,EAAWrzD,GAC5BqoB,EAAKq3B,eAAe53B,EAAY,EAAA82B,WAAWyC,SADRh5B,EAAK03B,aAAaj4B,EAAY,EAAA82B,WAAWyC,UAG/Esf,GACFrvE,KAAKqlD,YAAc32C,EACZ/O,EAAOsiE,UAAUzrC,EAAYurC,KAEpC/hE,KAAKqlD,YAAc,EAAAh/B,KAAKG,KACjB7mB,EAAO0gE,UAAU7pC,EAAYurC,IAMlC,qBAENh0C,EAEAg0C,EAEAsN,GAEA,IAAI1vE,EAASK,KAAKL,OACd+O,EAAOqf,EAAOrf,KAClBlE,OAAOkE,GAAQ,EAAA2X,KAAKG,MACpB,IAAIy3C,EAAavvD,EAAK2pC,eAEtB,GAAI3pC,EAAK2wD,UAAW,CAClB,IAAIyQ,EAAkB9vE,KAAKi4D,oBAAoBlrD,IAAIg1D,GAQnD,OAPAA,EAAYpiE,EAAO06D,WAAWtsC,EAAO9I,aACnCjlB,KAAK+vE,YACHhO,EACApiE,EAAOw6D,WAAWpsC,EAAO9I,aAAcg5C,GACvC6R,IAGAT,GACFrvE,KAAKqlD,YAAc32C,EACZ/O,EAAO8gC,MAAM,KAAM,CACxBshC,EACApiE,EAAOw6D,WAAWpsC,EAAO9I,aAAcg5C,IACtCA,KAEHj+D,KAAKqlD,YAAc,EAAAh/B,KAAKG,KACjBu7C,GAIT,OADAA,EAAY/hE,KAAKiqE,uBAAuBlI,EAAWrzD,GAC/C2gE,GACFrvE,KAAKqlD,YAAc32C,EACZ/O,EAAO8gC,MAAM,KAAM,CACxB9gC,EAAO06D,WAAWtsC,EAAO9I,aAAc88C,GACvCpiE,EAAOw6D,WAAWpsC,EAAO9I,aAAcg5C,IACtCA,KAEHj+D,KAAKqlD,YAAc,EAAAh/B,KAAKG,KACjB7mB,EAAO06D,WAAWtsC,EAAO9I,aAC9B88C,IAOA,oBAENnoC,EAEAmoC,EAEA2N,EAEAL,GAEA,IAAI1vE,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YACZpN,EAAYvyB,EAAMlrB,KAClBshE,EAAkB7jB,EAAU9T,eAChC7tC,OAAOovB,EAAM/d,OAAOjO,MAAQ,EAAA2R,YAAY9E,OACxC,IAAIic,EAAmBkD,EAAM/d,OAAQnN,KACjCmzD,EAAiBnrC,EAAS2hB,eAE9B,GAAI8T,EAAUkT,WAAa3oC,EAAS2oC,UAAW,CAC7C,IAGIlhC,EAHA8xC,EAAWl5C,EAAKw3B,aAAa73B,EAAU,EAAAw5C,eAAenO,IAEtD+N,EAAkB9vE,KAAKi4D,oBAAoBlrD,IAAIg1D,GAEnD,GAAIsN,EAAK,CACP,IAAIc,EAAYp5C,EAAKw3B,aAAapC,GAC7Bp1B,EAAK47B,YAAYoP,EAAW5V,IAAYp1B,EAAK03B,aAAa0hB,EAAUz7C,MAAO,EAAA44B,WAAWyC,SACvFh5B,EAAKiqC,UAAUe,EAAW5V,IAAYp1B,EAAK03B,aAAa0hB,EAAUz7C,MAAO,EAAA44B,WAAWxE,SACxF3qB,EAAMx+B,EAAO8gC,MAAM,KAAM,CACvB9gC,EAAOyiE,MAAMjW,EAAUnV,SACrBr3C,EAAOsiE,UAAUgO,EAASv7C,MAAOg7C,GACjC1vE,KAAK+vE,YACHpwE,EAAOsiE,UAAUkO,EAAUz7C,MAAOqtC,GAClCpiE,EAAOqiE,KAAK7V,EAAUnV,SAAUmV,EAAUr+B,GAAG,GAC3CnuB,EAAO2gE,UAAU2P,EAASv7C,MAAOmtC,GACjCmO,EAAiBp2C,EAAMjC,cAEzBm4C,GAEFE,EAAiBp2C,EAAMjC,cAEzBh4B,EAAO2gE,UAAU6P,EAAUz7C,MAAOs7C,IACjCA,GACHj5C,EAAKg4B,cAAcohB,GACnBnwE,KAAKqlD,YAAc8G,OAEnBhuB,EAAMx+B,EAAOyiE,MAAMjW,EAAUnV,SAC3Br3C,EAAOsiE,UAAUgO,EAASv7C,MAAOg7C,GACjC1vE,KAAK+vE,YACHhO,EACApiE,EAAOqiE,KAAK7V,EAAUnV,SAAUmV,EAAUr+B,GAAG,GAC3CnuB,EAAO2gE,UAAU2P,EAASv7C,MAAOmtC,GACjCmO,EAAiBp2C,EAAMjC,cAEzBm4C,GAEFE,EAAiBp2C,EAAMjC,cAEzB33B,KAAKqlD,YAAc,EAAAh/B,KAAKG,KAG1B,OADAuQ,EAAKg4B,cAAckhB,GACZ9xC,EAEP,GAAIkxC,EAAK,CACP,IAAIpO,EAAOlqC,EAAKw3B,aAAapC,GACxBp1B,EAAK47B,YAAYoP,EAAW5V,IAAYp1B,EAAK03B,aAAawS,EAAKvsC,MAAO,EAAA44B,WAAWyC,SAClFh5B,EAAKiqC,UAAUe,EAAW5V,IAAYp1B,EAAK03B,aAAawS,EAAKvsC,MAAO,EAAA44B,WAAWxE,SACnF,IAAI3qB,EAAMx+B,EAAO8gC,MAAM,KAAM,CAC3B9gC,EAAOyiE,MAAMjW,EAAUnV,SACrB04B,EACA/vE,EAAOsiE,UAAUhB,EAAKvsC,MAAOqtC,GAC7BiO,EAAiBp2C,EAAMjC,cAEzBh4B,EAAO2gE,UAAUW,EAAKvsC,MAAOs7C,IAC5BA,GAGH,OAFAj5C,EAAKg4B,cAAckS,GACnBjhE,KAAKqlD,YAAc8G,EACZhuB,EAGP,OADAn+B,KAAKqlD,YAAc,EAAAh/B,KAAKG,KACjB7mB,EAAOyiE,MAAMjW,EAAUnV,SAC5B04B,EACA3N,EACAiO,EAAiBp2C,EAAMjC,cAOvB,sBAENlnB,EAEAs4D,EAEAxB,GAGA,IAAI5nE,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YAGhB,GAAI9oD,EAAWA,WAAW7C,MAAQ,EAAAJ,SAAS6N,MAAO,CAChD,IAAI0b,EAAO/2B,KAAKu5D,YACZ/U,EAAiBztB,EAAKytB,eAC1B,IAAKA,EAAe12B,GAAG,EAAAzrB,YAAYsY,aAKjC,OAJA3a,KAAK8oB,MACH,EAAAhe,eAAeslE,8FACf3/D,EAAWrF,OAENzL,EAAOklE,cAGhB,IAAI/vC,EAAgBtqB,OAAOg6C,EAAe3oC,QAASrR,OAAOsqB,EAAclnB,MAAQ,EAAA2R,YAAY9E,OAC5F,IAAI41D,EAAoB7lE,OAAesqB,EAAeqE,MAClDwwB,EAAYn/C,OAAOusB,EAAK6yB,YAAY,EAAA5mD,YAAYsC,QAChD47D,EAAiBlhE,KAAKgkB,QAAQk9C,eAO9BoP,EAAUtwE,KAAKuwE,kBACjBvwE,KAAKwwE,kBAAkBH,EAAmB5/D,GAC1CA,EAAWb,UACXa,EACA9Q,EAAOu6D,GACLv6D,EAAO2gE,UAAU3W,EAAUj1B,MAAOwsC,GAClCvhE,EAAO2gE,UAAU3W,EAAUj1B,MAAOwsC,GAClClhE,KAAKs/D,WACHt/D,KAAKohE,eAAsBtsC,KAE9B,IAGHtqB,OAAO6lE,EAAkB3hE,KAAKsuD,aAAeh9D,KAAKi4D,oBAAoBlrD,IAAIujE,IAC1E,IAAItwC,EAAyB,CAC3BrgC,EAAO0gE,UAAU1W,EAAUj1B,MAAO47C,IAKpC,OAHAtwE,KAAKqhE,qCAA4CvsC,EAAekL,GAG5DjJ,EAAKpH,MACP,OAGA3vB,KAAK8oB,MACH,EAAAhe,eAAe2lE,kFACfhgE,EAAWrF,OAENzL,EAAOklE,gBAEhB9tC,EAAK5pB,IAAI,KACTnN,KAAKqlD,YAAc,EAAAh/B,KAAKG,KACjB7mB,EAAO+6D,QAAQ16B,IAIxB,IAGI/pB,EACAy6D,EAJAn3C,EAASv5B,KAAKolB,SAAS2iC,iBAAiBt3C,EAAWA,WAAYsmB,GACnE,IAAKwC,EAAQ,OAAO55B,EAAOklE,cAI3B,OAAQtrC,EAAO3rB,MAGb,KAAK,EAAA2R,YAAYwN,mBAAoB,CACnC,IAAI9qB,EAA+Bs3B,EAGnC,GAAIt3B,EAAUgpB,aAAa,EAAAzL,eAAe7G,SACxC,OAAO3Y,KAAK2wE,6BAA6B1uE,EAAWwO,EAAYs4D,GAGlE,IAAI+F,EAAiB9uE,KAAKolB,SAAS08B,sBAC/BvvB,EAAWvyB,KAAKolB,SAASilC,eAAe55C,EAAYxO,EAAW80B,GACnE,OAAKxE,EACEvyB,KAAKuwE,kBACVh+C,EACA9hB,EAAWb,UACXa,EACA8hB,EAASzE,GAAG,EAAAzrB,YAAY2vB,UACpBhyB,KAAKg+D,kBAAkBxzD,OAAOskE,GAAiB9uE,KAAKgkB,QAAQuC,WAC5D,EACJghD,GARoBvnE,KAAKL,OAAOklE,cAapC,KAAK,EAAAtlD,YAAYoV,MACf,GAAI1e,EAAoBsjB,EAAQ7qB,KAAKwoC,mBAAoB,CAErDw5B,EADUn3C,EAAQzL,GAAG,EAAAzrB,YAAYgyB,SACtB10B,EAAOyD,IAAIkjC,QAAgB/M,EAAQnF,uBAEnCz0B,EAAO2gE,UAAkB/mC,EAAQ7E,MAAO,EAAAyG,WAAWx0B,KAEhE,MAMA,OAJA3G,KAAK8oB,MACH,EAAAhe,eAAew/C,uGACf75C,EAAWrF,MAAemuB,EAAQ7qB,KAAKhD,YAElC/L,EAAOklE,cAGlB,KAAK,EAAAtlD,YAAY1G,OACf,GAAI5C,EAAqBsjB,EAAQ7qB,KAAKwoC,mBAAoB,CACxDw5B,EAAW/wE,EAAOw6D,WAAoB5gC,EAAQtU,aAAuBsU,EAAQ7qB,KAAK2pC,gBAClF,MAMA,OAJAr4C,KAAK8oB,MACH,EAAAhe,eAAew/C,uGACf75C,EAAWrF,MAAgBmuB,EAAQ7qB,KAAKhD,YAEnC/L,EAAOklE,cAGlB,KAAK,EAAAtlD,YAAYiO,MAAO,CACtB,IAAI9e,EAAe6qB,EAAQ7qB,KAC3B,GAAIuH,EAAYvH,EAAKwoC,mBAAoB,CACvC,IAAI43B,EAAiBtkE,OAAOxK,KAAKolB,SAAS08B,uBACtC4tB,EAAW1vE,KAAKg+D,kBAAkB8Q,EAAgB9uE,KAAKgkB,QAAQuC,WACnEmqD,EAAW/wE,EAAOqiE,KAChB,GACA,EACA0N,EACA,EAAAv0C,WAAWx0B,IACH4yB,EAAQ5B,cAElB,MAMA,OAJA33B,KAAK8oB,MACH,EAAAhe,eAAew/C,uGACf75C,EAAWrF,MAAOsD,EAAKhD,YAElB/L,EAAOklE,cAGlB,KAAK,EAAAtlD,YAAYkY,gBACfxhB,EAA6BsjB,EAAQtjB,UACrCy6D,EAAW1wE,KAAKg+D,kBAAkBvtD,EAAWA,WAA6B8oB,EAAQ7qB,KAAM,GACxF,MAGF,KAAK,EAAA6Q,YAAY6N,mBAAoB,CACnC,IAAIC,EAAkB7iB,OAA2B+uB,EAAQlM,iBACrD0K,EAAiB/3B,KAAKolB,SAAS4H,gBAAgBK,EAAiB,MACpE,IAAK0K,EAAgB,OAAOp4B,EAAOklE,cAGnC,GAFA6L,EAAW1wE,KAAKuwE,kBAAkBx4C,EAAgB,GAAItnB,EAAWA,cACjEwF,EAAYjW,KAAKqlD,YAAYnO,oBAM3B,OAJAl3C,KAAK8oB,MACH,EAAAhe,eAAew/C,uGACf75C,EAAWrF,MAAOpL,KAAKqlD,YAAY35C,YAE9B/L,EAAOklE,cAEhB,MAEF,KAAK,EAAAtlD,YAAYgO,SAAU,CACzB,IAAIwK,EAAiBvtB,OAAkB+uB,EAAQxB,gBAK/C,GAJA24C,EAAW1wE,KAAKuwE,kBAAkBx4C,EAAgB,GAAItnB,EAAWA,WAC/DzQ,KAAKg+D,kBAAkBxzD,OAAOxK,KAAKolB,SAAS08B,uBAAwB9hD,KAAKgkB,QAAQuC,cAEnFtQ,EAAYjW,KAAKqlD,YAAYnO,oBAM3B,OAJAl3C,KAAK8oB,MACH,EAAAhe,eAAew/C,uGACf75C,EAAWrF,MAAOpL,KAAKqlD,YAAY35C,YAE9B/L,EAAOklE,cAEhB,MAIF,QAAS,CACP,IAAIn2D,EAAO1O,KAAKolB,SAASuiC,iBAAiBpuB,GAY1C,OAXI7qB,EACF1O,KAAK8oB,MACH,EAAAhe,eAAei5C,8BACftzC,EAAWrF,MAAOsD,EAAKhD,YAGzB1L,KAAK8oB,MACH,EAAAhe,eAAe88C,2CACfn3C,EAAWrF,OAGRzL,EAAOklE,eAGlB,OAAO7kE,KAAK4wE,oBACV36D,EACAy6D,EACAjgE,EAAWb,UACXa,EACA,EACAs4D,GAAkB,EAAA1iD,KAAKG,MAInB,6BACNvkB,EACAwO,EACAs4D,GAEI9mE,EAAUgpB,aAAa,EAAAzL,eAAerG,SAASnZ,KAAK+uE,YAAYt+D,GAEpE,IAAIjC,EAA+B,KAI/BkJ,EAAqBzV,EAAUyV,mBAC/BE,EAAoBnH,EAAWjC,cAkBnC,OAjBIiC,EAAWjC,gBACRvM,EAAU6rB,GAAG,EAAAzrB,YAAYukB,UAC5B5mB,KAAK8oB,MACH,EAAAhe,eAAe23C,sBACfhyC,EAAWrF,MAAOnJ,EAAUgjB,cAGhCzW,EAAgBxO,KAAKolB,SAAS89B,qBAC5B14C,OAAOkN,GACPE,EACA5X,KAAKu5D,YAAY/U,eAAe3oC,OAChC,EAAAgnC,QAAqB7iD,KAAKu5D,YAAYrkC,yBACtCzkB,IAKG,cACLzQ,KACAiC,EACAuM,EACAiC,EAAWb,UACXm5D,EACAt4D,GAQJ,mBACEwF,EACAuE,EACAq2D,EACArlB,GAKA,GAAIqlB,IAAwB,MADb56D,EAAUygB,UAMvB,OAJA12B,KAAK8oB,MACH,EAAAhe,eAAegmE,kDACftlB,EAAWpgD,QAEN,EAIT,IAAIqtC,EAAUxiC,EAAUwiC,QACxB,GAAIA,EAKF,OAJAz4C,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACfi8B,EAAWpgD,QAEN,EAGT,IAAI2lE,EAAU96D,EAAUuiC,mBACpBxS,EAAU/vB,EAAU0gB,eAAexqB,OAGvC,OAAIqO,EAAeu2D,GACjB/wE,KAAK8oB,MACHioD,EAAU/qC,EACN,EAAAl7B,eAAekmE,wCACf,EAAAlmE,eAAeomB,+BACnBs6B,EAAWpgD,MAAO2lE,EAAQrlE,WAAY8O,EAAa9O,aAE9C,KAIL8O,EAAewrB,IAAYyS,KAC7Bz4C,KAAK8oB,MACH,EAAAhe,eAAeomB,+BACfs6B,EAAWpgD,MAAO46B,EAAQt6B,WAAY8O,EAAa9O,aAE9C,GAOH,YAAY8/C,GAEdxrD,KAAKgkB,QAAQizC,WAAazL,EAAWpgD,MAAMO,OAAOojB,WACpD/uB,KAAK8oB,MACH,EAAAhe,eAAemmE,oBACfzlB,EAAWpgD,OAMjB,kBACEmnB,EACA2+C,EACA1lB,EACA2lB,EAAyB,EACzB5J,EAAA,GAEA,IAAI/sD,EAAe02D,EAAoB/kE,OACnC8J,EAAYsc,EAAStc,UACzB,IAAKjW,KAAKoxE,mBACRn7D,EACAuE,EACW,GAAX22D,EACA3lB,GAGA,OADAxrD,KAAKqlD,YAAcpvC,EAAUpH,WACtB7O,KAAKL,OAAOklE,cAKrB,GAHItyC,EAAStH,aAAa,EAAAzL,eAAerG,SAASnZ,KAAK+uE,YAAYvjB,GAG/Dj5B,EAAStH,aAAa,EAAAzL,eAAe1G,QAAS,CAChDtO,QAAQ+nB,EAASzE,GAAG,EAAAzrB,YAAYmhE,aAChC,IAAItL,EAAcl4D,KAAKk4D,YACvB,IAAIA,EAAYhrD,SAASqlB,GAKlB,CACL2lC,EAAYxrD,KAAK6lB,GACjB,IAAIoE,EAAiB1gB,EAAU0gB,eAC/BnsB,OAAOgQ,GAAgBmc,EAAexqB,QAEtC,IAAIsD,EAAO,IAAIhI,MAAqB+S,GACpC,IAAK,IAAIna,EAAI,EAAGA,EAAIma,IAAgBna,EAClCoP,EAAKpP,GAAKL,KAAKg+D,kBAAkBkT,EAAoB7wE,GAAIs2B,EAAet2B,GACtE,IAIJ,IAAI8P,EAAOnQ,KAAKqxE,eAAe9+C,EAAU9iB,EAAM0hE,EAAkD,IAA1B,EAAd5J,IASzD,OARIvnE,KAAKqlD,YAAYga,YACC,GAAdkI,EAGJvnE,KAAKi4D,oBAAoBxxC,IAAItW,GAF7BA,EAAOnQ,KAAKwvE,gBAAgBr/D,EAAMoiB,EAAStc,UAAUpH,WAAY7O,KAAKu5D,cAK1ErB,EAAY5J,MACLn+C,EAzBPnQ,KAAKsvB,QACH,EAAAxkB,eAAewmE,yCACf9lB,EAAWpgD,MAAOmnB,EAAStN,cA4BjC,IAAIssD,EAAuBJ,EAAU32D,EAAe,EAAIA,EACpDujB,EAAW,IAAIt2B,MAAqB8pE,GACpC78C,EAAQ,EACRy8C,IACFpzC,EAAS,GAAKozC,EACdz8C,EAAQ,GAEV,IAAIiC,EAAiB1gB,EAAU0gB,eAC/B,IAAK,IAAIt2B,EAAI,EAAGA,EAAIma,IAAgBna,IAAKq0B,EACvCqJ,EAASrJ,GAAS10B,KAAKg+D,kBAAkBkT,EAAoB7wE,GAAIs2B,EAAet2B,GAAE,GAKpF,GADAmK,OAAOkqB,GAAS68C,GACZt7D,EAAUpH,WAAWwwD,UAAW,CAClC,GAAkB,EAAdkI,EAEF,OAAOvnE,KAAKotE,eAAe76C,EAAUwL,EAAUytB,GAAY,GACtD,GAAkB,GAAd+b,EAAuC,CAEhD,IAAIp3D,EAAOnQ,KAAKotE,eAAe76C,EAAUwL,EAAUytB,GAAY,GAAO,GAEtE,OADAxrD,KAAKi4D,oBAAoBxxC,IAAItW,GACtBA,EAEP,OAAOnQ,KAAKotE,eAAe76C,EAAUwL,EAAUytB,GAAY,GAAO,GAGtE,OAAOxrD,KAAKotE,eAAe76C,EAAUwL,EAAUytB,EACJ,IAA1B,EAAd+b,IAIL,eACEh1C,EACAwL,EACAozC,EAAyB,EACzBK,GAA2B,GAE3B,IAAI7xE,EAASK,KAAKL,OACd6a,EAAeujB,EAAWA,EAAS5xB,OAAS,EAC5C8J,EAAYsc,EAAStc,UACrB0gB,EAAiB1gB,EAAU0gB,eAC3B0iB,EAAgB1iB,EAAexqB,OAG/BwxD,EAAe39D,KAAKu5D,YACpBxiC,EAAO,EAAAC,KAAKy6C,aAAa9T,EAAajQ,eAAgBn7B,GACtDrc,EAAO,GACPw7D,EAAa,IAAI/pE,IAGrB,IAAK,IAAItH,EAAIma,EAAe,EAAGna,GAAK,IAAKA,EAAG,CAM1C,IAAIsxE,EAAY5zC,EAAU19B,GACtBuxE,EAAYj7C,EAAet2B,GAC3BwxE,EAAgB96C,EAAK+xC,eAAe7yD,EAAU6gB,iBAAiBz2B,GAAIuxE,EAAWF,GAClF,EAAAxB,eAAeyB,EAAWD,GAErB/T,EAAahL,YAAYgf,EAAWC,IAAY76C,EAAK03B,aAAaojB,EAAcn9C,MAAO,EAAA44B,WAAWyC,SACnGh5B,EAAKiqC,UAAU2Q,EAAWC,IAAY76C,EAAK03B,aAAaojB,EAAcn9C,MAAO,EAAA44B,WAAWxE,SAExF8oB,EAAUvS,YACPr/D,KAAKi4D,oBAAoBlrD,IAAI4kE,KAAYA,EAAY3xE,KAAKs/D,WAAWqS,IAC1E56C,EAAK03B,aAAaojB,EAAcn9C,MAAO,EAAA44B,WAAWoB,WAEpDx4C,EAAK+jD,QACHt6D,EAAO0gE,UAAUwR,EAAcn9C,MAAOi9C,IAG1C,GAAIR,EAAS,CACX,IAAIr8C,EAAgBtqB,OAAO+nB,EAAS1W,QAASrR,OAAOsqB,EAAclnB,MAAQ,EAAA2R,YAAY9E,OACtF,IAAIic,EAAWlsB,OAAO+nB,EAAStc,UAAUygB,UACrCizB,EAAY5yB,EAAK+xC,eAAe,EAAA9lE,YAAYsC,MAAOoxB,EAAUg7C,GAEjEx7D,EAAK+jD,QACHt6D,EAAO0gE,UAAU1W,EAAUj1B,MAAOy8C,IAEpC,IAAIW,EAAuBh9C,EAAeqE,KACtC24C,GAAc/6C,EAAKg7C,eAAe,EAAA/uE,YAAYuC,OAAQusE,EAAapjE,KAAMi7C,EAAUj1B,YAEvFlqB,QAAQ+nB,EAAStc,UAAUygB,UAK7B12B,KAAKu5D,YAAcxiC,EACnB,IAAK,IAAI12B,EAAIma,EAAcna,EAAIg5C,IAAiBh5C,EAAG,CACjD,IAAI2xE,EAAWr7C,EAAet2B,GAC1B09D,EAAW/9D,KAAKg+D,kBAClBxzD,OAAO+nB,EAAStwB,UAAU0iD,iBAAiB/1C,WAAWvO,GAAGiP,aACzD0iE,EACA,IAEEH,EAAgB96C,EAAK+xC,eAAe7yD,EAAU6gB,iBAAiBz2B,GAAI2xE,GAClEj7C,EAAK47B,YAAYoL,EAAUiU,IAAWj7C,EAAK03B,aAAaojB,EAAcn9C,MAAO,EAAA44B,WAAWyC,SACzFh5B,EAAKiqC,UAAUjD,EAAUiU,IAAWj7C,EAAK03B,aAAaojB,EAAcn9C,MAAO,EAAA44B,WAAWxE,SACtFkpB,EAAS3S,YACXtoC,EAAK03B,aAAaojB,EAAcn9C,MAAO,EAAA44B,WAAWoB,UAC7C1uD,KAAKi4D,oBAAoBlrD,IAAIgxD,KAAWA,EAAW/9D,KAAKs/D,WAAWvB,KAE1E7nD,EAAKxJ,KACH/M,EAAO0gE,UAAUwR,EAAcn9C,MAAOqpC,IAK1C/9D,KAAKugE,oBAAoBhuC,EAAUrc,GAG9B6gB,EAAKjJ,GAAG,OACX9tB,KAAKwgE,oBAAoBzpC,EAAM7gB,GAC/BlW,KAAK69D,mBAAmB9mC,EAAM7gB,IAEhC6gB,EAAKquC,mBACL,IAAIv2D,EAAakoB,EAAKloB,WACtB7O,KAAKu5D,YAAcoE,EAGnB,IAAIxtD,EAAOxQ,EAAO8gC,MAAM1J,EAAK+2B,kBAAmB53C,EAAMrH,EAAWwpC,gBAQjE,OAPAr4C,KAAKqlD,YAAcx2C,EACfA,EAAWwwD,WACTmS,IACFrhE,EAAOnQ,KAAKmiE,YAAYhyD,GACxBnQ,KAAKqlD,YAAc,EAAAh/B,KAAKG,MAGrBrW,EAIT,iBAAiB+hB,GAQf,IAAIuD,EAAavD,EAASuD,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAIw8C,EAAoB//C,EAASjc,UAC7Bi8D,EAAehgD,EAASjN,aACxBktD,EAAyBF,EAAkBt7C,eAC3Cy7C,EAAgClgD,EAASjwB,UAAU0iD,iBAAiB/1C,WACpEC,EAAaojE,EAAkBpjE,WAC/B6nB,EAAWu7C,EAAkBv7C,SAC7BuE,EAAa/I,EAASpE,GAAG,EAAAzrB,YAAY2vB,UAGrCqgD,EAAeJ,EAAkBz5B,mBACjC85B,EAAcD,EACdE,EAAeJ,EAAuBhmE,OACtCqmE,EAAcD,EACdt3C,MACAq3C,IACAE,GAEJ,IAAIC,EAAcjoE,OAAOgoE,EAAcF,GAEnCI,EAAoB,IAAIjrE,MAAqB6qE,GAC7CK,EAAe,EAGfhzE,EAASK,KAAKL,OACds7B,IACFy3C,EAAkB,GAAK/yE,EAAO2gE,UAAU,EAAGtgE,KAAKgkB,QAAQk9C,gBACxDyR,EAAe,GAIjB,IAAK,IAAItyE,EAAI,EAAGA,EAAIgyE,IAAgBhyE,IAAKsyE,EACvCD,EAAkBC,GAAgBhzE,EAAO2gE,UAAUqS,EAAcR,EAAuB9xE,GAAGg4C,gBAE7F7tC,OAAOmoE,GAAgBL,GAGvB,IAAIM,EAAsB,IAAI,EAAAp/C,UAAUxzB,KAAK0yB,QAASy/C,EAAwBtjE,EAAY6nB,GAC1Fk8C,EAAoBp6B,mBAAqB+5B,EACzCK,EAAoBr6B,eAAiB05B,EAAkB15B,gBACvD9iB,EAAa,IAAI,EAAAxP,SACfiM,EAAStxB,KAAO,cAChBsxB,EAASjwB,UACT2wE,EACA1gD,EAASgD,0BAEA/nB,IAAI+kB,EAAS1f,MAAQ,EAAAnQ,YAAYmhE,WAAa,EAAAnhE,YAAYw6D,UACrE3qC,EAASuD,WAAaA,EAItB,IAAIkoC,EAAe39D,KAAKu5D,YACpBxiC,EAAOtB,EAAWsB,KACtB/2B,KAAKu5D,YAAcxiC,EAGnB,IAAImK,EAAWuxC,EAAc,EACzBvgE,EAAQ,IAAIzK,MAAcy5B,GAC1B2xC,EAAM,KAAOJ,EAAY/mE,SAAS,IACtC,IAAK,IAAIrL,EAAI,EAAGA,EAAI6gC,IAAY7gC,EAAG,CACjC,IAAImT,EAAQnT,EAAEqL,SAAS,IAAMmnE,EAC7B3gE,EAAM7R,GAAKmT,EAEb,IAAI0C,EAAOvW,EAAO8gC,MAAMvuB,EAAM,GAAI,CAChCvS,EAAO8gC,MAAM,aAAc,CACzB9gC,EAAOmzE,OAAO5gE,EAAO,aAEnBmgE,EACI1yE,EAAOmgE,OACL,EAAAtkC,SAASoxC,OACTjtE,EAAOw6D,WAAW,EAAA/P,aAAakN,gBAAiB,EAAAn8B,WAAWx0B,KAC3DhH,EAAOyD,IAAIivE,IAEb1yE,EAAOw6D,WAAW,EAAA/P,aAAakN,gBAAiB,EAAAn8B,WAAWx0B,QAGnEhH,EAAOklE,gBAET,IAAK,IAAIxkE,EAAI,EAAGA,EAAIoyE,IAAepyE,IAAKsyE,EAAc,CACpD,IAGI5U,EAHArvD,EAAOyjE,EAAuBE,EAAehyE,GAC7C6Q,EAAckhE,EAA8BC,EAAehyE,GAC3DiP,EAAc4B,EAAY5B,YAE1BA,EACFyuD,EAAWp+D,EAAO0gE,UAAUsS,EAC1B3yE,KAAKg+D,kBACH1uD,EACAZ,EAAI,KAKR1O,KAAK8oB,MACH,EAAAhe,eAAeioE,4CACf7hE,EAAY9F,OAEd2yD,EAAWp+D,EAAOklE,eAEpB3uD,EAAOvW,EAAO8gC,MAAMvuB,EAAM7R,EAAI,GAAI,CAChC6V,EACA6nD,IAEF2U,EAAkBC,GAAgBhzE,EAAO2gE,UAAUqS,EAAcjkE,EAAK2pC,gBAExE7tC,OAAOmoE,GAAgBH,GAEvB,IAAIxyC,EAAyB,CAAE9pB,GAC3Bo6D,EAAU3wE,EAAOa,KAAK0xE,EAAcQ,EAAmB7jE,EAAWwpC,gBAClExpC,GAAc,EAAAwX,KAAKG,KACrBxmB,KAAKquE,6BAA6Bt3C,EAAMu5C,EAASzhE,EAAYmxB,IAE7DA,EAAMtzB,KAAK4jE,GACXtwE,KAAKwgE,oBAAoBzpC,EAAMiJ,IAEjCjJ,EAAKquC,mBACLplE,KAAKu5D,YAAcoE,EAEnB,IAAIrD,EAAU36D,EAAO46D,YACnB9kC,EAAWxQ,aACX2tD,EAAoBpY,aACpBoY,EAAoBnY,cACpB,EAAAtiB,mBAAmB1iB,EAAWJ,kBAC9B11B,EAAO+6D,QAAQ16B,EAAOnxB,EAAWwpC,iBAGnC,OADA5iB,EAAWklC,SAASh7D,EAAQ26D,GACrB7kC,EAIT,+BACE,IAAKz1B,KAAK+3D,uBAAwB,CAChC,IAAIp4D,EAASK,KAAKL,OAClBK,KAAK+3D,uBAAyBp4D,EAAO85D,UAAU,EAAArP,aAAakN,gBAAiB,EAAAn8B,WAAWx0B,KAAK,EAAMhH,EAAOyD,IAAI,IAK5GzD,EAAO46D,YAAY,EAAAnQ,aAAamN,mBAAoB,EAAAp8B,WAAWx0B,IAAK,EAAAw0B,WAAW2D,KAAM,KACnFn/B,EAAO06D,WAAW,EAAAjQ,aAAakN,gBAAiB33D,EAAO2gE,UAAU,EAAG,EAAAnlC,WAAWx0B,OAEjFhH,EAAOi7D,kBAAkB,EAAAxQ,aAAamN,mBAAoBZ,EAAYY,qBAQ5E,WAAWpnD,GACT,IAAIgc,EAAiBnsB,KAAK0yB,QAAQvG,eAElC,OADAnsB,KAAKm7D,gBAAgBhvC,GACdnsB,KAAKL,OAAOa,KAAK2rB,EAAelH,aAAc,CAAE9U,GAAQnQ,KAAKgkB,QAAQk9C,gBAI9E,YAAY/wD,GACV,IAAIic,EAAkBpsB,KAAK0yB,QAAQtG,gBAEnC,OADApsB,KAAKm7D,gBAAgB/uC,GACdpsB,KAAKL,OAAOa,KAAK4rB,EAAgBnH,aAAc,CAAE9U,GAAQ,EAAAgrB,WAAW2D,MAI7E,YAEEk0C,EAEAC,EAEAnD,GAAwB,GAExB,IAAInwE,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YACZ2H,EAAiBlhE,KAAKgkB,QAAQk9C,eAClC,GAAI4O,EAAiB,CAGnB,IAAI7O,EAAOlqC,EAAKw3B,aAAavuD,KAAKgkB,QAAQuC,UAAW,EAAA2pD,eAAe+C,IAChE90C,EAAMx+B,EAAO8gC,MAAM,KAAM,CAC3B9gC,EAAO0gE,UAAUY,EAAKvsC,MAAOs+C,GAC7BhzE,KAAKmiE,YAAY8Q,GACjBtzE,EAAO2gE,UAAUW,EAAKvsC,MAAOwsC,IAC5BA,GAEH,OADAnqC,EAAKg4B,cAAckS,GACZ9iC,EACF,CAKL,IAAI5X,EAAYvmB,KAAKgkB,QAAQuC,UACzB2sD,EAAQn8C,EAAKw3B,aAAahoC,EAAW,EAAA2pD,eAAe+C,IACpDE,EAAQp8C,EAAKw3B,aAAahoC,GAC1B4X,EAAMx+B,EAAO8gC,MAAM,KAAM,CAC3B9gC,EAAOu6D,GACLv6D,EAAOmgE,OAAOoB,GAAkB,EAAA/lC,WAAWv0B,IAAM,EAAA40B,SAAS82B,MAAQ,EAAA92B,SAAS62B,MACzE1yD,EAAOsiE,UAAUiR,EAAMx+C,MAAOs+C,GAC9BrzE,EAAOsiE,UAAUkR,EAAMz+C,MAAOu+C,IAEhCtzE,EAAO8gC,MAAM,KAAM,CACjB9gC,EAAO0gE,UAAU6S,EAAMx+C,MACrB10B,KAAKs/D,WAAW3/D,EAAO2gE,UAAU4S,EAAMx+C,MAAOwsC,KAEhDlhE,KAAKmiE,YAAYxiE,EAAO2gE,UAAU6S,EAAMz+C,MAAOwsC,OAGnDvhE,EAAO2gE,UAAU4S,EAAMx+C,MAAOwsC,IAC7BA,GAGH,OAFAnqC,EAAKg4B,cAAcokB,GACnBp8C,EAAKg4B,cAAcmkB,GACZ/0C,GAKX,gBAEEhuB,EAEAzB,EAEAqoB,EAAa/2B,KAAKu5D,aAmBlB,IAAI9iC,EAAQM,EAAKq8C,oBAAoB1kE,GAErC,OADIqoB,EAAKiqC,UAAU7wD,EAAMzB,IAAOqoB,EAAK03B,aAAah4B,EAAM/B,MAAO,EAAA44B,WAAWxE,SACnE9oD,KAAKL,OAAOsiE,UAAUxrC,EAAM/B,MAAOvkB,GAO5C,mBAEEA,EAEA4mB,GAKA,OAAQ,EAAAoJ,gBAAgBhwB,IACtB,KAAK,EAAAkrB,aAAa2P,SAAU,CAC1B,IAAItW,EAAQ,EAAAu8B,iBAAiB9gD,GAC7B,GAAI4mB,EAAK85B,eAAen8B,EAAO,EAAA44B,WAAWwD,cAExC,OADA/5B,EAAKq3B,eAAe15B,EAAO,EAAA44B,WAAWwD,cAC/Bp8B,EAET,MAEF,KAAK,EAAA2G,aAAaoX,SAChB,GAAI,EAAAse,WAAW5gD,GAAO,CAIpB,IAAIukB,EAAQ,EAAAs8B,iBAAiB7gD,GAC7B,GAAI4mB,EAAK85B,eAAen8B,EAAO,EAAA44B,WAAWwD,cAExC,OADA/5B,EAAKq3B,eAAe15B,EAAO,EAAA44B,WAAWwD,cAC/Bp8B,EAGX,MAEF,KAAK,EAAA2G,aAAayW,MAChB,GAA2B,OAAvB,EAAA6jB,aAAaxlD,GAAgB,CAC/B,IAAI6+B,EAAQ,EAAA4mB,mBAAmBzlD,GAC/B,GAAI6+B,EACF,OAAOhvC,KAAKkqE,mBAAmB,EAAApU,cAAc3lD,EAAM6+B,EAAQ,GAAIjY,IAMvE,OAAQ,EAIV,iBAEE5mB,EAEAzB,EAEAw2D,EAEAD,GAIA,OADYjlE,KAAKkqE,mBAAmB/5D,EAAM+0D,GAGtCllE,KAAKwvE,gBAAgBr/D,EAAMzB,EAAMu2D,GAEjCjlE,KAAKwvE,gBAAgBxvE,KAAKs/D,WAAWnvD,GAAOzB,EAAMu2D,GAIxD,oBAEEluC,EAEAiJ,EAMA26B,GAAiB,GAIjB,IAAIlN,EAAe12B,EAAK02B,aACxB,GAAIA,EAAc,CAChB,IAAI9tD,EAASK,KAAKL,OAClB,IAAK,IAAI82B,KAASg3B,EAAat7C,SAC7B,GAAIskB,EAAM3I,GAAG,EAAAzrB,YAAYmsD,QAAS,CAChC,IAAIh4B,EAAaC,EAAM/B,MACnBqC,EAAK85B,eAAer6B,EAAY,EAAA82B,WAAWwD,gBACzC6J,GAAU5jC,EAAKq3B,eAAe53B,EAAY,EAAA82B,WAAWwD,cACzD9wB,EAAMtzB,KACJ1M,KAAKmiE,YACHxiE,EAAO2gE,UAAU9pC,EAAYC,EAAM/nB,KAAK2pC,qBAUtD,6BAEEthB,EAEAgrC,EAEAzrD,EAEA0pB,EAAgC,KAEhC26B,GAAiB,GAEZ36B,IAAOA,EAAQ,IAAIv4B,OACxBu4B,EAAMtzB,KACJ1M,KAAKL,OAAOsgC,OAEd,IAAIozC,EAAerzC,EAAM7zB,OACzBnM,KAAKwgE,oBAAoBzpC,EAAMiJ,EAAO26B,GACtC,IAAIh7D,EAASK,KAAKL,OAClB,GAAIqgC,EAAM7zB,OAASknE,EAAc,CAC/B,IAAIpV,EAAa3nD,EAAU+hC,eACvB4oB,EAAOlqC,EAAKw3B,aAAaj4C,GACxBygB,EAAK47B,YAAYoP,EAAWzrD,IAAYygB,EAAK03B,aAAawS,EAAKvsC,MAAO,EAAA44B,WAAWyC,SAClFh5B,EAAKiqC,UAAUe,EAAWzrD,IAAYygB,EAAK03B,aAAawS,EAAKvsC,MAAO,EAAA44B,WAAWxE,SACnF9oB,EAAMqzC,EAAe,GAAK1zE,EAAO0gE,UAAUY,EAAKvsC,MAAOqtC,GACvD/hC,EAAMtzB,KACJ/M,EAAO2gE,UAAUW,EAAKvsC,MAAOupC,IAE/B,IAAI9/B,EAAMx+B,EAAO+6D,QAAQ16B,EAAOi+B,GAEhC,OADAlnC,EAAKg4B,cAAckS,GACZ9iC,EACF,OAAI6B,EAAM7zB,OAAS,GACxB6zB,EAAMqzC,EAAe,GAAKtR,EACnBpiE,EAAO+6D,QAAQ16B,EAAO1pB,EAAU+hC,iBAElC0pB,EAIT,mBAEEhrC,EAEAiJ,GAIA,GAAIjJ,EAAK2yB,SAAU,CAGjB,IACI7tC,EADAgX,EAAUkE,EAEd,KAAOlb,EAASgX,EAAQhX,QAAQgX,EAAUhX,EAC1C,IAAI4xC,EAAe56B,EAAQ46B,aAC3B,GAAIA,EACF,IAAK,IAAIh3B,KAASg3B,EAAat7C,SAC7BnS,KAAKszE,uBAAuB78C,EAAOM,EAAMiJ,QAI7C,IAAK,IAAIvJ,KAASM,EAAK22B,eAAet4B,cACpCp1B,KAAKszE,uBAAuB78C,EAAOM,EAAMiJ,GAMvC,uBAENvJ,EAEAM,EAEAiJ,GAEA,IAAIxJ,EAAaC,EAAM/B,MACnB/0B,EAASK,KAAKL,QACb62B,GAAcO,EAAK85B,eAAer6B,EAAY,EAAA82B,WAAWwD,gBAC5D/5B,EAAKq3B,eAAe53B,EAAY,EAAA82B,WAAWwD,cAC3C9wB,EAAMtzB,KACJ1M,KAAKmiE,YACHxiE,EAAO2gE,UAAU9pC,EAAYC,EAAM/nB,KAAK2pC,mBAShD,eACE9lB,EACAwL,EACAytB,EACAgmB,GAA2B,EAE3B+B,GAAwB,GAExB,GAAIhhD,EAAStH,aAAa,EAAAzL,eAAe1G,QAAS,CAChDtO,QAAQ+nB,EAASzE,GAAG,EAAAzrB,YAAYmhE,aAChC,IAAItL,EAAcl4D,KAAKk4D,YACvB,IAAIA,EAAYhrD,SAASqlB,GAKlB,CAEL,IAAIpiB,EACJ,GAFA+nD,EAAYxrD,KAAK6lB,GAEbA,EAASzE,GAAG,EAAAzrB,YAAY2vB,UAAW,CACrC,IAAIwhD,EAAchpE,OAAOuzB,GACzBvzB,OAAOgpE,EAAYrnE,QACnBgE,EAAOnQ,KAAKqxE,eAAe9+C,EAAUihD,EAAYvlB,MAAM,GAAIulB,EAAY,GAAIhC,QAE3ErhE,EAAOnQ,KAAKqxE,eAAe9+C,EAAUwL,EAAU,EAAGyzC,GAEpD,IAAI3iE,EAAa7O,KAAKqlD,YAStB,OARIx2C,EAAWwwD,YACRkU,EAGHvzE,KAAKi4D,oBAAoBxxC,IAAItW,GAF7BA,EAAOnQ,KAAKwvE,gBAAgBr/D,EAAMtB,IAKtCqpD,EAAY5J,MACLn+C,EAvBPnQ,KAAKsvB,QACH,EAAAxkB,eAAewmE,yCACf9lB,EAAWpgD,MAAOmnB,EAAStN,cAwBjC,IAAIwuD,EAAc11C,EAAWA,EAAS5xB,OAAS,EAC3CqO,EAAei5D,EAEfnB,EADe//C,EAAStc,UAAUuiC,mBAElC+5B,EAAehgD,EAAStc,UAAU0gB,eAAexqB,OACjDqmE,EAAcD,EACdhgD,EAASzE,GAAG,EAAAzrB,YAAY2vB,cACxBsgD,IACAE,IACAh4D,GAEJhQ,OAAOipE,GAAenB,GAEtB,IAAI3yE,EAASK,KAAKL,OAClB,IAAKK,KAAKm7D,gBAAgB5oC,GAAW,OAAO5yB,EAAOklE,cACnD,IAAIh2D,EAAa0jB,EAAStc,UAAUpH,WAChC6kE,EAAenhD,EAASzE,GAAG,EAAAzrB,YAAY+7D,eAG3C,GAAIqV,EAAcjB,EAAa,CACxBz0C,KACHA,EAAW,IAAIt2B,MAAM+qE,IACZrmE,OAAS,GAEpB,IAAIwqB,EAAiBpE,EAAStc,UAAU0gB,eACpC3e,EAAiBua,EAAStwB,UAAU0iD,iBAAiB/1C,WACzDpE,OAAOwN,EAAe7L,QAAUwqB,EAAexqB,QAC/C,IAAIwnE,GAA0B,EAC9B,IAAK,IAAItzE,EAAIma,EAAcna,EAAIkyE,IAAgBlyE,EAAG,CAChD,IAAIiP,EAAc0I,EAAe3X,GAAGiP,YACpC,GAAIA,EAAa,CACf,GAAI,EAAAskE,oBAAoBtkE,EAAY1B,MAAO,CACzCmwB,EAASrxB,KAAK1M,KAAKg+D,kBACLhmD,EAAe3X,GAAGiP,YAC9BqnB,EAAet2B,GAAE,IAGnB,SAEF,IAAIwsB,EAAW7sB,KAAKolB,SAAS2iC,iBAAiBz4C,EAAaijB,EAASwE,KAAMJ,EAAet2B,IACzF,GAAIwsB,GACEA,EAASjf,MAAQ,EAAA2R,YAAY1G,OAAQ,CACvC,IAAIkV,EAAiBlB,EACrB,GAAI7sB,KAAKm9D,cAAcpvC,GAAS,CAC1BA,EAAOD,GAAG,EAAAzrB,YAAYgyB,SACxB0J,EAASrxB,KACP1M,KAAKi/D,sBAAsBlxC,EAAQ4I,EAAet2B,GAAI,IAGxD09B,EAASrxB,KACP1M,KAAKgqE,kBACHrqE,EAAOw6D,WAAWpsC,EAAO9I,aAAc8I,EAAOrf,KAAK2pC,gBACnDtqB,EAAOrf,KAAMioB,EAAet2B,IAAI,GAAO,EAAOiP,IAIpD,WAKRyuB,EAASrxB,KAAK1M,KAAKk/D,SAASvoC,EAAet2B,KAC3CszE,GAA0B,EAE5B,IAAKA,IACED,EAAc,CACjB,IAAIxhD,EAAWK,EAEf,GADAA,EAAWvyB,KAAK28D,iBAAiBpqC,IAC5BvyB,KAAKm7D,gBAAgB5oC,GAAW,OAAO5yB,EAAOklE,cACnDtyC,EAASwE,KAAKvkB,MAAQ0f,EAAS6E,KAAKvkB,MACpC,IAAIi9D,EAAmB5gE,EAAWwpC,eAC9BloC,EAAOxQ,EAAOa,KAAK+xB,EAAStN,aAAc8Y,EAAU0xC,GAaxD,OAZAzvE,KAAKqlD,YAAcx2C,EACfA,EAAWwwD,YACTmS,GACFrhE,EAAOnQ,KAAKmiE,YAAYhyD,GACxBnQ,KAAKqlD,YAAc,EAAAh/B,KAAKG,MACd+sD,EAGVvzE,KAAKi4D,oBAAoBxxC,IAAItW,GAF7BA,EAAOnQ,KAAKwvE,gBAAgBr/D,EAAMtB,IAKtC7O,KAAK48D,+BACEj9D,EAAO8gC,MAAM,KAAM,CACxB9gC,EAAO06D,WAAW,EAAAjQ,aAAakN,gBAAiB33D,EAAOyD,IAAIoX,IAC3DrK,GACCnQ,KAAKqlD,YAAYhN,iBAQ1B,IAAIloC,EAAOxQ,EAAOa,KAAK+xB,EAAStN,aAAc8Y,EAAUlvB,EAAWwpC,gBAUnE,OATAr4C,KAAKqlD,YAAcx2C,EACfA,EAAWwwD,YACTmS,GACFrhE,EAAOnQ,KAAKmiE,YAAYhyD,GACxBnQ,KAAKqlD,YAAc,EAAAh/B,KAAKG,MACd+sD,IACVpjE,EAAOnQ,KAAKwvE,gBAAgBr/D,EAAMtB,KAG/BsB,EAIT,oBACE8F,EACAy6D,EACAQ,EACA1lB,EACA2lB,EAAyB,EACzBK,GAA2B,GAE3B,IAAIh3D,EAAe02D,EAAoB/kE,OAEvC,IAAKnM,KAAKoxE,mBACRn7D,EACAuE,EACW,GAAX22D,EACA3lB,GAEA,OAAOxrD,KAAKL,OAAOklE,cAGrB,IAAI0M,EAAuBJ,EAAU32D,EAAe,EAAIA,EACpDujB,EAAW,IAAIt2B,MAAqB8pE,GACpC78C,EAAQ,EACRy8C,IACFpzC,EAAS,GAAKozC,EACdz8C,EAAQ,GAEV,IAAIiC,EAAiB1gB,EAAU0gB,eAC/B,IAAK,IAAIt2B,EAAI,EAAGA,EAAIma,IAAgBna,IAAKq0B,EACvCqJ,EAASrJ,GAAS10B,KAAKg+D,kBAAkBkT,EAAoB7wE,GAAIs2B,EAAet2B,GAAE,GAKpF,OADAmK,OAAOkqB,GAAS68C,GACTvxE,KAAK6zE,iBAAiB59D,EAAWy6D,EAAU3yC,EAAUyzC,GAI9D,iBACEv7D,EACAy6D,EACA3yC,EAAmC,KACnCyzC,GAA2B,GAE3B,IAAIiC,EAAc11C,EAAWA,EAAS5xB,OAAS,EAC3CqO,EAAei5D,EAEfnB,EADer8D,EAAUuiC,mBAEzB+5B,EAAet8D,EAAU0gB,eAAexqB,OACxCqmE,EAAcD,EACdt8D,EAAUygB,aACV47C,IACAE,IACAh4D,GAEJhQ,OAAOipE,GAAenB,GAEtB,IAAI3yE,EAASK,KAAKL,OAGlB,GAAI8zE,EAAcjB,EAAa,CACxBz0C,KACHA,EAAW,IAAIt2B,MAAM+qE,IACZrmE,OAAS,GAEpB,IAAIwqB,EAAiB1gB,EAAU0gB,eAC/B,IAAK,IAAIt2B,EAAIma,EAAcna,EAAIkyE,IAAgBlyE,EAC7C09B,EAASrxB,KAAK1M,KAAKk/D,SAASvoC,EAAet2B,KAI/C,IAAIwO,EAAaoH,EAAUpH,WAC3B7O,KAAK48D,+BACL,IAAIzsD,EAAOxQ,EAAO8gC,MAAM,KAAM,CAC5B9gC,EAAO06D,WAAW,EAAAjQ,aAAakN,gBAC7B33D,EAAOyD,IAAIoX,IAEb7a,EAAOkiC,cACL7hC,KAAKgkB,QAAQgD,SACTrnB,EAAOwhE,MAAM,EAAA5lC,QAAQkwC,QAASiF,GAC9BA,EACJ3yC,EACA9nB,EAAUukD,aACVvkD,EAAUwkD,gBAEX5rD,EAAWwpC,gBAUd,OATAr4C,KAAKqlD,YAAcx2C,EACfA,EAAWwwD,YACTmS,GACFrhE,EAAOnQ,KAAKmiE,YAAYhyD,GACxBnQ,KAAKqlD,YAAc,EAAAh/B,KAAKG,MAExBrW,EAAOnQ,KAAKwvE,gBAAgBr/D,EAAMtB,IAG/BsB,EAGD,uBACNM,EACAs4D,EACAxB,GAEA,IAAIn2D,EAAcX,EAAWW,YACzB0iE,EAAiB1iE,EAAYjF,OAC7B4nE,EAAQ,IAAItsE,MAAqBqsE,KACrC,IAAK,IAAIzzE,EAAI,EAAGA,EAAIyzE,IAAkBzzE,EACpC0zE,EAAM1zE,GAAKL,KAAKg+D,kBAAkB5sD,EAAY/Q,GAAI,EAAAgmB,KAAKG,KACrD,GAIJ,OADAutD,EAAMD,GAAkB9zE,KAAKg+D,kBAAkB5sD,EAAY0iE,GAAiB/K,EAAgBxB,GACrFvnE,KAAKL,OAAO+6D,QAAQqZ,EAAO/zE,KAAKqlD,YAAYhN,gBAG7C,+BACN5nC,EACAs4D,EACAxB,GAEA,IAAI5nE,EAASK,KAAKL,OACdwoD,EAAmB13C,EAAWA,WAC9BinC,EAAa13C,KAAKolB,SAAS0/B,kBAAkBqD,EAAkBnoD,KAAKu5D,aACxE,GAAI7hB,EAAY,CACd,GAAIA,EAAW5pB,GAAG,KAAsB,CACtC,IAAIH,EAAiB+pB,EAAW/pB,eAChC,GAAIA,EAAgB,CAClB,IAAIuK,EAAcl4B,KAAKu5D,YAAYzrC,GAAG,OAClCm6B,EAAat6B,EAAewK,eAAe,EAAA7Y,aAAaK,YAAauY,GACzE,GAAI+vB,EAAY,CACd,IAAIkpB,EAAUnxE,KAAKg+D,kBAAkB7V,EAAkBx6B,EAAejf,KAAI,GAS1E,OANKwpB,GAAel4B,KAAKgkB,QAAQkzC,UAC/Bl3D,KAAKk3D,SACH,EAAApsD,eAAeqkE,2CACf1+D,EAAWrF,OAGRpL,KAAKuwE,kBAAkBtoB,EAAY,CACxCx3C,EAAWgB,mBACVhB,EAAY0gE,EAAS5J,KAI9BvnE,KAAK8oB,MACH,EAAAhe,eAAeg5C,qCACfrzC,EAAWA,WAAWrF,MAAOssC,EAAWhsC,YAG5C,OAAO/L,EAAOklE,cAGR,0BACNp0D,EACAujE,EACAzM,GAEA,IAAIr2D,EAAcT,EAAWS,YAAY+iE,QACzCzpE,QAAQ0G,EAAYwC,gBACpB,IAUI6e,EAVAwE,EAAO/2B,KAAKu5D,YACZ/U,EAAiBztB,EAAKytB,eACtBviD,EAAY,IAAI,EAAAikB,kBAClBhV,EAAYtQ,KAAKqL,KAAKE,OAClB+E,EAAYtQ,KAAKqL,KACjB,cAAgBu4C,EAAe7uB,mBAAmBjqB,SAAS,IAC/D84C,EACAtzC,EACA,EAAAsO,eAAelH,MAGb4c,EAA0B,EAAA2tB,QAAQ9rB,EAAK7B,yBAI3C,GAAI8+C,EAAqB,CACvB,IAAI7oB,EAAgBlpD,EAAU0iD,iBAC1B3sC,EAAiBmzC,EAAcv8C,WAC/BslE,EAAuBl8D,EAAe7L,OAGtCwqB,EAAiBq9C,EAAoBr9C,eACrC0iB,EAAgB1iB,EAAexqB,OACnC,GAAI+nE,EAAuB76B,EAKzB,OAJAr5C,KAAK8oB,MACH,EAAAhe,eAAeomB,+BACfzgB,EAAWrF,MAAOiuC,EAAc3tC,WAAYwoE,EAAqBxoE,YAE5D1L,KAAKL,OAAOklE,cAIrB,IAAItsB,EAAiB,IAAI9wC,MAAcysE,GACvC,IAAK,IAAI7zE,EAAI,EAAGA,EAAI6zE,IAAwB7zE,EAAG,CAC7C,IAAIijD,EAAgBtrC,EAAe3X,GAEnC,GADAk4C,EAAel4C,GAAKijD,EAAc1iD,KAAKqL,MAClC,EAAAw3C,cAAcH,EAAc50C,MAAO,CACtC,IAAIw5C,EAAeloD,KAAKolB,SAAS+9B,YAC/BG,EAAc50C,KACd81C,EAAe3oC,OACfqZ,GAEF,IAAKgzB,EAAc,OAAOloD,KAAKL,OAAOklE,cACtC,IAAKluC,EAAet2B,GAAGuuE,uBAAuB1mB,GAK5C,OAJAloD,KAAK8oB,MACH,EAAAhe,eAAeiiD,mCACfzJ,EAAcl4C,MAAOurB,EAAet2B,GAAGqL,WAAYw8C,EAAax8C,YAE3D1L,KAAKL,OAAOklE,eAOzB,IAAIh2D,EAAamlE,EAAoBnlE,WACrC,IAAK,EAAA40C,cAAc0H,EAAct8C,YAAa,CAC5C,IAAIq5C,EAAeloD,KAAKolB,SAAS+9B,YAC/BgI,EAAct8C,WACd21C,EAAe3oC,OACfqZ,GAEF,IAAKgzB,EAAc,OAAOloD,KAAKL,OAAOklE,cACtC,GACEh2D,GAAc,EAAAwX,KAAKG,KACf0hC,GAAgB,EAAA7hC,KAAKG,MACpB0hC,EAAa0mB,uBAAuB//D,GAMzC,OAJA7O,KAAK8oB,MACH,EAAAhe,eAAeiiD,mCACf5B,EAAct8C,WAAWzD,MAAO88C,EAAax8C,WAAYmD,EAAWnD,YAE/D1L,KAAKL,OAAOklE,cAKvB,IAAInuC,EAAWs9C,EAAoBt9C,SAC/By9C,EAAehpB,EAAcr8C,iBACjC,GAAIqlE,EAAc,CAChB,IAAKz9C,EAKH,OAJA12B,KAAK8oB,MACH,EAAAhe,eAAe++C,+CACfsqB,EAAa/oE,OAERpL,KAAKL,OAAOklE,cAErB,IAAI3c,EAAeloD,KAAKolB,SAAS+9B,YAC/BgxB,EACA3vB,EAAe3oC,OACfqZ,GAEF,IAAKgzB,EAAc,OAAOloD,KAAKL,OAAOklE,cACtC,IAAKnuC,EAASk4C,uBAAuB1mB,GAKnC,OAJAloD,KAAK8oB,MACH,EAAAhe,eAAeiiD,mCACfonB,EAAa/oE,MAAOsrB,EAAShrB,WAAYw8C,EAAax8C,YAEjD1L,KAAKL,OAAOklE,cAIvB,IAAI5uD,EAAY,IAAI,EAAAud,UAAUxzB,KAAK0yB,QAASiE,EAAgB9nB,EAAY6nB,GASxE,GARAzgB,EAAUuiC,mBAAqBa,EAC/BpjC,EAAUsiC,eAAiBA,EAC3BhmB,EAAW,IAAI,EAAAtM,SACbhkB,EAAUrB,KACVqB,EACAgU,EACAif,IAEGl1B,KAAKm7D,gBAAgB5oC,GAAW,OAAOvyB,KAAKL,OAAOklE,cACxD7kE,KAAKqlD,YAAc2uB,EAAoBtlE,SAGlC,CAEL,KADA6jB,EAAWvyB,KAAKolB,SAAS4H,gBAAgB/qB,EAAW,KAAMizB,IAC3C,OAAOl1B,KAAKL,OAAOklE,cAClC7kE,KAAKm7D,gBAAgB5oC,GACrBvyB,KAAKqlD,YAAc9yB,EAAStc,UAAUvH,KAGxC,IAAIgmB,EAAQ10B,KAAKo0E,yBAAyB7hD,GAC1C,OAAOmC,EAAQ,EACX10B,KAAKL,OAAOklE,cACZ7kE,KAAKL,OAAOyD,IAAIsxB,GAId,4BAA4BjkB,GAClC,IAAIkE,EAAelE,EAAWrF,MAAMO,OAAOgJ,aACvCwP,EAAcnkB,KAAK0yB,QAAQvO,YAC/B3Z,OAAO2Z,EAAYpX,IAAI4H,IACHwP,EAAYjjB,IAAIyT,GACjBmZ,GAAG,EAAAzrB,YAAYw6D,WAChC78D,KAAK2jE,kBAAkBhvD,EAAclE,GAIjC,4BACNA,EACAs4D,EACAxB,GAEA,IAAI5nE,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YACZ/U,EAAiBztB,EAAKytB,eAG1B,OAAQ/zC,EAAW7C,MACjB,KAAK,EAAAJ,SAASM,KAAM,CAClB,IAAIkW,EAAUhkB,KAAKgkB,QACnB,GAAI+kD,EAAej7C,GAAG,KAAsB,CAC1C,IAAIH,EAAiBo7C,EAAep7C,eACpC,GAAIA,EAEF,OADA3tB,KAAKqlD,YAAc13B,EAAejf,KAAKg0C,aAChC1+B,EAAQgD,SAAWrnB,EAAO0D,IAAI,GAAK1D,EAAOyD,IAAI,GAEvD,IAAI8zC,EAAqB6xB,EAAe7xB,mBACxC,OAAIA,GACFl3C,KAAKqlD,YAAcnO,EAAmBxoC,KAAKg0C,aACpC/iD,EAAOyD,IAAI,IAEbzD,EAAO00E,WAOhB,OALAr0E,KAAKqlD,YAAcrhC,EAAQuC,UAC3BvmB,KAAKsvB,QACH,EAAAxkB,eAAewpE,sCACf7jE,EAAWrF,MAAOpL,KAAKqlD,YAAY35C,YAE9BsY,EAAQgD,SACXrnB,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,GAEjB,KAAK,EAAAoK,SAASO,KAEZ,OADA/N,KAAKqlD,YAAc,EAAAh/B,KAAKziB,KACjBjE,EAAOyD,IAAI,GAEpB,KAAK,EAAAoK,SAASQ,MAEZ,OADAhO,KAAKqlD,YAAc,EAAAh/B,KAAKziB,KACjBjE,EAAOyD,IAAI,GAEpB,KAAK,EAAAoK,SAAS8N,KACZ,GAAIkpC,EAAe12B,GAAG,EAAAzrB,YAAY2vB,UAAW,CAC3C,IAAI23B,EAAYn/C,OAAOusB,EAAK6yB,YAAY,EAAA5mD,YAAYsC,QAChDwvB,EAAgBtqB,OAAOg6C,EAAe3oC,QAASrR,OAAOsqB,EAAclnB,MAAQ,EAAA2R,YAAY9E,OAC5F,IAAIymD,EAAiBlhE,KAAKgkB,QAAQk9C,eAClC,GAAI1c,EAAe12B,GAAG,EAAAzrB,YAAYsY,eAC3Boc,EAAKjJ,GAAG,IAAsB,CACjCiJ,EAAK5pB,IAAI,IAOT,IAAI6yB,EAAyB,CAC3BrgC,EAAOu6D,GACLv6D,EAAOwhE,MAAMD,GAAkB,EAAA/lC,WAAWv0B,IAAM,EAAA20B,QAAQs2B,OAAS,EAAAt2B,QAAQq2B,OACvEjyD,EAAO2gE,UAAU3W,EAAUj1B,MAAOwsC,IAEpCvhE,EAAO0gE,UAAU1W,EAAUj1B,MACzB10B,KAAKs/D,WACHt/D,KAAKohE,eAAsBtsC,OAUnC,OALA90B,KAAKqhE,qCAA4CvsC,EAAekL,GAChEA,EAAMtzB,KACJ/M,EAAO2gE,UAAU3W,EAAUj1B,MAAOwsC,IAEpClhE,KAAKqlD,YAAcsE,EAAUj7C,KACtB/O,EAAO+6D,QAAQ16B,EAAOkhC,GAIjC,IAAIxqC,EAAWlsB,OAAOg6C,EAAevuC,UAAUygB,UAE/C,OADA12B,KAAKqlD,YAAc3uB,EACZ/2B,EAAO2gE,UAAU3W,EAAUj1B,MAAOgC,EAAS2hB,gBAOpD,OALAr4C,KAAK8oB,MACH,EAAAhe,eAAe++C,+CACfp5C,EAAWrF,OAEbpL,KAAKqlD,YAAcrlD,KAAKgkB,QAAQuC,UACzB5mB,EAAOklE,cAEhB,KAAK,EAAAr3D,SAAS6N,MAAO,CACnB,IAAI0b,EAAO/2B,KAAKu5D,YACZ/U,EAAiBztB,EAAKytB,eAU1B,GATIA,EAAe12B,GAAG,EAAAzrB,YAAYsY,eAC3Boc,EAAKjJ,GAAG,MAEX9tB,KAAK8oB,MACH,EAAAhe,eAAeypE,iGACf9jE,EAAWrF,QAIb2rB,EAAK2yB,SAAU,CACjB,IAAI8qB,EAAaz9C,EAAK6yB,YAAY,EAAA5mD,YAAYsC,OAC9C,GAAIkvE,EAAY,CACd,IACIr7C,EADkB3uB,OAAOgqE,EAAW9lE,KAAKif,gBAClBwL,KAC3B,GAAIA,EAEF,OADAn5B,KAAKqlD,YAAclsB,EAAKzqB,KACjB/O,EAAO2gE,UAAUkU,EAAW9/C,MAAOyE,EAAKzqB,KAAK2pC,iBAI1D,GAAImM,EAAe12B,GAAG,EAAAzrB,YAAY2vB,UAAW,CAC3C,IAAI8C,EAAgBtqB,OAAOg6C,EAAe3oC,QAASrR,OAAOsqB,EAAclnB,MAAQ,EAAA2R,YAAY9E,OAC5F,IAAI41D,EAA4Bv7C,EAAeqE,KAC/C,GAAIk3C,EAAmB,CACrB,IAAIoE,EAAYpE,EAAkB3hE,KAElC,OADA1O,KAAKqlD,YAAcovB,EACZ90E,EAAO2gE,UAAU,EAAGmU,EAAUp8B,iBAQzC,OALAr4C,KAAK8oB,MACH,EAAAhe,eAAei/C,iDACft5C,EAAWrF,OAEbpL,KAAKqlD,YAAcrlD,KAAKgkB,QAAQuC,UACzB5mB,EAAOklE,eAIlB7kE,KAAK00E,4BAA4BjkE,GAGjC,IAAI8oB,EAASv5B,KAAKolB,SAAS4gC,2BACzBv1C,EACAsmB,EACA/2B,KAAK23D,eAAiBnT,GAExB,IAAKjrB,EAGH,OADIv5B,KAAKqlD,aAAe,EAAAh/B,KAAKG,OAAMxmB,KAAKqlD,YAAc,EAAAh/B,KAAKjjB,KACpDzD,EAAOklE,cAGhB,OAAQtrC,EAAO3rB,MACb,KAAK,EAAA2R,YAAYoV,MAAO,CACtB,IAAIjmB,EAAe6qB,EAAQ7qB,KAE3B,GADAlE,OAAOkE,GAAQ,EAAA2X,KAAKG,MACR+S,EAAQzL,GAAG,EAAAzrB,YAAYgyB,SACjC,OAAOr0B,KAAKi/D,sBAA6B1lC,EAAQwvC,EAAgBxB,GAEnE,IAAI/wC,EAAqB+C,EAAQ7E,MAOjC,OANAlqB,OAAOgsB,GAAc,GACjB9nB,EAAKof,GAAG,MAAuBiJ,EAAK65B,YAAYp6B,EAAY,EAAA82B,WAAWxE,SAAS,KAClFp6C,EAAOA,EAAKyoC,iBAEdn3C,KAAKqlD,YAAc32C,EAEf6qB,EAAO1d,QAAUkb,EAAK22B,gBAExB1tD,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACf9e,EAAWrF,OAENzL,EAAOklE,eAETllE,EAAO2gE,UAAU9pC,EAAY9nB,EAAK2pC,gBAE3C,KAAK,EAAA94B,YAAY1G,OAAQ,CACvB,IAAK7Y,KAAKm9D,cAAsB5jC,GAC9B,OAAO55B,EAAOklE,cAEhB,IAAIn2D,EAAgB6qB,EAAQ7qB,KAE5B,OADAlE,OAAOkE,GAAQ,EAAA2X,KAAKG,MACP+S,EAAQzL,GAAG,EAAAzrB,YAAYgyB,SAC3Br0B,KAAKi/D,sBAA8B1lC,EAAQwvC,EAAgBxB,IAEpEvnE,KAAKqlD,YAAc32C,EACZ/O,EAAOw6D,WAAoB5gC,EAAQtU,aAAcvW,EAAK2pC,iBAE/D,KAAK,EAAA94B,YAAYgV,UACf,OAAKgF,EAAOzL,GAAG,EAAAzrB,YAAYw6D,WAQ3B78D,KAAKqlD,YAAc,EAAAh/B,KAAKjjB,IACRm2B,EAAQzL,GAAG,EAAAzrB,YAAYgyB,UACrC7pB,OAAgD,GAA7B+uB,EAAQpF,mBACpBx0B,EAAOyD,IAAIkjC,QAAoB/M,EAAQnF,wBAEzCz0B,EAAOw6D,WAAuB5gC,EAAQtU,aAAc,EAAAkW,WAAWx0B,OAZpE3G,KAAK8oB,MACH,EAAAhe,eAAe6pE,+HACflkE,EAAWrF,OAEbpL,KAAKqlD,YAAc,EAAAh/B,KAAKjjB,IACjBzD,EAAOklE,eASlB,KAAK,EAAAtlD,YAAYwN,mBAAoB,CACnC,IAAIwF,EAAWvyB,KAAKolB,SAAS4H,gBACRuM,EACnB,KACA,EAAAspB,QAAqB9rB,EAAK7B,0BAE5B,IAAM3C,IAAYvyB,KAAKm7D,gBAAgB5oC,GAAY,OAAO5yB,EAAOklE,cACjE,GAAIkE,EAAej7C,GAAG,MAEpB,OADA9tB,KAAKqlD,YAAc,EAAAh/B,KAAKriB,OACjBrE,EAAOi1E,SAASriD,EAAStN,cAElC,IAAIyP,EAAQ10B,KAAKo0E,yBAAyB7hD,GAE1C,OADAvyB,KAAKqlD,YAAc9yB,EAAStc,UAAUvH,KAC/B/O,EAAOyD,IAAIsxB,IAOtB,OAJA10B,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACf9e,EAAWrF,OAENpL,KAAKL,OAAOklE,cAGb,4BACNp0D,EACAs4D,EACAxB,GAEA,IAAIxwC,EAAO/2B,KAAKu5D,YACZ1nD,EAASpB,EAAWoB,OAGxB,GAAIA,EAAOjE,MAAQ,EAAAJ,SAASmK,UAAW,CACrC,IAAIk9D,EAA2BhjE,EAC/B,IAAMgjE,EAAUpmE,aAAcomE,EAAUC,iBAAmB,CACzD,IAAIvjE,EAAUvR,KAAKolB,SAAS2F,gBAAgB8pD,EAAUj0E,KAAMm2B,EAAKytB,eAAgB,EAAA3C,WAAWkD,SAC5F,GAAgB,OAAZxzC,GAAoBA,EAAQ3D,MAAQ,EAAA2R,YAAY0K,gBAAiB,CACnE,IAAIhoB,EAA4BsP,EAChC,GAAItP,EAAU6rB,GAAG,EAAAzrB,YAAYukB,SAC3B,OAAO5mB,KAAK+0E,oBAAoBtkE,EAAYxO,KAOpD,IAAIs9B,EAAev/B,KAAKolB,SAAS+9B,YAC/B1yC,EAAWoB,OACXklB,EAAKytB,eACL,EAAA3B,QAAQ9rB,EAAK7B,0BAEf,OAAKqK,EAIEv/B,KAAKg1E,mBAAmBvkE,EAAY8uB,IAHzCv/B,KAAKqlD,YAAc,EAAAh/B,KAAKziB,KACjB5D,KAAKL,OAAOklE,eAKf,mBAAmBp0D,EAAkC8uB,GAC3D,IAAI5/B,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YACZppD,EAAOnQ,KAAKg+D,kBAAkBvtD,EAAWA,WAAY8uB,GACrD01C,EAAaj1E,KAAKqlD,YAItB,GAHArlD,KAAKqlD,YAAc,EAAAh/B,KAAKziB,MAGnB27B,EAAazR,GAAG,KACnB,OAAOnuB,EAAO8gC,MAAM,KAAM,CACxB9gC,EAAOuiE,KAAK/xD,GACZxQ,EAAOyD,IAAI6xE,GAAc11C,EAAe,EAAI,IAC3C,EAAApE,WAAWx0B,KAIhB,IAAKsuE,EAAWnnD,GAAG,KACjB,OAAOnuB,EAAO8gC,MAAM,KAAM,CACxB9gC,EAAOuiE,KAAK/xD,GACZxQ,EAAOyD,IAAI,IACV,EAAA+3B,WAAWx0B,KAIhB,IAAIu6D,EAAiB+T,EAAW58B,eAGhC,GAAI48B,EAAWnnD,GAAG,OAAwByR,EAAazR,GAAG,KAAqB,CAG7E,GAAImnD,EAAW99B,gBAAgBc,eAAe1Y,GAC5C,OAAO5/B,EAAOmgE,OACZoB,GAAkB,EAAA/lC,WAAWv0B,IACzB,EAAA40B,SAAS82B,MACT,EAAA92B,SAAS62B,MACbliD,EACAnQ,KAAKk/D,SAAS+V,IAKlB,GAAI11C,EAAa0Y,eAAeg9B,GAAa,CAC3C,IAAIviD,EAAU1yB,KAAK0yB,QACnB,IAAMuiD,EAAWjY,cAAez9B,EAAay9B,YAAc,CACzD,IAAIiE,EAAOlqC,EAAKw3B,aAAa0mB,GACzB1oD,EAAqB/hB,OAAOkoB,EAAQnG,oBACxCvsB,KAAKm7D,gBAAgB5uC,GACrB,IAAI4R,EAAMx+B,EAAOu6D,GACfv6D,EAAOwhE,MACLD,GAAkB,EAAA/lC,WAAWv0B,IACzB,EAAA20B,QAAQs2B,OACR,EAAAt2B,QAAQq2B,OACZjyD,EAAOsiE,UAAUhB,EAAKvsC,MAAOvkB,IAE/BxQ,EAAOyD,IAAI,GACXpD,KAAKotE,eAAe7gD,EAAoB,CACtC5sB,EAAO2gE,UAAUW,EAAKvsC,MAAOwsC,GAC7BvhE,EAAOyD,IAAIm8B,EAAa5R,eAAgBnI,KACvC/U,IASL,OAPAsmB,EAAKg4B,cAAckS,GACfjhE,KAAKgkB,QAAQkzC,UACfl3D,KAAKk3D,SACH,EAAApsD,eAAeoqE,kDACfzkE,EAAWrF,OAGR+yB,EAEPn+B,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,aAAc6pE,EAAWvpE,WAAY6zB,EAAa7zB,iBAMrE,CAGL,GAAIupE,EAAWh9B,eAAe1Y,GAC5B,OAAO5/B,EAAO8gC,MAAM,KAAM,CACxBzgC,KAAKgqE,kBAAkB75D,EAAM8kE,EAAY,EAAA5uD,KAAKG,MAAM,GAAO,EAAO/V,EAAWA,YAC7E9Q,EAAOyD,IAAI,IACV,EAAA+3B,WAAWx0B,KAGT,GAAI44B,EAAa0Y,eAAeg9B,GAAa,CAClD,IAAIviD,EAAU1yB,KAAK0yB,QACnB,IAAMuiD,EAAWjY,cAAez9B,EAAay9B,YAAc,CAIzD,IAAIiE,EAAOlqC,EAAKw3B,aAAa0mB,GACzB1oD,EAAqB/hB,OAAOkoB,EAAQnG,oBACxCvsB,KAAKm7D,gBAAgB5uC,GACrB,IAAI4R,EAAMx+B,EAAOu6D,GACfv6D,EAAOwhE,MACLD,GAAkB,EAAA/lC,WAAWv0B,IACzB,EAAA20B,QAAQs2B,OACR,EAAAt2B,QAAQq2B,OACZjyD,EAAOsiE,UAAUhB,EAAKvsC,MAAOvkB,IAE/BxQ,EAAOyD,IAAI,GACXpD,KAAKotE,eAAe7gD,EAAoB,CACtC5sB,EAAO2gE,UAAUW,EAAKvsC,MAAOwsC,GAC7BvhE,EAAOyD,IAAIm8B,EAAa5R,eAAgBnI,KACvC/U,IAGL,OADAsmB,EAAKg4B,cAAckS,GACZ9iC,EAEPn+B,KAAK8oB,MACH,EAAAhe,eAAe2+C,8CACfh5C,EAAWrF,MAAO,aAAc6pE,EAAWvpE,WAAY6zB,EAAa7zB,aAO5E,OAAO/L,EAAO8gC,MAAM,KAAM,CACxB9gC,EAAOuiE,KAAK/xD,GACZxQ,EAAOyD,IAAI,IACV,EAAA+3B,WAAWx0B,KAGR,oBAAoB8J,EAAkCxO,GAC5D,IAAItC,EAASK,KAAKL,OACdwQ,EAAOnQ,KAAKg+D,kBAAkBvtD,EAAWA,WAAY,EAAA4V,KAAKmxB,MAC1Dy9B,EAAaj1E,KAAKqlD,YAClB6b,EAAiB+T,EAAW58B,eAEhCr4C,KAAKqlD,YAAc,EAAAh/B,KAAKziB,KAGxB,IAAI+pB,EAAiBsnD,EAAWtnD,eAChC,GAAIsnD,EAAWnnD,GAAG,MAA2C,OAAnBH,EAAyB,CAGjE,GAAIA,EAAe2K,QAAQr2B,GAGzB,OAAIgzE,EAAWnnD,GAAG,KACTnuB,EAAOmgE,OACZoB,GAAkB,EAAA/lC,WAAWv0B,IACzB,EAAA40B,SAAS82B,MACT,EAAA92B,SAAS62B,MACbliD,EACAnQ,KAAKk/D,SAAS+V,IAKTt1E,EAAO8gC,MAAM,KAAM,CACxB9gC,EAAOuiE,KAAK/xD,GACZxQ,EAAOyD,IAAI,IACV,EAAA+3B,WAAWx0B,KAIX,GAAI1E,EAAUq2B,QAAQ3K,EAAe1rB,WAE1C,OADAjC,KAAKo4D,uBAAuB3xC,IAAIxkB,GACzBtC,EAAOa,KAAKyB,EAAUgjB,aAAe,cAAe,CAAE9U,GAAQ,EAAAgrB,WAAWx0B,KAKpF,OAAOhH,EAAO8gC,MAAM,KAAM,CACxB9gC,EAAOuiE,KAAK/xD,GACZxQ,EAAOyD,IAAI,IACV,EAAA+3B,WAAWx0B,KAGR,yBACN8J,EACAs4D,EACAxB,EACA4N,GAAyB,GAEzB,IAAIx1E,EAASK,KAAKL,OAClB,OAAQ8Q,EAAWqJ,aACjB,KAAK,EAAApM,YAAYwM,MAEf,OADA1P,QAAQ2qE,GACDn1E,KAAKo1E,oBACc3kE,EACxBs4D,EACAxB,GAGJ,KAAK,EAAA75D,YAAYqM,MAAO,CACtB,IAAIs7D,EAAsC5kE,EAAYnP,MAItD,OAHI6zE,IACFE,GAAcA,GAEZtM,GAAkB,EAAA1iD,KAAKxiB,IAClBlE,EAAOkE,IAASwxE,IAEzBr1E,KAAKqlD,YAAc,EAAAh/B,KAAKviB,IACjBnE,EAAOmE,IAAIuxE,IAEpB,KAAK,EAAA3nE,YAAYsM,QAAS,CACxB,IAAIouC,EAAsC33C,EAAYnP,MAClD6zE,IACF/sB,EAAWc,QACTniC,QAAQ,GACRqhC,IAGJ,IAAI15C,EAAO1O,KAAKolB,SAAS6jC,4BAA4Bb,EAAU2gB,GAE/D,OADA/oE,KAAKqlD,YAAc32C,EACXA,EAAKd,MACX,KAAK,EAAgB,IAAK5N,KAAKgkB,QAAQgD,SAAU,OAAOrnB,EAAOyD,IAAIkjC,QAAQ8hB,IAC3E,KAAK,EAAc,OAAOzoD,EAAO0D,IAAIijC,QAAQ8hB,GAAW7hB,SAAS6hB,IACjE,KAAK,EAAgB,IAAKpoD,KAAKgkB,QAAQgD,SAAU,OAAOrnB,EAAOyD,IAAIkjC,QAAQ8hB,IAC3E,KAAK,EAAc,OAAOzoD,EAAO0D,IAAIijC,QAAQ8hB,GAAW7hB,SAAS6hB,IACjE,KAAK,GAAc,OAAOzoD,EAAOkE,IAAIyxE,WAAWltB,IAChD,KAAK,GAAc,OAAOzoD,EAAOmE,IAAIyxE,WAAWntB,IAChD,QAAS,OAAOzoD,EAAOyD,IAAIkjC,QAAQ8hB,KAGvC,KAAK,EAAA16C,YAAY0N,OAEf,OADA5Q,QAAQ2qE,GACDn1E,KAAKw1E,qBAA8C/kE,EAAY82D,GAExE,KAAK,EAAA75D,YAAYsN,OAEf,OADAxQ,QAAQ2qE,GACDn1E,KAAKy1E,qBAA8ChlE,EAAYs4D,GAS1E,OALA/oE,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACf9e,EAAWrF,OAEbpL,KAAKqlD,YAAc0jB,EACZppE,EAAOklE,cAGR,qBACNp0D,EACA82D,GAEA,IAAIp3D,EAAOnQ,KAAK01E,mBAAmBjlE,EAAWnP,OAO9C,OANkB,GAAdimE,GACFvnE,KAAKi4D,oBAAoBxxC,IAAItW,GAKxBA,EAGD,oBACNM,EACAs4D,EACAxB,GAEA,IAAI5nE,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YACZ7mC,EAAU1yB,KAAK0yB,QAGnB,GAAIq2C,EAAej7C,GAAG,KAAsB,CAC1C,IAAIH,EAAiBo7C,EAAep7C,eACpC,GAAuB,OAAnBA,GAA2BA,EAAe2K,QAAQ5F,EAAQhH,sBAC5D,OAAO1rB,KAAK21E,0BAA0BllE,EAAYs4D,EAAgBxB,GAKtE,IAAIh2D,EAAUvR,KAAKolB,SAAS2iC,iBAAiBt3C,EAAYsmB,EAAM/2B,KAAKqlD,aACpE,IAAK9zC,EAAS,OAAO5R,EAAOklE,cAC5Br6D,OAAO+G,EAAQ3D,MAAQ,EAAA2R,YAAY9E,OACnC,IAAIyoD,EAAuB3xD,EACvBqkE,EAAY1S,EAAcx0D,KAC1Bu7C,EAAcz/C,OAAO04D,EAAc9oC,mBAAmB1H,EAAQjH,iBAAiB,GAC/E9B,EAAsBnf,OAAOkoB,EAAQ/I,qBAGrCsmD,EAAWl5C,EAAKw3B,aAAavuD,KAAKgkB,QAAQuC,WAC1CsvD,EAAgB9+C,EAAKw3B,aAAa5kC,EAAoBjb,MAGtD0C,EAAcX,EAAWF,mBACzBpE,EAASiF,EAAYjF,OACrBgG,EAAS,IAAI1K,MAAqB0E,GAClCokB,GAAW,EACXulD,EAAoB7rB,EAAY5R,eACpC,IAAK,IAAIh4C,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC/B,IAAIoQ,EAAaW,EAAY/Q,GACzB8P,EAAOM,EACP9Q,EAAOi/D,qBACL5+D,KAAKg+D,kBAA8BvtD,EAAYw5C,EAC7C,KAGJjqD,KAAKk/D,SAASjV,GACd,EAAA9pB,gBAAgBhwB,IAAS,EAAAkrB,aAAaqP,MACxClgC,OAAO,EAAAg2B,kBAAkBrwB,IAAS2lE,GAElCvlD,GAAW,EAEbpe,EAAO9R,GAAK8P,EAId,GAAIogB,EAAU,CACZwG,EAAKg4B,cAAckhB,GACnBl5C,EAAKg4B,cAAc8mB,GAEnB,IAAIlT,EAAoBjwC,EAAQiwC,kBAC5BM,EAAgBjjE,KAAK+1E,gBAAgB9rB,EAAa93C,GAClD6jE,EAAgBz1B,QAAQ0iB,EAAc19C,OAAQwB,QAAQ47C,IAI1D,GAAkB,GAAd4E,EAAyC,CAC3C,IAAI0O,EAAej2E,KAAKk2E,qBAAqBjsB,EAAagZ,GACtDkT,EAAe51B,QAAQ01B,EAAa1wD,OAAQwB,QAAQ47C,IAExD,OADA3iE,KAAKqlD,YAAcuwB,EACZljD,EAAQ1O,QAAQgD,SACnBhnB,KAAKL,OAAO0D,IAAIijC,QAAQ6vC,GAAe5vC,SAAS4vC,IAChDn2E,KAAKL,OAAOyD,IAAIkjC,QAAQ6vC,IAGvB,CAEL,IAAIhmE,EAAOnQ,KAAKotE,eAAe16C,EAAQhG,mBAAoB,CACzD/sB,EAAOyD,IAAI+I,GACXumB,EAAQ1O,QAAQgD,SACZrnB,EAAO0D,IAAI4mD,EAAYmsB,WACvBz2E,EAAOyD,IAAI6mD,EAAYmsB,WAC3Bz2E,EAAOyD,IAAY8/D,EAAe19C,IAClCkN,EAAQ1O,QAAQgD,SACZrnB,EAAO0D,IAAIijC,QAAQ0vC,GAAgBzvC,SAASyvC,IAC5Cr2E,EAAOyD,IAAIkjC,QAAQ0vC,KACtBvlE,GAUH,OATAzQ,KAAKqlD,YAAcuwB,EACnBzlE,EAAOnQ,KAAKs/D,WAAWnvD,GACnBylE,EAAUvW,YACQ,GAAdkI,EAGJvnE,KAAKi4D,oBAAoBxxC,IAAItW,GAF7BA,EAAOnQ,KAAKwvE,gBAAgBr/D,EAAMylE,IAK/BzlE,GAMX,IADqB+yD,EAAe/qC,eAAe,EAAA7Y,aAAaM,aAAa,GAS3E,OAPAmX,EAAKg4B,cAAckhB,GACnBl5C,EAAKg4B,cAAc8mB,GACnB71E,KAAK8oB,MACH,EAAAhe,eAAeokE,+CACfz+D,EAAWrF,MAAO83D,EAAcj+C,cAElCjlB,KAAKqlD,YAAcuwB,EACZj2E,EAAOklE,cAEhB,IAAIwR,EAAkBT,EAAUv9B,eAE5BrY,EAAQ,IAAIv4B,MAEhBu4B,EAAMtzB,KACJ/M,EAAO0gE,UAAU4P,EAASv7C,MACxB10B,KAAKs/D,WACHt/D,KAAKotE,eAAe16C,EAAQhG,mBAAoB,CAC9C/sB,EAAOyD,IAAI+I,GACXumB,EAAQ1O,QAAQgD,SACZrnB,EAAO0D,IAAI4mD,EAAYmsB,WACvBz2E,EAAOyD,IAAI6mD,EAAYmsB,WAC3Bz2E,EAAOyD,IAAY8/D,EAAe19C,IAClCkN,EAAQ1O,QAAQgD,SACZrnB,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,IACdqN,MAKT,IAAI6lE,EAAY9rE,OAAO04D,EAAc35C,aAAa,cAClD/e,OAAO8rE,EAAU1oE,MAAQ,EAAA2R,YAAYiO,OACrCwS,EAAMtzB,KACJ/M,EAAO0gE,UAAUwV,EAAcnhD,MAC7B/0B,EAAOqiE,KAAK4T,EAAU5+B,UAAU,EAC9Br3C,EAAO2gE,UAAU2P,EAASv7C,MAAO2hD,GACjCA,EACQC,EAAW3+C,gBAIzB,IAAI0nC,EAAYpV,EAAYoV,UAC5B,IAAK,IAAIh/D,EAAI,EAAG+1E,EAAYnsB,EAAYmsB,UAAW/1E,EAAI8L,IAAU9L,EAAG,CAClE,IAAI0hE,EAAY5vD,EAAO9R,GACnBg/D,IAEGr/D,KAAKi4D,oBAAoBlrD,IAAIg1D,KAChCA,EAAY/hE,KAAKs/D,WAAWyC,KAIhC/hC,EAAMtzB,KACJ/M,EAAOyiE,MAAMnY,EAAYjT,SACvBr3C,EAAO2gE,UAAUuV,EAAcnhD,MAAO2hD,GACtCtU,EACA+T,EACAz1E,GAAK+1E,IAKXp2C,EAAMtzB,KACJ/M,EAAO2gE,UAAU2P,EAASv7C,MAAO2hD,IAEnCt/C,EAAKg4B,cAAckhB,GACnBl5C,EAAKg4B,cAAc8mB,GACnB71E,KAAKqlD,YAAcuwB,EACnB,IAAIzlE,EAAOxQ,EAAO+6D,QAAQ16B,EAAOq2C,GAQjC,OAPIT,EAAUvW,YACM,GAAdkI,EACFvnE,KAAKi4D,oBAAoBxxC,IAAItW,GAE7BA,EAAOnQ,KAAKwvE,gBAAgBr/D,EAAMylE,EAAW51E,KAAKu5D,cAG/CppD,EAID,0BACNM,EACAs4D,EACAxB,GAEA,IAAI5nE,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YACZ7mC,EAAU1yB,KAAK0yB,QAGnBloB,OAAOu+D,EAAej7C,GAAG,MACzB,IAAIo1C,EAAgB14D,OAAOu+D,EAAep7C,gBACtCioD,EAAY1S,EAAcx0D,KAC1Bu7C,EAAcz/C,OAAO04D,EAAc9oC,mBAAmB1H,EAAQhH,uBAAuB,GAGrFukD,EAAWl5C,EAAKw3B,aAAavuD,KAAKgkB,QAAQuC,WAG1CnV,EAAcX,EAAWF,mBACzBpE,EAASiF,EAAYjF,OACrBgG,EAAS,IAAI1K,MAAqB0E,GAClC2pE,EAAoB7rB,EAAY5R,eAChC9nB,GAAW,EACf,IAAK,IAAIlwB,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC/B,IACI8P,EADAM,EAAaW,EAAY/Q,GAEzBoQ,GACFN,EAAOxQ,EAAOi/D,qBACZ5+D,KAAKg+D,kBAA8BvtD,EAAYw5C,EAC7C,KAGA,EAAA9pB,gBAAgBhwB,IAAS,EAAAkrB,aAAaqP,MACxClgC,OAAO,EAAAg2B,kBAAkBrwB,IAAS2lE,GAElCvlD,GAAW,GAGbpgB,EAAOnQ,KAAKk/D,SAASjV,GAEvB93C,EAAO9R,GAAK8P,EAGd,IAAI6W,EAAWhnB,KAAKgkB,QAAQgD,SACxBuvD,EAAapkE,EAAOhG,QAAU89C,EAAYmsB,UAG9C,GAAI7lD,EAAU,CACZwG,EAAKg4B,cAAckhB,GAEnB,IAAIhN,EAAgBjjE,KAAK+1E,gBAAgB9rB,EAAa93C,EAAQ+wD,EAAc19C,IACxEwwD,EAAgBz1B,QAAQ0iB,EAAc19C,OAAQwB,QAAQ2L,EAAQiwC,oBAGlE,GAAkB,GAAd4E,EAAyC,CAC3C,IAAIp3D,EAAOnQ,KAAKgkB,QAAQgD,SACpBrnB,EAAO0D,IAAIijC,QAAQ0vC,GAAgBzvC,SAASyvC,IAC5Cr2E,EAAOyD,IAAIkjC,QAAQ0vC,IAQvB,OAPkB,GAAdzO,GACFvnE,KAAKi4D,oBAAoBxxC,IAAItW,GAK/BnQ,KAAKqlD,YAAcuwB,EACZzlE,EAGF,CAEL,IAAIA,EAAOnQ,KAAKs/D,WACdt/D,KAAKotE,eAAe16C,EAAQjG,oBAAqB,CAC/CzF,EACIrnB,EAAO0D,IAAIkzE,GACX52E,EAAOyD,IAAImzE,GACf52E,EAAOyD,IAAI8/D,EAAc19C,IACzBwB,EACIrnB,EAAO0D,IAAIijC,QAAQ0vC,GAAgBzvC,SAASyvC,IAC5Cr2E,EAAOyD,IAAIkjC,QAAQ0vC,KACtBvlE,IAUL,OARImlE,EAAUvW,YACM,GAAdkI,EACFvnE,KAAKi4D,oBAAoBxxC,IAAItW,GAE7BA,EAAOnQ,KAAKwvE,gBAAgBr/D,EAAMylE,IAGtC51E,KAAKqlD,YAAcuwB,EACZzlE,GAMX,IADa+yD,EAAc/qC,eAAe,EAAA7Y,aAAaM,aAAa,GAQlE,OANAmX,EAAKg4B,cAAckhB,GACnBjwE,KAAK8oB,MACH,EAAAhe,eAAeokE,+CACfz+D,EAAWrF,MAAO83D,EAAcj+C,cAElCjlB,KAAKqlD,YAAcuwB,EACZj2E,EAAOklE,cAEhB,IAAIwR,EAAkBT,EAAUv9B,eAE5BrY,EAAQ,IAAIv4B,MAEhBu4B,EAAMtzB,KACJ/M,EAAO0gE,UAAU4P,EAASv7C,MACxB10B,KAAKs/D,WACHt/D,KAAKotE,eAAe16C,EAAQjG,oBAAqB,CAC/CzF,EACIrnB,EAAO0D,IAAIkzE,GACX52E,EAAOyD,IAAImzE,GACf52E,EAAOyD,IAAI8/D,EAAc19C,KACxB/U,MAIT,IAAI4uD,EAAYpV,EAAYoV,UAC5B,IAAK,IAAIh/D,EAAI,EAAG+1E,EAAYnsB,EAAYmsB,UAAW/1E,EAAI8L,IAAU9L,EAAG,CAClE,IAAI0hE,EAAY5vD,EAAO9R,GACnBg/D,IAEGr/D,KAAKi4D,oBAAoBlrD,IAAIg1D,KAChCA,EAAY/hE,KAAKs/D,WAAWyC,KAIhC/hC,EAAMtzB,KACJ/M,EAAOyiE,MAAMnY,EAAYjT,SACvBr3C,EAAO2gE,UAAU2P,EAASv7C,MAAO2hD,GACjCtU,EACA+T,EACAz1E,GAAK+1E,IAKXp2C,EAAMtzB,KACJ/M,EAAO2gE,UAAU2P,EAASv7C,MAAO2hD,IAEnCt/C,EAAKg4B,cAAckhB,GACnBjwE,KAAKqlD,YAAcuwB,EACnB,IAAIzlE,EAAOxQ,EAAO+6D,QAAQ16B,EAAOq2C,GAQjC,OAPIT,EAAUvW,YACM,GAAdkI,EACFvnE,KAAKi4D,oBAAoBxxC,IAAItW,GAE7BA,EAAOnQ,KAAKwvE,gBAAgBr/D,EAAMylE,EAAW51E,KAAKu5D,cAG/CppD,EAGD,qBAAqBM,EAAqCs4D,GAChE,IAAIppE,EAASK,KAAKL,OAGdguB,EAAiBo7C,EAAep7C,eACpC,IAAKA,GAAkBA,EAAeG,GAAG,EAAAzrB,YAAY+tB,UAKnD,OAJApwB,KAAK8oB,MACH,EAAAhe,eAAeiiD,mCACft8C,EAAWrF,MAAO,WAAY29D,EAAer9D,YAExC/L,EAAOklE,cAIhB,IAAI2R,EAAO7oD,EAAegL,oBAC1B,GAAI69C,EAAM,CAGR,GAAIA,EAAKvgE,UAAUuiC,mBAKjB,OAJAx4C,KAAK8oB,MACH,EAAAhe,eAAe2rE,sDACfhmE,EAAWrF,MAAOuiB,EAAejiB,YAE5B/L,EAAOklE,cAEhB,GAAI2R,EAAK1oD,GAAG,EAAAzrB,YAAY84C,SAKtB,OAJAn7C,KAAK8oB,MACH,EAAAhe,eAAe4rE,mFACfjmE,EAAWrF,MAAOuiB,EAAejiB,YAE5B/L,EAAOklE,cAEhB,GAAI2R,EAAK1oD,GAAG,EAAAzrB,YAAY+4C,WAKtB,OAJAp7C,KAAK8oB,MACH,EAAAhe,eAAe6rE,qFACflmE,EAAWrF,MAAOuiB,EAAejiB,YAE5B/L,EAAOklE,cAEZ2R,EAAKvrD,aAAa,EAAAzL,eAAerG,SAASnZ,KAAK+uE,YAAYt+D,GAIjE,IAAIyB,EAAQzB,EAAWyB,MACnBgvB,EAAWhvB,EAAM/F,OACjBgG,EAAS1B,EAAW0B,OACpByB,EAAU+Z,EAAe/Z,QACzBgjE,GAAY,EACZ7C,EAAQ,IAAItsE,MAAqBy5B,EAAW,GAE5CwmC,EADO1nE,KAAKu5D,YACK6Z,oBAAoBzlD,EAAejf,MACxDlE,OAAO02B,GAAY/uB,EAAOhG,QAC1B,IAAK,IAAI9L,EAAI,EAAGwX,EAAIqpB,EAAU7gC,EAAIwX,IAAKxX,EAAG,CACxC,IAAI8sB,EAASvZ,EAAUA,EAAQ1S,IAAIgR,EAAM7R,GAAG4L,MAAQ,KACpD,IAAKkhB,GAAUA,EAAOvf,MAAQ,EAAA2R,YAAYiO,MAAO,CAC/CxtB,KAAK8oB,MACH,EAAAhe,eAAem5C,oCACf/xC,EAAM7R,GAAG+K,MAAO8G,EAAM7R,GAAG4L,KAAM0hB,EAAejiB,YAEhDkrE,GAAY,EACZ,SAEF,IAAIloE,EAAeye,EAAQze,KAC3BqlE,EAAM1zE,EAAI,GAAKL,KAAKL,OAAOyiE,MACzB1zD,EAAKsoC,SACLh3C,KAAKL,OAAO2gE,UAAUoH,EAAUhzC,MAAO10B,KAAKgkB,QAAQk9C,gBACpDlhE,KAAKg+D,kBAAkB7rD,EAAO9R,GAAY8sB,EAAQze,KAAM,GACxDA,EAAK2pC,eACGlrB,EAAQwK,cAIpB,OADA33B,KAAKqlD,YAAc13B,EAAejf,KAAKyoC,gBACnCy/B,EAAkBj3E,EAAOklE,eAG7BkP,EAAM,GAAKp0E,EAAO0gE,UAChBqH,EAAUhzC,MACV10B,KAAKs/D,WACHt/D,KAAKohE,eAAezzC,KAKxBomD,EAAMA,EAAM5nE,OAAS,GAAKxM,EAAO2gE,UAAUoH,EAAUhzC,MAAO10B,KAAKgkB,QAAQk9C,gBAEzElhE,KAAKqlD,YAAc13B,EAAejf,KAC3B/O,EAAO+6D,QAAQqZ,EAAO/zE,KAAKgkB,QAAQk9C,iBAGpC,qBACNzwD,EACAs4D,EACAxB,GAEA,IAAI5nE,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YAGZhgC,EAASv5B,KAAKolB,SAAS2F,gBAAgBta,EAAWvC,SAAU6oB,EAAKytB,gBACrE,IAAKjrB,EAAQ,OAAO55B,EAAOklE,cAC3B,GAAItrC,EAAO3rB,MAAQ,EAAA2R,YAAY0K,gBAK7B,OAJAjqB,KAAK8oB,MACH,EAAAhe,eAAe2/C,qCACfh6C,EAAWvC,SAAS9C,OAEfpL,KAAKL,OAAOklE,cAErB,IAGIl3C,EAHA8C,EAAiC8I,EACjCzE,EAA8B,KAC9BtmB,EAAgBiC,EAAWjC,cAqB/B,OAdEsmB,GAJCtmB,GACoD,QAApDmf,EAAiBo7C,EAAep7C,iBACjCA,EAAeG,GAAG,EAAAzrB,YAAYukB,SAEd5mB,KAAKolB,SAAS0H,aAC5B2D,EACA9C,EAAenf,cACf,EAAAq0C,QAAqB9rB,EAAK7B,0BAGZl1B,KAAKolB,SAASw9B,8BAC5BnyB,EACAjiB,EACAuoB,EAAKytB,eAAe3oC,OACpB,EAAAgnC,QAAqB9rB,EAAK7B,yBAC1BzkB,KAIAs4D,GAAkB,EAAA1iD,KAAKG,OAAM+gD,GAAe,GACzCvnE,KAAK62E,mBAAmB/hD,EAAerkB,EAAWb,UAAW23D,EAAa92D,IAFtD9Q,EAAOklE,cAMpC,kBAAkB/vC,EAAsB02B,GACtC,IAAIj5B,EAAWuC,EAAc6D,oBAC7B,GAAIpG,EAGF,OADKA,EAAStH,aAAa,EAAAzL,eAAe1G,SAAS9Y,KAAKm7D,gBAAgB5oC,GACjEA,EAIT,IAAIukD,EAAYhiD,EAAcqE,KAC1BjE,EAA0B,EAAA2tB,QAAQ/tB,EAAcI,yBACpD,GAAI4hD,EAAW,CACb,IAAIC,EAAW/2E,KAAKwwE,kBAAkBsG,EAAWtrB,GACjDj5B,EAAW,IAAI,EAAAtM,SACb,EAAAjjB,YAAYwC,YACZ,IAAI,EAAA0gB,kBACF,EAAAljB,YAAYwC,YACZsvB,EAEsBiiD,EAAS7lE,YAAa+iE,SAE9C8C,EAAS9gE,UACTif,QAKF3C,EAAW,IAAI,EAAAtM,SACb,EAAAjjB,YAAYwC,YACZ,IAAI,EAAA0gB,kBACF,EAAAljB,YAAYwC,YACZsvB,EACA90B,KAAK0yB,QAAQvM,8BAA8B,EAAAnjB,YAAYwC,YACrD,EAAAnD,YAAY2vB,SAAW,EAAA3vB,YAAYsY,cAGvC,IAAI,EAAA6Y,UAAUxzB,KAAK0yB,QAAS,KAAMoC,EAAcpmB,KAAMomB,EAAcpmB,MACpEwmB,GAIJ3C,EAAStN,aAAe6P,EAAc7P,aAAe,EAAAviB,mBAAqB,cAC1E6vB,EAASplB,IAAI,EAAA9K,YAAYw6D,UACzBtqC,EAAStwB,UAAUspD,oBAAoB,GAAIh5B,GAC3CuC,EAAc6D,oBAAsBpG,EACpC,IAAIorC,EAAe39D,KAAKu5D,YACpBxiC,EAAOxE,EAASwE,KACpB/2B,KAAKu5D,YAAcxiC,EAGnB,IAAI9gB,EAAYsc,EAAStc,UACrBtW,EAASK,KAAKL,OACduhE,EAAiBlhE,KAAKgkB,QAAQk9C,eAC9BlhC,EAAQ,IAAIv4B,MASZuvE,EAAYh3E,KAAKohE,eAAetsC,GAUpC,GATIA,EAAcpmB,KAAK2wD,YAAW2X,EAAYh3E,KAAKs/D,WAAW0X,IAC9Dh3C,EAAMtzB,KACJ/M,EAAOu6D,GACLv6D,EAAOwhE,MAAMD,GAAkB,EAAA/lC,WAAWv0B,IAAM,EAAA20B,QAAQs2B,OAAS,EAAAt2B,QAAQq2B,OACvEjyD,EAAO2gE,UAAU,EAAGY,IAEtBvhE,EAAO0gE,UAAU,EAAG2W,KAGpBF,EAAW,CACb,IAAIngD,EAAiB1gB,EAAU0gB,eAC3B0iB,EAAgB1iB,EAAexqB,OAC/B4xB,EAAW,IAAIt2B,MAAqB,EAAI4xC,GAC5Ctb,EAAS,GAAKp+B,EAAO2gE,UAAU,EAAGY,GAClC,IAAK,IAAI7gE,EAAI,EAAGA,EAAIg5C,IAAiBh5C,EACnC09B,EAAS19B,EAAI,GAAKV,EAAO2gE,UAAUjgE,EAAI,EAAGs2B,EAAet2B,GAAGg4C,gBAG9DrY,EAAMtzB,KACJ/M,EAAO0gE,UAAU,EACfrgE,KAAKotE,eAAe5iE,OAAOssE,EAAUn+C,qBAAsBoF,EAAUytB,GAAY,GAAO,KAI9FxrD,KAAKqhE,qCAAqCvsC,EAAekL,GACzD,IAAI9pB,EAAOlW,KAAKquE,6BAA6Bt3C,EAAMp3B,EAAO2gE,UAAU,EAAGY,GAAiBpsC,EAAcpmB,KAAMsxB,GAC5GjJ,EAAKquC,mBACLplE,KAAKu5D,YAAcoE,EAGnB,IAAIzmC,EAAS3E,EAAS6C,cAClBiP,EAAW,IAAI58B,MACfgsE,EAAc,EAAIx9D,EAAU0gB,eAAexqB,OAC3C2xD,EAAY5mC,EAAO/qB,OACvB,GAAI2xD,EAAY2V,EACd,IAAK,IAAIpzE,EAAIozE,EAAapzE,EAAIy9D,IAAaz9D,EAAGgkC,EAAS33B,KAAKwqB,EAAO72B,GAAGqO,KAAK2pC,gBAE7E,IAAIiiB,EAAU36D,EAAO46D,YAAYhoC,EAAStN,aAAchP,EAAUukD,aAAcvkD,EAAUwkD,cAAep2B,EAAUnuB,GAEnH,OADAqc,EAASooC,SAASh7D,EAAQ26D,GACnB/nC,EAGT,mBAEEuC,EAEAo8C,EAEA3J,EAEA/b,GAEA,IAAIgrB,EAAOx2E,KAAKwwE,kBAAkB17C,EAAe02B,GAC7CgrB,EAAKvrD,aAAa,EAAAzL,eAAerG,SAASnZ,KAAK+uE,YAAYvjB,GAC/D,IAAIr7C,EAAOnQ,KAAKuwE,kBACdiG,EACAtF,EACA1lB,EACAxrD,KAAKk/D,SAASl/D,KAAKgkB,QAAQuC,WAC3BghD,GAKF,OAHI,EAAA/mC,kBAAkBrwB,IAAS,EAAAgrB,WAAW2D,OACxC9+B,KAAKqlD,YAAcvwB,EAAcpmB,MAE5ByB,EAGD,gCACNM,EACAg1C,EACA8hB,GAEA,IAAI5nE,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YAEhBv5D,KAAK00E,4BAA4BjkE,GAEjC,IACI8oB,EADWv5B,KAAKolB,SACE2iC,iBAAiBt3C,EAAYsmB,EAAM0uB,GACzD,IAAKlsB,EAAQ,OAAO55B,EAAOklE,cAG3B,OAFItrC,EAAOtO,aAAa,EAAAzL,eAAerG,SAASnZ,KAAK+uE,YAAYt+D,GAEzD8oB,EAAO3rB,MACb,KAAK,EAAA2R,YAAY1G,OAAQ,CACvB,IAAK7Y,KAAKm9D,cAAsB5jC,GAAS,OAAO55B,EAAOklE,cACvD,IAAIj/B,EAAsBrM,EAAQ7qB,KAElC,OADAlE,OAAOo7B,GAAc,EAAAvf,KAAKG,MACb+S,EAAQzL,GAAG,EAAAzrB,YAAYgyB,SAC3Br0B,KAAKi/D,sBAA8B1lC,EAAQksB,EAAS8hB,IAE7DvnE,KAAKqlD,YAAczf,EACZjmC,EAAOw6D,WAAoB5gC,EAAQtU,aAAc2gB,EAAWyS,iBAErE,KAAK,EAAA94B,YAAYgV,UAAW,CAC1B,IAAI0iD,EAAUzsE,OAAmB+uB,EAAQ1d,QACzC,OADkDrR,OAAOysE,EAAQrpE,MAAQ,EAAA2R,YAAYyU,MAChFh0B,KAAKo9D,YAAkB6Z,IAI5Bj3E,KAAKqlD,YAAc,EAAAh/B,KAAKjjB,IACRm2B,EAAQzL,GAAG,EAAAzrB,YAAYgyB,UACrC7pB,OAAgD,GAA7B+uB,EAAQpF,mBACpBn0B,KAAKi/D,sBAAiC1lC,EAAQksB,EAAS8hB,KAEhE/8D,OAAmB+uB,EAAQ7qB,MAAQ,EAAA2X,KAAKjjB,KACjCzD,EAAOw6D,WAAuB5gC,EAAQtU,aAAc,EAAAkW,WAAWx0B,QATpE3G,KAAKqlD,YAAc,EAAAh/B,KAAKjjB,IACjBpD,KAAKL,OAAOklE,eAUvB,KAAK,EAAAtlD,YAAYiO,MAAO,CACtBhjB,OAAe+uB,EAAQ5B,cAAgB,GACvC,IAAIm3C,EAAiBtkE,OAAOxK,KAAKolB,SAAS08B,uBACtC4tB,EAAW1vE,KAAKg+D,kBAAkB8Q,EAAgB9uE,KAAKgkB,QAAQuC,WAC/DmQ,EAAW12B,KAAKqlD,YAUpB,OATI3uB,EAAS5I,GAAG,OACTiJ,EAAKiqC,UAAU0O,EAAUh5C,IAC5B12B,KAAK8oB,MACH,EAAAhe,eAAeosE,wBACfpI,EAAe1jE,QAIrBpL,KAAKqlD,YAAsB9rB,EAAQ7qB,KAC5B/O,EAAOqiE,KACJzoC,EAAQ7qB,KAAKsoC,SACbzd,EAAQ7qB,KAAKof,GAAG,GACxB4hD,EACQn2C,EAAQ7qB,KAAK2pC,eACb9e,EAAQ5B,cAGpB,KAAK,EAAApY,YAAY6N,mBAAoB,CACnC,IAAIC,EAAsCkM,EAAQlM,gBAClD,GAAIA,EAAiB,CACnB,IAAIxsB,EAASb,KAAKolB,SAAS4H,gBAAgBK,EAAiB,MAC5D,GAAIxsB,EAAQ,OAAOb,KAAKuwE,kBAAkB1vE,EAAQ,GAAI4P,EAAY,GAEpE,OAAO9Q,EAAOklE,cAEhB,KAAK,EAAAtlD,YAAYgO,SAAU,CACzB,IAAIwK,EAAiBvtB,OAAkB+uB,EAAQxB,gBAC/C,OAAO/3B,KAAKuwE,kBAAkBx4C,EAAgB,GAAItnB,EAChDzQ,KAAKg+D,kBAAkBxzD,OAAOxK,KAAKolB,SAAS08B,uBAAwB9hD,KAAKgkB,QAAQuC,YAGrF,KAAK,EAAAhH,YAAYwN,mBAAoB,CACnC,IAAI9qB,EAA+Bs3B,EAEnC,GAAIt3B,EAAU6rB,GAAG,EAAAzrB,YAAY4tB,QAAS,CACpC,IAAIsC,EAAWvyB,KAAKolB,SAAS4H,gBAAgB/qB,EAAW,MACxD,OAAKswB,GACAvyB,KAAKm7D,gBAAgB5oC,IAC1BvyB,KAAKqlD,YAAc9yB,EAAS7jB,KACrB/O,EAAOyD,IAAIpD,KAAKo0E,yBAAyB7hD,KAH1B5yB,EAAOklE,cAU/B,OAJA7kE,KAAK8oB,MACH,EAAAhe,eAAeqsE,wEACf1mE,EAAWrF,MAAOnJ,EAAUrB,MAEvBjB,EAAOklE,eAOlB,OAJA7kE,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACf9e,EAAWrF,OAENzL,EAAOklE,cAGR,yBACNp0D,EACAg1C,EACA8hB,GAEA,IAAI30D,EAASnC,EAAWmC,OACpBC,EAASpC,EAAWoC,OACpBoyD,EAAYjlE,KAAKu5D,YAEjByM,EAAWhmE,KAAKL,OAAOi/D,qBACzB5+D,KAAKimE,cACHjmE,KAAKg+D,kBAAkBvtD,EAAWkC,UAAW,EAAA0T,KAAKziB,MAClD5D,KAAKqlD,cAMT,GACE,EAAAllB,gBAAgB6lC,IAAa,EAAA3qC,aAAaqP,OAC1C,EAAAlK,kBAAkBwlC,IAAa,EAAA7qC,WAAWx0B,IAE1C,OAAO,EAAA2qD,iBAAiB0U,GACpBhmE,KAAKg+D,kBAAkBprD,EAAQ6yC,GAC/BzlD,KAAKg+D,kBAAkBnrD,EAAQ4yC,GAGrC,IAAImmB,EAAqC,GAAdrE,EAEvB6P,EAAanS,EAAUE,OAC3BnlE,KAAKu5D,YAAc6d,EACnB,IAAIC,EAAar3E,KAAKg+D,kBAAkBprD,EAAQ6yC,EAASmmB,GACrD0L,EAAat3E,KAAKqlD,YAClBkyB,EAA2Bv3E,KAAKi4D,oBAAoBlrD,IAAIsqE,GAExDG,EAAavS,EAAUE,OAC3BnlE,KAAKu5D,YAAcie,EACnB,IAAIC,EAAaz3E,KAAKg+D,kBAAkBnrD,EAAQ4yC,EAASmmB,GACrD8L,EAAa13E,KAAKqlD,YAClBsyB,EAA2B33E,KAAKi4D,oBAAoBlrD,IAAI0qE,GAExDluB,EAAa,EAAAljC,KAAKmjC,kBAAkB8tB,EAAYI,GAAY,GAChE,IAAKnuB,EAMH,OALAvpD,KAAK8oB,MACH,EAAAhe,eAAeiiD,mCACfl6C,EAAOzH,MAAOssE,EAAWhsE,WAAY4rE,EAAW5rE,YAElD1L,KAAKqlD,YAAcI,EACZzlD,KAAKL,OAAOklE,cAgBrB,GAdAwS,EAAar3E,KAAKgqE,kBAChBqN,EACAC,EAAY/tB,GACZ,GAAO,EACP32C,GAEF6kE,EAAaz3E,KAAKgqE,kBAChByN,EACAC,EAAYnuB,GACZ,GAAO,EACP12C,GAEF7S,KAAKqlD,YAAckE,EAEfguB,GAA4BI,EACzBJ,GAIHE,EAAaz3E,KAAKs/D,WAAWmY,GAC7BE,GAA2B,IAJ3BN,EAAar3E,KAAKs/D,WAAW+X,GAC7BE,GAA2B,QAKxB,IAAKA,GAA4BhuB,EAAW8V,UACjD,GAAkB,GAAdkI,EAAuC,EAErB,GADFvnE,KAAKkqE,mBAAmBmN,EAAYD,KAC/BC,EAAar3E,KAAKs/D,WAAW+X,KAEhC,GADFr3E,KAAKkqE,mBAAmBuN,EAAYD,KAC/BC,EAAaz3E,KAAKs/D,WAAWmY,IACpDF,GAA2B,EAC3BI,GAA2B,OAE3BN,EAAar3E,KAAKyuE,iBAAiB4I,EAAYC,EAAYF,EAAYnS,GACvEwS,EAAaz3E,KAAKyuE,iBAAiBgJ,EAAYC,EAAYF,EAAYvS,GAI3EoS,EAAar3E,KAAKquE,6BAA6B+I,EAAYC,EAAY9tB,GACvE6tB,EAAWhS,mBAEXqS,EAAaz3E,KAAKquE,6BAA6BmJ,EAAYC,EAAYluB,GACvEiuB,EAAWpS,mBAEXplE,KAAKu5D,YAAc0L,EACnBA,EAAUoC,cAAc+P,EAAYI,GAEpC,IAAIrnE,EAAOnQ,KAAKL,OAAOu6D,GAAG8L,EAAUqR,EAAYI,GAGhD,OAFAjtE,OAAO+sE,GAA4BI,GAC/BJ,GAA0Bv3E,KAAKi4D,oBAAoBxxC,IAAItW,GACpDA,EAGD,8BACNM,EACAs4D,EACAxB,GAEA,IAAI5nE,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YAGZqe,EAAW53E,KAAKg+D,kBAClBvtD,EAAW0C,QACX41D,EAAe8C,WAAU,GAK3B,GAAI,EAAA1rC,gBAAgBy3C,IAAa,EAAAv8C,aAAaiF,YAAa,OAAOs3C,EAIlE,IASIznE,EATAu3D,EAA0B,KAW9B,OAVIqB,GAAkB,EAAA1iD,KAAKG,OACzBkhD,EAAY3wC,EAAKw3B,aAAavuD,KAAKqlD,aACnCuyB,EAAWj4E,EAAOsiE,UAChByF,EAAUhzC,MACVkjD,IAMInnE,EAAWG,UACjB,KAAK,EAAAtD,MAAMqW,UAGT,GAAI3jB,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB3tB,KAAKqlD,YAAY13B,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAaiC,aAC1D,GAAImY,EAAU,CACZ,IAAIuB,EAAavB,EAAS5L,GAAG,EAAAzrB,YAAY2vB,UAOzC,GANkB,OAAd01C,GAAuBzsC,IACzB28C,EAAW,EAAAxmB,iBAAiBwmB,GAC5B7gD,EAAKg4B,cAAc2Y,GACnBA,EAAY,MAEdv3D,EAAOnQ,KAAK63E,qBAAqBn+C,EAAUjpB,EAAW0C,QAASykE,EAAUnnE,GACrEwqB,EAAY,MAChB,OAAO9qB,GAQX,OALAnQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMpL,KAAKqlD,YAAY35C,YAEvCg8D,GAAW3wC,EAAKg4B,cAAc2Y,GAC3B/nE,EAAOklE,cAGhB,OAAQ7kE,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHuC,EAAOxQ,EAAOmgE,OACZ,EAAAtkC,SAASukC,OACT6X,EACAj4E,EAAOyD,IAAI,IAEb,MAEF,KAAK,EACL,KAAK,EAAgB,CACnB,IAAI4gB,EAAUhkB,KAAKgkB,QACnB7T,EAAOxQ,EAAOmgE,OACZ97C,EAAQgD,SACJ,EAAAwU,SAASixC,OACT,EAAAjxC,SAASukC,OACb6X,EACA53E,KAAK83E,QAAQ93E,KAAKqlD,cAEpB,MAEF,KAAK,EACL,KAAK,EACHl1C,EAAOxQ,EAAOmgE,OACZ,EAAAtkC,SAASixC,OACTmL,EACAj4E,EAAO0D,IAAI,IAEb,MAEF,KAAK,GACH8M,EAAOxQ,EAAOmgE,OACZ,EAAAtkC,SAASkxC,OACTkL,EACAj4E,EAAOkE,IAAI,IAEb,MAEF,KAAK,GACHsM,EAAOxQ,EAAOmgE,OACZ,EAAAtkC,SAASmxC,OACTiL,EACAj4E,EAAOmE,IAAI,IAEb,MAEF,QAKE,OAJA9D,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMpL,KAAKqlD,YAAY35C,YAEpC/L,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAMsW,YAGT,GAAI5jB,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB3tB,KAAKqlD,YAAY13B,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAakC,aAC1D,GAAIkY,EAAU,CACZ,IAAIuB,EAAavB,EAAS5L,GAAG,EAAAzrB,YAAY2vB,UAOzC,GANkB,OAAd01C,GAAuBzsC,IACzB28C,EAAW,EAAAxmB,iBAAiBwmB,GAC5B7gD,EAAKg4B,cAAc2Y,GACnBA,EAAY,MAEdv3D,EAAOnQ,KAAK63E,qBAAqBn+C,EAAUjpB,EAAW0C,QAASykE,EAAUnnE,GACrEipB,EAAS5L,GAAG,EAAAzrB,YAAY2vB,UAAW,MACvC,OAAO7hB,GAQX,OALAnQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMpL,KAAKqlD,YAAY35C,YAEvCg8D,GAAW3wC,EAAKg4B,cAAc2Y,GAC3B/nE,EAAOklE,cAGhB,OAAQ7kE,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHuC,EAAOxQ,EAAOmgE,OACZ,EAAAtkC,SAASoxC,OACTgL,EACAj4E,EAAOyD,IAAI,IAEb,MAEF,KAAK,EACL,KAAK,EAAgB,CACnB,IAAI4gB,EAAUhkB,KAAKgkB,QACnB7T,EAAOxQ,EAAOmgE,OACZ97C,EAAQgD,SACJ,EAAAwU,SAASqxC,OACT,EAAArxC,SAASoxC,OACbgL,EACA53E,KAAK83E,QAAQ93E,KAAKqlD,cAEpB,MAEF,KAAK,EACL,KAAK,EACHl1C,EAAOxQ,EAAOmgE,OACZ,EAAAtkC,SAASqxC,OACT+K,EACAj4E,EAAO0D,IAAI,IAEb,MAEF,KAAK,GACH8M,EAAOxQ,EAAOmgE,OACZ,EAAAtkC,SAASsxC,OACT8K,EACAj4E,EAAOkE,IAAI,IAEb,MAEF,KAAK,GACHsM,EAAOxQ,EAAOmgE,OACZ,EAAAtkC,SAASuxC,OACT6K,EACAj4E,EAAOmE,IAAI,IAEb,MAEF,QAKE,OAJA9D,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMpL,KAAKqlD,YAAY35C,YAEpC/L,EAAOklE,cAGlB,MAEF,QAEE,OADAr6D,QAAO,GACA7K,EAAOklE,cAIlB,IAAIz/C,EAAWplB,KAAKolB,SAChBmU,EAASnU,EAAS2iC,iBAAiBt3C,EAAW0C,QAAS4jB,GAC3D,IAAKwC,EAEH,OADImuC,GAAW3wC,EAAKg4B,cAAc2Y,GAC3B/nE,EAAOklE,cAIhB,IAAK6C,EACH,OAAO1nE,KAAK6uE,eACVt1C,EACAppB,EACAnQ,KAAKqlD,YACL50C,EAAW0C,QACXiS,EAAS08B,sBACT18B,EAAS28B,0BACT,GAKJ,IAAIg2B,EAAW/3E,KAAK6uE,eAClBt1C,EACAppB,EACAnQ,KAAKqlD,YACL50C,EAAW0C,QACXiS,EAAS08B,sBACT18B,EAAS28B,0BACT,GAGF/hD,KAAKqlD,YAAcqiB,EAAUh5D,KAC7BqoB,EAAKg4B,cAAc2Y,GACnB,IAAIzJ,EAAayJ,EAAUh5D,KAAK2pC,eAEhC,OAAO14C,EAAO8gC,MAAM,KAAM,CACxBs3C,EACAp4E,EAAO2gE,UAAUoH,EAAUhzC,MAAOupC,IACjCA,GAGG,6BACNxtD,EACAs4D,EACAxB,GAEA,IAEIp3D,EAFAxQ,EAASK,KAAKL,OACdusE,GAAW,EAGf,OAAQz7D,EAAWG,UACjB,KAAK,EAAAtD,MAAM2T,KAQT,GAPA9Q,EAAOnQ,KAAKg+D,kBACVvtD,EAAW0C,QACX41D,EAAe8C,WAAU,GAKvB7rE,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB3tB,KAAKqlD,YAAY13B,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAa2B,MAC1D,GAAIyY,EAAU,OAAO15B,KAAK63E,qBAAqBn+C,EAAUjpB,EAAW0C,QAAShD,EAAMM,GAMrF,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKpL,KAAKqlD,YAAY35C,YAEnC/L,EAAOklE,cAIhB,MAEF,KAAK,EAAAv3D,MAAM6T,MACT,GAAI1Q,EAAW0C,QAAQvF,MAAQ,EAAAJ,SAASK,UAClB4C,EAAW0C,QAAS2G,aAAe,EAAApM,YAAYsM,SAC/CvJ,EAAW0C,QAAS2G,aAAe,EAAApM,YAAYqM,OAClE,CAED5J,EAAOnQ,KAAKypE,yBAA4Ch5D,EAAW0C,QAAS41D,EAAgB,GAAkB,GAE1G/oE,KAAKgkB,QAAQmT,WAAWn3B,KAAK8kE,iBAAiB30D,EAAMM,EAAWrF,OACnE,MAUF,GAPA+E,EAAOnQ,KAAKg+D,kBACVvtD,EAAW0C,QACX41D,EAAe8C,WAAU,GAKvB7rE,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB3tB,KAAKqlD,YAAY13B,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAa6B,OAC1D,GAAIuY,EAAU,OAAO15B,KAAK63E,qBAAqBn+C,EAAUjpB,EAAW0C,QAAShD,EAAMM,GAMrF,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKpL,KAAKqlD,YAAY35C,YAEnC/L,EAAOklE,cAGhB,OAAQ7kE,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASoxC,OAAQjtE,EAAOyD,IAAI,GAAI+M,GACrD,MAEF,KAAK,EACL,KAAK,EACHA,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASqxC,OACT,EAAArxC,SAASoxC,OACb5sE,KAAKk/D,SAASl/D,KAAKqlD,aACnBl1C,GAEF,MAEF,KAAK,EACL,KAAK,EACHA,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASqxC,OAAQltE,EAAO0D,IAAI,GAAI8M,GACrD,MAEF,KAAK,GACHA,EAAOxQ,EAAOwhE,MAAM,EAAA5lC,QAAQy8C,OAAQ7nE,GACpC,MAEF,KAAK,GACHA,EAAOxQ,EAAOwhE,MAAM,EAAA5lC,QAAQ08C,OAAQ9nE,GACpC,MAEF,QACEnQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKpL,KAAKqlD,YAAY35C,YAE1CyE,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAMqW,UAST,GARAuoD,GAAW,EACX/7D,EAAOnQ,KAAKg+D,kBACVvtD,EAAW0C,QACX41D,EAAe8C,WAAU,GAKvB7rE,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB3tB,KAAKqlD,YAAY13B,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAa4B,YAC1D,GAAIwY,EAAU,CAEZ,GADAvpB,EAAOnQ,KAAK63E,qBAAqBn+C,EAAUjpB,EAAW0C,QAAShD,EAAMM,GACjEipB,EAAS5L,GAAG,EAAAzrB,YAAY2vB,UAAW,MACvC,OAAO7hB,GAOX,OAJAnQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMpL,KAAKqlD,YAAY35C,YAEpC/L,EAAOklE,cAGhB,OAAQ7kE,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASukC,OAAQ5vD,EAAMnQ,KAAKL,OAAOyD,IAAI,IAC5D,MAEF,KAAK,EACL,KAAK,EACH+M,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASixC,OACT,EAAAjxC,SAASukC,OACb5vD,EACAnQ,KAAK83E,QAAQ93E,KAAKqlD,cAEpB,MAEF,KAAK,EACL,KAAK,EACHl1C,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASixC,OAAQt8D,EAAMxQ,EAAO0D,IAAI,IACvD,MAEF,KAAK,GACH8M,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASkxC,OAAQv8D,EAAMxQ,EAAOkE,IAAI,IACvD,MAEF,KAAK,GACHsM,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASmxC,OAAQx8D,EAAMxQ,EAAOmE,IAAI,IACvD,MAEF,QACE9D,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMpL,KAAKqlD,YAAY35C,YAE3CyE,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAMsW,YAST,GARAsoD,GAAW,EACX/7D,EAAOnQ,KAAKg+D,kBACVvtD,EAAW0C,QACX41D,EAAe8C,WAAU,GAKvB7rE,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB3tB,KAAKqlD,YAAY13B,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAa8B,YAC1D,GAAIsY,EAAU,CAEZ,GADAvpB,EAAOnQ,KAAK63E,qBAAqBn+C,EAAUjpB,EAAW0C,QAAShD,EAAMM,GACjEipB,EAAS5L,GAAG,EAAAzrB,YAAY2vB,UAAW,MACvC,OAAO7hB,GAOX,OAJAnQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMpL,KAAKqlD,YAAY35C,YAEpC/L,EAAOklE,cAGhB,OAAQ7kE,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASoxC,OAAQz8D,EAAMxQ,EAAOyD,IAAI,IACvD,MAEF,KAAK,EACL,KAAK,EACH+M,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAASqxC,OACT,EAAArxC,SAASoxC,OACbz8D,EACAnQ,KAAK83E,QAAQ93E,KAAKqlD,cAEpB,MAEF,KAAK,EACL,KAAK,EACHl1C,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASqxC,OAAQ18D,EAAMxQ,EAAO0D,IAAI,IACvD,MAEF,KAAK,GACH8M,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASsxC,OAAQ38D,EAAMxQ,EAAOkE,IAAI,IACvD,MAEF,KAAK,GACHsM,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASuxC,OAAQ58D,EAAMxQ,EAAOmE,IAAI,IACvD,MAEF,QACE9D,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,KAAMpL,KAAKqlD,YAAY35C,YAE3CyE,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAMmW,YAQT,GAPAtT,EAAOnQ,KAAKg+D,kBACVvtD,EAAW0C,QACX41D,EAAe8C,WAAU,GAKvB7rE,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB3tB,KAAKqlD,YAAY13B,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAa+B,KAC1D,GAAIqY,EAAU,OAAO15B,KAAK63E,qBAAqBn+C,EAAUjpB,EAAW0C,QAAShD,EAAMM,IAKvFN,EAAOxQ,EAAOwhE,MAAM,EAAA5lC,QAAQq2B,OAAQ5xD,KAAKimE,cAAc91D,EAAMnQ,KAAKqlD,cAClErlD,KAAKqlD,YAAc,EAAAh/B,KAAKziB,KACxB,MAEF,KAAK,EAAA0J,MAAMoW,MAYT,GAXAvT,EAAOnQ,KAAKg+D,kBACVvtD,EAAW0C,QACX41D,GAAkB,EAAA1iD,KAAKG,KACnB,EAAAH,KAAKjjB,IACL2lE,EAAej7C,GAAG,GAChB,EAAAzH,KAAKhjB,IACL0lE,EAAc,GAKlB/oE,KAAKqlD,YAAYv3B,GAAG,KAAsB,CAC5C,IAAIH,EAAiB3tB,KAAKqlD,YAAY13B,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAewK,eAAe,EAAA7Y,aAAagC,aAC1D,GAAIoY,EAAU,OAAO15B,KAAK63E,qBAAqBn+C,EAAUjpB,EAAW0C,QAAShD,EAAMM,GAMrF,OAJAzQ,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKpL,KAAKqlD,YAAY35C,YAEnC/L,EAAOklE,cAShB,OAPE10D,EAAOnQ,KAAKgqE,kBAAkB75D,EAC5BnQ,KAAKqlD,YAAarlD,KAAKqlD,YAAY+D,SACnC,GAAO,EACP34C,EAAW0C,SAIPnT,KAAKqlD,YAAYz3C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHuC,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS0yC,OAAQ/9D,EAAMxQ,EAAOyD,KAAK,IACxD,MAEF,KAAK,EACL,KAAK,EACH+M,EAAOxQ,EAAOmgE,OACZ9/D,KAAKgkB,QAAQgD,SACT,EAAAwU,SAAS2yC,OACT,EAAA3yC,SAAS0yC,OACb/9D,EACAnQ,KAAKk4E,WAAWl4E,KAAKqlD,cAEvB,MAEF,KAAK,EACL,KAAK,EACHl1C,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS2yC,OAAQh+D,EAAMxQ,EAAO0D,KAAK,GAAI,IAC5D,MAEF,QACErD,KAAK8oB,MACH,EAAAhe,eAAei+C,2CACft4C,EAAWrF,MAAO,IAAKpL,KAAKqlD,YAAY35C,YAE1CyE,EAAOxQ,EAAOklE,cAGlB,MAEF,KAAK,EAAAv3D,MAAMiuC,OACT,OAAOv7C,KAAKm4E,cAAc1nE,EAAYs4D,EAAgBxB,GAExD,QAEE,OADA/8D,QAAO,GACA7K,EAAOklE,cAGlB,IAAKqH,EAAU,OAAO/7D,EACtB,IAAIiV,EAAWplB,KAAKolB,SAChBmU,EAASnU,EAAS2iC,iBAAiBt3C,EAAW0C,QAASnT,KAAKu5D,aAChE,OAAKhgC,EACEv5B,KAAK6uE,eACVt1C,EACAppB,EACAnQ,KAAKqlD,YACL50C,EAAW0C,QACXiS,EAAS08B,sBACT18B,EAAS28B,yBACTgnB,GAAkB,EAAA1iD,KAAKG,MARL7mB,EAAOklE,cAYrB,cACNp0D,EACAs4D,EACAxB,GAEA,IAGI6Q,EAHAjlE,EAAU1C,EAAW0C,QACrBhD,EAAsB,EACtB0Z,EAAiB7pB,KAAK0yB,QAAQ7I,eAElC,GAAI1W,EAAQvF,MAAQ,EAAAJ,SAASM,KAC3BsqE,EAAa,aACR,CACL,IAAI7mE,EAAUvR,KAAKolB,SAAS2iC,iBAAiB50C,EAASnT,KAAKu5D,YAAa,EAAAlzC,KAAKmxB,KAAM,EAAAqK,WAAWkD,SAC9F,GAAKxzC,EAoBH,OAAQA,EAAQ3D,MACd,KAAK,EAAA2R,YAAY0K,gBACjB,KAAK,EAAA1K,YAAYwU,UACjB,KAAK,EAAAxU,YAAYyU,KACfokD,EAAa,SACb,MAEF,KAAK,EAAA74D,YAAYwN,mBACfqrD,EAAa,WACb,MAEF,QAAS,CACPjoE,EAAOnQ,KAAKg+D,kBAAkB7qD,EAAS,EAAAkT,KAAKmxB,MAC5C,IAAI9oC,EAAO1O,KAAKqlD,YAEhB,GADAl1C,EAAOnQ,KAAKgqE,kBAAkB75D,EAAMzB,EAAM,EAAA2X,KAAKG,MAAM,GAAM,EAAOrT,GAC9DzE,EAAKof,GAAG,KAAsB,CAEhC,GADyBpf,EAAKwoC,mBAE5BkhC,EAAa,eACR,CACL,IAAIzqD,EAAiBjf,EAAKif,eAGtByqD,EAFAzqD,EACEA,EAAe1rB,YAAc4nB,EAAe5nB,UACjC,SAEA,SAGF,eAIjBm2E,EADS1pE,GAAQ,EAAA2X,KAAKziB,KACT,UACJ8K,EAAKihB,MAAM,IACP,SAEA,YAEf,WA1DQ,CACZ,OAAQxc,EAAQvF,MACd,KAAK,EAAAJ,SAAS4L,eACd,KAAK,EAAA5L,SAASoN,cAKZ,GAJUzH,EAAQvF,KAAQ,EAAAJ,SAAS4L,eAAnCjG,EAC+BA,EAAS1C,YAEvBzQ,KAAKolB,SAAS0/B,kBAAkB3xC,EAASnT,KAAKu5D,YAAa,EAAAlzC,KAAKmxB,KAAM,EAAAqK,WAAWO,QAGhG,OADApiD,KAAKqlD,YAAcx7B,EAAenb,KAC3B1O,KAAKL,OAAOklE,cAErB10D,EAAOnQ,KAAKg+D,kBAAkB7qD,EAAS,EAAAkT,KAAKmxB,MAC5C,MAEF,KAAK,EAAAhqC,SAASiL,WAAY,MAC1B,QAAStI,EAAOnQ,KAAKg+D,kBAAkB7qD,EAAS,EAAAkT,KAAKmxB,MAEvD4gC,EAAa,aA8CjB,OADAp4E,KAAKqlD,YAAcx7B,EAAenb,KAC3ByB,EACHnQ,KAAKL,OAAO8gC,MAAM,KAAM,CAAEtwB,EAAMnQ,KAAK01E,mBAAmB0C,IAAep4E,KAAKgkB,QAAQk9C,gBACpFlhE,KAAK01E,mBAAmB0C,GAI9B,uBAAuBjoE,EAAqBzB,GAC1C,IAAI/O,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YAChB,OAAQ7qD,EAAKd,MACX,KAAK,EACCmpB,EAAK47B,YAAYxiD,EAAMzB,KACzByB,EAAOnQ,KAAKgkB,QAAQ6C,WAAW,GAC3BlnB,EAAOwhE,MAAM,EAAA5lC,QAAQ88C,cAAeloE,GACpCxQ,EAAOmgE,OAAO,EAAAtkC,SAASq5B,OACrBl1D,EAAOmgE,OAAO,EAAAtkC,SAASo5B,OACrBzkD,EACAxQ,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,KAAK,EACC2zB,EAAK47B,YAAYxiD,EAAMzB,KACzByB,EAAOnQ,KAAKgkB,QAAQ6C,WAAW,GAC3BlnB,EAAOwhE,MAAM,EAAA5lC,QAAQ+8C,eAAgBnoE,GACrCxQ,EAAOmgE,OAAO,EAAAtkC,SAASq5B,OACrBl1D,EAAOmgE,OAAO,EAAAtkC,SAASo5B,OACrBzkD,EACAxQ,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,KAAK,EACC2zB,EAAK47B,YAAYxiD,EAAMzB,KACzByB,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASk5B,OAC5BvkD,EACAxQ,EAAOyD,IAAI,OAGf,MAEF,KAAK,EACC2zB,EAAK47B,YAAYxiD,EAAMzB,KACzByB,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAASk5B,OAC5BvkD,EACAxQ,EAAOyD,IAAI,SAGf,MAEF,KAAK,GACC2zB,EAAK47B,YAAYxiD,EAAMzB,KAEzByB,EAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS62B,MAC5BliD,EACAxQ,EAAOyD,IAAI,KAMnB,OAAO+M,EAIT,iBAAiBA,EAAqB/E,GACpC,IAAIsiD,EAAiB1tD,KAAKu5D,YAAY7L,eAClC/hD,EAASP,EAAMO,OACfA,EAAOmQ,eAAiB,IAAGnQ,EAAOmQ,eAAiB9b,KAAKL,OAAO44E,iBAAiB5sE,EAAOC,iBAC3FR,EAAMksB,aAAennB,EACrBu9C,EAAep4B,eAAe5oB,KAAKtB,GAMrC,SAASsD,GACP,IAAI/O,EAASK,KAAKL,OAClB,OAAQ+O,EAAKd,MACX,QAASpD,QAAO,GAChB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAO7K,EAAOyD,IAAI,GACtC,KAAK,EACL,KAAK,EAAgB,GAAiB,IAAbsL,EAAKqzB,KAAY,OAAOpiC,EAAOyD,IAAI,GAC5D,KAAK,EACL,KAAK,EAAc,OAAOzD,EAAO0D,IAAI,GACrC,KAAK,GAAc,OAAO1D,EAAOkE,IAAI,GACrC,KAAK,GAAc,OAAOlE,EAAOmE,IAAI,GACrC,KAAK,GAAe,OAAOnE,EAAOoE,KAAKy0E,GACvC,KAAK,GAAiB,OAAO74E,EAAO00E,YAKxC,QAAQ3lE,GACN,IAAI/O,EAASK,KAAKL,OAClB,OAAQ+O,EAAKd,MACX,QAASpD,QAAO,GAChB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAO7K,EAAOyD,IAAI,GACtC,KAAK,EACL,KAAK,EAAgB,GAAiB,IAAbsL,EAAKqzB,KAAY,OAAOpiC,EAAOyD,IAAI,GAC5D,KAAK,EACL,KAAK,EAAc,OAAOzD,EAAO0D,IAAI,GACrC,KAAK,GAAc,OAAO1D,EAAOkE,IAAI,GACrC,KAAK,GAAc,OAAOlE,EAAOmE,IAAI,IAKzC,WAAW4K,GACT,IAAI/O,EAASK,KAAKL,OAClB,OAAQ+O,EAAKd,MACX,QAASpD,QAAO,GAChB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAAc,OAAO7K,EAAOyD,KAAK,GACtC,KAAK,EACL,KAAK,EAAgB,GAAiB,IAAbsL,EAAKqzB,KAAY,OAAOpiC,EAAOyD,KAAK,GAC7D,KAAK,EACL,KAAK,EAAc,OAAOzD,EAAO0D,KAAK,GAAI,GAC1C,KAAK,GAAc,OAAO1D,EAAOkE,KAAK,GACtC,KAAK,GAAc,OAAOlE,EAAOmE,KAAK,IAK1C,cAAcqM,EAAqBzB,GACjC,IAAI/O,EAASK,KAAKL,OAClB,OAAQ+O,EAAKd,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACHuC,EAAOnQ,KAAKiqE,uBAAuB95D,EAAMzB,GAG3C,KAAK,GACL,KAAK,EACL,KAAK,EACH,OAAOyB,EAET,KAAK,EACL,KAAK,EACH,OAAOxQ,EAAOmgE,OAAO,EAAAtkC,SAAS82B,MAAOniD,EAAMxQ,EAAO0D,IAAI,IAExD,KAAK,EAAoBqL,EAAK2wD,WAAar/D,KAAKi4D,oBAAoBlrD,IAAIoD,KAAOA,EAAOnQ,KAAKwvE,gBAAgBr/D,EAAMzB,IACjH,KAAK,EACH,OAAoB,IAAbA,EAAKqzB,KACRpiC,EAAOmgE,OAAO,EAAAtkC,SAAS82B,MAAOniD,EAAMxQ,EAAO0D,IAAI,IAC/C8M,EAEN,KAAK,GAAc,CAEjB,IAAI4mB,EAAO/2B,KAAKu5D,YACZ0H,EAAOlqC,EAAKw3B,aAAa,EAAAloC,KAAKxiB,KAC9Bs6B,EAAMx+B,EAAOmgE,OAAO,EAAAtkC,SAASk5B,OAC/B/0D,EAAOmgE,OAAO,EAAAtkC,SAASu3B,MAAOpzD,EAAOsiE,UAAUhB,EAAKvsC,MAAOvkB,GAAOxQ,EAAOkE,IAAI,IAC7ElE,EAAOmgE,OAAO,EAAAtkC,SAASq3B,MACrBlzD,EAAO2gE,UAAUW,EAAKvsC,MAAO,EAAAyG,WAAW/zB,KACxCzH,EAAO2gE,UAAUW,EAAKvsC,MAAO,EAAAyG,WAAW/zB,OAI5C,OADA2vB,EAAKg4B,cAAckS,GACZ9iC,EAET,KAAK,GAAc,CAEjB,IAAIpH,EAAO/2B,KAAKu5D,YACZ0H,EAAOlqC,EAAKw3B,aAAa,EAAAloC,KAAKviB,KAC9Bq6B,EAAMx+B,EAAOmgE,OAAO,EAAAtkC,SAASk5B,OAC/B/0D,EAAOmgE,OAAO,EAAAtkC,SAASw3B,MAAOrzD,EAAOsiE,UAAUhB,EAAKvsC,MAAOvkB,GAAOxQ,EAAOmE,IAAI,IAC7EnE,EAAOmgE,OAAO,EAAAtkC,SAASs3B,MACrBnzD,EAAO2gE,UAAUW,EAAKvsC,MAAO,EAAAyG,WAAW9zB,KACxC1H,EAAO2gE,UAAUW,EAAKvsC,MAAO,EAAAyG,WAAW9zB,OAI5C,OADA0vB,EAAKg4B,cAAckS,GACZ9iC,EAET,KAAK,GAGH,OAAOx+B,EAAOwhE,MAAM,EAAA5lC,QAAQq2B,OAAQjyD,EAAO84E,YAAYtoE,IAEzD,QAEE,OADA3F,QAAO,GACA7K,EAAOyD,IAAI,IAMxB,eACE0xB,GAGA,IAAIpC,EAAU1yB,KAAK0yB,QACnBloB,OAAOsqB,EAAcpC,SAAWA,GAChC,IAAI/yB,EAASK,KAAKL,OACdqkB,EAAUhkB,KAAKgkB,QACnBhkB,KAAKqlD,YAAcvwB,EAAcpmB,KACjC,IAAIqd,EAAgB2G,EAAQ3G,cAE5B,OADA/rB,KAAKm7D,gBAAgBpvC,GACdpsB,EAAOa,KAAKurB,EAAc9G,aAAc,CAC7CjB,EAAQgD,SACJrnB,EAAO0D,IAAIyxB,EAAc4D,kBACzB/4B,EAAOyD,IAAI0xB,EAAc4D,kBAC7B/4B,EAAOyD,IACL0xB,EAAc7J,aAAa,EAAAzL,eAAetG,WACtC,EACA4b,EAActP,KAEnBxB,EAAQk9C,gBAIb,qCAEEpsC,EAEAkL,EAAyB,IAEzB,IAAIpsB,EAAUkhB,EAAclhB,QAC5B,IAAKA,EAAS,OAAOosB,EAErB,IAAIrgC,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YACZ7P,EAAW3yB,EAAK2yB,SAChBgvB,EAAiBhvB,EACjBl/C,OAAOusB,EAAK6yB,YAAY,EAAA5mD,YAAYsC,QAAQovB,MAC5C,EACAwsC,EAAiBlhE,KAAKgkB,QAAQk9C,eAElC,IAAK,IAAI/zC,KAAUvZ,EAAQzB,SAAU,CACnC,GACEgb,EAAOvf,MAAQ,EAAA2R,YAAYiO,OAC3BL,EAAOtR,QAAUiZ,EACjB,SAEF,IAAI8E,EAAezM,EACnB3iB,QAAQovB,EAAMjK,MAAM,EAAAttB,YAAY6rB,QAChC,IAKI6vC,EALA5R,EAAYvyB,EAAMlrB,KAClBshE,EAAkB7jB,EAAU9T,eAC5BsgC,EAAiB/+C,EAAM33B,UACvB4lD,EAAkB8wB,EAAe9wB,gBACjCvqC,EAAiBq7D,EAAer7D,eAIhCA,GAAkB,GACpBygD,EAAWp+D,EAAO2gE,UAChB5W,EACIl/C,OAAOusB,EAAK6yB,YAAYhwB,EAAMh5B,OAAO8zB,MACrC,EAAIpX,EACR0yD,GAEE7jB,EAAUkT,YAAWtB,EAAW/9D,KAAKs/D,WAAWvB,KAG3ClW,GACTkW,EAAW/9D,KAAKg+D,kBAAkBnW,EAAiBsE,EACjD,IAEEA,EAAUkT,YAAcr/D,KAAKi4D,oBAAoBlrD,IAAIgxD,KACvDA,EAAW/9D,KAAKs/D,WAAWvB,KAK7BA,EAAW/9D,KAAKk/D,SAAS/S,GAG3BnsB,EAAMtzB,KACJ/M,EAAOyiE,MAAMjW,EAAUnV,SACrBr3C,EAAO2gE,UAAUoY,EAAgBxX,GACjCnD,EACAiS,EACAp2C,EAAMjC,eAIZ,OAAOqI,EAIT,UAEE70B,EAEAytE,GAEA,IAMIC,EANAnmD,EAAU1yB,KAAK0yB,QACf/yB,EAASK,KAAKL,OACdkqB,EAAiB6I,EAAQ7I,eACzBgC,EAAgB6G,EAAQ7G,cAC5B,IAAKA,IAAkB7rB,KAAKm7D,gBAAgBtvC,GAAgB,OAAOlsB,EAAOklE,cAQxEgU,EALc,OAAZ1tE,EAKWnL,KAAKg+D,kBAAkB7yD,EAAS0e,EAAenb,KAAM,IAErD1O,KAAKk/D,SAASr1C,EAAenb,MAG5C,IAAIoqE,EAAc94E,KAAK01E,mBAAmBkD,EAAaxtE,MAAMO,OAAOC,gBACpE,OAAOjM,EAAO8gC,MAAM,KAAM,CACxB9gC,EAAOa,KACLqrB,EAAc5G,aAAc,CAC1B4zD,EACAC,EACAn5E,EAAOyD,IAAIw1E,EAAaxtE,MAAMS,MAC9BlM,EAAOyD,IAAIw1E,EAAaxtE,MAAMU,SAEhC,EAAAqvB,WAAW2D,MAEbn/B,EAAOklE,gBAKX,wBAEE10D,EAEAzB,EAEA88C,GAEAhhD,OAAOkE,EAAKof,GAAG,MACf,IAAInuB,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YACZ0H,EAAOlqC,EAAKw3B,aAAa7/C,GAS7B,OARKqoB,EAAK47B,YAAYxiD,EAAMzB,IAAOqoB,EAAK03B,aAAawS,EAAKvsC,MAAO,EAAA44B,WAAWyC,SAC5Eh5B,EAAK03B,aAAawS,EAAKvsC,MAAO,EAAA44B,WAAWxE,SACzC34C,EAAOxQ,EAAOu6D,GACZv6D,EAAOsiE,UAAUhB,EAAKvsC,MAAOvkB,GAC7BxQ,EAAO2gE,UAAUW,EAAKvsC,MAAOhmB,EAAK2pC,gBAClCr4C,KAAKuoE,UAAU,KAAM/c,IAEvBz0B,EAAKg4B,cAAckS,GACZ9wD,EAIT,uBAEEA,EAEAzB,EAEAgC,EAEA86C,GAEAhhD,OAAOkG,EAAOod,GAAG,MAAwBpd,EAAOymC,gBAAgBc,eAAevpC,IAC/E,IAAI/O,EAASK,KAAKL,OACdo3B,EAAO/2B,KAAKu5D,YACZ0H,EAAOlqC,EAAKw3B,aAAa7/C,GACzB6d,EAAqBvsB,KAAK0yB,QAAQnG,mBAWtC,OAVA/hB,OAAOxK,KAAKm7D,gBAAgB5uC,IAC5Bpc,EAAOxQ,EAAOu6D,GACZv6D,EAAOa,KAAK+rB,EAAmBtH,aAAc,CAC3CtlB,EAAOsiE,UAAUhB,EAAKvsC,MAAOvkB,GAC7BxQ,EAAOyD,IAAIoH,OAAOkG,EAAOid,gBAAgBnI,KACxC,EAAA2V,WAAWx0B,KACdhH,EAAO2gE,UAAUW,EAAKvsC,MAAOhmB,EAAK2pC,gBAClCr4C,KAAKuoE,UAAU,KAAM/c,IAEvBz0B,EAAKg4B,cAAckS,GACZ9wD,GA52SX,aAk3SA,MAAMqoE,EAAY,IAAInwE,WAAW,IAEjC,SAASg2D,EACP9sD,EACAL,GAQA,GALAqtD,EAA8BrtD,EAAY9F,MAAMO,OAAOwQ,WAEvDqiD,EAA+B,EAAA3qC,mBAC7BtiB,EAAQ3Q,KAAM2Q,EAAQsK,OAAQtK,EAAQuc,GAAG,EAAAzrB,YAAY2vB,WAAW,GAE7DzgB,EAAQ0Z,aAAa,EAAAzL,eAAe5G,UAAzC,CAEA,IAAI8Z,EAAUnhB,EAAQmhB,QAClB9T,EAAYpU,OAAO,EAAA20D,cAAc,EAAA1xD,cAAcmL,SAAU1H,EAAY2C,aACrEpE,EAAOmP,EAAUhP,UACrB,GAAIH,GAAQA,EAAKtD,OAAQ,CACvB,IAAIuT,EAAMjQ,EAAK,GAGXiQ,EAAI9R,MAAQ,EAAAJ,SAASK,SAA+B6R,EAAK5F,aAAe,EAAApM,YAAY0N,QACtFojD,EAAyD9+C,EAAKpe,MAC1DmO,EAAKtD,QAAU,IACjBuT,EAAMjQ,EAAK,GACPiQ,EAAI9R,MAAQ,EAAAJ,SAASK,SAA+B6R,EAAK5F,aAAe,EAAApM,YAAY0N,QACtFmjD,EAA8BC,EAC9BA,EAAyD9+C,EAAKpe,MAC1DmO,EAAKtD,OAAS,GAChBumB,EAAQ5J,MACN,EAAAhe,eAAeomB,+BACftS,EAAUxT,MAAO,IAAKqE,EAAKtD,OAAOT,aAItCgnB,EAAQ5J,MACN,EAAAhe,eAAemmB,wBACfvR,EAAItU,SAKVsnB,EAAQ5J,MACN,EAAAhe,eAAemmB,wBACfvR,EAAItU,YAIRsnB,EAAQ5J,MACN,EAAAhe,eAAekmE,wCACfpyD,EAAUxT,MAAO,IAAK,MAK5B,IAAImzD,EACAC,EAGJ,SAAS0H,EAAsB/1D,GAE7B,OADA3F,OAAO,EAAAg2B,kBAAkBrwB,IAAS,EAAAgrB,WAAWx0B,KAAO,EAAA65B,kBAAkBrwB,IAAS,EAAAgrB,WAAWmF,aACtF,EAAAH,gBAAgBhwB,IAAS,EAAAkrB,aAAaqP,MACjC,EAAA4mB,iBAAiBnhD,GACpB,EACA,EAEC,I,8ECxtTT,aAIA,OAWA,OAMA,OA2BA,OAUA,QAKA,OAIA,OAOA,OAUA,IAAiBi6C,EA4djB,SAAgB2uB,EAEdC,EAEA/2E,EAEAuM,EAEAuvB,EAEAgrC,EAEAvd,EAEAytB,GAAc,GAEd,IAAIt5E,EAASq5E,EAASr5E,OAEtB,OAAQsC,EAAUgjB,cAIhB,KAAKmlC,EAAa8uB,UAAW,CAC3B,IAAIxqE,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,OADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACvB8K,EACEA,EAAKof,GAAG,KAAuBpf,EAAKof,GAAG,KAC1CnuB,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAOklE,cAK3B,KAAKza,EAAagvB,QAAS,CACzB,IAAI1qE,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,OADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACvB8K,EACEA,EAAKof,GAAG,GACXnuB,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAOklE,cAK3B,KAAKza,EAAaivB,UAAW,CAC3B,IAAI3qE,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,OADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACvB8K,EACEA,GAAQ,EAAA2X,KAAKziB,KAChBjE,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAOklE,cAK3B,KAAKza,EAAakvB,SAAU,CAC1B,IAAI5qE,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,OADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACvB8K,EACEA,EAAKof,GAAG,GACXnuB,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAOklE,cAK3B,KAAKza,EAAamvB,YAAa,CAC7B,IAAI7qE,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,OADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACvB8K,EACEA,EAAKof,GAAG,KACXnuB,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAOklE,cAK3B,KAAKza,EAAaovB,SAAU,CAC1B,IAAI9qE,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,GADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,MACvB8K,EAAM,OAAO/O,EAAOklE,cACzB,GAAIn2D,EAAKof,GAAG,KAAsB,CAChC,IAAIH,EAAiBjf,EAAKif,eAC1B,GAAIA,EAAgB,CAClB,IAAI9D,EAAiBmvD,EAAStmD,QAAQ7I,eACtC,GAAIA,GAAkB8D,EAAesqB,eAAepuB,GAAiB,OAAOlqB,EAAOyD,IAAI,IAG3F,OAAOzD,EAAOyD,IAAI,GAEpB,KAAKgnD,EAAaqvB,QAAS,CACzB,IAAI/qE,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,GADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,MACvB8K,EAAM,OAAO/O,EAAOklE,cACzB,GAAIn2D,EAAKof,GAAG,KAAsB,CAChC,IAAIH,EAAiBjf,EAAKif,eAC1B,GAAIA,EACF,OAAOhuB,EAAOyD,IAAIuqB,EAAe1rB,UAAUq2B,QAAQ0gD,EAAStmD,QAAQjH,gBAAkB,EAAI,GAG9F,OAAO9rB,EAAOyD,IAAI,GAEpB,KAAKgnD,EAAasvB,YAAa,CAC7B,IAAIhrE,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,GADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,MACvB8K,EAAM,OAAO/O,EAAOklE,cACzB,GAAIn2D,EAAKof,GAAG,KAAsB,CAChC,IAAIH,EAAiBjf,EAAKif,eAC1B,GAAIA,EACF,OAAOhuB,EAAOyD,IAAIuqB,EAAe+rD,YAAc,EAAI,GAGvD,OAAO/5E,EAAOyD,IAAI,GAEpB,KAAKgnD,EAAauvB,WAAY,CAC5B,IAAIjrE,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,OADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACvB8K,EACE/O,EAAOyD,IAAIsL,EAAKwoC,mBAAqB,EAAI,GAD9Bv3C,EAAOklE,cAG3B,KAAKza,EAAa37C,WAAY,CAC5B,IAAIC,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,OADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACvB8K,EACE/O,EAAOyD,IAAIsL,EAAKof,GAAG,KAAsB,EAAI,GADlCnuB,EAAOklE,cAG3B,KAAKza,EAAawvB,UAAW,CAE3B,GADAZ,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KAE1Bi2E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAItzD,EAAUynE,EAAS5zD,SAAS2iC,iBAC9BhqB,EAAS,GACTi7C,EAASzf,YACT,EAAAlzC,KAAKmxB,KACL,EAAAqK,WAAWkD,SAEb,OAAOplD,EAAOyD,IAAImO,EAAU,EAAI,GAElC,KAAK64C,EAAa2vB,WAAY,CAE5B,GADAf,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KAE1Bi2E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAI10D,EAAO6oE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKmxB,MAExD,OADAwhC,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACrBjE,EAAOyD,IAAI,EAAA+8B,gBAAgBhwB,IAAS,EAAAkrB,aAAaqP,MAAQ,EAAI,GAEtE,KAAK0f,EAAaiV,UAAW,CAC3B,IAAI3wD,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,OADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACvB8K,EACE/O,EAAOyD,IAAIsL,EAAK2wD,UAAY,EAAI,GADrB1/D,EAAOklE,cAG3B,KAAKza,EAAa4vB,OAAQ,CACxB,IAAItrE,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,OADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACvB8K,EACE/O,EAAOyD,IAAiB,IAAbsL,EAAKd,KAAwB,EAAI,GADjCjO,EAAOklE,cAG3B,KAAKza,EAAa6vB,SAAU,CAC1B,IAAIvrE,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,GADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAKjjB,KACvBsL,EAAM,OAAO/O,EAAOklE,cACzB,IAAI3tB,EAAqBxoC,EAAKwoC,mBAC9B,OAAKA,EAOEv3C,EAAOyD,IAAI8zC,EAAmBvgB,eAAexqB,SANlD6sE,EAASlwD,MACP,EAAAhe,eAAei5C,8BACfyH,EAAWpgD,MAAOsD,EAAKhD,YAElB/L,EAAOklE,eAIlB,KAAKza,EAAa8vB,OAAQ,CAExB,GADAlB,EAAS3zB,YAAc2zB,EAASh1D,QAAQuC,UAEtC4zD,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIn2D,EAAOF,EAAe,GACtBwoC,EAAWtoC,EAAKsoC,SACpB,OAAKA,EAODgiC,EAASh1D,QAAQgD,SAEf+hD,EAAej7C,GAAG,IAAsBi7C,EAAehnC,MAAQ,IACjEi3C,EAAS3zB,YAAc,EAAAh/B,KAAK5iB,IACrB9D,EAAOyD,IAAI4zC,IAEbr3C,EAAO0D,IAAI2zC,EAAU,GAGxB+xB,EAAej7C,GAAG,IAA6C,IAAvBi7C,EAAehnC,MACzDi3C,EAAS3zB,YAAc,EAAAh/B,KAAK3iB,IACrB/D,EAAO0D,IAAI2zC,EAAU,IAEvBr3C,EAAOyD,IAAI4zC,IAnBlBgiC,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,SAAU3rE,EAAKhD,YAEzC/L,EAAOklE,eAkBlB,KAAKza,EAAakwB,QAAS,CAEzB,GADAtB,EAAS3zB,YAAc2zB,EAASh1D,QAAQuC,UAEtC4zD,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIn2D,EAAOF,EAAe,GACtBwoC,EAAWtoC,EAAKsoC,SACpB,IAAK,EAAAsV,WAAWtV,GAKd,OAJAgiC,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,UAAW3rE,EAAKhD,YAE1C/L,EAAOklE,cAEhB,IAAIuR,EAAYmE,IAASvjC,GACzB,OAAIgiC,EAASh1D,QAAQgD,SAEf+hD,EAAej7C,GAAG,IAAsBi7C,EAAehnC,MAAQ,IACjEi3C,EAAS3zB,YAAc,EAAAh/B,KAAK5iB,IACrB9D,EAAOyD,IAAIgzE,IAEbz2E,EAAO0D,IAAI+yE,EAAW,GAGzBrN,EAAej7C,GAAG,IAA6C,IAAvBi7C,EAAehnC,MACzDi3C,EAAS3zB,YAAc,EAAAh/B,KAAK3iB,IACrB/D,EAAO0D,IAAI+yE,EAAW,IAExBz2E,EAAOyD,IAAIgzE,GAGtB,KAAKhsB,EAAaowB,SAAU,CAE1B,GADAxB,EAAS3zB,YAAc2zB,EAASh1D,QAAQuC,UAEtC4zD,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7CyB,EAAkB18C,EAAU,EAAG,EAAGytB,EAAYwtB,GAC9C,OAAOr5E,EAAOklE,cAChB,IAkBIt/C,EAlBA7W,EAAOF,EAAe,GACtBmpC,EAAYjpC,EAAKif,eACrB,IAAMjf,EAAKof,GAAG,MAAsC,OAAd6pB,EAcpC,OAbAqhC,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE9CstE,EAASh1D,QAAQgD,SACf+hD,EAAej7C,GAAG,IAAsBi7C,EAAehnC,MAAQ,KACjEi3C,EAAS3zB,YAAc,EAAAh/B,KAAK5iB,KAG1BslE,EAAej7C,GAAG,IAA6C,IAAvBi7C,EAAehnC,OACzDi3C,EAAS3zB,YAAc,EAAAh/B,KAAK3iB,KAGzB/D,EAAOklE,cAGhB,GAAI9mC,EAAS5xB,OAAQ,CACnB,GACE4xB,EAAS,GAAGnwB,MAAQ,EAAAJ,SAASK,SACTkwB,EAAS,GAAIjkB,aAAe,EAAApM,YAAY0N,OAM5D,OAJA49D,EAASlwD,MACP,EAAAhe,eAAemmB,wBACf8M,EAAS,GAAG3yB,OAEPzL,EAAOklE,cAEhB,IAAIlrC,EAAsCoE,EAAS,GAAIz8B,MACnDs4B,EAAQ+d,EAAU/jC,QAAU+jC,EAAU/jC,QAAQ1S,IAAIy4B,GAAa,KACnE,IAAMC,GAASA,EAAMhsB,MAAQ,EAAA2R,YAAYiO,MAKvC,OAJAwrD,EAASlwD,MACP,EAAAhe,eAAe4vE,yBACf38C,EAAS,GAAG3yB,MAAOusC,EAAU1yB,aAAc0U,GAEtCh6B,EAAOklE,cAEhBt/C,EAAiBqU,EAAOjC,kBAExBpS,EAASoyB,EAAUjf,iBAErB,OAAIsgD,EAASh1D,QAAQgD,SAEf+hD,EAAej7C,GAAG,IAAsBi7C,EAAehnC,MAAQ,IACjEi3C,EAAS3zB,YAAc,EAAAh/B,KAAK5iB,IACrB9D,EAAOyD,IAAImiB,IAEb5lB,EAAO0D,IAAIkiB,GAGdwjD,EAAej7C,GAAG,IAA6C,IAAvBi7C,EAAehnC,MACzDi3C,EAAS3zB,YAAc,EAAAh/B,KAAK3iB,IACrB/D,EAAO0D,IAAIkiB,IAEb5lB,EAAOyD,IAAImiB,GAGtB,KAAK6kC,EAAauwB,OAAQ,CACxB,IAKIr5E,EALAs5E,EAAazB,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GACzE,IAAKovB,EAEH,OADA5B,EAAS3zB,YAAc2zB,EAAStmD,QAAQ7I,eAAenb,KAChD/O,EAAOklE,cAGhB,GAAI+V,EAAW9sD,GAAG,KAAsB,CACtC,IAAIH,EAAiBitD,EAAWjtD,eAChC,GAAIA,EACFrsB,EAAQqsB,EAAe/sB,SAClB,CAGHU,EAFuBs5E,EAAW1jC,mBAE1B,WAEA,eAIZ,OAAQ0jC,EAAWhtE,MACjB,KAAK,GAAiBtM,EAAQ,OAAQ,MACtC,KAAK,EAAeA,EAAQ,KAAM,MAClC,KAAK,EAAeA,EAAQ,KAAM,MAClC,KAAK,EAAgBA,EAAQ,MAAO,MACpC,KAAK,EAAgBA,EAAQ,MAAO,MACpC,KAAK,EAAgBA,EAAQ,MAAO,MACpC,KAAK,EAAgBA,EAAQ,MAAO,MACpC,KAAK,GAAgBA,EAAQ,MAAO,MACpC,KAAK,EAAgBA,EAAQ,MAAO,MACpC,KAAK,EAAgBA,EAAQ,MAAO,MACpC,KAAK,GAAgBA,EAAQ,MAAO,MACpC,KAAK,EAAkBA,EAAQ,QAAS,MACxC,KAAK,EAAkBA,EAAQ,QAAS,MACxC,KAAK,GAAiBA,EAAQ,OAAQ,MACtC,KAAK,GAAmBA,EAAQ,SAAU,MAC1C,QAASkJ,QAAO,GAChB,KAAK,GAAiBlJ,EAAQ,OAGlC,OAAO03E,EAAStD,mBAAmBp0E,GAKrC,KAAK8oD,EAAa3S,IAAK,CACrB,GACEojC,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKjjB,IAAK,GAClDsL,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,GACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAAc,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQ25B,OAAQ5pD,GACvD,KAAK,EACL,KAAK,EACH,OAAO3L,EAAOwhE,MACZ6X,EAASh1D,QAAQgD,SACb,EAAAuU,QAAQu/C,OACR,EAAAv/C,QAAQ25B,OACZ5pD,GAGJ,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQu/C,OAAQxvE,GAO3D,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,MAAO3rE,EAAKhD,YAEtC/L,EAAOklE,cAEhB,KAAKza,EAAamwB,IAAK,CACrB,GACEM,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKjjB,IAAK,GAClDsL,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,GACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAAc,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQ45B,OAAQ7pD,GACvD,KAAK,EACL,KAAK,EACH,OAAO3L,EAAOwhE,MACZ6X,EAASh1D,QAAQgD,SACb,EAAAuU,QAAQw/C,OACR,EAAAx/C,QAAQ45B,OACZ7pD,GAGJ,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQw/C,OAAQzvE,GAO3D,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,MAAO3rE,EAAKhD,YAEtC/L,EAAOklE,cAEhB,KAAKza,EAAa4wB,OAAQ,CACxB,GACEH,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKjjB,IAAK,GAClDsL,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KACX,OAAQkrD,EAAS3zB,YAAYz3C,MAC3B,KAAK,GACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAAc,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQ65B,UAAW9pD,GAC1D,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ0/C,UAAW3vE,GAC1D,KAAK,EACL,KAAK,EACH,OAAO3L,EAAOwhE,MACZ6X,EAASh1D,QAAQgD,SACb,EAAAuU,QAAQ0/C,UACR,EAAA1/C,QAAQ65B,UACZ9pD,GASR,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,SAAU3rE,EAAKhD,YAEzC/L,EAAOklE,cAEhB,KAAKza,EAAa8wB,KAAM,CACtB,GACEL,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKjjB,IAAK,GAClDsL,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KAAsB,CACjC,IAAIviB,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAIrvB,EAAM,GACzD,OAAQA,EAAKd,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH,OAAOorE,EAAS/O,uBACdtqE,EAAOmgE,OAAO,EAAAtkC,SAAS2/C,QAAS7vE,EAAMC,GACtCmD,GAGJ,KAAK,EACL,KAAK,EAAc,OAAO/O,EAAOmgE,OAAO,EAAAtkC,SAAS2/C,QAAS7vE,EAAMC,GAChE,KAAK,EACL,KAAK,EACH,OAAO5L,EAAOmgE,OACZkZ,EAASh1D,QAAQgD,SACb,EAAAwU,SAAS4/C,QACT,EAAA5/C,SAAS2/C,QACb7vE,EAAMC,GAGV,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS4/C,QAAS9vE,EAAMC,IAOpE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,OAAQ3rE,EAAKhD,YAEvC/L,EAAOklE,cAEhB,KAAKza,EAAaixB,KAAM,CACtB,GACER,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKjjB,IAAK,GAClDsL,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KAAsB,CACjC,IAAIviB,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAIrvB,EAAM,GACzD,OAAQA,EAAKd,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH,OAAOorE,EAAS/O,uBACdtqE,EAAOmgE,OAAO,EAAAtkC,SAAS8/C,QAAShwE,EAAMC,GACtCmD,GAGJ,KAAK,EACL,KAAK,EAAc,OAAO/O,EAAOmgE,OAAO,EAAAtkC,SAAS8/C,QAAShwE,EAAMC,GAChE,KAAK,EACL,KAAK,EACH,OAAO5L,EAAOmgE,OACZkZ,EAASh1D,QAAQgD,SACb,EAAAwU,SAAS+/C,QACT,EAAA//C,SAAS8/C,QACbhwE,EAAMC,GAGV,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS+/C,QAASjwE,EAAMC,IAOpE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,OAAQ3rE,EAAKhD,YAEvC/L,EAAOklE,cAEhB,KAAKza,EAAaoxB,IAAK,CACrB,GACEX,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKmxB,KAAM,GACnD9oC,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EACL,KAAK,EAAc,CACjB,IAAImpB,EAAOiiD,EAASzf,YAGhB2Z,EAAQn8C,EAAKw3B,aAAa,EAAAloC,KAAKjjB,KAC/B+vE,EAAQp8C,EAAKw3B,aAAa,EAAAloC,KAAKjjB,KAE/B+6B,EAAMx+B,EAAOmgE,OAAO,EAAAtkC,SAAS0yC,OAC/BvuE,EAAOmgE,OAAO,EAAAtkC,SAASukC,OACrBpgE,EAAOsiE,UACLkR,EAAMz+C,MACN/0B,EAAOmgE,OAAO,EAAAtkC,SAASq5B,OACrBl1D,EAAOsiE,UAAUiR,EAAMx+C,MAAOppB,GAC9B3L,EAAOyD,IAAI,MAGfzD,EAAO2gE,UAAU4S,EAAMx+C,MAAO,EAAAyG,WAAWx0B,MAE3ChH,EAAO2gE,UAAU6S,EAAMz+C,MAAO,EAAAyG,WAAWx0B,MAI3C,OAFAowB,EAAKg4B,cAAcokB,GACnBp8C,EAAKg4B,cAAcmkB,GACZ/0C,EAET,KAAK,EAAgB,CACnB,IAAIna,EAAUg1D,EAASh1D,QACnB+S,EAAOiiD,EAASzf,YAChBvyC,EAAWhD,EAAQgD,SAEnBksD,EAAQn8C,EAAKw3B,aAAavqC,EAAQuC,WAClC4sD,EAAQp8C,EAAKw3B,aAAavqC,EAAQuC,WAClC4X,EAAMx+B,EAAOmgE,OAAO94C,EAAW,EAAAwU,SAAS2yC,OAAS,EAAA3yC,SAAS0yC,OAC5DvuE,EAAOmgE,OAAO94C,EAAW,EAAAwU,SAASixC,OAAS,EAAAjxC,SAASukC,OAClDpgE,EAAOsiE,UACLkR,EAAMz+C,MACN/0B,EAAOmgE,OAAO94C,EAAW,EAAAwU,SAASqyC,OAAS,EAAAryC,SAASq5B,OAClDl1D,EAAOsiE,UAAUiR,EAAMx+C,MAAOppB,GAC9B0b,EAAWrnB,EAAO0D,IAAI,IAAM1D,EAAOyD,IAAI,MAG3CzD,EAAO2gE,UAAU4S,EAAMx+C,MAAO1Q,EAAQk9C,iBAExCvhE,EAAO2gE,UAAU6S,EAAMz+C,MAAO1Q,EAAQk9C,iBAIxC,OAFAnqC,EAAKg4B,cAAcokB,GACnBp8C,EAAKg4B,cAAcmkB,GACZ/0C,EAET,KAAK,EAAc,CACjB,IAAIpH,EAAOiiD,EAASzf,YAEhB2Z,EAAQn8C,EAAKw3B,aAAa,EAAAloC,KAAKhjB,KAC/B8vE,EAAQp8C,EAAKw3B,aAAa,EAAAloC,KAAKhjB,KAE/B86B,EAAMx+B,EAAOmgE,OAAO,EAAAtkC,SAAS2yC,OAC/BxuE,EAAOmgE,OAAO,EAAAtkC,SAASixC,OACrB9sE,EAAOsiE,UACLkR,EAAMz+C,MACN/0B,EAAOmgE,OAAO,EAAAtkC,SAASqyC,OACrBluE,EAAOsiE,UAAUiR,EAAMx+C,MAAOppB,GAC9B3L,EAAO0D,IAAI,MAGf1D,EAAO2gE,UAAU4S,EAAMx+C,MAAO,EAAAyG,WAAWv0B,MAE3CjH,EAAO2gE,UAAU6S,EAAMz+C,MAAO,EAAAyG,WAAWv0B,MAI3C,OAFAmwB,EAAKg4B,cAAcokB,GACnBp8C,EAAKg4B,cAAcmkB,GACZ/0C,EAET,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAO7yB,EAC3B,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQkgD,OAAQnwE,GACvD,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQmgD,OAAQpwE,GAO3D,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,MAAO3rE,EAAKhD,YAEtC/L,EAAOklE,cAEhB,KAAKza,EAAayF,IAAK,CACrB,GACEgrB,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIh0D,EAAOktB,EAAS,GAChBzyB,EAAOkD,EACPwqE,EAAShb,kBAAkBntD,EAAMrC,EAAc,GAAI,GACnDwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKmxB,KAAM,GACnD9oC,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KAAsB,CACjC,IAAIviB,GACCiD,GAAiB,EAAAmtE,iBAAiB9qE,IACrCtF,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAIrvB,EAAM,GACjDsqE,EAAS3zB,aAAe32C,IAC1BpD,EAAO0tE,EAAShb,kBAAkBntD,EAAMnC,EAAOsqE,EAAS3zB,YAAa,KAGvE95C,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAIrvB,EAAM,GAEvD,IAAIkvB,GAAgB,EACpB,OAAQlvB,EAAKd,MACX,KAAK,EACL,KAAK,EACL,KAAK,EAAgBgwB,EAAK,EAAApC,SAASq4B,MAAO,MAC1C,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAiBj2B,EAAK,EAAApC,SAASs4B,MAAO,MAC3C,KAAK,EAAgBl2B,EAAK,EAAApC,SAASu4B,MAAO,MAC1C,KAAK,EAAgBn2B,EAAK,EAAApC,SAASw4B,MAAO,MAC1C,KAAK,EACHp2B,EAAKo7C,EAASh1D,QAAQgD,SAClB,EAAAwU,SAASu4B,MACT,EAAAv4B,SAASq4B,MACb,MAEF,KAAK,EACHj2B,EAAKo7C,EAASh1D,QAAQgD,SAClB,EAAAwU,SAASw4B,MACT,EAAAx4B,SAASs4B,MACb,MAEF,KAAK,GAAc,OAAOn0D,EAAOmgE,OAAO,EAAAtkC,SAASogD,OAAQtwE,EAAMC,GAC/D,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASqgD,OAAQvwE,EAAMC,GAEjE,IAAW,GAAPqyB,EAAU,CACZ,IAAI7G,EAAOiiD,EAASzf,YAChB0E,EAAavvD,EAAK2pC,eAClB66B,EAAQn8C,EAAKw3B,aAAa7/C,GAC9BqoB,EAAK03B,aAAaykB,EAAMx+C,MAAO,EAAA44B,WAAWyC,SAC1C,IAAIojB,EAAQp8C,EAAKw3B,aAAa7/C,GAC9BqoB,EAAK03B,aAAa0kB,EAAMz+C,MAAO,EAAA44B,WAAWyC,SAC1C,IAAI5xB,EAAMx+B,EAAOm8E,OACfn8E,EAAOsiE,UAAUiR,EAAMx+C,MAAOppB,GAC9B3L,EAAOsiE,UAAUkR,EAAMz+C,MAAOnpB,GAC9B5L,EAAOmgE,OAAOliC,EACZj+B,EAAO2gE,UAAU4S,EAAMx+C,MAAOupC,GAC9Bt+D,EAAO2gE,UAAU6S,EAAMz+C,MAAOupC,KAKlC,OAFAlnC,EAAKg4B,cAAcokB,GACnBp8C,EAAKg4B,cAAcmkB,GACZ/0C,GAOX,OAJA66C,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,MAAO3rE,EAAKhD,YAEtC/L,EAAOklE,cAEhB,KAAKza,EAAauG,IAAK,CACrB,GACEkqB,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIh0D,EAAOktB,EAAS,GAChBzyB,EAAOkD,EACPwqE,EAAShb,kBAAkBntD,EAAMrC,EAAc,GAAI,GACnDwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKmxB,KAAM,GACnD9oC,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KAAsB,CACjC,IAAIviB,GACCiD,GAAiB,EAAAmtE,iBAAiB9qE,IACrCtF,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAIrvB,EAAM,GACjDsqE,EAAS3zB,aAAe32C,IAC1BpD,EAAO0tE,EAAShb,kBAAkBntD,EAAMnC,EAAOsqE,EAAS3zB,YAAa,KAGvE95C,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAIrvB,EAAM,GAEvD,IAAIkvB,GAAgB,EACpB,OAAQlvB,EAAKd,MACX,KAAK,EACL,KAAK,EACL,KAAK,EAAgBgwB,EAAK,EAAApC,SAASy3B,MAAO,MAC1C,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAiBr1B,EAAK,EAAApC,SAAS03B,MAAO,MAC3C,KAAK,EAAiBt1B,EAAK,EAAApC,SAAS23B,MAAO,MAC3C,KAAK,EAAiBv1B,EAAK,EAAApC,SAAS43B,MAAO,MAC3C,KAAK,EACHx1B,EAAKo7C,EAASh1D,QAAQgD,SAClB,EAAAwU,SAAS23B,MACT,EAAA33B,SAASy3B,MACb,MAEF,KAAK,EACHr1B,EAAKo7C,EAASh1D,QAAQgD,SAClB,EAAAwU,SAAS43B,MACT,EAAA53B,SAAS03B,MACb,MAEF,KAAK,GAAc,OAAOvzD,EAAOmgE,OAAO,EAAAtkC,SAASugD,OAAQzwE,EAAMC,GAC/D,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASwgD,OAAQ1wE,EAAMC,GAEjE,IAAW,GAAPqyB,EAAU,CACZ,IAAI7G,EAAOiiD,EAASzf,YAChB0E,EAAavvD,EAAK2pC,eAClB66B,EAAQn8C,EAAKw3B,aAAa7/C,GAC9BqoB,EAAK03B,aAAaykB,EAAMx+C,MAAO,EAAA44B,WAAWyC,SAC1C,IAAIojB,EAAQp8C,EAAKw3B,aAAa7/C,GAC9BqoB,EAAK03B,aAAa0kB,EAAMz+C,MAAO,EAAA44B,WAAWyC,SAC1C,IAAI5xB,EAAMx+B,EAAOm8E,OACfn8E,EAAOsiE,UAAUiR,EAAMx+C,MAAOppB,GAC9B3L,EAAOsiE,UAAUkR,EAAMz+C,MAAOnpB,GAC9B5L,EAAOmgE,OAAOliC,EACZj+B,EAAO2gE,UAAU4S,EAAMx+C,MAAOupC,GAC9Bt+D,EAAO2gE,UAAU6S,EAAMz+C,MAAOupC,KAKlC,OAFAlnC,EAAKg4B,cAAcokB,GACnBp8C,EAAKg4B,cAAcmkB,GACZ/0C,GAOX,OAJA66C,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,MAAO3rE,EAAKhD,YAEtC/L,EAAOklE,cAEhB,KAAKza,EAAanT,KAAM,CACtB,GACE4jC,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKmxB,KAAM,GACnD9oC,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAOtC,EAC3B,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ0gD,QAAS3wE,GACxD,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ2gD,QAAS5wE,GAO5D,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,OAAQ3rE,EAAKhD,YAEvC/L,EAAOklE,cAEhB,KAAKza,EAAa+xB,MAAO,CACvB,GACEtB,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKmxB,KAAM,GACnD9oC,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAOtC,EAC3B,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ6gD,SAAU9wE,GACzD,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ8gD,SAAU/wE,GAO7D,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,QAAS3rE,EAAKhD,YAExC/L,EAAOklE,cAEhB,KAAKza,EAAakyB,SAAU,CAC1B,GACEzB,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKviB,IAAK,GAClD4K,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KAAsB,CACjC,IAAIviB,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAIrvB,EAAM,GACzD,OAAQA,EAAKd,MAEX,KAAK,GAAc,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAAS+gD,YAAajxE,EAAMC,GACpE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASghD,YAAalxE,EAAMC,IAOxE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE3C/L,EAAOklE,cAEhB,KAAKza,EAAaqyB,QAAS,CACzB,GACE5B,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKmxB,KAAM,GACnD9oC,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAOtC,EAC3B,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQmhD,WAAYpxE,GAC3D,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQohD,WAAYrxE,GAO/D,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,UAAW3rE,EAAKhD,YAE1C/L,EAAOklE,cAEhB,KAAKza,EAAawyB,YAAa,CAC7B,GACEzC,EAAkB3rE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIn2D,EAAOF,EAAe,GAC1B,IAAKE,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EAAc,CACjB,IAAItC,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKxiB,IAAK,GAE7D,OADAm1E,EAAS3zB,YAAc32C,EAChB/O,EAAOwhE,MAAM,EAAA5lC,QAAQshD,eAAgBvxE,GAE9C,KAAK,EACL,KAAK,EAAc,CACjB,IAAIA,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKviB,IAAK,GAE7D,OADAk1E,EAAS3zB,YAAc32C,EAChB/O,EAAOwhE,MAAM,EAAA5lC,QAAQuhD,eAAgBxxE,GAE9C,KAAK,EACL,KAAK,EAAgB,CACnB,IAAIA,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAC7Ci7C,EAASh1D,QAAQgD,SACb,EAAAX,KAAKviB,IACL,EAAAuiB,KAAKxiB,IAAG,GAId,OADAm1E,EAAS3zB,YAAc32C,EAChB/O,EAAOwhE,MACZ6X,EAASh1D,QAAQgD,SACb,EAAAuU,QAAQuhD,eACR,EAAAvhD,QAAQshD,eACZvxE,GAGJ,KAAK,GAAc,CACjB,IAAIA,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKjjB,IAAK,GAE7D,OADA41E,EAAS3zB,YAAc,EAAAh/B,KAAKxiB,IACrBlE,EAAOwhE,MAAM,EAAA5lC,QAAQwhD,eAAgBzxE,GAE9C,KAAK,GAAc,CACjB,IAAIA,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKhjB,IAAK,GAE7D,OADA21E,EAAS3zB,YAAc,EAAAh/B,KAAKviB,IACrBnE,EAAOwhE,MAAM,EAAA5lC,QAAQyhD,eAAgB1xE,IAQlD,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,cAAe3rE,EAAKhD,YAE9C/L,EAAOklE,cAEhB,KAAKza,EAAa6yB,KAAM,CACtB,GACEpC,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKviB,IAAK,GAClD4K,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MAEX,KAAK,GAAc,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQ2hD,QAAS5xE,GACxD,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ4hD,QAAS7xE,GAO5D,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,OAAQ3rE,EAAKhD,YAEvC/L,EAAOklE,cAEhB,KAAKza,EAAagzB,MAAO,CACvB,GACEvC,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKmxB,KAAM,GACnD9oC,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAOtC,EAC3B,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ8hD,SAAU/xE,GACzD,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ+hD,SAAUhyE,GAO7D,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,QAAS3rE,EAAKhD,YAExC/L,EAAOklE,cAKhB,KAAKza,EAAa4X,KAAM,CACtB,GACEmY,EAAkB3rE,EAAeg9C,EAAYwtB,GAAU,GACvDyB,EAAkB18C,EAAU,EAAG,EAAGytB,EAAYwtB,GAC9C,OAAOr5E,EAAOklE,cAChB,IAcI0Y,EAdA7uE,EAAOF,EAAe,GACtBgvE,EACFzU,GAAkB,EAAA1iD,KAAKmxB,MACvB9oC,EAAKof,GAAG,IACRi7C,EAAej7C,GAAG,IAClBi7C,EAAehnC,KAAOrzB,EAAKqzB,KACzBgnC,EAAiBr6D,EACjBpD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAIi7C,EAASh1D,QAAQuC,UAAW,GAC3EktD,EAAc11C,EAAS5xB,OACvBsxE,EAAYhK,GAAe,EAAIiK,EAAwB3/C,EAAS,GAAIi7C,GAAY,EACpF,GAAIyE,EAAY,EAEd,OADAzE,EAAS3zB,YAAcm4B,EAChB79E,EAAOklE,cAGhB,IAAI8Y,EAAejvE,EAAKsoC,SACxB,GAAmB,GAAfy8B,EAAkB,CAEpB,GADA8J,EAAWG,EAAwB3/C,EAAS,GAAIi7C,GAC5CuE,EAAW,EAEb,OADAvE,EAAS3zB,YAAcm4B,EAChB79E,EAAOklE,cAEhB,GAAI0Y,EAAWI,EAMb,OALA3E,EAASlwD,MACP,EAAAhe,eAAe8yE,6CACf7/C,EAAS,GAAG3yB,MAAO,YAAa,IAAKuyE,EAAajyE,YAEpDstE,EAAS3zB,YAAcm4B,EAChB79E,EAAOklE,cAEhB,IAAK,EAAAvY,WAAWixB,GAMd,OALAvE,EAASlwD,MACP,EAAAhe,eAAe+yE,0BACf9/C,EAAS,GAAG3yB,MAAO,aAErB4tE,EAAS3zB,YAAcm4B,EAChB79E,EAAOklE,mBAGhB0Y,EAAWI,EAGb,OADA3E,EAAS3zB,YAAcm4B,EAChB79E,EAAOqiE,KACZtzD,EAAKsoC,SACLtoC,EAAKof,GAAG,GACRxiB,EACAkyE,EAAQnlC,eACRolC,EACAF,GAGJ,KAAKnzB,EAAagY,MAAO,CAEvB,GADA4W,EAAS3zB,YAAc,EAAAh/B,KAAKG,KAE1B2zD,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7CyB,EAAkB18C,EAAU,EAAG,EAAGytB,EAAYwtB,GAC9C,OAAOr5E,EAAOklE,cAChB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAIi7C,EAASh1D,QAAQuC,UAAW,GAC3Ehb,EAAO0tE,EACPD,EAAShb,kBAAkBjgC,EAAS,GAClCgrC,EAAc,GAGhBiQ,EAAShb,kBACPjgC,EAAS,GACTrvB,EACAA,EAAKof,GAAG,GACJ,EACA,GAENgwD,EAAS9E,EAAS3zB,YAEpB32C,EAAKof,GAAG,MAELgwD,EAAOhwD,GAAG,IACXgwD,EAAO/7C,KAAOrzB,EAAKqzB,QAGrBx2B,EAAOytE,EAAShP,kBAAkBz+D,EAChCuyE,EAAQpvE,GACR,GAAO,EACPqvB,EAAS,IAEX+/C,EAASpvE,GAEX,IAKI6uE,EALAE,EAAY1/C,EAAS5xB,QAAU,EAAIuxE,EAAwB3/C,EAAS,GAAIi7C,GAAY,EACxF,GAAIyE,EAAY,EAEd,OADAzE,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOklE,cAGhB,IAAI8Y,EAAejvE,EAAKsoC,SACxB,GAAuB,GAAnBjZ,EAAS5xB,OAAa,CAExB,GADAoxE,EAAWG,EAAwB3/C,EAAS,GAAIi7C,GAC5CuE,EAAW,EAEb,OADAvE,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOklE,cAEhB,GAAI0Y,EAAWI,EAMb,OALA3E,EAASlwD,MACP,EAAAhe,eAAe8yE,6CACf7/C,EAAS,GAAG3yB,MAAO,YAAa,IAAKuyE,EAAajyE,YAEpDstE,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOklE,cAEhB,IAAK,EAAAvY,WAAWixB,GAMd,OALAvE,EAASlwD,MACP,EAAAhe,eAAe+yE,0BACf9/C,EAAS,GAAG3yB,MAAO,aAErB4tE,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOklE,mBAGhB0Y,EAAWI,EAGb,OADA3E,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOyiE,MAAM1zD,EAAKsoC,SAAU1rC,EAAMC,EAAMuyE,EAAOzlC,eAAgBolC,EAAWF,GAKnF,KAAKnzB,EAAa2zB,YAAa,CAC7B,GACEC,EAAoB,GAAiBxyB,EAAYwtB,GACjDmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAAU,GACvDyB,EAAkB18C,EAAU,EAAG,EAAGytB,EAAYwtB,GAC9C,OAAOr5E,EAAOklE,cAChB,IAAIn2D,EAAOF,EAAe,GACtBgvE,EACF9uE,EAAKof,GAAG,IACRi7C,EAAej7C,GAAG,IAClBi7C,EAAehnC,KAAOrzB,EAAKqzB,KACzBgnC,EAAiBr6D,EACrB,IAAKA,EAAKof,GAAG,GAMX,OALAkrD,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,cAAe3rE,EAAKhD,YAErDstE,EAAS3zB,YAAcm4B,EAChB79E,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAIi7C,EAASh1D,QAAQuC,UAAW,GAC3Ek3D,EAA+B,GAAnB1/C,EAAS5xB,OAAcuxE,EAAwB3/C,EAAS,GAAIi7C,GAAY,EACxF,OAAIyE,EAAY,GACdzE,EAAS3zB,YAAcm4B,EAChB79E,EAAOklE,gBAEhBmU,EAAS3zB,YAAcm4B,EAChB79E,EAAOo+E,YACZrvE,EAAKsoC,SACL1rC,EACAkyE,EAAQnlC,eACRolC,IAGJ,KAAKrzB,EAAa6zB,aAAc,CAC9B,GACED,EAAoB,GAAiBxyB,EAAYwtB,GACjDmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7CyB,EAAkB18C,EAAU,EAAG,EAAGytB,EAAYwtB,GAC9C,OAAOr5E,EAAOklE,cAChB,IAAIn2D,EAAOF,EAAe,GAC1B,IAAKE,EAAKof,GAAG,GAMX,OALAkrD,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,eAAgB3rE,EAAKhD,YAEtDstE,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAIi7C,EAASh1D,QAAQuC,UAAW,GAC3Ehb,EAAO0tE,EACPD,EAAShb,kBACPjgC,EAAS,GACTgrC,EAAc,GAGhBiQ,EAAShb,kBACPjgC,EAAS,GACTrvB,EACAA,EAAKof,GAAG,GACJ,EACA,GAENgwD,EAAS9E,EAAS3zB,YAEpB32C,EAAKof,GAAG,MAELgwD,EAAOhwD,GAAG,IACXgwD,EAAO/7C,KAAOrzB,EAAKqzB,QAGrBx2B,EAAOytE,EAAShP,kBAAkBz+D,EAChCuyE,EAAQpvE,GACR,GAAO,EACPqvB,EAAS,IAEX+/C,EAASpvE,GAEX,IAAI+uE,EAA+B,GAAnB1/C,EAAS5xB,OAAcuxE,EAAwB3/C,EAAS,GAAIi7C,GAAY,EACxF,OAAIyE,EAAY,GACdzE,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOklE,gBAEhBmU,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOs+E,aAAavvE,EAAKsoC,SAAU1rC,EAAMC,EAAMuyE,EAAOzlC,eAAgBolC,IAE/E,KAAKrzB,EAAa8zB,WAClB,KAAK9zB,EAAa+zB,WAClB,KAAK/zB,EAAag0B,WAClB,KAAKh0B,EAAai0B,UAClB,KAAKj0B,EAAak0B,WAClB,KAAKl0B,EAAam0B,YAAa,CAC7B,GACEP,EAAoB,GAAiBxyB,EAAYwtB,GACjDmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAAU,GACvDyB,EAAkB18C,EAAU,EAAG,EAAGytB,EAAYwtB,GAC9C,OAAOr5E,EAAOklE,cAChB,IAAIn2D,EAAOF,EAAe,GAC1B,IAAKE,EAAKof,GAAG,IAAsBpf,EAAKqzB,KAAO,EAAG,CAChD,IAAIy8C,EACJ,OAAQv8E,EAAUgjB,cAChB,QAASza,QAAO,GAChB,KAAK4/C,EAAa8zB,WAAcM,EAAS,aAAc,MACvD,KAAKp0B,EAAa+zB,WAAcK,EAAS,aAAc,MACvD,KAAKp0B,EAAag0B,WAAcI,EAAS,aAAc,MACvD,KAAKp0B,EAAai0B,UAAaG,EAAS,YAAa,MACrD,KAAKp0B,EAAak0B,WAAcE,EAAS,aAAc,MACvD,KAAKp0B,EAAam0B,YAAeC,EAAS,cAM5C,OAJAxF,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoBmE,EAAQ9vE,EAAKhD,YAEvC/L,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAC7Ci7C,EAASh1D,QAAQuC,UAAS,GAGxBhb,EAAO0tE,EACPD,EAAShb,kBAAkBjgC,EAAS,GAClCgrC,EAAc,GAGhBiQ,EAAShb,kBACPjgC,EAAS,GACTrvB,EACAA,EAAKof,GAAG,GACJ,EACA,GAENgwD,EAAS9E,EAAS3zB,YAEpB32C,EAAKof,GAAG,MAELgwD,EAAOhwD,GAAG,IACXgwD,EAAO/7C,KAAOrzB,EAAKqzB,QAGrBx2B,EAAOytE,EAAShP,kBAAkBz+D,EAChCuyE,EAAQpvE,GACR,GAAO,EACPqvB,EAAS,IAEX+/C,EAASpvE,GAEX,IAKIkvB,EALA6/C,EAA+B,GAAnB1/C,EAAS5xB,OAAcuxE,EAAwB3/C,EAAS,GAAIi7C,GAAY,EACxF,GAAIyE,EAAY,EAEd,OADAzE,EAAS3zB,YAAcy4B,EAChBn+E,EAAOklE,cAGhB,OAAQ5iE,EAAUgjB,cAChB,QAASza,QAAO,GAChB,KAAK4/C,EAAa8zB,WAAetgD,EAAK,EAAAlC,YAAY+iD,IAAM,MACxD,KAAKr0B,EAAa+zB,WAAevgD,EAAK,EAAAlC,YAAYgjD,IAAM,MACxD,KAAKt0B,EAAag0B,WAAexgD,EAAK,EAAAlC,YAAYijD,IAAM,MACxD,KAAKv0B,EAAai0B,UAAezgD,EAAK,EAAAlC,YAAYkjD,GAAM,MACxD,KAAKx0B,EAAak0B,WAAe1gD,EAAK,EAAAlC,YAAYmjD,IAAM,MACxD,KAAKz0B,EAAam0B,YAAe3gD,EAAK,EAAAlC,YAAYojD,KAGpD,OADA9F,EAAS3zB,YAAcy4B,EAChBn+E,EAAOo/E,WAAWnhD,EAAIlvB,EAAKsoC,SAAUymC,EAAWnyE,EAAMC,EAAMuyE,EAAOzlC,gBAE5E,KAAK+R,EAAa40B,eAAgB,CAChC,GACEhB,EAAoB,GAAiBxyB,EAAYwtB,GACjDmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAAU,GACvDyB,EAAkB18C,EAAU,EAAG,EAAGytB,EAAYwtB,GAC9C,OAAOr5E,EAAOklE,cAChB,IAAIn2D,EAAOF,EAAe,GAC1B,IAAKE,EAAKof,GAAG,IAAsBpf,EAAKqzB,KAAO,EAK7C,OAJAi3C,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,iBAAkB3rE,EAAKhD,YAEjD/L,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAC7Ci7C,EAASh1D,QAAQuC,UAAS,GAGxBhb,EAAO0tE,EACPD,EAAShb,kBAAkBjgC,EAAS,GAClCgrC,EAAc,GAGhBiQ,EAAShb,kBACPjgC,EAAS,GACTrvB,EACAA,EAAKof,GAAG,GACJ,EACA,GAENgwD,EAAS9E,EAAS3zB,YAClB75C,EAAOwtE,EAAShb,kBAAkBjgC,EAAS,GAC7C+/C,EAAM,GAINpvE,EAAKof,GAAG,MAELgwD,EAAOhwD,GAAG,IACXgwD,EAAO/7C,KAAOrzB,EAAKqzB,QAGrBx2B,EAAOytE,EAAShP,kBAAkBz+D,EAChCuyE,EAAQpvE,GACR,GAAO,EACPqvB,EAAS,IAEXvyB,EAAOwtE,EAAShP,kBAAkBx+D,EAChCsyE,EAAQpvE,GACR,GAAO,EACPqvB,EAAS,IAEX+/C,EAASpvE,GAEX,IAAI+uE,EAA+B,GAAnB1/C,EAAS5xB,OAAcuxE,EAAwB3/C,EAAS,GAAIi7C,GAAY,EACxF,OAAIyE,EAAY,GACdzE,EAAS3zB,YAAcy4B,EAChBn+E,EAAOklE,gBAEhBmU,EAAS3zB,YAAcy4B,EAChBn+E,EAAOq/E,eAAetwE,EAAKsoC,SAAUymC,EAAWnyE,EAAMC,EAAMC,EAAMsyE,EAAOzlC,iBAElF,KAAK+R,EAAa60B,YAAa,CAC7B,GACEjB,EAAoB,GAAiBxyB,EAAYwtB,GACjDmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKjjB,IACrBzD,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAIi7C,EAASh1D,QAAQuC,UAAW,GAC3Ehb,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAIrvB,EAAM,GACrDlD,EAAOwtE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKhjB,IAAK,GAE7D,OADA21E,EAAS3zB,YAAc,EAAAh/B,KAAKjjB,IACpBsL,EAAKd,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAAgB,OAAOjO,EAAOs/E,YAAY3zE,EAAMC,EAAMC,EAAMkD,EAAK2pC,gBAMxE,OAJA2gC,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,cAAe3rE,EAAKhD,YAE9C/L,EAAOklE,cAEhB,KAAKza,EAAa80B,cAAe,CAC/B,GACElB,EAAoB,GAAiBxyB,EAAYwtB,GACjDa,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKjjB,IACrBzD,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAIi7C,EAASh1D,QAAQuC,UAAW,GAC3Ehb,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKjjB,IAAK,GAE7D,OADA41E,EAAS3zB,YAAc,EAAAh/B,KAAKjjB,IACrBzD,EAAOu/E,cAAc5zE,EAAMC,GAEpC,KAAK6+C,EAAa+0B,aAEhB,OADAnG,EAAS3zB,YAAc,EAAAh/B,KAAKG,KAE1Bw3D,EAAoB,GAAiBxyB,EAAYwtB,GACjDa,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GACpCr5E,EAAOklE,cACTllE,EAAOw/E,eAKhB,KAAK/0B,EAAa0xB,OAAQ,CACxB,GACEjB,EAAkBrsE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKmxB,MAC7C9oC,EAAOsqE,EAAS3zB,YACpB,IAAK32C,EAAKihB,MAAM,KAKd,OAJAqpD,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,SAAU3rE,EAAKhD,YAEzC/L,EAAOklE,cAEhB,IAAIt5D,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAIrvB,EAAM,GACrDlD,EAAOwtE,EAAS/S,cAClB+S,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKziB,MAC7Co1E,EAAS3zB,aAGX,OADA2zB,EAAS3zB,YAAc32C,EAChB/O,EAAOm8E,OAAOxwE,EAAMC,EAAMC,GAEnC,KAAK4+C,EAAaya,YAQhB,OAPIr2D,GACFwqE,EAASlwD,MACP,EAAAhe,eAAe23C,sBACf+I,EAAW6uB,mBAAoBp4E,EAAUgjB,cAG7C60D,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GACpCr5E,EAAOklE,cAKhB,KAAKza,EAAag1B,YAEhB,OADApG,EAAS3zB,YAAc,EAAAh/B,KAAKjjB,IAE1By2E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GACpCr5E,EAAOklE,cACTllE,EAAO0/E,KAAK,EAAA5jD,OAAO6jD,YAE5B,KAAKl1B,EAAam1B,YAEhB,OADAvG,EAAS3zB,YAAc,EAAAh/B,KAAKjjB,IAE1By2E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GACpCr5E,EAAOklE,cACTllE,EAAO0/E,KAAK,EAAA5jD,OAAO+jD,WAAY,KAAM,CAC1CxG,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKjjB,IAAK,KAGtD,KAAKgnD,EAAaq1B,YAAa,CAE7B,GADAzG,EAAS3zB,YAAc,EAAAh/B,KAAKG,KAE1BqzD,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAKmU,EAASh1D,QAAQ6C,WAAW,GAAsB,CAErD,IAAI0L,EAAWymD,EAAS5zD,SAAS4H,gBAAgB/qB,EAAW,MAE5D,OADA+2E,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACvB+L,GAAaymD,EAAS7d,gBAAgB5oC,GAAU,GAC9CymD,EAASzI,kBAAkBh+C,EAAUwL,EAAUytB,GADa7rD,EAAOklE,cAG5E,IAAIt+C,EAAYyyD,EAASh1D,QAAQuC,UAC7Bjb,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAIxX,EAAW,GAC1Dhb,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAIxX,EAAW,GAC1D/a,EAAOwtE,EAAShb,kBAAkBjgC,EAAS,GAAIxX,EAAW,GAE9D,OADAyyD,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAO8/E,YAAYn0E,EAAMC,EAAMC,GAExC,KAAK4+C,EAAas1B,YAAa,CAE7B,GADA1G,EAAS3zB,YAAc,EAAAh/B,KAAKG,KAE1BqzD,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAKmU,EAASh1D,QAAQ6C,WAAW,GAAsB,CAErD,IAAI0L,EAAWymD,EAAS5zD,SAAS4H,gBAAgB/qB,EAAW,MAE5D,OADA+2E,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACvB+L,GAAaymD,EAAS7d,gBAAgB5oC,GAAU,GAC9CymD,EAASzI,kBAAkBh+C,EAAUwL,EAAUytB,GADa7rD,EAAOklE,cAG5E,IAAIt+C,EAAYyyD,EAASh1D,QAAQuC,UAC7Bjb,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAIxX,EAAW,GAC1Dhb,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAK9iB,GAAI,GACxDiI,EAAOwtE,EAAShb,kBAAkBjgC,EAAS,GAAIxX,EAAW,GAE9D,OADAyyD,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAO+/E,YAAYp0E,EAAMC,EAAMC,GAKxC,KAAK4+C,EAAartB,WAAY,CAC5B,GACEo9C,EAAkB3rE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIn0D,EAASlC,EAAe,GACxBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKmxB,MACpDge,EAAWwjB,EAAS3zB,YAExB,OADA2zB,EAAS3zB,YAAc30C,EAClB8kD,EAASmqB,eAAejvE,GAOtBpF,GANL0tE,EAASlwD,MACP,EAAAhe,eAAe80E,mCACfp0B,EAAWpgD,MAAOoqD,EAAS9pD,WAAYgF,EAAOhF,YAEzC/L,EAAOklE,eAIlB,KAAKza,EAAa5/C,OAAQ,CACxB,GACEqwE,EAAkBrsE,EAAeg9C,EAAYwtB,GAC7CyB,EAAkB18C,EAAU,EAAG,EAAGytB,EAAYwtB,GAM9C,OAJIxqE,IACFhE,OAAOgE,EAAcrC,QACrB6sE,EAAS3zB,YAAc72C,EAAc,GAAG2oC,iBAEnCx3C,EAAOklE,cAEhB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKziB,KAAM,GACnD8K,EAAOsqE,EAAS3zB,YAIpB,GAHA2zB,EAAS3zB,YAAc32C,EAAKyoC,gBAGxB,EAAAhX,gBAAgB70B,EAAO3L,EAAOi/D,qBAAqBtzD,KAAU,EAAA+vB,aAAaqP,MAC5E,OAAQ,EAAAlK,kBAAkBl1B,IACxB,KAAK,EAAA6vB,WAAWx0B,IACd,GAA8B,GAA1B,EAAA2qD,iBAAiBhmD,GACnB,OAAIy9D,GAAkB,EAAA1iD,KAAKG,MACzBwyD,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOsgC,OAET30B,EAET,MAEF,KAAK,EAAA6vB,WAAWv0B,IACd,GAAiC,GAA7B,EAAA2qD,oBAAoBjmD,IAA4C,GAA9B,EAAAkmD,qBAAqBlmD,GACzD,OAAIy9D,GAAkB,EAAA1iD,KAAKG,MACzBwyD,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOsgC,OAET30B,EAET,MAEF,KAAK,EAAA6vB,WAAW/zB,IACd,GAA8B,GAA1B,EAAAiuD,iBAAiB/pD,GACnB,OAAIy9D,GAAkB,EAAA1iD,KAAKG,MACzBwyD,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOsgC,OAET30B,EAET,MAEF,KAAK,EAAA6vB,WAAW9zB,IACd,GAA8B,GAA1B,EAAAiuD,iBAAiBhqD,GACnB,OAAIy9D,GAAkB,EAAA1iD,KAAKG,MACzBwyD,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOsgC,OAET30B,EAQf,GAAI0tE,EAASh1D,QAAQmD,SACnB,OAAI4hD,GAAkB,EAAA1iD,KAAKG,MACzBwyD,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOsgC,OAET30B,EAIT,IAAIzC,EAAQmwE,EAASzQ,UAA6B,GAAnBxqC,EAAS5xB,OAAc4xB,EAAS,GAAK,KAAMytB,GAE1E,GADAwtB,EAAS3zB,YAAc32C,EAAKyoC,gBACxB4xB,GAAkB,EAAA1iD,KAAKG,KAEzB,OADAwyD,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACpB9X,EAAKd,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAOjO,EAAOu6D,GAAGv6D,EAAOwhE,MAAM,EAAA5lC,QAAQq2B,OAAQtmD,GAAOzC,GACzE,KAAK,EACL,KAAK,EAAc,OAAOlJ,EAAOu6D,GAAGv6D,EAAOwhE,MAAM,EAAA5lC,QAAQs2B,OAAQvmD,GAAOzC,GACxE,KAAK,EACL,KAAK,EACH,OAAOlJ,EAAOu6D,GACZv6D,EAAOwhE,MACL6X,EAASh1D,QAAQgD,SACb,EAAAuU,QAAQs2B,OACR,EAAAt2B,QAAQq2B,OACZtmD,GAEFzC,GAIJ,KAAK,GAAc,OAAOlJ,EAAOu6D,GAAGv6D,EAAOmgE,OAAO,EAAAtkC,SAASq3B,MAAOvnD,EAAM3L,EAAOkE,IAAI,IAAKgF,GACxF,KAAK,GAAc,OAAOlJ,EAAOu6D,GAAGv6D,EAAOmgE,OAAO,EAAAtkC,SAASs3B,MAAOxnD,EAAM3L,EAAOmE,IAAI,IAAK+E,OAErF,CACLmwE,EAAS3zB,YAAc32C,EAAKyoC,gBAC5B,IAAIpgB,EAAOiiD,EAASzf,YACpB,OAAQyf,EAAS3zB,YAAYz3C,MAC3B,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,CAClB,IAAIqzD,EAAOlqC,EAAKw3B,aAAa7/C,GAC7BqoB,EAAK03B,aAAawS,EAAKvsC,MAAO,EAAA44B,WAAWyC,SACzC,IAAI5xB,EAAMx+B,EAAOu6D,GACfv6D,EAAOsiE,UAAUhB,EAAKvsC,MAAOppB,GAC7B3L,EAAO2gE,UAAUW,EAAKvsC,MAAO,EAAAyG,WAAWx0B,KACxCkC,GAGF,OADAkuB,EAAKg4B,cAAckS,GACZ9iC,EAET,KAAK,EACL,KAAK,EAAc,CACjB,IAAI8iC,EAAOlqC,EAAKw3B,aAAa,EAAAloC,KAAKhjB,KAC9B86B,EAAMx+B,EAAOu6D,GACfv6D,EAAOwhE,MAAM,EAAA5lC,QAAQs2B,OACnBlyD,EAAOsiE,UAAUhB,EAAKvsC,MAAOppB,IAE/BzC,EACAlJ,EAAO2gE,UAAUW,EAAKvsC,MAAO,EAAAyG,WAAWv0B,MAG1C,OADAmwB,EAAKg4B,cAAckS,GACZ9iC,EAET,KAAK,EACL,KAAK,EAAgB,CACnB,IAAI8iC,EAAOlqC,EAAKw3B,aAAayqB,EAASh1D,QAAQuC,WAC1C4X,EAAMx+B,EAAOu6D,GACfv6D,EAAOwhE,MACL6X,EAASh1D,QAAQgD,SACb,EAAAuU,QAAQs2B,OACR,EAAAt2B,QAAQq2B,OACZjyD,EAAOsiE,UAAUhB,EAAKvsC,MAAOppB,IAE/BzC,EACAlJ,EAAO2gE,UAAUW,EAAKvsC,MAAOskD,EAASh1D,QAAQk9C,iBAGhD,OADAnqC,EAAKg4B,cAAckS,GACZ9iC,EAET,KAAK,GAAc,CACjB,IAAI8iC,EAAOlqC,EAAKw3B,aAAa,EAAAloC,KAAKxiB,KAC9Bs6B,EAAMx+B,EAAOu6D,GACfv6D,EAAOmgE,OAAO,EAAAtkC,SAASq3B,MACrBlzD,EAAOsiE,UAAUhB,EAAKvsC,MAAOppB,GAC7B3L,EAAOkE,IAAI,IAEbgF,EACAlJ,EAAO2gE,UAAUW,EAAKvsC,MAAO,EAAAyG,WAAW/zB,MAG1C,OADA2vB,EAAKg4B,cAAckS,GACZ9iC,EAET,KAAK,GAAc,CACjB,IAAI8iC,EAAOlqC,EAAKw3B,aAAa,EAAAloC,KAAKviB,KAC9Bq6B,EAAMx+B,EAAOu6D,GACfv6D,EAAOmgE,OAAO,EAAAtkC,SAASs3B,MACrBnzD,EAAOsiE,UAAUhB,EAAKvsC,MAAOppB,GAC7B3L,EAAOmE,IAAI,IAEb+E,EACAlJ,EAAO2gE,UAAUW,EAAKvsC,MAAO,EAAAyG,WAAW9zB,MAG1C,OADA0vB,EAAKg4B,cAAckS,GACZ9iC,IAQb,OAJA66C,EAASlwD,MACP,EAAAhe,eAAeykB,gBACfi8B,EAAW6uB,oBAENxxE,EAET,KAAKuhD,EAAa5wB,UAAW,CAC3B,GACEqgD,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAI9tC,EAAOiiD,EAASzf,YAChBsmB,EAAmB9oD,EAAKjJ,GAAG,OAC/BiJ,EAAK5pB,IAAI,OAET,IAAIgD,EAAO6oE,EAAShb,kBAAkBjgC,EAAS,GAAIgrC,GAEnD,OADK8W,GAAkB9oD,EAAKsxC,MAAM,OAC3Bl4D,EAET,KAAKi6C,EAAa01B,YAAa,CAC7B,GACE3F,EAAkB3rE,EAAeg9C,EAAYwtB,GAAU,GACvD,OAAOr5E,EAAOklE,cAChB,IAAIhhB,EAAer1C,EAAe,GAC9BsmB,EAAgB+uB,EAAal2B,eACjC,OAAMk2B,EAAa/1B,GAAG,MAA0C,OAAlBgH,GAO9CkkD,EAAS3zB,YAAcvwB,EAAcpmB,KAC9BsqE,EAASnC,mBAAmB/hD,EAAeiJ,EAAU,EAAkBytB,KAP5EwtB,EAASlwD,MACP,EAAAhe,eAAe2/C,qCACfe,EAAW/6C,WAAWrF,OAEjBzL,EAAOklE,eAQlB,KAAKza,EAAa7/C,MAMhB,OALAsvE,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C+2E,EAASlwD,MACP,EAAAhe,eAAei1E,eACfv0B,EAAWpgD,OAAQ2yB,EAAS5xB,OAAS4xB,EAAS,GAAKytB,GAAYpgD,MAAMM,YAEhE/L,EAAOklE,cAEhB,KAAKza,EAAa9/C,QAMhB,OALAuvE,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C+2E,EAAS1pD,QACP,EAAAxkB,eAAei1E,eACfv0B,EAAWpgD,OAAQ2yB,EAAS5xB,OAAS4xB,EAAS,GAAKytB,GAAYpgD,MAAMM,YAEhE/L,EAAOsgC,MAEhB,KAAKmqB,EAAa//C,KAMhB,OALAwvE,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C+2E,EAASlN,KACP,EAAAhhE,eAAei1E,eACfv0B,EAAWpgD,OAAQ2yB,EAAS5xB,OAAS4xB,EAAS,GAAKytB,GAAYpgD,MAAMM,YAEhE/L,EAAOsgC,MAKhB,KAAKmqB,EAAalnD,GAChB,OACE22E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,IAE3CA,EAAS3zB,YAAc,EAAAh/B,KAAKnjB,GACrBvD,EAAOklE,eAETmU,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKnjB,GAAI,GAE1D,KAAKknD,EAAajnD,IAChB,OACE02E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,IAE3CA,EAAS3zB,YAAc,EAAAh/B,KAAKljB,IACrBxD,EAAOklE,eAETmU,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKljB,IAAK,GAE3D,KAAKinD,EAAahnD,IAChB,OACEy2E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,IAE3CA,EAAS3zB,YAAc,EAAAh/B,KAAKjjB,IACrBzD,EAAOklE,eAETmU,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKjjB,IAAK,GAE3D,KAAKgnD,EAAa/mD,IAChB,OACEw2E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,IAE3CA,EAAS3zB,YAAc,EAAAh/B,KAAKhjB,IACrB1D,EAAOklE,eAETmU,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKhjB,IAAK,GAE3D,KAAK+mD,EAAa9mD,MAAO,CACvB,IAAIgjB,EAAY0yD,EAASh1D,QAAQsC,UACjC,OACEuzD,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,IAE3CA,EAAS3zB,YAAc/+B,EAChB3mB,EAAOklE,eAETmU,EAAShb,kBAAkBjgC,EAAS,GAAIzX,EAAW,GAE5D,KAAK8jC,EAAa7mD,GAChB,OACEs2E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,IAE3CA,EAAS3zB,YAAc,EAAAh/B,KAAK9iB,GACrB5D,EAAOklE,eAETmU,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAK9iB,GAAI,GAE1D,KAAK6mD,EAAa5mD,IAChB,OACEq2E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,IAE3CA,EAAS3zB,YAAc,EAAAh/B,KAAK7iB,IACrB7D,EAAOklE,eAETmU,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAK7iB,IAAK,GAE3D,KAAK4mD,EAAa3mD,IAChB,OACEo2E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,IAE3CA,EAAS3zB,YAAc,EAAAh/B,KAAK5iB,IACrB9D,EAAOklE,eAETmU,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAK5iB,IAAK,GAE3D,KAAK2mD,EAAa1mD,IAChB,OACEm2E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,IAE3CA,EAAS3zB,YAAc,EAAAh/B,KAAK3iB,IACrB/D,EAAOklE,eAETmU,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAK3iB,IAAK,GAE3D,KAAK0mD,EAAazmD,MAAO,CACvB,IAAI4iB,EAAYyyD,EAASh1D,QAAQuC,UACjC,OACEszD,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,IAE3CA,EAAS3zB,YAAc9+B,EAChB5mB,EAAOklE,eAETmU,EAAShb,kBAAkBjgC,EAAS,GAAIxX,EAAW,GAE5D,KAAK6jC,EAAaxmD,KAChB,OACEi2E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,IAE3CA,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACrBjE,EAAOklE,eAETmU,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKziB,KAAM,GAE5D,KAAKwmD,EAAavmD,IAChB,OACEg2E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,IAE3CA,EAAS3zB,YAAc,EAAAh/B,KAAKxiB,IACrBlE,EAAOklE,eAETmU,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKxiB,IAAK,GAE3D,KAAKumD,EAAatmD,IAChB,OACE+1E,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,IAE3CA,EAAS3zB,YAAc,EAAAh/B,KAAKviB,IACrBnE,EAAOklE,eAETmU,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKviB,IAAK,GAK3D,KAAKsmD,EAAarmD,KAClB,KAAKqmD,EAAanmD,MAAO,CACvB,GACE+5E,EAAoB,GAAcxyB,EAAYwtB,GAC9Ca,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,GAAIytB,EAAYwtB,GAG5C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIrnC,EAAQ,IAAIn1B,WAAW,IAC3B,IAAK,IAAIhI,EAAI,EAAGA,EAAI,KAAMA,EAAG,CAC3B,IAAIiB,EAAQy8B,EAAS19B,GACrB,GAAIiB,EAAO,CACT,IAAI6O,EAAO6oE,EAASpa,qBAAqBt9D,EAAO,EAAA+kB,KAAKnjB,GAAI,GACzD,GAAI,EAAAi9B,gBAAgBhwB,IAAS,EAAAkrB,aAAaqP,MAMxC,OALAsuC,EAASlwD,MACP,EAAAhe,eAAek1E,2CACf1+E,EAAM8J,OAER4tE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhBr6D,OAAO,EAAAg2B,kBAAkBrwB,IAAS,EAAAgrB,WAAWx0B,KAC7C,EAAAmzB,QAAQ,EAAAw3B,iBAAiBnhD,GAAOqtB,EAAOn9B,IAI3C,OADA24E,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOoE,KAAKy5B,GAErB,KAAK4sB,EAAajmD,MAAO,CACvB,GACE65E,EAAoB,GAAcxyB,EAAYwtB,GAC9Ca,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIrnC,EAAQ,IAAIn1B,WAAW,IAC3B,IAAK,IAAIhI,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,IAAIiB,EAAQy8B,EAAS19B,GACrB,GAAIiB,EAAO,CACT,IAAI6O,EAAO6oE,EAASpa,qBAAqBt9D,EAAO,EAAA+kB,KAAKljB,IAAK,GAC1D,GAAI,EAAAg9B,gBAAgBhwB,IAAS,EAAAkrB,aAAaqP,MAMxC,OALAsuC,EAASlwD,MACP,EAAAhe,eAAek1E,2CACf1+E,EAAM8J,OAER4tE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhBr6D,OAAO,EAAAg2B,kBAAkBrwB,IAAS,EAAAgrB,WAAWx0B,KAC7C,EAAAozB,SAAS,EAAAu3B,iBAAiBnhD,GAAOqtB,EAAOn9B,GAAK,IAIjD,OADA24E,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOoE,KAAKy5B,GAErB,KAAK4sB,EAAa/lD,MAAO,CACvB,GACE25E,EAAoB,GAAcxyB,EAAYwtB,GAC9Ca,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIrnC,EAAQ,IAAIn1B,WAAW,IAC3B,IAAK,IAAIhI,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,IAAIiB,EAAQy8B,EAAS19B,GACrB,GAAIiB,EAAO,CACT,IAAI6O,EAAO6oE,EAASpa,qBAAqBt9D,EAAO,EAAA+kB,KAAKjjB,IAAK,GAC1D,GAAI,EAAA+8B,gBAAgBhwB,IAAS,EAAAkrB,aAAaqP,MAMxC,OALAsuC,EAASlwD,MACP,EAAAhe,eAAek1E,2CACf1+E,EAAM8J,OAER4tE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhBr6D,OAAO,EAAAg2B,kBAAkBrwB,IAAS,EAAAgrB,WAAWx0B,KAC7C,EAAA+e,SAAS,EAAA4rC,iBAAiBnhD,GAAOqtB,EAAOn9B,GAAK,IAIjD,OADA24E,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOoE,KAAKy5B,GAErB,KAAK4sB,EAAa7lD,MAAO,CACvB,GACEy5E,EAAoB,GAAcxyB,EAAYwtB,GAC9Ca,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIrnC,EAAQ,IAAIn1B,WAAW,IAC3B,IAAK,IAAIhI,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,IAAIiB,EAAQy8B,EAAS19B,GACrB,GAAIiB,EAAO,CACT,IAAI6O,EAAO6oE,EAASpa,qBAAqBt9D,EAAO,EAAA+kB,KAAKhjB,IAAK,GAC1D,GAAI,EAAA88B,gBAAgBhwB,IAAS,EAAAkrB,aAAaqP,MAMxC,OALAsuC,EAASlwD,MACP,EAAAhe,eAAek1E,2CACf1+E,EAAM8J,OAER4tE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhBr6D,OAAO,EAAAg2B,kBAAkBrwB,IAAS,EAAAgrB,WAAWv0B,KAC7C,IAAIq5E,EAAM5/E,GAAK,EACf,EAAAqlB,SAAS,EAAA6rC,oBAAoBphD,GAAOqtB,EAAOyiD,GAC3C,EAAAv6D,SAAS,EAAA8rC,qBAAqBrhD,GAAOqtB,EAAOyiD,EAAM,IAItD,OADAjH,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOoE,KAAKy5B,GAErB,KAAK4sB,EAAa3lD,MAAO,CACvB,GACEu5E,EAAoB,GAAcxyB,EAAYwtB,GAC9Ca,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIrnC,EAAQ,IAAIn1B,WAAW,IAC3B,IAAK,IAAIhI,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,IAAIiB,EAAQy8B,EAAS19B,GACrB,GAAIiB,EAAO,CACT,IAAI6O,EAAO6oE,EAASpa,qBAAqBt9D,EAAO,EAAA+kB,KAAKxiB,IAAK,GAC1D,GAAI,EAAAs8B,gBAAgBhwB,IAAS,EAAAkrB,aAAaqP,MAMxC,OALAsuC,EAASlwD,MACP,EAAAhe,eAAek1E,2CACf1+E,EAAM8J,OAER4tE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhBr6D,OAAO,EAAAg2B,kBAAkBrwB,IAAS,EAAAgrB,WAAW/zB,KAC7C,EAAA4yB,SAAS,EAAAq7B,iBAAiBllD,GAAOqtB,EAAOn9B,GAAK,IAIjD,OADA24E,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOoE,KAAKy5B,GAErB,KAAK4sB,EAAa1lD,MAAO,CACvB,GACEs5E,EAAoB,GAAcxyB,EAAYwtB,GAC9Ca,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIrnC,EAAQ,IAAIn1B,WAAW,IAC3B,IAAK,IAAIhI,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,IAAIiB,EAAQy8B,EAAS19B,GACrB,GAAIiB,EAAO,CACT,IAAI6O,EAAO6oE,EAASpa,qBAAqBt9D,EAAO,EAAA+kB,KAAKviB,IAAK,GAC1D,GAAI,EAAAq8B,gBAAgBhwB,IAAS,EAAAkrB,aAAaqP,MAMxC,OALAsuC,EAASlwD,MACP,EAAAhe,eAAek1E,2CACf1+E,EAAM8J,OAER4tE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhBr6D,OAAO,EAAAg2B,kBAAkBrwB,IAAS,EAAAgrB,WAAW9zB,KAC7C,EAAA4yB,SAAS,EAAAq7B,iBAAiBnlD,GAAOqtB,EAAOn9B,GAAK,IAIjD,OADA24E,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOoE,KAAKy5B,GAErB,KAAK4sB,EAAa81B,WAAY,CAC5B,GACElC,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAIrvB,EAAM,GAEzD,GADAsqE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,MACvB2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EAAa,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQ4kD,WAAY70E,GAC1D,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ6kD,WAAY90E,GAC3D,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ8kD,WAAY/0E,GAC3D,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ+kD,WAAYh1E,GAC3D,KAAK,EACL,KAAK,EACH,OAAO3L,EAAOwhE,MACZ6X,EAASh1D,QAAQgD,SACb,EAAAuU,QAAQ+kD,WACR,EAAA/kD,QAAQ8kD,WACZ/0E,GAGJ,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQglD,WAAYj1E,GAC3D,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQilD,WAAYl1E,GAO/D,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,aAAc3rE,EAAKhD,YAE7C/L,EAAOklE,cAEhB,KAAKza,EAAaq2B,kBAAmB,CACnC,GACEzC,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAAU,GACvDc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAC3C,OAAOr5E,EAAOklE,cAChB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAASpa,qBAAqB7gC,EAAS,GAAI,EAAA1X,KAAK9iB,GAAI,GAC/Dy1E,EAAS3zB,YAAc32C,EACvB,IAAIo0B,EAAM,EAUV,GATI,EAAA3C,gBAAgB50B,IAAS,EAAA8vB,aAAaqP,OACxClgC,OAAO,EAAAg2B,kBAAkBj1B,IAAS,EAAA4vB,WAAWx0B,KAC7Cm8B,EAAM,EAAAwuB,iBAAiB/lD,IAEvBytE,EAASlwD,MACP,EAAAhe,eAAek1E,2CACfjiD,EAAS,GAAG3yB,QAGXsD,EAAKof,GAAG,KAAsB,CACjC,IAAI4yD,EAAU,GAAKl2E,OAAOkE,EAAKsoC,UAAa,EAQ5C,QAPIlU,EAAM,GAAKA,EAAM49C,KACnB1H,EAASlwD,MACP,EAAAhe,eAAe8yE,6CACf7/C,EAAS,GAAG3yB,MAAO,aAAc,IAAKs1E,EAAOh1E,YAE/Co3B,EAAM,GAEAp0B,EAAKd,MACX,KAAK,EAAa,OAAOjO,EAAOghF,aAAa,EAAAhlD,cAAcilD,iBAAkBt1E,EAAMw3B,GACnF,KAAK,EAAa,OAAOnjC,EAAOghF,aAAa,EAAAhlD,cAAcklD,iBAAkBv1E,EAAMw3B,GACnF,KAAK,EAAc,OAAOnjC,EAAOghF,aAAa,EAAAhlD,cAAcmlD,iBAAkBx1E,EAAMw3B,GACpF,KAAK,EAAc,OAAOnjC,EAAOghF,aAAa,EAAAhlD,cAAcolD,iBAAkBz1E,EAAMw3B,GACpF,KAAK,EACL,KAAK,EAAc,OAAOnjC,EAAOghF,aAAa,EAAAhlD,cAAcqlD,iBAAkB11E,EAAMw3B,GACpF,KAAK,EACL,KAAK,EAAc,OAAOnjC,EAAOghF,aAAa,EAAAhlD,cAAcslD,iBAAkB31E,EAAMw3B,GACpF,KAAK,EACL,KAAK,EACH,OAAOnjC,EAAOghF,aACZ3H,EAASh1D,QAAQgD,SACb,EAAA2U,cAAcslD,iBACd,EAAAtlD,cAAcqlD,iBAClB11E,EAAMw3B,GAGV,KAAK,GAAc,OAAOnjC,EAAOghF,aAAa,EAAAhlD,cAAculD,iBAAkB51E,EAAMw3B,GACpF,KAAK,GAAc,OAAOnjC,EAAOghF,aAAa,EAAAhlD,cAAcwlD,iBAAkB71E,EAAMw3B,IAOxF,OAJAk2C,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,oBAAqB3rE,EAAKhD,YAEpD/L,EAAOklE,cAEhB,KAAKza,EAAag3B,kBAAmB,CACnC,GACEpD,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAASpa,qBAAqB7gC,EAAS,GAAI,EAAA1X,KAAK9iB,GAAI,GAC3DiI,EAAOwtE,EAAShb,kBAAkBjgC,EAAS,GAAIrvB,EAAM,GACzDsqE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KAC5B,IAAI++B,EAAM,EAUV,GATI,EAAA3C,gBAAgB50B,IAAS,EAAA8vB,aAAaqP,OACxClgC,OAAO,EAAAg2B,kBAAkBj1B,IAAS,EAAA4vB,WAAWx0B,KAC7Cm8B,EAAM,EAAAwuB,iBAAiB/lD,IAEvBytE,EAASlwD,MACP,EAAAhe,eAAek1E,2CACfjiD,EAAS,GAAG3yB,QAGXsD,EAAKof,GAAG,KAAsB,CACjC,IAAI4yD,EAAU,GAAKl2E,OAAOkE,EAAKsoC,UAAa,EAQ5C,QAPIlU,EAAM,GAAKA,EAAM49C,KACnB1H,EAASlwD,MACP,EAAAhe,eAAe8yE,6CACf7/C,EAAS,GAAG3yB,MAAO,aAAc,IAAKs1E,EAAOh1E,YAE/Co3B,EAAM,GAEAp0B,EAAKd,MACX,KAAK,EACL,KAAK,EAAa,OAAOjO,EAAO0hF,aAAa,EAAAzlD,cAAc0lD,iBAAkBh2E,EAAMw3B,EAAKt3B,GACxF,KAAK,EACL,KAAK,EAAc,OAAO7L,EAAO0hF,aAAa,EAAAzlD,cAAc2lD,iBAAkBj2E,EAAMw3B,EAAKt3B,GACzF,KAAK,EACL,KAAK,EAAc,OAAO7L,EAAO0hF,aAAa,EAAAzlD,cAAc4lD,iBAAkBl2E,EAAMw3B,EAAKt3B,GACzF,KAAK,EACL,KAAK,EAAc,OAAO7L,EAAO0hF,aAAa,EAAAzlD,cAAc6lD,iBAAkBn2E,EAAMw3B,EAAKt3B,GACzF,KAAK,EACL,KAAK,EACH,OAAO7L,EAAO0hF,aACZrI,EAASh1D,QAAQgD,SACb,EAAA4U,cAAc6lD,iBACd,EAAA7lD,cAAc4lD,iBAClBl2E,EAAMw3B,EAAKt3B,GAGf,KAAK,GAAc,OAAO7L,EAAO0hF,aAAa,EAAAzlD,cAAc8lD,iBAAkBp2E,EAAMw3B,EAAKt3B,GACzF,KAAK,GAAc,OAAO7L,EAAO0hF,aAAa,EAAAzlD,cAAc+lD,iBAAkBr2E,EAAMw3B,EAAKt3B,IAO7F,OAJAwtE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,oBAAqB3rE,EAAKhD,YAEpD/L,EAAOklE,cAEhB,KAAKza,EAAaw3B,aAAc,CAC9B,GACE5D,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAG7C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GAC1B,IAAKE,EAAKof,GAAG,KAAsB,CACjC,IAAI+zD,EAAYnzE,EAAKsoC,SACjB8qC,EAAY,GAAKD,EAErB,GADAr3E,OAAO0uE,UAAU4I,IAAc,EAAAx1B,WAAWw1B,IAExChI,EAAkB/7C,EAAU,EAAI+jD,EAAWt2B,EAAYwtB,GAGvD,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,OAAQ2K,EAAKd,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GAAc,CACjB,IAAIu1B,EAAO,IAAI96B,WAAW,IACtBq4E,GAAUoB,GAAa,GAAK,EAChC,IAAK,IAAIzhF,EAAI,EAAGA,EAAIyhF,IAAazhF,EAAG,CAClC,IAAI8S,EAAU4qB,EAAS,EAAI19B,GACvB0hF,EAAO/I,EAASpa,qBAAqBzrD,EAAS,EAAAkT,KAAK9iB,GAAI,GAC3D,GAAI,EAAA48B,gBAAgB4hD,IAAS,EAAA1mD,aAAaqP,MAMxC,OALAsuC,EAASlwD,MACP,EAAAhe,eAAek1E,2CACf7sE,EAAQ/H,OAEV4tE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhBr6D,OAAO,EAAAg2B,kBAAkBuhD,IAAS,EAAA5mD,WAAWx0B,KAC7C,IAAIm8B,EAAM,EAAAwuB,iBAAiBywB,GAC3B,GAAIj/C,EAAM,GAAKA,EAAM49C,EAMnB,OALA1H,EAASlwD,MACP,EAAAhe,eAAe8yE,6CACfzqE,EAAQ/H,MAAO,aAAc,IAAKs1E,EAAOh1E,YAE3CstE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,OAAQgd,GACN,KAAK,EACH,EAAA/nD,QAAQgJ,EAAKK,EAAM9iC,GACnB,MAEF,KAAK,EAAG,CACN,IAAI2hF,EAAO3hF,GAAK,EACZ4hF,EAAOn/C,GAAO,EAClB,EAAAhJ,QAAQmoD,EAAU9+C,EAAM6+C,GACxB,EAAAloD,QAAQmoD,EAAO,EAAG9+C,EAAM6+C,EAAO,GAC/B,MAEF,KAAK,EAAG,CACN,IAAIA,EAAO3hF,GAAK,EACZ4hF,EAAOn/C,GAAO,EAClB,EAAAhJ,QAAQmoD,EAAU9+C,EAAM6+C,GACxB,EAAAloD,QAAQmoD,EAAO,EAAG9+C,EAAM6+C,EAAO,GAC/B,EAAAloD,QAAQmoD,EAAO,EAAG9+C,EAAM6+C,EAAO,GAC/B,EAAAloD,QAAQmoD,EAAO,EAAG9+C,EAAM6+C,EAAO,GAC/B,MAEF,KAAK,EAAG,CACN,IAAIA,EAAO3hF,GAAK,EACZ4hF,EAAOn/C,GAAO,EAClB,EAAAhJ,QAAQmoD,EAAU9+C,EAAM6+C,GACxB,EAAAloD,QAAQmoD,EAAO,EAAG9+C,EAAM6+C,EAAO,GAC/B,EAAAloD,QAAQmoD,EAAO,EAAG9+C,EAAM6+C,EAAO,GAC/B,EAAAloD,QAAQmoD,EAAO,EAAG9+C,EAAM6+C,EAAO,GAC/B,EAAAloD,QAAQmoD,EAAO,EAAG9+C,EAAM6+C,EAAO,GAC/B,EAAAloD,QAAQmoD,EAAO,EAAG9+C,EAAM6+C,EAAO,GAC/B,EAAAloD,QAAQmoD,EAAO,EAAG9+C,EAAM6+C,EAAO,GAC/B,EAAAloD,QAAQmoD,EAAO,EAAG9+C,EAAM6+C,EAAO,GAC/B,MAEF,QAASx3E,QAAO,IAIpB,OADAwuE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOuiF,aAAa52E,EAAMC,EAAM43B,KAS7C,OALA61C,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,eAAgB3rE,EAAKhD,YAEtDstE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,KAAKza,EAAa+3B,aAAc,CAC9B,GACEnE,EAAoB,GAAcxyB,EAAYwtB,GAC9Ca,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,OAAOpE,EAAOmgE,OAAO,EAAAtkC,SAAS4mD,aAAc92E,EAAMC,GAEpD,KAAK6+C,EAAai4B,gBAAiB,CACjC,GACErE,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAAU,GACvDyB,EAAkB18C,EAAU,EAAG,EAAGytB,EAAYwtB,GAC9C,OAAOr5E,EAAOklE,cAChB,IAQI0Y,EARA7uE,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAIi7C,EAASh1D,QAAQuC,UAAW,GAC3EktD,EAAc11C,EAAS5xB,OACvBsxE,EAAYhK,GAAe,EAAIiK,EAAwB3/C,EAAS,GAAIi7C,GAAY,EACpF,GAAIyE,EAAY,EAEd,OADAzE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAGhB,IAAI8Y,EAAejvE,EAAKsoC,SACxB,GAAmB,GAAfy8B,GAEF,GADA8J,EAAWG,EAAwB3/C,EAAS,GAAIi7C,GAC5CuE,EAAW,EAEb,OADAvE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,mBAGhB0Y,EAAWI,EAGb,GADA3E,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,MACvB2K,EAAKof,GAAG,KAAsB,CACjC,GAAIyvD,EAAWI,EAKb,OAJA3E,EAASlwD,MACP,EAAAhe,eAAe8yE,6CACf7/C,EAAS,GAAG3yB,MAAO,YAAa,IAAKuyE,EAAajyE,YAE7C/L,EAAOklE,cAEhB,IAAK,EAAAvY,WAAWixB,GAKd,OAJAvE,EAASlwD,MACP,EAAAhe,eAAe+yE,0BACf9/C,EAAS,GAAG3yB,MAAO,aAEdzL,EAAOklE,cAEhB,OAAQn2D,EAAKd,MACX,KAAK,EACL,KAAK,EACH,OAAOjO,EAAO2iF,UAAU,EAAAvmD,WAAWwmD,eAAgBj3E,EAAMmyE,EAAWF,GAEtE,KAAK,EACL,KAAK,EACH,OAAO59E,EAAO2iF,UAAU,EAAAvmD,WAAWymD,eAAgBl3E,EAAMmyE,EAAWF,GAEtE,KAAK,EACL,KAAK,EACL,KAAK,GACH,OAAO59E,EAAO2iF,UAAU,EAAAvmD,WAAW0mD,eAAgBn3E,EAAMmyE,EAAWF,GAEtE,KAAK,EACL,KAAK,EACH,IAAKvE,EAASh1D,QAAQgD,SACpB,OAAOrnB,EAAO2iF,UAAU,EAAAvmD,WAAW0mD,eAAgBn3E,EAAMmyE,EAAWF,GAIxE,KAAK,EACL,KAAK,EACL,KAAK,GACH,OAAO59E,EAAO2iF,UAAU,EAAAvmD,WAAW2mD,eAAgBp3E,EAAMmyE,EAAWF,IAQ1E,OAJAvE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,kBAAmB3rE,EAAKhD,YAElD/L,EAAOklE,cAEhB,KAAKza,EAAau4B,cAAe,CAC/B,GACE3E,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAAU,GACvDyB,EAAkB18C,EAAU,EAAG,EAAGytB,EAAYwtB,GAC9C,OAAOr5E,EAAOklE,cAChB,IAQI0Y,EARA7uE,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAIi7C,EAASh1D,QAAQuC,UAAW,GAC3EktD,EAAc11C,EAAS5xB,OACvBsxE,EAAYhK,GAAe,EAAIiK,EAAwB3/C,EAAS,GAAIi7C,GAAY,EACpF,GAAIyE,EAAY,EAEd,OADAzE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAGhB,IAAI8Y,EAAejvE,EAAKsoC,SACxB,GAAmB,GAAfy8B,GAEF,GADA8J,EAAWG,EAAwB3/C,EAAS,GAAIi7C,GAC5CuE,EAAW,EAEb,OADAvE,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,mBAGhB0Y,EAAWI,EAGb,GADA3E,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,MACvB2K,EAAKof,GAAG,KAAsB,CACjC,GAAIyvD,EAAWI,EAKb,OAJA3E,EAASlwD,MACP,EAAAhe,eAAe8yE,6CACf7/C,EAAS,GAAG3yB,MAAO,YAAa,IAAKuyE,EAAajyE,YAE7C/L,EAAOklE,cAEhB,IAAK,EAAAvY,WAAWixB,GAKd,OAJAvE,EAASlwD,MACP,EAAAhe,eAAe+yE,0BACf9/C,EAAS,GAAG3yB,MAAO,aAEdzL,EAAOklE,cAEhB,OAAQn2D,EAAKd,MACX,KAAK,EAAa,OAAOjO,EAAO2iF,UAAU,EAAAvmD,WAAW6mD,cAAet3E,EAAMmyE,EAAWF,GACrF,KAAK,EAAa,OAAO59E,EAAO2iF,UAAU,EAAAvmD,WAAW8mD,cAAev3E,EAAMmyE,EAAWF,GACrF,KAAK,EAAc,OAAO59E,EAAO2iF,UAAU,EAAAvmD,WAAW+mD,eAAgBx3E,EAAMmyE,EAAWF,GACvF,KAAK,EAAc,OAAO59E,EAAO2iF,UAAU,EAAAvmD,WAAWgnD,eAAgBz3E,EAAMmyE,EAAWF,GACvF,KAAK,EACH,GAAIvE,EAASh1D,QAAQgD,SAAU,MAGjC,KAAK,EAAc,OAAOrnB,EAAO2iF,UAAU,EAAAvmD,WAAWinD,eAAgB13E,EAAMmyE,EAAWF,GACvF,KAAK,EACH,GAAIvE,EAASh1D,QAAQgD,SAAU,MAGjC,KAAK,EAAc,OAAOrnB,EAAO2iF,UAAU,EAAAvmD,WAAWknD,eAAgB33E,EAAMmyE,EAAWF,IAO3F,OAJAvE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,gBAAiB3rE,EAAKhD,YAEhD/L,EAAOklE,cAEhB,KAAKza,EAAa84B,SAAU,CAC1B,GACElF,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EAAa,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAAS2nD,SAAU73E,EAAMC,GAChE,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS4nD,SAAU93E,EAAMC,GACjE,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS6nD,SAAU/3E,EAAMC,GACjE,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS8nD,SAAUh4E,EAAMC,GACjE,KAAK,EACL,KAAK,EACH,OAAO5L,EAAOmgE,OACZkZ,EAASh1D,QAAQgD,SACb,EAAAwU,SAAS8nD,SACT,EAAA9nD,SAAS6nD,SACb/3E,EAAMC,GAGV,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS+nD,SAAUj4E,EAAMC,GACjE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASgoD,SAAUl4E,EAAMC,GAOrE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE3C/L,EAAOklE,cAEhB,KAAKza,EAAaq5B,SAAU,CAC1B,GACEzF,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EAAa,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAASkoD,SAAUp4E,EAAMC,GAChE,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASmoD,SAAUr4E,EAAMC,GACjE,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASooD,SAAUt4E,EAAMC,GACjE,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASqoD,SAAUv4E,EAAMC,GACjE,KAAK,EACL,KAAK,EACH,OAAO5L,EAAOmgE,OACZkZ,EAASh1D,QAAQgD,SACb,EAAAwU,SAASqoD,SACT,EAAAroD,SAASooD,SACbt4E,EAAMC,GAGV,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASsoD,SAAUx4E,EAAMC,GACjE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASuoD,SAAUz4E,EAAMC,GAOrE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE3C/L,EAAOklE,cAEhB,KAAKza,EAAa45B,SAAU,CAC1B,GACEhG,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EAAa,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAASyoD,SAAU34E,EAAMC,GAChE,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS0oD,SAAU54E,EAAMC,GACjE,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS2oD,SAAU74E,EAAMC,GACjE,KAAK,EACL,KAAK,EACH,IAAKytE,EAASh1D,QAAQgD,SACpB,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAAS2oD,SAAU74E,EAAMC,GAEhD,MAEF,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS4oD,SAAU94E,EAAMC,GACjE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS6oD,SAAU/4E,EAAMC,GAOrE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE3C/L,EAAOklE,cAEhB,KAAKza,EAAak6B,SAAU,CAC1B,GACEtG,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,GAAc,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAAS+oD,SAAUj5E,EAAMC,GACjE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASgpD,SAAUl5E,EAAMC,GAOrE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE3C/L,EAAOklE,cAEhB,KAAKza,EAAaq6B,kBAAmB,CACnC,GACEzG,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAa,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAASkpD,YAAap5E,EAAMC,GACnE,KAAK,EAAa,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASmpD,YAAar5E,EAAMC,GACnE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASopD,YAAat5E,EAAMC,GACpE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASqpD,YAAav5E,EAAMC,GAOxE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,oBAAqB3rE,EAAKhD,YAEpD/L,EAAOklE,cAEhB,KAAKza,EAAa06B,kBAAmB,CACnC,GACE9G,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAa,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAASupD,YAAaz5E,EAAMC,GACnE,KAAK,EAAa,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASwpD,YAAa15E,EAAMC,GACnE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASypD,YAAa35E,EAAMC,GACpE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS0pD,YAAa55E,EAAMC,GAOxE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,oBAAqB3rE,EAAKhD,YAEpD/L,EAAOklE,cAEhB,KAAKza,EAAa+6B,SAAU,CAC1B,GACEnH,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAa,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAAS4pD,SAAU95E,EAAMC,GAChE,KAAK,EAAa,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS6pD,SAAU/5E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS8pD,SAAUh6E,EAAMC,GACjE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS+pD,SAAUj6E,EAAMC,GACjE,KAAK,EACH,GAAIytE,EAASh1D,QAAQgD,SAAU,MAGjC,KAAK,EAAc,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAASgqD,SAAUl6E,EAAMC,GACjE,KAAK,EACH,GAAIytE,EAASh1D,QAAQgD,SAAU,MAGjC,KAAK,EAAc,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAASiqD,SAAUn6E,EAAMC,GACjE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASkqD,SAAUp6E,EAAMC,GACjE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASmqD,SAAUr6E,EAAMC,GAOrE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE3C/L,EAAOklE,cAEhB,KAAKza,EAAaw7B,SAAU,CAC1B,GACE5H,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAa,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAASqqD,SAAUv6E,EAAMC,GAChE,KAAK,EAAa,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASsqD,SAAUx6E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASuqD,SAAUz6E,EAAMC,GACjE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASwqD,SAAU16E,EAAMC,GACjE,KAAK,EACH,GAAIytE,EAASh1D,QAAQgD,SAAU,MAGjC,KAAK,EAAc,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAASyqD,SAAU36E,EAAMC,GACjE,KAAK,EACH,GAAIytE,EAASh1D,QAAQgD,SAAU,MAGjC,KAAK,EAAc,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAAS0qD,SAAU56E,EAAMC,GACjE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS2qD,SAAU76E,EAAMC,GACjE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS4qD,SAAU96E,EAAMC,GAOrE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE3C/L,EAAOklE,cAEhB,KAAKza,EAAai8B,SAAU,CAC1B,GACErI,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAc,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAAS8qD,SAAUh7E,EAAMC,GAOrE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE3C/L,EAAOklE,cAEhB,KAAKza,EAAam8B,UAAW,CAC3B,GACEvI,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAc,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAASgrD,UAAWl7E,EAAMC,GAClE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASirD,UAAWn7E,EAAMC,GAOtE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,YAAa3rE,EAAKhD,YAE5C/L,EAAOklE,cAEhB,KAAKza,EAAas8B,QAAS,CACzB,GACE1I,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACH,KAAK,EAAa,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAAS6wC,QAAS/gE,EAAMC,GAC/D,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASmrD,QAASr7E,EAAMC,GAChE,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASorD,QAASt7E,EAAMC,GAChE,KAAK,EACL,KAAK,EACH,IAAKytE,EAASh1D,QAAQgD,SACpB,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAASorD,QAASt7E,EAAMC,GAE/C,MAEF,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASqrD,QAASv7E,EAAMC,GAChE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASsrD,QAASx7E,EAAMC,GAOtE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,UAAW3rE,EAAKhD,YAE1C/L,EAAOklE,cAEhB,KAAKza,EAAa28B,QAAS,CACzB,GACE/I,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACH,KAAK,EAAa,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAAS+wC,QAASjhE,EAAMC,GAC/D,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASwrD,QAAS17E,EAAMC,GAChE,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASyrD,QAAS37E,EAAMC,GAChE,KAAK,EACL,KAAK,EACH,IAAKytE,EAASh1D,QAAQgD,SACpB,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAASyrD,QAAS37E,EAAMC,GAE/C,MAEF,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS0rD,QAAS57E,EAAMC,GAChE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS2rD,QAAS77E,EAAMC,GAOtE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,UAAW3rE,EAAKhD,YAE1C/L,EAAOklE,cAEhB,KAAKza,EAAag9B,QAAS,CACzB,GACEpJ,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAa,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAAS6rD,QAAS/7E,EAAMC,GAC/D,KAAK,EAAa,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS8rD,QAASh8E,EAAMC,GAC/D,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS+rD,QAASj8E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASgsD,QAASl8E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASisD,QAASn8E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASksD,QAASp8E,EAAMC,GAChE,KAAK,EACH,IAAKytE,EAASh1D,QAAQgD,SACpB,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAASisD,QAASn8E,EAAMC,GAE/C,MAEF,KAAK,EACH,IAAKytE,EAASh1D,QAAQgD,SACpB,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAASksD,QAASp8E,EAAMC,GAE/C,MAEF,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASmsD,QAASr8E,EAAMC,GAChE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASosD,QAASt8E,EAAMC,GAOpE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,UAAW3rE,EAAKhD,YAE1C/L,EAAOklE,cAEhB,KAAKza,EAAay9B,QAAS,CACzB,GACE7J,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAa,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAASssD,QAASx8E,EAAMC,GAC/D,KAAK,EAAa,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASusD,QAASz8E,EAAMC,GAC/D,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASwsD,QAAS18E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASysD,QAAS38E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS0sD,QAAS58E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS2sD,QAAS78E,EAAMC,GAChE,KAAK,EACH,IAAKytE,EAASh1D,QAAQgD,SACpB,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAAS0sD,QAAS58E,EAAMC,GAE/C,MAEF,KAAK,EACH,IAAKytE,EAASh1D,QAAQgD,SACpB,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAAS2sD,QAAS78E,EAAMC,GAE/C,MAEF,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS4sD,QAAS98E,EAAMC,GAChE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS6sD,QAAS/8E,EAAMC,GAOpE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,UAAW3rE,EAAKhD,YAE1C/L,EAAOklE,cAEhB,KAAKza,EAAak+B,QAAS,CACzB,GACEtK,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAa,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAAS+sD,QAASj9E,EAAMC,GAC/D,KAAK,EAAa,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASgtD,QAASl9E,EAAMC,GAC/D,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASitD,QAASn9E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASktD,QAASp9E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASmtD,QAASr9E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASotD,QAASt9E,EAAMC,GAChE,KAAK,EACH,IAAKytE,EAASh1D,QAAQgD,SACpB,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAASmtD,QAASr9E,EAAMC,GAE/C,MAEF,KAAK,EACH,IAAKytE,EAASh1D,QAAQgD,SACpB,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAASotD,QAASt9E,EAAMC,GAE/C,MAEF,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASqtD,QAASv9E,EAAMC,GAChE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASstD,QAASx9E,EAAMC,GAOpE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,UAAW3rE,EAAKhD,YAE1C/L,EAAOklE,cAEhB,KAAKza,EAAa2+B,QAAS,CACzB,GACE/K,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAa,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAASwtD,QAAS19E,EAAMC,GAC/D,KAAK,EAAa,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASytD,QAAS39E,EAAMC,GAC/D,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS0tD,QAAS59E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS2tD,QAAS79E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS4tD,QAAS99E,EAAMC,GAChE,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS6tD,QAAS/9E,EAAMC,GAChE,KAAK,EACH,IAAKytE,EAASh1D,QAAQgD,SACpB,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAAS4tD,QAAS99E,EAAMC,GAE/C,MAEF,KAAK,EACH,IAAKytE,EAASh1D,QAAQgD,SACpB,OAAOrnB,EAAOmgE,OAAO,EAAAtkC,SAAS6tD,QAAS/9E,EAAMC,GAE/C,MAEF,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS8tD,QAASh+E,EAAMC,GAChE,KAAK,GAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAAS+tD,QAASj+E,EAAMC,GAOpE,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,UAAW3rE,EAAKhD,YAE1C/L,EAAOklE,cAEhB,KAAKza,EAAao/B,YAAa,CAC7B,GACExL,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAc,OAAOjO,EAAOmgE,OAAO,EAAAtkC,SAASiuD,mBAAoBn+E,EAAMC,GAC3E,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASkuD,mBAAoBp+E,EAAMC,GAC3E,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASmuD,mBAAoBr+E,EAAMC,GAC3E,KAAK,EAAc,OAAO5L,EAAOmgE,OAAO,EAAAtkC,SAASouD,mBAAoBt+E,EAAMC,GAO/E,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,cAAe3rE,EAAKhD,YAE9C/L,EAAOklE,cAEhB,KAAKza,EAAay/B,SAAU,CAC1B,GACE7L,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EAAa,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQuuD,SAAUx+E,GACxD,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQwuD,SAAUz+E,GACzD,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQyuD,SAAU1+E,GACzD,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ0uD,SAAU3+E,GACzD,KAAK,EACL,KAAK,EACH,OAAO3L,EAAOwhE,MACZ6X,EAASh1D,QAAQgD,SACb,EAAAuU,QAAQ0uD,SACR,EAAA1uD,QAAQyuD,SACZ1+E,GAGJ,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ2uD,SAAU5+E,GACzD,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ4uD,SAAU7+E,GAO7D,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE3C/L,EAAOklE,cAEhB,KAAKza,EAAaggC,SAAU,CAC1B,GACEpM,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,GAAc,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQ8uD,SAAU/+E,GACzD,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ+uD,SAAUh/E,GAO7D,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE3C/L,EAAOklE,cAEhB,KAAKza,EAAamgC,UAAW,CAC3B,GACEvM,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,GAAc,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQivD,UAAWl/E,GAC1D,KAAK,GAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQkvD,UAAWn/E,GAO9D,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,YAAa3rE,EAAKhD,YAE5C/L,EAAOklE,cAEhB,KAAKza,EAAasgC,aAAc,CAC9B,GACE1M,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAc,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQovD,oBAAqBr/E,GACpE,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQqvD,oBAAqBt/E,GACpE,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQsvD,oBAAqBv/E,GACpE,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQuvD,oBAAqBx/E,GAOxE,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,eAAgB3rE,EAAKhD,YAE/C/L,EAAOklE,cAEhB,KAAKza,EAAa2gC,eAAgB,CAChC,GACE/M,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAc,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQyvD,qBAAsB1/E,GACrE,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ0vD,qBAAsB3/E,GACrE,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ2vD,qBAAsB5/E,GACrE,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ4vD,qBAAsB7/E,GAOzE,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,iBAAkB3rE,EAAKhD,YAEjD/L,EAAOklE,cAEhB,KAAKza,EAAaghC,eAAgB,CAChC,GACEpN,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAa,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQ8vD,qBAAsB//E,GACpE,KAAK,EAAa,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ+vD,qBAAsBhgF,GACpE,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQgwD,qBAAsBjgF,GACrE,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQiwD,qBAAsBlgF,GAOzE,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,iBAAkB3rE,EAAKhD,YAEjD/L,EAAOklE,cAEhB,KAAKza,EAAaqhC,gBAAiB,CACjC,GACEzN,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAa,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQmwD,sBAAuBpgF,GACrE,KAAK,EAAa,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQowD,sBAAuBrgF,GACrE,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQqwD,sBAAuBtgF,GACtE,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQswD,sBAAuBvgF,GAO1E,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,kBAAmB3rE,EAAKhD,YAElD/L,EAAOklE,cAEhB,KAAKza,EAAa0hC,SAAU,CAC1B,GACE9N,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKjjB,IAAK,GAE7D,GADA41E,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,MACvB2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EAAa,OAAOjO,EAAOosF,WAAW,EAAAlwD,YAAYmwD,SAAU1gF,EAAMC,GACvE,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOosF,WAAW,EAAAlwD,YAAYowD,SAAU3gF,EAAMC,GACxE,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOosF,WAAW,EAAAlwD,YAAYqwD,SAAU5gF,EAAMC,GACxE,KAAK,EACL,KAAK,EAAc,OAAO5L,EAAOosF,WAAW,EAAAlwD,YAAYswD,SAAU7gF,EAAMC,GACxE,KAAK,EACL,KAAK,EACH,OAAO5L,EAAOosF,WACZ/S,EAASh1D,QAAQgD,SACb,EAAA6U,YAAYswD,SACZ,EAAAtwD,YAAYqwD,SAChB5gF,EAAMC,GASd,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE3C/L,EAAOklE,cAEhB,KAAKza,EAAagiC,SAAU,CAC1B,GACEpO,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKjjB,IAAK,GAE7D,GADA41E,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,MACvB2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EAAa,OAAOjO,EAAOosF,WAAW,EAAAlwD,YAAYwwD,SAAU/gF,EAAMC,GACvE,KAAK,EAAa,OAAO5L,EAAOosF,WAAW,EAAAlwD,YAAYywD,SAAUhhF,EAAMC,GACvE,KAAK,EAAc,OAAO5L,EAAOosF,WAAW,EAAAlwD,YAAY0wD,SAAUjhF,EAAMC,GACxE,KAAK,EAAc,OAAO5L,EAAOosF,WAAW,EAAAlwD,YAAY2wD,SAAUlhF,EAAMC,GACxE,KAAK,EAAc,OAAO5L,EAAOosF,WAAW,EAAAlwD,YAAY4wD,SAAUnhF,EAAMC,GACxE,KAAK,EAAc,OAAO5L,EAAOosF,WAAW,EAAAlwD,YAAY6wD,SAAUphF,EAAMC,GACxE,KAAK,EAAc,OAAO5L,EAAOosF,WAAW,EAAAlwD,YAAY8wD,SAAUrhF,EAAMC,GACxE,KAAK,EAAc,OAAO5L,EAAOosF,WAAW,EAAAlwD,YAAY+wD,SAAUthF,EAAMC,GACxE,KAAK,EACH,OAAO5L,EAAOosF,WACZ/S,EAASh1D,QAAQgD,SACb,EAAA6U,YAAY8wD,SACZ,EAAA9wD,YAAY4wD,SAChBnhF,EAAMC,GAGV,KAAK,EACH,OAAO5L,EAAOosF,WACZ/S,EAASh1D,QAAQgD,SACb,EAAA6U,YAAY+wD,SACZ,EAAA/wD,YAAY6wD,SAChBphF,EAAMC,GASd,OAJAytE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE3C/L,EAAOklE,cAEhB,KAAKza,EAAayiC,SAAU,CAC1B,GACE7O,EAAoB,GAAcxyB,EAAYwtB,GAC9Ca,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,OAAOpE,EAAOmgE,OAAO,EAAAtkC,SAASsxD,QAASxhF,EAAMC,GAE/C,KAAK6+C,EAAa2iC,QAAS,CACzB,GACE/O,EAAoB,GAAcxyB,EAAYwtB,GAC9Ca,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,OAAOpE,EAAOmgE,OAAO,EAAAtkC,SAASwxD,OAAQ1hF,EAAMC,GAE9C,KAAK6+C,EAAa6iC,SAAU,CAC1B,GACEjP,EAAoB,GAAcxyB,EAAYwtB,GAC9Ca,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,OAAOpE,EAAOmgE,OAAO,EAAAtkC,SAAS0xD,QAAS5hF,EAAMC,GAE/C,KAAK6+C,EAAa+iC,YAAa,CAC7B,GACEnP,EAAoB,GAAcxyB,EAAYwtB,GAC9Ca,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,OAAOpE,EAAOmgE,OAAO,EAAAtkC,SAAS4xD,WAAY9hF,EAAMC,GAElD,KAAK6+C,EAAaijC,SAAU,CAC1B,GACErP,EAAoB,GAAcxyB,EAAYwtB,GAC9Ca,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,OAAOpE,EAAOwhE,MAAM,EAAA5lC,QAAQ+xD,QAAShiF,GAEvC,KAAK8+C,EAAamjC,eAAgB,CAChC,GACEvP,EAAoB,GAAcxyB,EAAYwtB,GAC9Ca,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DyH,EAAOwtE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,OAAOpE,EAAO6tF,aAAa,EAAA1xD,cAAc2xD,UAAWniF,EAAMC,EAAMC,GAElE,KAAK4+C,EAAasjC,cAAe,CAC/B,GACE1P,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACrBjE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAE9D,GADAi1E,EAAS3zB,YAAc,EAAAh/B,KAAKziB,MACvB8K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EAAa,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQ+wC,aAAchhE,GAC5D,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQoyD,aAAcriF,GAC7D,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQqyD,aAActiF,GAC7D,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQsyD,aAAcviF,GAC7D,KAAK,EACL,KAAK,EACH,OAAO3L,EAAOwhE,MACZ6X,EAASh1D,QAAQgD,SACb,EAAAuU,QAAQsyD,aACR,EAAAtyD,QAAQqyD,aACZtiF,GASR,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,gBAAiB3rE,EAAKhD,YAEhD/L,EAAOklE,cAEhB,KAAKza,EAAa0jC,cAAe,CAC/B,GACE9P,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACrBjE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAE9D,GADAi1E,EAAS3zB,YAAc,EAAAh/B,KAAKziB,MACvB8K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,EACL,KAAK,EAAa,OAAOjO,EAAOwhE,MAAM,EAAA5lC,QAAQ6wC,aAAc9gE,GAC5D,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQwyD,aAAcziF,GAC7D,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQyyD,aAAc1iF,GAC7D,KAAK,EACL,KAAK,EAAc,OAAO3L,EAAOwhE,MAAM,EAAA5lC,QAAQ0yD,aAAc3iF,GAC7D,KAAK,EACL,KAAK,EACH,OAAO3L,EAAOwhE,MACZ6X,EAASh1D,QAAQgD,SACb,EAAAuU,QAAQ0yD,aACR,EAAA1yD,QAAQyyD,aACZ1iF,GASR,OAJA0tE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,gBAAiB3rE,EAAKhD,YAEhD/L,EAAOklE,cAEhB,KAAKza,EAAa8jC,UAAW,CAC3B,GACElQ,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DyH,EAAOwtE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,GAAc,OAAOjO,EAAO6tF,aAAa,EAAA1xD,cAAcqyD,UAAW7iF,EAAMC,EAAMC,GACnF,KAAK,GAAc,OAAO7L,EAAO6tF,aAAa,EAAA1xD,cAAcsyD,UAAW9iF,EAAMC,EAAMC,GAOvF,OAJAwtE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,YAAa3rE,EAAKhD,YAE5C/L,EAAOklE,cAEhB,KAAKza,EAAaikC,UAAW,CAC3B,GACErQ,EAAoB,GAAcxyB,EAAYwtB,GAC9CmB,EAAkB3rE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKtiB,KACrBpE,EAAOklE,cAEhB,IAAIn2D,EAAOF,EAAe,GACtBlD,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DwH,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC1DyH,EAAOwtE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKtiB,KAAM,GAC9D,IAAK2K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MACX,KAAK,GAAc,OAAOjO,EAAO6tF,aAAa,EAAA1xD,cAAcwyD,UAAWhjF,EAAMC,EAAMC,GACnF,KAAK,GAAc,OAAO7L,EAAO6tF,aAAa,EAAA1xD,cAAcyyD,UAAWjjF,EAAMC,EAAMC,GAOvF,OAJAwtE,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,YAAa3rE,EAAKhD,YAE5C/L,EAAOklE,cAKhB,KAAKza,EAAaokC,KAAM,CACtB,IAAI9/E,EAAOyqE,EAAqBH,EAAUxqE,EAAeuvB,EAAUytB,GAEnE,GADAwtB,EAAS3zB,YAAc,EAAAh/B,KAAK5iB,KACvBiL,EAAM,OAAO/O,EAAOklE,cACzB,GAAIn2D,EAAKof,GAAG,KAAsB,CAChC,IAAIopB,EAAqBxoC,EAAKwoC,mBAC9B,GAAIA,EACF,OAAOv3C,EAAOyD,IAAI8zC,EAAmB1xB,IAEvC,IAAImI,EAAiBjf,EAAKif,eAC1B,GAAuB,OAAnBA,IAA4BA,EAAe1C,aAAa,EAAAzL,eAAetG,WACzE,OAAOvZ,EAAOyD,IAAIuqB,EAAenI,IAOrC,OAJAwzD,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,OAAQ3rE,EAAKhD,YAEvC/L,EAAOklE,cAEhB,KAAKza,EAAaqkC,cAAe,CAC/B,GACE5U,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAK5iB,IAAK,GAG7D,OAFAu1E,EAAShhB,iBAAmB,EAC5BghB,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOa,KAAK4pD,EAAaqkC,cAAe,CAAEnjF,GAAQ,EAAA6vB,WAAW2D,MAEtE,KAAKsrB,EAAaskC,cAAe,CAC/B,GACE7U,EAAgBrrE,EAAeg9C,EAAYvpD,GAC3C63E,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOklE,cAEhB,IAAIv5D,EAAO0tE,EAAShb,kBAAkBjgC,EAAS,GAAIi7C,EAASh1D,QAAQuC,UAAW,GAC3Ehb,EAAOytE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAK5iB,IAAK,GAG7D,OAFAu1E,EAAShhB,iBAAmB,EAC5BghB,EAAS3zB,YAAc,EAAAh/B,KAAKG,KACrB7mB,EAAOa,KAAK4pD,EAAaskC,cAAe,CAAEpjF,EAAMC,GAAQ,EAAA4vB,WAAW2D,MAE5E,KAAKsrB,EAAaukC,MAAO,CACvB,GACE9T,EAAkBrsE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACrBjE,EAAOklE,cAEhB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKmxB,MAC7C9oC,EAAOsqE,EAAS3zB,YAEpB,GADA2zB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,MACvB8K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MAEX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAO,EAAAu4D,eAAe76D,GAClB3L,EAAO8gC,MAAM,KAAM,CACjB9gC,EAAOuiE,KAAK52D,GACZ3L,EAAOyD,IAAI,IACV,EAAA+3B,WAAWx0B,KACdhH,EAAOyD,IAAI,GAGjB,KAAK,GAAc,CACjB,GAAI,EAAA+8B,gBAAgB70B,IAAS,EAAA+vB,aAAa2P,SACxC,OAAOrrC,EAAOmgE,OAAO,EAAAtkC,SAASu3B,MAC5BznD,EACA3L,EAAO2gE,UAAU,EAAArP,iBAAiB3lD,GAAO,EAAA6vB,WAAW/zB,MAGxD,IAAI2vB,EAAOiiD,EAASzf,YAChB0H,EAAOlqC,EAAKw3B,aAAa,EAAAloC,KAAKxiB,KAC9Bs6B,EAAMx+B,EAAOmgE,OAAO,EAAAtkC,SAASu3B,MAC/BpzD,EAAOsiE,UAAUhB,EAAKvsC,MAAOppB,GAC7B3L,EAAO2gE,UAAUW,EAAKvsC,MAAO,EAAAyG,WAAW/zB,MAG1C,OADA2vB,EAAKg4B,cAAckS,GACZ9iC,EAET,KAAK,GAAc,CACjB,GAAI,EAAAgC,gBAAgB70B,IAAS,EAAA+vB,aAAa2P,SACxC,OAAOrrC,EAAOmgE,OAAO,EAAAtkC,SAASw3B,MAC5B1nD,EACA3L,EAAO2gE,UAAU,EAAArP,iBAAiB3lD,GAAO,EAAA6vB,WAAW9zB,MAGxD,IAAI0vB,EAAOiiD,EAASzf,YAChB0H,EAAOlqC,EAAKw3B,aAAa,EAAAloC,KAAKviB,KAC9Bq6B,EAAMx+B,EAAOmgE,OAAO,EAAAtkC,SAASw3B,MAC/BrzD,EAAOsiE,UAAUhB,EAAKvsC,MAAOppB,GAC7B3L,EAAO2gE,UAAUW,EAAKvsC,MAAO,EAAAyG,WAAW9zB,MAG1C,OADA0vB,EAAKg4B,cAAckS,GACZ9iC,GAQb,OAJA66C,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,QAAS3rE,EAAKhD,YAExC/L,EAAOklE,cAEhB,KAAKza,EAAawkC,SAAU,CAC1B,GACE/T,EAAkBrsE,EAAeg9C,EAAYwtB,GAC7Cc,EAAkB/7C,EAAU,EAAGytB,EAAYwtB,GAG3C,OADAA,EAAS3zB,YAAc,EAAAh/B,KAAKziB,KACrBjE,EAAOklE,cAEhB,IAAIv5D,EAAOkD,EACPwqE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,GAC1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKmxB,MAC7C9oC,EAAOsqE,EAAS3zB,YAEpB,GADA2zB,EAAS3zB,YAAc,EAAAh/B,KAAKziB,MACvB8K,EAAKof,GAAG,KACX,OAAQpf,EAAKd,MAEX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAO,EAAAu4D,eAAe76D,GAClB3L,EAAO8gC,MAAM,KAAM,CACjB9gC,EAAOuiE,KAAK52D,GACZ3L,EAAOyD,IAAI,IACV,EAAA+3B,WAAWx0B,KACdhH,EAAOyD,IAAI,GAGjB,KAAK,GAAc,CACjB,GAAI,EAAA+8B,gBAAgB70B,IAAS,EAAA+vB,aAAa2P,SACxC,OAAOrrC,EAAOmgE,OAAO,EAAAtkC,SAASq3B,MAC5BlzD,EAAOmgE,OAAO,EAAAtkC,SAASsxC,OACrBxhE,EACA3L,EAAO2gE,UAAU,EAAArP,iBAAiB3lD,GAAO,EAAA6vB,WAAW/zB,MAEtDzH,EAAOkE,IAAI,IAGf,IAAIkzB,EAAOiiD,EAASzf,YAChB0H,EAAOlqC,EAAKw3B,aAAa,EAAAloC,KAAKxiB,KAC9Bs6B,EAAMx+B,EAAOmgE,OAAO,EAAAtkC,SAASq3B,MAC/BlzD,EAAOmgE,OAAO,EAAAtkC,SAASsxC,OACrBntE,EAAOsiE,UAAUhB,EAAKvsC,MAAOppB,GAC7B3L,EAAO2gE,UAAUW,EAAKvsC,MAAO,EAAAyG,WAAW/zB,MAE1CzH,EAAOkE,IAAI,IAGb,OADAkzB,EAAKg4B,cAAckS,GACZ9iC,EAET,KAAK,GAAc,CACjB,GAAI,EAAAgC,gBAAgB70B,IAAS,EAAA+vB,aAAa2P,SACxC,OAAOrrC,EAAOmgE,OAAO,EAAAtkC,SAASs3B,MAC5BnzD,EAAOmgE,OAAO,EAAAtkC,SAASuxC,OACrBzhE,EACA3L,EAAO2gE,UAAU,EAAArP,iBAAiB3lD,GAAO,EAAA6vB,WAAW9zB,MAEtD1H,EAAOmE,IAAI,IAGf,IAAIizB,EAAOiiD,EAASzf,YAChB0H,EAAOlqC,EAAKw3B,aAAa,EAAAloC,KAAKviB,KAC9Bq6B,EAAMx+B,EAAOmgE,OAAO,EAAAtkC,SAASs3B,MAC/BnzD,EAAOmgE,OAAO,EAAAtkC,SAASuxC,OACrBptE,EAAOsiE,UAAUhB,EAAKvsC,MAAOppB,GAC7B3L,EAAO2gE,UAAUW,EAAKvsC,MAAO,EAAAyG,WAAW9zB,MAE1C1H,EAAOmE,IAAI,IAGb,OADAizB,EAAKg4B,cAAckS,GACZ9iC,GAQb,OAJA66C,EAASlwD,MACP,EAAAhe,eAAesvE,wCACf5uB,EAAW6uB,mBAAoB,WAAY3rE,EAAKhD,YAE3C/L,EAAOklE,eAKlB,CACE,IAAI10D,EAmBR,SACE6oE,EACA/2E,EACA87B,EACAytB,GAGA,OAAQvpD,EAAUgjB,cAOhB,KAAKmlC,EAAaykC,QAAS,OAAOC,EAAS1kC,EAAa3S,IAAKuhC,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACrG,KAAKpB,EAAa2kC,QAAS,OAAOD,EAAS1kC,EAAa3S,IAAKuhC,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACrG,KAAKpB,EAAa4kC,QAAS,OAAOF,EAAS1kC,EAAamwB,IAAKvB,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACrG,KAAKpB,EAAa6kC,QAAS,OAAOH,EAAS1kC,EAAamwB,IAAKvB,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACrG,KAAKpB,EAAa8kC,WAAY,OAAOJ,EAAS1kC,EAAa4wB,OAAQhC,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAC3G,KAAKpB,EAAa+kC,WAAY,OAAOL,EAAS1kC,EAAa4wB,OAAQhC,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3G,KAAKpB,EAAaglC,SAAU,OAAON,EAAS1kC,EAAa8wB,KAAMlC,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACvG,KAAKpB,EAAailC,SAAU,OAAOP,EAAS1kC,EAAa8wB,KAAMlC,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACvG,KAAKpB,EAAaklC,SAAU,OAAOR,EAAS1kC,EAAaixB,KAAMrC,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACvG,KAAKpB,EAAamlC,SAAU,OAAOT,EAAS1kC,EAAaixB,KAAMrC,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACvG,KAAKpB,EAAaolC,QAAS,OAAOV,EAAS1kC,EAAaoxB,IAAKxC,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKxiB,IAAK2nD,GACrG,KAAKpB,EAAaqlC,QAAS,OAAOX,EAAS1kC,EAAaoxB,IAAKxC,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKviB,IAAK0nD,GACrG,KAAKpB,EAAaslC,QAAS,OAAOZ,EAAS1kC,EAAayF,IAAKmpB,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKxiB,IAAK2nD,GACrG,KAAKpB,EAAaulC,QAAS,OAAOb,EAAS1kC,EAAayF,IAAKmpB,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKviB,IAAK0nD,GACrG,KAAKpB,EAAawlC,QAAS,OAAOd,EAAS1kC,EAAauG,IAAKqoB,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKxiB,IAAK2nD,GACrG,KAAKpB,EAAaylC,QAAS,OAAOf,EAAS1kC,EAAauG,IAAKqoB,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKviB,IAAK0nD,GACrG,KAAKpB,EAAa0lC,SAAU,OAAOhB,EAAS1kC,EAAanT,KAAM+hC,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKxiB,IAAK2nD,GACvG,KAAKpB,EAAa2lC,SAAU,OAAOjB,EAAS1kC,EAAanT,KAAM+hC,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKviB,IAAK0nD,GACvG,KAAKpB,EAAa4lC,UAAW,OAAOlB,EAAS1kC,EAAa+xB,MAAOnD,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKxiB,IAAK2nD,GACzG,KAAKpB,EAAa6lC,UAAW,OAAOnB,EAAS1kC,EAAa+xB,MAAOnD,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKviB,IAAK0nD,GACzG,KAAKpB,EAAa8lC,aAAc,OAAOpB,EAAS1kC,EAAakyB,SAAUtD,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKxiB,IAAK2nD,GAC/G,KAAKpB,EAAa+lC,aAAc,OAAOrB,EAAS1kC,EAAakyB,SAAUtD,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKviB,IAAK0nD,GAC/G,KAAKpB,EAAagmC,YAAa,OAAOtB,EAAS1kC,EAAaqyB,QAASzD,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKxiB,IAAK2nD,GAC7G,KAAKpB,EAAaimC,YAAa,OAAOvB,EAAS1kC,EAAaqyB,QAASzD,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKviB,IAAK0nD,GAC7G,KAAKpB,EAAakmC,oBAAqB,OAAOxB,EAAS1kC,EAAawyB,YAAa5D,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKxiB,IAAK2nD,GACzH,KAAKpB,EAAammC,oBAAqB,OAAOzB,EAAS1kC,EAAawyB,YAAa5D,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKviB,IAAK0nD,GACzH,KAAKpB,EAAaomC,oBAAqB,OAAO1B,EAAS1kC,EAAawyB,YAAa5D,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACzH,KAAKpB,EAAaqmC,oBAAqB,OAAO3B,EAAS1kC,EAAawyB,YAAa5D,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzH,KAAKpB,EAAasmC,SAAU,OAAO5B,EAAS1kC,EAAa6yB,KAAMjE,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKxiB,IAAK2nD,GACvG,KAAKpB,EAAaumC,SAAU,OAAO7B,EAAS1kC,EAAa6yB,KAAMjE,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKviB,IAAK0nD,GACvG,KAAKpB,EAAawmC,UAAW,OAAO9B,EAAS1kC,EAAagzB,MAAOpE,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKxiB,IAAK2nD,GACzG,KAAKpB,EAAaymC,UAAW,OAAO/B,EAAS1kC,EAAagzB,MAAOpE,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKviB,IAAK0nD,GACzG,KAAKpB,EAAa0mC,YAAa,OAAOhC,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACzG,KAAKpB,EAAa2mC,YAAa,OAAOjC,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACzG,KAAKpB,EAAa4mC,aAAc,OAAOlC,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAC3G,KAAKpB,EAAa6mC,aAAc,OAAOnC,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAC3G,KAAKpB,EAAa8mC,SAAU,OAAOpC,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACvG,KAAKpB,EAAa+mC,YAAa,OAAOrC,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzG,KAAKpB,EAAagnC,YAAa,OAAOtC,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzG,KAAKpB,EAAainC,aAAc,OAAOvC,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3G,KAAKpB,EAAaknC,aAAc,OAAOxC,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3G,KAAKpB,EAAamnC,aAAc,OAAOzC,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3G,KAAKpB,EAAaonC,aAAc,OAAO1C,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3G,KAAKpB,EAAaqnC,SAAU,OAAO3C,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACvG,KAAKpB,EAAasnC,SAAU,OAAO5C,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKxiB,IAAK2nD,GACvG,KAAKpB,EAAaunC,SAAU,OAAO7C,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKviB,IAAK0nD,GACvG,KAAKpB,EAAawnC,WAAY,OAAO9C,EAAS1kC,EAAagY,MAAO4W,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACzG,KAAKpB,EAAaynC,YAAa,OAAO/C,EAAS1kC,EAAagY,MAAO4W,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAC3G,KAAKpB,EAAa0nC,UAAW,OAAOhD,EAAS1kC,EAAagY,MAAO4W,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACzG,KAAKpB,EAAa2nC,WAAY,OAAOjD,EAAS1kC,EAAagY,MAAO4W,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzG,KAAKpB,EAAa4nC,YAAa,OAAOlD,EAAS1kC,EAAagY,MAAO4W,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3G,KAAKpB,EAAa6nC,YAAa,OAAOnD,EAAS1kC,EAAagY,MAAO4W,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3G,KAAKpB,EAAa8nC,UAAW,OAAOpD,EAAS1kC,EAAagY,MAAO4W,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzG,KAAKpB,EAAa+nC,UAAW,OAAOrD,EAAS1kC,EAAagY,MAAO4W,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKxiB,IAAK2nD,GACzG,KAAKpB,EAAagoC,UAAW,OAAOtD,EAAS1kC,EAAagY,MAAO4W,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKviB,IAAK0nD,GAEzG,KAAKpB,EAAaioC,mBAAoB,OAAOvD,EAAS1kC,EAAa2zB,YAAa/E,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACvH,KAAKpB,EAAakoC,oBAAqB,OAAOxD,EAAS1kC,EAAa2zB,YAAa/E,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACzH,KAAKpB,EAAamoC,gBAAiB,OAAOzD,EAAS1kC,EAAa2zB,YAAa/E,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACrH,KAAKpB,EAAaooC,mBAAoB,OAAO1D,EAAS1kC,EAAa2zB,YAAa/E,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACvH,KAAKpB,EAAaqoC,oBAAqB,OAAO3D,EAAS1kC,EAAa2zB,YAAa/E,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzH,KAAKpB,EAAasoC,oBAAqB,OAAO5D,EAAS1kC,EAAa2zB,YAAa/E,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzH,KAAKpB,EAAauoC,gBAAiB,OAAO7D,EAAS1kC,EAAa2zB,YAAa/E,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAErH,KAAKpB,EAAawoC,kBAAmB,OAAO9D,EAAS1kC,EAAa6zB,aAAcjF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACvH,KAAKpB,EAAayoC,mBAAoB,OAAO/D,EAAS1kC,EAAa6zB,aAAcjF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACzH,KAAKpB,EAAa0oC,iBAAkB,OAAOhE,EAAS1kC,EAAa6zB,aAAcjF,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACvH,KAAKpB,EAAa2oC,kBAAmB,OAAOjE,EAAS1kC,EAAa6zB,aAAcjF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACvH,KAAKpB,EAAa4oC,mBAAoB,OAAOlE,EAAS1kC,EAAa6zB,aAAcjF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzH,KAAKpB,EAAa6oC,mBAAoB,OAAOnE,EAAS1kC,EAAa6zB,aAAcjF,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzH,KAAKpB,EAAa8oC,iBAAkB,OAAOpE,EAAS1kC,EAAa6zB,aAAcjF,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAEvH,KAAKpB,EAAa+oC,sBAAuB,OAAOrE,EAAS1kC,EAAa8zB,WAAYlF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACzH,KAAKpB,EAAagpC,uBAAwB,OAAOtE,EAAS1kC,EAAa8zB,WAAYlF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAC3H,KAAKpB,EAAaipC,mBAAoB,OAAOvE,EAAS1kC,EAAa8zB,WAAYlF,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACvH,KAAKpB,EAAakpC,sBAAuB,OAAOxE,EAAS1kC,EAAa8zB,WAAYlF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzH,KAAKpB,EAAampC,uBAAwB,OAAOzE,EAAS1kC,EAAa8zB,WAAYlF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3H,KAAKpB,EAAaopC,uBAAwB,OAAO1E,EAAS1kC,EAAa8zB,WAAYlF,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3H,KAAKpB,EAAaqpC,mBAAoB,OAAO3E,EAAS1kC,EAAa8zB,WAAYlF,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAEvH,KAAKpB,EAAaspC,sBAAuB,OAAO5E,EAAS1kC,EAAa+zB,WAAYnF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACzH,KAAKpB,EAAaupC,uBAAwB,OAAO7E,EAAS1kC,EAAa+zB,WAAYnF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAC3H,KAAKpB,EAAawpC,mBAAoB,OAAO9E,EAAS1kC,EAAa+zB,WAAYnF,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACvH,KAAKpB,EAAaypC,sBAAuB,OAAO/E,EAAS1kC,EAAa+zB,WAAYnF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzH,KAAKpB,EAAa0pC,uBAAwB,OAAOhF,EAAS1kC,EAAa+zB,WAAYnF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3H,KAAKpB,EAAa2pC,uBAAwB,OAAOjF,EAAS1kC,EAAa+zB,WAAYnF,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3H,KAAKpB,EAAa4pC,mBAAoB,OAAOlF,EAAS1kC,EAAa+zB,WAAYnF,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAEvH,KAAKpB,EAAa6pC,sBAAuB,OAAOnF,EAAS1kC,EAAag0B,WAAYpF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACzH,KAAKpB,EAAa8pC,uBAAwB,OAAOpF,EAAS1kC,EAAag0B,WAAYpF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAC3H,KAAKpB,EAAa+pC,mBAAoB,OAAOrF,EAAS1kC,EAAag0B,WAAYpF,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACvH,KAAKpB,EAAagqC,sBAAuB,OAAOtF,EAAS1kC,EAAag0B,WAAYpF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzH,KAAKpB,EAAaiqC,uBAAwB,OAAOvF,EAAS1kC,EAAag0B,WAAYpF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3H,KAAKpB,EAAakqC,uBAAwB,OAAOxF,EAAS1kC,EAAag0B,WAAYpF,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3H,KAAKpB,EAAamqC,mBAAoB,OAAOzF,EAAS1kC,EAAag0B,WAAYpF,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAEvH,KAAKpB,EAAaoqC,qBAAsB,OAAO1F,EAAS1kC,EAAai0B,UAAWrF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACvH,KAAKpB,EAAaqqC,sBAAuB,OAAO3F,EAAS1kC,EAAai0B,UAAWrF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACzH,KAAKpB,EAAasqC,kBAAmB,OAAO5F,EAAS1kC,EAAai0B,UAAWrF,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACrH,KAAKpB,EAAauqC,qBAAsB,OAAO7F,EAAS1kC,EAAai0B,UAAWrF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACvH,KAAKpB,EAAawqC,sBAAuB,OAAO9F,EAAS1kC,EAAai0B,UAAWrF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzH,KAAKpB,EAAayqC,sBAAuB,OAAO/F,EAAS1kC,EAAai0B,UAAWrF,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzH,KAAKpB,EAAa0qC,kBAAmB,OAAOhG,EAAS1kC,EAAai0B,UAAWrF,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAErH,KAAKpB,EAAa2qC,sBAAuB,OAAOjG,EAAS1kC,EAAak0B,WAAYtF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACzH,KAAKpB,EAAa4qC,uBAAwB,OAAOlG,EAAS1kC,EAAak0B,WAAYtF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAC3H,KAAKpB,EAAa6qC,mBAAoB,OAAOnG,EAAS1kC,EAAak0B,WAAYtF,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACvH,KAAKpB,EAAa8qC,sBAAuB,OAAOpG,EAAS1kC,EAAak0B,WAAYtF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACzH,KAAKpB,EAAa+qC,uBAAwB,OAAOrG,EAAS1kC,EAAak0B,WAAYtF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3H,KAAKpB,EAAagrC,uBAAwB,OAAOtG,EAAS1kC,EAAak0B,WAAYtF,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3H,KAAKpB,EAAairC,mBAAoB,OAAOvG,EAAS1kC,EAAak0B,WAAYtF,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAEvH,KAAKpB,EAAakrC,uBAAwB,OAAOxG,EAAS1kC,EAAam0B,YAAavF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAC3H,KAAKpB,EAAamrC,wBAAyB,OAAOzG,EAAS1kC,EAAam0B,YAAavF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAC7H,KAAKpB,EAAaorC,oBAAqB,OAAO1G,EAAS1kC,EAAam0B,YAAavF,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACzH,KAAKpB,EAAaqrC,uBAAwB,OAAO3G,EAAS1kC,EAAam0B,YAAavF,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC3H,KAAKpB,EAAasrC,wBAAyB,OAAO5G,EAAS1kC,EAAam0B,YAAavF,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC7H,KAAKpB,EAAaurC,wBAAyB,OAAO7G,EAAS1kC,EAAam0B,YAAavF,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC7H,KAAKpB,EAAawrC,oBAAqB,OAAO9G,EAAS1kC,EAAam0B,YAAavF,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAEzH,KAAKpB,EAAayrC,0BAA2B,OAAO/G,EAAS1kC,EAAa40B,eAAgBhG,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACjI,KAAKpB,EAAa0rC,2BAA4B,OAAOhH,EAAS1kC,EAAa40B,eAAgBhG,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACnI,KAAKpB,EAAa2rC,uBAAwB,OAAOjH,EAAS1kC,EAAa40B,eAAgBhG,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAC/H,KAAKpB,EAAa4rC,0BAA2B,OAAOlH,EAAS1kC,EAAa40B,eAAgBhG,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACjI,KAAKpB,EAAa6rC,2BAA4B,OAAOnH,EAAS1kC,EAAa40B,eAAgBhG,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACnI,KAAKpB,EAAa8rC,2BAA4B,OAAOpH,EAAS1kC,EAAa40B,eAAgBhG,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GACnI,KAAKpB,EAAa+rC,uBAAwB,OAAOrH,EAAS1kC,EAAa40B,eAAgBhG,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAE/H,KAAKpB,EAAagsC,SAAU,OAAOtH,EAAS1kC,EAAa60B,YAAajG,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAC9G,KAAKpB,EAAaisC,SAAU,OAAOvH,EAAS1kC,EAAa60B,YAAajG,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAE9G,KAAKpB,EAAaksC,UAAW,OAAOxH,EAAS1kC,EAAa4X,KAAMgX,EAAU,EAAA3yD,KAAKtiB,KAAMg6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC1G,KAAKpB,EAAamsC,WAAY,OAAOzH,EAAS1kC,EAAagY,MAAO4W,EAAU,EAAA3yD,KAAKtiB,KAAMg6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAE5G,KAAKpB,EAAaosC,YAAa,OAAO1H,EAAS1kC,EAAa81B,WAAYlH,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAChH,KAAKpB,EAAaqsC,qBAAsB,OAAO3H,EAAS1kC,EAAaq2B,kBAAmBzH,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKnjB,GAAIsoD,GAC9H,KAAKpB,EAAassC,qBAAsB,OAAO5H,EAAS1kC,EAAaq2B,kBAAmBzH,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAK9iB,GAAIioD,GAC9H,KAAKpB,EAAausC,mBAAoB,OAAO7H,EAAS1kC,EAAag3B,kBAAmBpI,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC9H,KAAKpB,EAAawsC,UAAW,OAAO9H,EAAS1kC,EAAa84B,SAAUlK,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC5G,KAAKpB,EAAaysC,UAAW,OAAO/H,EAAS1kC,EAAaq5B,SAAUzK,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC5G,KAAKpB,EAAa0sC,UAAW,OAAOhI,EAAS1kC,EAAa45B,SAAUhL,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC5G,KAAKpB,EAAa2sC,YAAa,OAAOjI,EAAS1kC,EAAa+6B,SAAUnM,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC9G,KAAKpB,EAAa4sC,YAAa,OAAOlI,EAAS1kC,EAAa+6B,SAAUnM,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC9G,KAAKpB,EAAa6sC,YAAa,OAAOnI,EAAS1kC,EAAaw7B,SAAU5M,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC9G,KAAKpB,EAAa8sC,YAAa,OAAOpI,EAAS1kC,EAAaw7B,SAAU5M,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC9G,KAAKpB,EAAa+sC,aAAc,OAAOrI,EAAS1kC,EAAam8B,UAAWvN,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAChH,KAAKpB,EAAagtC,UAAW,OAAOtI,EAAS1kC,EAAay/B,SAAU7Q,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC5G,KAAKpB,EAAaitC,qBAAsB,OAAOvI,EAAS1kC,EAAaq6B,kBAAmBzL,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAChI,KAAKpB,EAAaktC,qBAAsB,OAAOxI,EAAS1kC,EAAaq6B,kBAAmBzL,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAChI,KAAKpB,EAAamtC,qBAAsB,OAAOzI,EAAS1kC,EAAa06B,kBAAmB9L,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAChI,KAAKpB,EAAaotC,qBAAsB,OAAO1I,EAAS1kC,EAAa06B,kBAAmB9L,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAChI,KAAKpB,EAAaqtC,UAAW,OAAO3I,EAAS1kC,EAAa0hC,SAAU9S,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC5G,KAAKpB,EAAastC,YAAa,OAAO5I,EAAS1kC,EAAagiC,SAAUpT,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC9G,KAAKpB,EAAautC,YAAa,OAAO7I,EAAS1kC,EAAagiC,SAAUpT,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC9G,KAAKpB,EAAawtC,eAAgB,OAAO9I,EAAS1kC,EAAasjC,cAAe1U,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACrH,KAAKpB,EAAaytC,eAAgB,OAAO/I,EAAS1kC,EAAa0jC,cAAe9U,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACrH,KAAKpB,EAAa0tC,SAAU,OAAOhJ,EAAS1kC,EAAas8B,QAAS1N,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC1G,KAAKpB,EAAa2tC,SAAU,OAAOjJ,EAAS1kC,EAAa28B,QAAS/N,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC1G,KAAKpB,EAAa4tC,WAAY,OAAOlJ,EAAS1kC,EAAag9B,QAASpO,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC5G,KAAKpB,EAAa6tC,WAAY,OAAOnJ,EAAS1kC,EAAag9B,QAASpO,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC5G,KAAKpB,EAAa8tC,WAAY,OAAOpJ,EAAS1kC,EAAay9B,QAAS7O,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC5G,KAAKpB,EAAa+tC,WAAY,OAAOrJ,EAAS1kC,EAAay9B,QAAS7O,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC5G,KAAKpB,EAAaguC,WAAY,OAAOtJ,EAAS1kC,EAAak+B,QAAStP,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC5G,KAAKpB,EAAaiuC,WAAY,OAAOvJ,EAAS1kC,EAAak+B,QAAStP,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC5G,KAAKpB,EAAakuC,WAAY,OAAOxJ,EAAS1kC,EAAa2+B,QAAS/P,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC5G,KAAKpB,EAAamuC,WAAY,OAAOzJ,EAAS1kC,EAAa2+B,QAAS/P,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC5G,KAAKpB,EAAaouC,qBAAsB,OAAO1J,EAAS1kC,EAAao/B,YAAaxQ,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3H,KAAKpB,EAAaquC,qBAAsB,OAAO3J,EAAS1kC,EAAao/B,YAAaxQ,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAE3H,KAAKpB,EAAasuC,YAAa,OAAO5J,EAAS1kC,EAAa81B,WAAYlH,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjH,KAAKpB,EAAauuC,qBAAsB,OAAO7J,EAAS1kC,EAAaq2B,kBAAmBzH,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKljB,IAAKqoD,GAChI,KAAKpB,EAAawuC,qBAAsB,OAAO9J,EAAS1kC,EAAaq2B,kBAAmBzH,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAK7iB,IAAKgoD,GAChI,KAAKpB,EAAayuC,mBAAoB,OAAO/J,EAAS1kC,EAAag3B,kBAAmBpI,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/H,KAAKpB,EAAa0uC,UAAW,OAAOhK,EAAS1kC,EAAa84B,SAAUlK,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa2uC,UAAW,OAAOjK,EAAS1kC,EAAaq5B,SAAUzK,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa4uC,UAAW,OAAOlK,EAAS1kC,EAAa45B,SAAUhL,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa6uC,YAAa,OAAOnK,EAAS1kC,EAAa+6B,SAAUnM,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAa8uC,YAAa,OAAOpK,EAAS1kC,EAAa+6B,SAAUnM,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAa+uC,YAAa,OAAOrK,EAAS1kC,EAAaw7B,SAAU5M,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAagvC,YAAa,OAAOtK,EAAS1kC,EAAaw7B,SAAU5M,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAaivC,aAAc,OAAOvK,EAAS1kC,EAAam8B,UAAWvN,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjH,KAAKpB,EAAakvC,UAAW,OAAOxK,EAAS1kC,EAAay/B,SAAU7Q,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAamvC,qBAAsB,OAAOzK,EAAS1kC,EAAaq6B,kBAAmBzL,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjI,KAAKpB,EAAaovC,qBAAsB,OAAO1K,EAAS1kC,EAAaq6B,kBAAmBzL,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjI,KAAKpB,EAAaqvC,qBAAsB,OAAO3K,EAAS1kC,EAAa06B,kBAAmB9L,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjI,KAAKpB,EAAasvC,qBAAsB,OAAO5K,EAAS1kC,EAAa06B,kBAAmB9L,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjI,KAAKpB,EAAauvC,UAAW,OAAO7K,EAAS1kC,EAAa0hC,SAAU9S,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAawvC,YAAa,OAAO9K,EAAS1kC,EAAagiC,SAAUpT,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAayvC,YAAa,OAAO/K,EAAS1kC,EAAagiC,SAAUpT,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAa0vC,eAAgB,OAAOhL,EAAS1kC,EAAasjC,cAAe1U,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACtH,KAAKpB,EAAa2vC,eAAgB,OAAOjL,EAAS1kC,EAAa0jC,cAAe9U,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACtH,KAAKpB,EAAa4vC,SAAU,OAAOlL,EAAS1kC,EAAas8B,QAAS1N,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAa6vC,SAAU,OAAOnL,EAAS1kC,EAAa28B,QAAS/N,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAa8vC,WAAY,OAAOpL,EAAS1kC,EAAag9B,QAASpO,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa+vC,WAAY,OAAOrL,EAAS1kC,EAAag9B,QAASpO,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAagwC,WAAY,OAAOtL,EAAS1kC,EAAay9B,QAAS7O,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAaiwC,WAAY,OAAOvL,EAAS1kC,EAAay9B,QAAS7O,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAakwC,WAAY,OAAOxL,EAAS1kC,EAAak+B,QAAStP,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAamwC,WAAY,OAAOzL,EAAS1kC,EAAak+B,QAAStP,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAaowC,WAAY,OAAO1L,EAAS1kC,EAAa2+B,QAAS/P,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAaqwC,WAAY,OAAO3L,EAAS1kC,EAAa2+B,QAAS/P,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAaswC,qBAAsB,OAAO5L,EAAS1kC,EAAao/B,YAAaxQ,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3H,KAAKpB,EAAauwC,qBAAsB,OAAO7L,EAAS1kC,EAAao/B,YAAaxQ,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3H,KAAKpB,EAAawwC,wBAAyB,OAAO9L,EAAS1kC,EAAaghC,eAAgBpS,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAChI,KAAKpB,EAAaywC,wBAAyB,OAAO/L,EAAS1kC,EAAaghC,eAAgBpS,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAChI,KAAKpB,EAAa0wC,yBAA0B,OAAOhM,EAAS1kC,EAAaqhC,gBAAiBzS,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAClI,KAAKpB,EAAa2wC,yBAA0B,OAAOjM,EAAS1kC,EAAaqhC,gBAAiBzS,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAClI,KAAKpB,EAAa4wC,gBAAiB,OAAOlM,EAAS1kC,EAAau4B,cAAe3J,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACvH,KAAKpB,EAAa6wC,gBAAiB,OAAOnM,EAAS1kC,EAAau4B,cAAe3J,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAEvH,KAAKpB,EAAa8wC,YAAa,OAAOpM,EAAS1kC,EAAa81B,WAAYlH,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjH,KAAKpB,EAAa+wC,mBAAoB,OAAOrM,EAAS1kC,EAAaq2B,kBAAmBzH,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GAC9H,KAAKpB,EAAagxC,mBAAoB,OAAOtM,EAAS1kC,EAAag3B,kBAAmBpI,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/H,KAAKpB,EAAaixC,UAAW,OAAOvM,EAAS1kC,EAAa84B,SAAUlK,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAakxC,UAAW,OAAOxM,EAAS1kC,EAAaq5B,SAAUzK,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAamxC,UAAW,OAAOzM,EAAS1kC,EAAa45B,SAAUhL,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAaoxC,YAAa,OAAO1M,EAAS1kC,EAAa+6B,SAAUnM,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAaqxC,YAAa,OAAO3M,EAAS1kC,EAAa+6B,SAAUnM,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAasxC,YAAa,OAAO5M,EAAS1kC,EAAaw7B,SAAU5M,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAauxC,YAAa,OAAO7M,EAAS1kC,EAAaw7B,SAAU5M,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAawxC,kBAAmB,OAAO9M,EAAS1kC,EAAai8B,SAAUrN,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACrH,KAAKpB,EAAayxC,UAAW,OAAO/M,EAAS1kC,EAAay/B,SAAU7Q,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa0xC,UAAW,OAAOhN,EAAS1kC,EAAa0hC,SAAU9S,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa2xC,YAAa,OAAOjN,EAAS1kC,EAAagiC,SAAUpT,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAa4xC,YAAa,OAAOlN,EAAS1kC,EAAagiC,SAAUpT,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAa6xC,eAAgB,OAAOnN,EAAS1kC,EAAasjC,cAAe1U,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACtH,KAAKpB,EAAa8xC,eAAgB,OAAOpN,EAAS1kC,EAAa0jC,cAAe9U,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACtH,KAAKpB,EAAa+xC,SAAU,OAAOrN,EAAS1kC,EAAas8B,QAAS1N,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAagyC,SAAU,OAAOtN,EAAS1kC,EAAa28B,QAAS/N,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAaiyC,WAAY,OAAOvN,EAAS1kC,EAAag9B,QAASpO,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAakyC,WAAY,OAAOxN,EAAS1kC,EAAag9B,QAASpO,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAamyC,WAAY,OAAOzN,EAAS1kC,EAAay9B,QAAS7O,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAaoyC,WAAY,OAAO1N,EAAS1kC,EAAay9B,QAAS7O,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAaqyC,WAAY,OAAO3N,EAAS1kC,EAAak+B,QAAStP,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAasyC,WAAY,OAAO5N,EAAS1kC,EAAak+B,QAAStP,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAauyC,WAAY,OAAO7N,EAAS1kC,EAAa2+B,QAAS/P,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAawyC,WAAY,OAAO9N,EAAS1kC,EAAa2+B,QAAS/P,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAayyC,wBAAyB,OAAO/N,EAAS1kC,EAAa2gC,eAAgB/R,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjI,KAAKpB,EAAa0yC,wBAAyB,OAAOhO,EAAS1kC,EAAa2gC,eAAgB/R,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjI,KAAKpB,EAAa2yC,wBAAyB,OAAOjO,EAAS1kC,EAAaghC,eAAgBpS,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjI,KAAKpB,EAAa4yC,wBAAyB,OAAOlO,EAAS1kC,EAAaghC,eAAgBpS,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjI,KAAKpB,EAAa6yC,yBAA0B,OAAOnO,EAAS1kC,EAAaqhC,gBAAiBzS,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACnI,KAAKpB,EAAa8yC,yBAA0B,OAAOpO,EAAS1kC,EAAaqhC,gBAAiBzS,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACnI,KAAKpB,EAAa+yC,iBAAkB,OAAOrO,EAAS1kC,EAAau4B,cAAe3J,EAAU,EAAA3yD,KAAKljB,IAAK46B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACzH,KAAKpB,EAAagzC,iBAAkB,OAAOtO,EAAS1kC,EAAau4B,cAAe3J,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAEzH,KAAKpB,EAAaizC,YAAa,OAAOvO,EAAS1kC,EAAa81B,WAAYlH,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjH,KAAKpB,EAAakzC,mBAAoB,OAAOxO,EAAS1kC,EAAaq2B,kBAAmBzH,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKhjB,IAAKmoD,GAC9H,KAAKpB,EAAamzC,mBAAoB,OAAOzO,EAAS1kC,EAAag3B,kBAAmBpI,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/H,KAAKpB,EAAaozC,UAAW,OAAO1O,EAAS1kC,EAAa84B,SAAUlK,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAaqzC,UAAW,OAAO3O,EAAS1kC,EAAaq5B,SAAUzK,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAaszC,UAAW,OAAO5O,EAAS1kC,EAAay/B,SAAU7Q,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAauzC,UAAW,OAAO7O,EAAS1kC,EAAa0hC,SAAU9S,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAawzC,YAAa,OAAO9O,EAAS1kC,EAAagiC,SAAUpT,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAayzC,YAAa,OAAO/O,EAAS1kC,EAAagiC,SAAUpT,EAAU,EAAA3yD,KAAK3iB,IAAKq6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAa0zC,eAAgB,OAAOhP,EAAS1kC,EAAasjC,cAAe1U,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACtH,KAAKpB,EAAa2zC,eAAgB,OAAOjP,EAAS1kC,EAAa0jC,cAAe9U,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKjjB,IAAKooD,GACtH,KAAKpB,EAAa4zC,wBAAyB,OAAOlP,EAAS1kC,EAAa2gC,eAAgB/R,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjI,KAAKpB,EAAa6zC,wBAAyB,OAAOnP,EAAS1kC,EAAa2gC,eAAgB/R,EAAU,EAAA3yD,KAAK3iB,IAAKq6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjI,KAAKpB,EAAa8zC,iBAAkB,OAAOpP,EAAS1kC,EAAau4B,cAAe3J,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACzH,KAAKpB,EAAa+zC,iBAAkB,OAAOrP,EAAS1kC,EAAau4B,cAAe3J,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAEzH,KAAKpB,EAAag0C,YAAa,OAAOtP,EAAS1kC,EAAa81B,WAAYlH,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjH,KAAKpB,EAAai0C,mBAAoB,OAAOvP,EAAS1kC,EAAaq2B,kBAAmBzH,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKxiB,IAAK2nD,GAC9H,KAAKpB,EAAak0C,mBAAoB,OAAOxP,EAAS1kC,EAAag3B,kBAAmBpI,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/H,KAAKpB,EAAam0C,UAAW,OAAOzP,EAAS1kC,EAAa84B,SAAUlK,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAao0C,UAAW,OAAO1P,EAAS1kC,EAAaq5B,SAAUzK,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAaq0C,UAAW,OAAO3P,EAAS1kC,EAAa45B,SAAUhL,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAas0C,UAAW,OAAO5P,EAAS1kC,EAAak6B,SAAUtL,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAau0C,UAAW,OAAO7P,EAAS1kC,EAAay/B,SAAU7Q,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAaw0C,UAAW,OAAO9P,EAAS1kC,EAAa+6B,SAAUnM,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAay0C,UAAW,OAAO/P,EAAS1kC,EAAaw7B,SAAU5M,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa00C,UAAW,OAAOhQ,EAAS1kC,EAAaggC,SAAUpR,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa20C,WAAY,OAAOjQ,EAAS1kC,EAAamgC,UAAWvR,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAa40C,SAAU,OAAOlQ,EAAS1kC,EAAas8B,QAAS1N,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAa60C,SAAU,OAAOnQ,EAAS1kC,EAAa28B,QAAS/N,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAa80C,SAAU,OAAOpQ,EAAS1kC,EAAag9B,QAASpO,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAa+0C,SAAU,OAAOrQ,EAAS1kC,EAAay9B,QAAS7O,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAag1C,SAAU,OAAOtQ,EAAS1kC,EAAak+B,QAAStP,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAai1C,SAAU,OAAOvQ,EAAS1kC,EAAa2+B,QAAS/P,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAak1C,sBAAuB,OAAOxQ,EAAS1kC,EAAasgC,aAAc1R,EAAU,EAAA3yD,KAAKjjB,IAAK26B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7H,KAAKpB,EAAam1C,sBAAuB,OAAOzQ,EAAS1kC,EAAasgC,aAAc1R,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7H,KAAKpB,EAAao1C,WAAY,OAAO1Q,EAAS1kC,EAAa8jC,UAAWlV,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAaq1C,WAAY,OAAO3Q,EAAS1kC,EAAaikC,UAAWrV,EAAU,EAAA3yD,KAAKxiB,IAAKk6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAE/G,KAAKpB,EAAas1C,YAAa,OAAO5Q,EAAS1kC,EAAa81B,WAAYlH,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjH,KAAKpB,EAAau1C,mBAAoB,OAAO7Q,EAAS1kC,EAAaq2B,kBAAmBzH,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKviB,IAAK0nD,GAC9H,KAAKpB,EAAaw1C,mBAAoB,OAAO9Q,EAAS1kC,EAAag3B,kBAAmBpI,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/H,KAAKpB,EAAay1C,UAAW,OAAO/Q,EAAS1kC,EAAa84B,SAAUlK,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa01C,UAAW,OAAOhR,EAAS1kC,EAAaq5B,SAAUzK,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa21C,UAAW,OAAOjR,EAAS1kC,EAAa45B,SAAUhL,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa41C,UAAW,OAAOlR,EAAS1kC,EAAak6B,SAAUtL,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa61C,UAAW,OAAOnR,EAAS1kC,EAAay/B,SAAU7Q,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa81C,UAAW,OAAOpR,EAAS1kC,EAAa+6B,SAAUnM,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAa+1C,UAAW,OAAOrR,EAAS1kC,EAAaw7B,SAAU5M,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAag2C,UAAW,OAAOtR,EAAS1kC,EAAaggC,SAAUpR,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7G,KAAKpB,EAAai2C,WAAY,OAAOvR,EAAS1kC,EAAamgC,UAAWvR,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAak2C,SAAU,OAAOxR,EAAS1kC,EAAas8B,QAAS1N,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAam2C,SAAU,OAAOzR,EAAS1kC,EAAa28B,QAAS/N,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAao2C,SAAU,OAAO1R,EAAS1kC,EAAag9B,QAASpO,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAaq2C,SAAU,OAAO3R,EAAS1kC,EAAay9B,QAAS7O,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAas2C,SAAU,OAAO5R,EAAS1kC,EAAak+B,QAAStP,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAau2C,SAAU,OAAO7R,EAAS1kC,EAAa2+B,QAAS/P,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3G,KAAKpB,EAAaw2C,sBAAuB,OAAO9R,EAAS1kC,EAAasgC,aAAc1R,EAAU,EAAA3yD,KAAKhjB,IAAK06B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7H,KAAKpB,EAAay2C,sBAAuB,OAAO/R,EAAS1kC,EAAasgC,aAAc1R,EAAU,EAAA3yD,KAAK3iB,IAAKq6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC7H,KAAKpB,EAAa02C,WAAY,OAAOhS,EAAS1kC,EAAa8jC,UAAWlV,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC/G,KAAKpB,EAAa22C,WAAY,OAAOjS,EAAS1kC,EAAaikC,UAAWrV,EAAU,EAAA3yD,KAAKviB,IAAKi6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAE/G,KAAKpB,EAAa42C,cAAe,OAAOlS,EAAS1kC,EAAaw3B,aAAc5I,EAAU,EAAA3yD,KAAKnjB,GAAI66B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACpH,KAAKpB,EAAa62C,cAAe,OAAOnS,EAAS1kC,EAAa+3B,aAAcnJ,EAAU,KAAMj7C,EAAU,EAAA1X,KAAKtiB,KAAMynD,GACjH,KAAKpB,EAAa82C,iBAAkB,OAAOpS,EAAS1kC,EAAai4B,gBAAiBrJ,EAAU,EAAA3yD,KAAK9iB,GAAIw6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC1H,KAAKpB,EAAa+2C,iBAAkB,OAAOrS,EAAS1kC,EAAai4B,gBAAiBrJ,EAAU,EAAA3yD,KAAK7iB,IAAKu6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3H,KAAKpB,EAAag3C,iBAAkB,OAAOtS,EAAS1kC,EAAai4B,gBAAiBrJ,EAAU,EAAA3yD,KAAK5iB,IAAKs6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAC3H,KAAKpB,EAAai3C,iBAAkB,OAAOvS,EAAS1kC,EAAai4B,gBAAiBrJ,EAAU,EAAA3yD,KAAK3iB,IAAKq6B,EAAU,EAAA1X,KAAKtiB,KAAMynD,GAG7H,OAAO,EA7VM81C,CAAYtoB,EAAU/2E,EAAW87B,EAAUytB,GACtD,GAAIr7C,EAOF,OANI3B,GACFwqE,EAASlwD,MACP,EAAAhe,eAAe23C,sBACf+I,EAAW6uB,mBAAoBp4E,EAAUgjB,cAGtC9U,EAOX,OAJA6oE,EAASlwD,MACP,EAAAhe,eAAeykB,gBACfi8B,EAAW/6C,WAAWrF,OAEjBzL,EAAOklE,cAkVhB,SAASiqB,EACPluF,EACAo4E,EACAn1B,EACA9lB,EACAgrC,EACAvd,GAEAhhD,OAAOwuE,EAAStmD,QAAQtO,eAAerX,IAAInM,IAC3C,IAAIqB,EAAY+2E,EAAStmD,QAAQtO,eAAeljB,IAAIN,GAEpD,OADA4J,OAAOvI,EAAU2L,MAAQ,EAAA2R,YAAYwN,oBAC9BgsD,EACLC,EACmB/2E,EACnB4hD,EAAe,CAAEA,GAAiB,KAClC9lB,EACAgrC,EACAvd,GACY,GA0LhB,SAAS+1C,EAAmB7yF,GAC1B,IAAI8D,EAAQ,IAA+B,GAAK9D,EAAK0nE,WAKrD,OAJI1nE,EAAKof,GAAG,KAAmBtb,GAAS,MACpC9D,EAAKof,GAAG,KAAkBtb,GAAS,MACnC9D,EAAKof,GAAG,OAAqBtb,GAAS,MACtC9D,EAAK2wD,YAAW7sD,GAAS,MACtBA,EAAQ,GA+GjB,SAAS2mE,EACPH,EACAxqE,EACAuvB,EACAytB,GAEA,GAAuB,GAAnBztB,EAAS5xB,OACX,OAAKqC,GAAyC,GAAxBA,EAAcrC,OAO7BqC,EAAc,IANnBwqE,EAASlwD,MACP,EAAAhe,eAAe84C,oCACf4H,EAAW6uB,mBAAoB,IAAK7rE,EAAgBA,EAAcrC,OAAOT,SAAS,IAAM,KAEnF,MAIX,GAAuB,GAAnBqyB,EAAS5xB,OAAa,CACxB,GAAsB,OAAlBqC,GAA0BA,EAAcrC,OAAQ,CAClD,GAAIqC,EAAcrC,OAAS,EAKzB,OAJA6sE,EAASlwD,MACP,EAAAhe,eAAe84C,oCACf4H,EAAW6uB,mBAAoB,IAAK7rE,EAAcrC,OAAOT,SAAS,KAE7D,KAETstE,EAAShb,kBAAkBjgC,EAAS,GAAIvvB,EAAc,GAAI,QAE1DwqE,EAAShb,kBAAkBjgC,EAAS,GAAI,EAAA1X,KAAKmxB,MAE/C,OAAOwhC,EAAS3zB,YAYlB,OAVI72C,GAAiBA,EAAcrC,OAAS,GAC1C6sE,EAASlwD,MACP,EAAAhe,eAAe84C,oCACf4H,EAAW6uB,mBAAoB,IAAK7rE,EAAcrC,OAAOT,SAAS,KAGtEstE,EAASlwD,MACP,EAAAhe,eAAeomB,+BACfs6B,EAAWg2C,eAAgB,IAAKzjE,EAAS5xB,OAAOT,SAAS,KAEpD,KAIT,SAASgyE,EAAwBjtE,EAAwBuoE,GACvD,IAAI7oE,EACA7O,EA6BJ,OA5BI03E,EAASh1D,QAAQgD,UACnB7W,EAAO6oE,EAASpa,qBAAqBnuD,EAAY,EAAA4V,KAAKixB,QAAS,IAE7D,EAAAnX,gBAAgBhwB,IAAS,EAAAkrB,aAAaqP,OACtC,EAAAlK,kBAAkBrwB,IAAS,EAAAgrB,WAAWv0B,KACR,GAA9B,EAAA4qD,qBAAqBrhD,KACpB7O,EAAQ,EAAAiwD,oBAAoBphD,IAAS,KAEtC6oE,EAASlwD,MACP,EAAAhe,eAAek1E,2CACfvvE,EAAWrF,OAEb9J,GAAS,KAGX6O,EAAO6oE,EAASpa,qBAAqBnuD,EAAY,EAAA4V,KAAKkxB,QAAS,IAE7D,EAAApX,gBAAgBhwB,IAAS,EAAAkrB,aAAaqP,OACtC,EAAAlK,kBAAkBrwB,IAAS,EAAAgrB,WAAWx0B,MACrCrF,EAAQ,EAAAgwD,iBAAiBnhD,IAAS,KAEnC6oE,EAASlwD,MACP,EAAAhe,eAAek1E,2CACfvvE,EAAWrF,OAEb9J,GAAS,IAGNA,EAIT,SAAS08E,EACP7mB,EACA3L,EACAwtB,GAEA,OAAKA,EAASh1D,QAAQ6C,WAAWswC,GAO1B,GANL6hB,EAASlwD,MACP,EAAAhe,eAAe2zD,yBACfjT,EAAWpgD,MAAO,EAAAxB,gBAAgButD,IAE7B,GAMX,SAASgjB,EACP3rE,EACAg9C,EACAwtB,EACAyoB,GAA8B,GAE9B,GAAIjzF,EAAe,CACjB,IAAI+L,EAAmB/L,EAAcrC,OACrC,GAAwB,GAApBoO,EAAuB,OAAO,EAClC/P,OAAO+P,GACHknF,IAAuBzoB,EAAS3zB,YAAc72C,EAAc,IAChEwqE,EAASlwD,MACP,EAAAhe,eAAe84C,oCACf4H,EAAW6uB,mBAAoB,IAAK9/D,EAAiB7O,iBAGvDstE,EAASlwD,MACP,EAAAhe,eAAe84C,oCACf4H,EAAWpgD,MAAO,IAAK,KAG3B,OAAO,EAIT,SAASyvE,EACPrsE,EACAg9C,EACAwtB,EACAyoB,GAA8B,GAE9B,GAAIjzF,EAAe,CACjB,IAAI+L,EAAmB/L,EAAcrC,OACrC,OAAwB,GAApBoO,EAA8B,GAClC/P,OAAO+P,GACHknF,IAAuBzoB,EAAS3zB,YAAc72C,EAAc,IAChEwqE,EAASlwD,MACP,EAAAhe,eAAe84C,oCACf4H,EAAW6uB,mBAAoB,IAAK9/D,EAAiB7O,YAEhD,GAET,OAAO,EAIT,SAASmuE,EACPrrE,EACAg9C,EACAvpD,GAEA,OAAIuM,GACFvM,EAAUywB,QAAQ5J,MAChB,EAAAhe,eAAe23C,sBACf+I,EAAW6uB,mBAAoBp4E,EAAUgjB,cAEpC,GAEF,EAIT,SAAS60D,EACP/7C,EACAoB,EACAqsB,EACAwtB,GAEA,OAAIj7C,EAAS5xB,QAAUgzB,GACrB65C,EAASlwD,MACP,EAAAhe,eAAeomB,+BACfs6B,EAAWpgD,MAAO+zB,EAASzzB,WAAYqyB,EAAS5xB,OAAOT,YAElD,GAEF,EAIT,SAAS+uE,EACP18C,EACA2jE,EACAC,EACAn2C,EACAwtB,GAEA,IAAIvF,EAAc11C,EAAS5xB,OAC3B,OAAIsnE,EAAciuB,GAChB1oB,EAASlwD,MACP,EAAAhe,eAAekmE,wCACfxlB,EAAWpgD,MAAOs2F,EAAgBh2F,WAAY+nE,EAAY/nE,YAErD,GACE+nE,EAAckuB,GACvB3oB,EAASlwD,MACP,EAAAhe,eAAeomB,+BACfs6B,EAAWpgD,MAAOu2F,EAAgBj2F,WAAY+nE,EAAY/nE,YAErD,GAEF,GA1gKT,SAAiB0+C,GAGF,EAAAh+C,MAAQ,SACR,EAAA4tD,QAAU,WACV,EAAA1C,gBAAkB,mBAClB,EAAAC,mBAAqB,sBAGrB,EAAA2hB,UAAY,0BACZ,EAAAE,QAAU,wBACV,EAAAC,UAAY,0BACZ,EAAAC,SAAW,yBACX,EAAAC,YAAc,4BACd,EAAAC,SAAW,yBACX,EAAAC,QAAU,wBACV,EAAAC,YAAc,4BACd,EAAAC,WAAa,2BACb,EAAAlrE,WAAa,2BACb,EAAAmrE,UAAY,0BACZ,EAAAG,WAAa,2BACb,EAAA1a,UAAY,0BACZ,EAAA2a,OAAS,uBAET,EAAAviC,IAAM,oBACN,EAAA8iC,IAAM,oBACN,EAAAS,OAAS,uBACT,EAAAE,KAAO,qBACP,EAAAG,KAAO,qBACP,EAAAG,IAAM,oBACN,EAAA3rB,IAAM,oBACN,EAAAc,IAAM,oBACN,EAAA1Z,KAAO,qBACP,EAAAklC,MAAQ,sBACR,EAAAG,SAAW,yBACX,EAAAG,QAAU,wBACV,EAAAG,YAAc,4BACd,EAAAK,KAAO,qBACP,EAAAG,MAAQ,sBACR,EAAApb,KAAO,qBACP,EAAAI,MAAQ,sBACR,EAAA2b,YAAc,4BACd,EAAAE,aAAe,6BACf,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,UAAY,0BACZ,EAAAC,WAAa,2BACb,EAAAC,YAAc,4BACd,EAAAS,eAAiB,+BACjB,EAAAC,YAAc,4BACd,EAAAC,cAAgB,8BAChB,EAAAC,aAAe,6BAEf,EAAAjF,OAAS,uBACT,EAAAI,QAAU,wBACV,EAAAE,SAAW,yBACX,EAAAG,OAAS,uBACT,EAAAV,SAAW,yBACX,EAAA6B,OAAS,uBACT,EAAAjX,YAAc,4BACd,EAAA9nC,WAAa,2BACb,EAAAvyB,OAAS,uBACT,EAAAgvB,UAAY,0BACZ,EAAAsmD,YAAc,4BACd,EAAA0O,KAAO,qBAEP,EAAAtrF,GAAK,mBACL,EAAAC,IAAM,oBACN,EAAAC,IAAM,oBACN,EAAAC,IAAM,oBACN,EAAAC,MAAQ,sBACR,EAAAC,GAAK,mBACL,EAAAC,IAAM,oBACN,EAAAC,IAAM,oBACN,EAAAC,IAAM,oBACN,EAAAC,MAAQ,sBACR,EAAAC,KAAO,qBACP,EAAAC,IAAM,oBACN,EAAAC,IAAM,oBACN,EAAAC,KAAO,qBAEP,EAAA8qF,QAAU,wBACV,EAAAE,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBAEX,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,aAAe,6BACf,EAAAC,aAAe,6BACf,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,oBAAsB,oCACtB,EAAAC,oBAAsB,oCACtB,EAAAC,oBAAsB,oCACtB,EAAAC,oBAAsB,oCACtB,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BAEZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,aAAe,6BACf,EAAAC,aAAe,6BACf,EAAAC,SAAW,yBACX,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,aAAe,6BACf,EAAAC,aAAe,6BACf,EAAAC,aAAe,6BACf,EAAAC,aAAe,6BACf,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,WAAa,2BACb,EAAAC,YAAc,4BACd,EAAAC,UAAY,0BACZ,EAAAC,WAAa,2BACb,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BAEZ,EAAAC,mBAAqB,mCACrB,EAAAC,oBAAsB,oCACtB,EAAAC,gBAAkB,gCAClB,EAAAC,mBAAqB,mCACrB,EAAAC,oBAAsB,oCACtB,EAAAC,oBAAsB,oCACtB,EAAAC,gBAAkB,gCAClB,EAAAC,kBAAoB,kCACpB,EAAAC,mBAAqB,mCACrB,EAAAC,iBAAmB,iCACnB,EAAAC,kBAAoB,kCACpB,EAAAC,mBAAqB,mCACrB,EAAAC,mBAAqB,mCACrB,EAAAC,iBAAmB,iCACnB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,qBAAuB,qCACvB,EAAAC,sBAAwB,sCACxB,EAAAC,kBAAoB,kCACpB,EAAAC,qBAAuB,qCACvB,EAAAC,sBAAwB,sCACxB,EAAAC,sBAAwB,sCACxB,EAAAC,kBAAoB,kCACpB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,uBAAyB,uCACzB,EAAAC,wBAA0B,wCAC1B,EAAAC,oBAAsB,oCACtB,EAAAC,uBAAyB,uCACzB,EAAAC,wBAA0B,wCAC1B,EAAAC,wBAA0B,wCAC1B,EAAAC,oBAAsB,oCACtB,EAAAC,0BAA4B,0CAC5B,EAAAC,2BAA6B,2CAC7B,EAAAC,uBAAyB,uCACzB,EAAAC,0BAA4B,0CAC5B,EAAAC,2BAA6B,2CAC7B,EAAAC,2BAA6B,2CAC7B,EAAAC,uBAAyB,uCACzB,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBAEX,EAAAnW,WAAa,2BACb,EAAAO,kBAAoB,kCACpB,EAAAW,kBAAoB,kCACpB,EAAAQ,aAAe,6BACf,EAAAO,aAAe,6BACf,EAAAE,gBAAkB,gCAClB,EAAAM,cAAgB,8BAChB,EAAA2T,UAAY,0BACZ,EAAAC,WAAa,2BACb,EAAArT,SAAW,yBACX,EAAAO,SAAW,yBACX,EAAAO,SAAW,yBACX,EAAAM,SAAW,yBACX,EAAAuF,SAAW,yBACX,EAAApF,kBAAoB,kCACpB,EAAAK,kBAAoB,kCACpB,EAAAgH,SAAW,yBACX,EAAAM,SAAW,yBACX,EAAAS,SAAW,yBACX,EAAAE,QAAU,wBACV,EAAAE,SAAW,yBACX,EAAAE,YAAc,4BACd,EAAAE,SAAW,yBACX,EAAAE,eAAiB,+BACjB,EAAAG,cAAgB,8BAChB,EAAAI,cAAgB,8BAChB,EAAA3I,SAAW,yBACX,EAAAS,SAAW,yBACX,EAAAS,SAAW,yBACX,EAAAE,UAAY,0BACZ,EAAA6D,SAAW,yBACX,EAAAG,UAAY,0BACZ,EAAA7D,QAAU,wBACV,EAAAK,QAAU,wBACV,EAAAK,QAAU,wBACV,EAAAS,QAAU,wBACV,EAAAS,QAAU,wBACV,EAAAS,QAAU,wBACV,EAAA2B,aAAe,6BACf,EAAAK,eAAiB,+BACjB,EAAAvB,YAAc,4BACd,EAAA4B,eAAiB,+BACjB,EAAAK,gBAAkB,gCAClB,EAAAyC,UAAY,0BACZ,EAAAG,UAAY,0BAEZ,EAAApqF,MAAQ,sBACR,EAAAE,MAAQ,sBACR,EAAAE,MAAQ,sBACR,EAAAE,MAAQ,sBACR,EAAAE,MAAQ,sBACR,EAAAC,MAAQ,sBAER,EAAA8xF,YAAc,4BACd,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,mBAAqB,mCACrB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,aAAe,6BACf,EAAAC,UAAY,0BACZ,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,eAAiB,+BACjB,EAAAC,eAAiB,+BACjB,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCAEvB,EAAAC,YAAc,4BACd,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,mBAAqB,mCACrB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,aAAe,6BACf,EAAAC,UAAY,0BACZ,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,eAAiB,+BACjB,EAAAC,eAAiB,+BACjB,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,wBAA0B,wCAC1B,EAAAC,wBAA0B,wCAC1B,EAAAC,yBAA2B,yCAC3B,EAAAC,yBAA2B,yCAC3B,EAAAC,gBAAkB,gCAClB,EAAAC,gBAAkB,gCAElB,EAAAC,YAAc,4BACd,EAAAC,mBAAqB,mCACrB,EAAAC,mBAAqB,mCACrB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,kBAAoB,kCACpB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,eAAiB,+BACjB,EAAAC,eAAiB,+BACjB,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,wBAA0B,wCAC1B,EAAAC,wBAA0B,wCAC1B,EAAAC,wBAA0B,wCAC1B,EAAAC,wBAA0B,wCAC1B,EAAAC,yBAA2B,yCAC3B,EAAAC,yBAA2B,yCAC3B,EAAAC,iBAAmB,iCACnB,EAAAC,iBAAmB,iCAEnB,EAAAC,YAAc,4BACd,EAAAC,mBAAqB,mCACrB,EAAAC,mBAAqB,mCACrB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,eAAiB,+BACjB,EAAAC,eAAiB,+BACjB,EAAAC,wBAA0B,wCAC1B,EAAAC,wBAA0B,wCAC1B,EAAAC,iBAAmB,iCACnB,EAAAC,iBAAmB,iCAEnB,EAAAC,YAAc,4BACd,EAAAC,mBAAqB,mCACrB,EAAAC,mBAAqB,mCACrB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,WAAa,2BACb,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,sBAAwB,sCACxB,EAAAC,sBAAwB,sCACxB,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BAEb,EAAAC,YAAc,4BACd,EAAAC,mBAAqB,mCACrB,EAAAC,mBAAqB,mCACrB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,WAAa,2BACb,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,sBAAwB,sCACxB,EAAAC,sBAAwB,sCACxB,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BAEb,EAAAC,cAAgB,8BAChB,EAAAC,cAAgB,8BAChB,EAAAC,iBAAmB,iCACnB,EAAAC,iBAAmB,iCACnB,EAAAC,iBAAmB,iCACnB,EAAAC,iBAAmB,iCAGnB,EAAA3nC,UAAY,wBACZ,EAAAC,UAAY,sBACZ,EAAA80B,cAAgB,0BAChB,EAAAC,cAAgB,0BAGhB,EAAAC,MAAQ,oBACR,EAAAC,SAAW,uBAGX,EAAArkF,MAAQ,yBACR,EAAAD,QAAU,2BACV,EAAAD,KAAO,wBAGP,EAAA+0E,YAAc,0BACd,EAAAG,YAAc,0BACd,EAAAE,YAAc,0BACd,EAAAC,YAAc,0BAGd,EAAAz3E,UAAY,4BACZ,EAAAI,WAAa,6BACb,EAAAC,kBAAoB,oCACpB,EAAAJ,WAAa,6BACb,EAAAK,YAAc,8BACd,EAAAJ,WAAa,6BACb,EAAAK,YAAc,8BACd,EAAAJ,WAAa,6BACb,EAAAK,YAAc,8BACd,EAAAC,aAAe,+BACf,EAAAC,aAAe,+BAxd9B,CAAiByhD,EAAA,EAAAA,eAAA,EAAAA,aAAY,KA4d7B,gBAgkIA,+BAAoC4uB,GAClC,IAAIr5E,EAASq5E,EAASr5E,OAClBo0E,EAAQ,IAAItsE,MACZy5D,EAAiB8X,EAASh1D,QAAQk9C,eAClC10C,EAAgBhiB,OAAOwuE,EAAStmD,QAAQlG,eAG5CwsD,EAAS7d,gBAAgB3uC,GAAe,GAExC,IAAK,IAAIjb,KAAWynE,EAAStmD,QAAQtO,eAAejS,SAAU,CAC5D,GAAIZ,EAAQ3D,MAAQ,EAAA2R,YAAY1G,OAAQ,SACxC,IAAIkV,EAAiBxc,EACjBq0B,EAAa7X,EAAOrf,KACpBipC,EAAY/R,EAAWjY,eAC3B,GACEiY,EAAW9X,GAAG,MACA,OAAd6pB,IACCA,EAAU1sB,aAAa,EAAAzL,eAAetG,YACvC6U,EAAOD,GAAG,EAAAzrB,YAAYw6D,UAEtB,GAAI9uC,EAAOD,GAAG,EAAAzrB,YAAYgyB,SAAU,CAClC,IAAI/yB,EAAQysB,EAAOqG,sBACfkS,QAAQhlC,IAAUilC,SAASjlC,KAC7ByyE,EAAMrnE,KACJ/M,EAAOa,KAAKgsB,EAAcvH,aAAc,CACtC+zD,EAASh1D,QAAQgD,SACbrnB,EAAO0D,IAAIijC,QAAQhlC,GAAQilC,SAASjlC,IACpC3B,EAAOyD,IAAIkjC,QAAQhlC,KACtB,EAAA65B,WAAW2D,YAIlBi1C,EAAMrnE,KACJ/M,EAAOu6D,GACLv6D,EAAOsiE,UAAU,EACftiE,EAAOw6D,WAAWpsC,EAAO9I,aAAci8C,IAEzCvhE,EAAOa,KAAKgsB,EAAcvH,aAAc,CACtCtlB,EAAO2gE,UAAU,EAAGY,GACpBvhE,EAAO2gE,UAAU,EAAG,EAAAnlC,WAAWx0B,MAC9B,EAAAw0B,WAAW2D,QAMxBn/B,EAAO46D,YAAYnQ,EAAaqkC,cAC9B,EAAAtzD,WAAWx0B,IACX,EAAAw0B,WAAW2D,KACX,CAAEoiC,GACF6S,EAAM5nE,OACFxM,EAAO8gC,MAAM,KAAMszC,GACnBp0E,EAAOsgC,QAKf,+BAAoC+4C,GAClC,IAAItmD,EAAUsmD,EAAStmD,QACnB/yB,EAASq5E,EAASr5E,OAClB4mB,EAAYmM,EAAQ1O,QAAQuC,UAC5B26C,EAAiB36C,EAAU8xB,eAC3BupD,EAAiBr7E,EAAUywB,SAC3BxyB,EAAiBkO,EAAQlO,eACzBgI,EAAgBhiB,OAAOkoB,EAAQlG,eAC/Bq1E,EAAS,IAAIp6F,MACbooC,EAAW,EAAAzF,SAASzoC,OAAOhC,GAG/Bq5E,EAAS7d,gBAAgB3uC,GAAe,GAExC,IAAIs1E,EAAQjyD,EAASkyD,mBACnBpiG,EAAOsgC,MACPtgC,EAAOqiE,KAAK4/B,GAAgB,EAC1B1gC,GAAkB,EAAA/lC,WAAWv0B,IACzBjH,EAAOmgE,OAAO,EAAAtkC,SAASqxC,OACrBltE,EAAO2gE,UAAU,EAAGY,GACpBvhE,EAAO0D,IAAI,IAEb1D,EAAOmgE,OAAO,EAAAtkC,SAASoxC,OACrBjtE,EAAO2gE,UAAU,EAAGY,GACpBvhE,EAAOyD,IAAI,IAEjB,EAAA+3B,WAAWx0B,IACX,IAIAq7F,EAAS,EACb,IAAK,IAAKx8E,EAAI+M,KAAa/N,EAAgB,CAIzC,IAAIy9E,EAHJz3F,OAAO+nB,EAAS7jB,KAAK2wD,WACrB70D,OAAOgb,GAAMw8E,KAGb,IAAI92F,EAAO,IAAIzD,MAGf,GAAI8qB,EAAS2vE,sBAAwBD,EAAY1vE,EAAShJ,aAAa,iBAAkB,CACvF/e,OAAOy3F,EAAUr0F,MAAQ,EAAA2R,YAAYwN,oBACrC,IAAIo1E,EAAYzvE,EAAQtN,SAAS4H,gBAAmCi1E,EAAW,MAC/E,GAAKE,GAAcnpB,EAAS7d,gBAAgBgnC,GAIrC,CACL,IAAIC,EAAWD,EAAUlsF,UACrBosF,EAAgB73F,OAAO43F,EAAS1rE,UACpClsB,OACoC,GAAlC43F,EAASzrE,eAAexqB,QACxBi2F,EAASzrE,eAAe,IAAM,EAAAtQ,KAAK5iB,KACnC2+F,EAASvzF,YAAc,EAAAwX,KAAKG,MAC5B+L,EAAS7jB,KAAKkgE,uBAAuByzB,IAEvCn3F,EAAKwB,KACH/M,EAAOa,KAAK2hG,EAAUl9E,aAAc,CAClCtlB,EAAO2gE,UAAU,EAAGY,GACpBvhE,EAAO2gE,UAAU,EAAG,EAAAnlC,WAAWx0B,MAC9B,EAAAw0B,WAAW2D,YAhBhB5zB,EAAKwB,KACH/M,EAAOklE,mBAoBN,CACL,IAAIjxD,EAAU2e,EAAS3e,QACvB,GAAIA,EACF,IAAK,IAAIuZ,KAAUvZ,EAAQzB,SACzB,GAAIgb,EAAOvf,MAAQ,EAAA2R,YAAYiO,OACjBL,EAAQtR,SAAW0W,EAAU,CAEvC,GADwBpF,EAAQze,KAClB2wD,UAAW,CACvB,IAAIijC,EAAsBn1E,EAAQwK,aAClCntB,OAAO83F,GAAe,GACtBp3F,EAAKwB,KAEH/M,EAAOu6D,GACLv6D,EAAOsiE,UAAU,EACftiE,EAAOqiE,KAAK4/B,GAAgB,EAC1BjiG,EAAO2gE,UAAU,EAAGY,GACpBA,EAAgBohC,IAGpB3iG,EAAOa,KAAKgsB,EAAcvH,aAAc,CACtCtlB,EAAO2gE,UAAU,EAAGY,GACpBvhE,EAAO2gE,UAAU,EAAG,EAAAnlC,WAAWx0B,MAC9B,EAAAw0B,WAAW2D,UASzBvM,EAAS4G,MAAMjuB,EAAKwB,KAAK/M,EAAOy6D,UACrC,IAAI35B,EAAQoP,EAAS0yD,SACnB5iG,EAAO+6D,QAAQxvD,IAEjB2kC,EAAS2yD,mBAAmBV,EAAOrhE,EAAO,CAAEjb,IAC5Cq8E,EAAOn1F,KAAK+zB,GAEd,IAAK,IAAKjb,EAAI+M,KAAa/N,EAAgB,CACzC,IAAI2U,EAAO5G,EAAS4G,KAChBA,GACF0W,EAAS4yD,UAAUZ,EAAOr8E,GAAKq8E,EAAO1oE,EAAK3T,KAG/Cq8E,EAAOn1F,KACLmjC,EAAS0yD,SACP5iG,EAAOklE,gBAGXh1B,EAAS2yD,mBAAmBV,EAAOD,EAAOA,EAAO11F,OAAS,GAAI,IAC9D6sE,EAAS7d,gBAAgB3uC,GACzB7sB,EAAO46D,YAAYnQ,EAAaskC,cAC9B,EAAA9pD,WAAW,CAAEre,EAAU8xB,eAAgB,EAAAld,WAAWx0B,MAClD,EAAAw0B,WAAW2D,KACX,CAAEoiC,GACFrxB,EAAS6yD,iBAAiBZ,EAAO,KAcrC,uBAA4B9oB,GAC1B,IAAItmD,EAAUsmD,EAAStmD,QACnB/yB,EAASq5E,EAASr5E,OAClB6kB,EAAiBkO,EAAQlO,eACzBwqB,EAAQxqB,EAAeud,KACvBA,EAAO,EAAI,EAAIiN,EACfgD,EAAO,IAAI3pC,WAAW05B,GAC1B,EAAArc,SAASspB,EAAOgD,EAAM,GACtB,IAAIiuC,EAAM,EACN9lD,EAAczH,EAAQ5I,wBACtB64E,EAAexoE,EAAYl4B,UAC3BwpB,EAAiBiH,EAAQjH,eACzBE,EAAe+G,EAAQ/G,aACvBC,EAAe8G,EAAQ9G,aACvBo2E,EAAS,EACb,IAAK,IAAKx8E,EAAI+M,KAAa/N,EAAgB,CACzCha,OAAOgb,GAAMw8E,KACb,IAAIxvF,EAAuB,EAE3B,GADI+f,EAASC,YAAWhgB,GAAS,IAC7B+f,IAAa4H,GAAe5H,EAAS+F,QAAQqqE,GAAe,CAC9D,IAAIrsF,EAAYic,EAASqwE,oBACzBpwF,GAAS,EACL+f,EAAS+F,QAAQ7M,KAAiBjZ,GAAS,GAC/CA,GAAS,GAA8B+uF,EAAmBjrF,QACrD,GAAIic,EAAS+F,QAAQ3M,GAAe,CACzC,IAAInd,EAAgBhE,OAAO+nB,EAAS6H,mBAAmBzO,IACvDnhB,OAA+B,GAAxBgE,EAAcrC,QACrBqG,GAAS,EACTA,GAAS,GAA8B+uF,EAAmB/yF,EAAc,SACnE,GAAI+jB,EAAS+F,QAAQ1M,GAAe,CACzC,IAAIpd,EAAgBhE,OAAO+nB,EAAS6H,mBAAmBxO,IACvDphB,OAA+B,GAAxBgE,EAAcrC,QACrBqG,GAAS,EACTA,GAAS,MAA4B+uF,EAAmB/yF,EAAc,IACtEgE,GAAS,GAA8B+uF,EAAmB/yF,EAAc,IAE1E,EAAAkX,SAASlT,EAAOw/B,EAAMiuC,GAAMA,GAAO,EACnC1tD,EAASwG,UAAYvmB,EACrB,IAAI2mB,EAAO5G,EAAS4G,KACpB,EAAAzT,SAASyT,EAAOA,EAAK3T,GAAK,EAAGwsB,EAAMiuC,GAAMA,GAAO,EAElDz1E,OAAOy1E,GAAOl+C,GACd,IAAIxb,EAAYmM,EAAQ1O,QAAQuC,UAC5B0V,EAAU+8C,EAASnW,iBAAiB7wB,GACxC,GAAsB,GAAlBzrB,EAAUwb,KAAW,CACvB,IAAIxc,EAAS0W,EAAQ1W,OACrB5lB,EAAO85D,UAAUrP,EAAauP,UAAW,EAAAx+B,WAAWv0B,KAAK,EAAOjH,EAAO0D,IAAIijC,QAAQ/gB,GAASghB,SAAShhB,UAErG5lB,EAAO85D,UAAUrP,EAAauP,UAAW,EAAAx+B,WAAWx0B,KAAK,EAAOhH,EAAOyD,IAAIkjC,QAAQrK,EAAQ1W,WAK/F,kCAAuCyzD,EAAoB/2E,GACzD,IAAItC,EAASq5E,EAASr5E,OAClBuhE,EAAiB8X,EAASh1D,QAAQk9C,eAClC30C,EAAqB/hB,OAAOvI,EAAUywB,QAAQnG,oBAClDysD,EAAS7d,gBAAgB5uC,GAEzB,IAAIyT,EAAQ,IAAIv4B,MAGhBu4B,EAAMtzB,KACJ/M,EAAOu6D,GACLv6D,EAAOwhE,MACLD,GAAkB,EAAA/lC,WAAWv0B,IACzB,EAAA20B,QAAQs2B,OACR,EAAAt2B,QAAQq2B,OACZjyD,EAAO2gE,UAAU,EAAGY,IAEtBvhE,EAAOy6D,OACLz6D,EAAOyD,IAAI,MAMjB,IAAIwxB,EAAY3yB,EAAU2yB,UAC1B,GAAkB,OAAdA,GAAsBA,EAAUmN,KAClC,IAAK,IAAIxP,KAAYqC,EAAUziB,SAC7B6tB,EAAMtzB,KACJ/M,EAAOu6D,GACLv6D,EAAOa,KAAK+rB,EAAmBtH,aAAc,CAC3CtlB,EAAO2gE,UAAU,EAAGY,GACpBvhE,EAAOyD,IAAImvB,EAAS/M,KACnB,EAAA2V,WAAWx0B,KACdhH,EAAOy6D,OACLz6D,EAAOyD,IAAI,MAQrB48B,EAAMtzB,KACJ/M,EAAOy6D,OACLz6D,EAAOyD,IAAI,KAIfzD,EAAO46D,YAAYt4D,EAAUgjB,aAAe,cAAei8C,EAAgB,EAAA/lC,WAAWx0B,IAAK,KAAMhH,EAAO+6D,QAAQ16B,M,8EC15JlH,aAUA,OASA,OAKA,OAIA,OA0DA,MAAa7a,UAAe,EAAApB,kBAkB1B,YAAY2O,GACV/W,MAAM+W,EAAQ7lB,aAdhB,KAAAg2F,QAAoB,IAAIp7F,MAExB,KAAAq7F,QAAuB,IAAIn7F,IAE3B,KAAAo7F,QAAuB,IAAIp7F,IAE3B,KAAA40C,UAAmC,KAInC,KAAAymD,UAAiC,IAAIp7F,IAmgB7B,KAAAq7F,8BAAqC,EAigBrC,KAAAC,oBAA4C,KA//BlDljG,KAAK0yB,QAAUA,EAIjB,UAEEzmB,EAEAoI,EAEA8uF,GAGA,IAAIv3F,EAAiB,EAAA4I,cAAcH,GAC/BM,EAAe,EAAAC,mBAAmBhJ,GAEtC,IAAI5L,KAAK+iG,QAAQh2F,IAAI4H,GAArB,CACA3U,KAAK+iG,QAAQt8E,IAAI9R,GACjB3U,KAAK8iG,QAAQr8E,IAAI9R,GAGjB,IAAIhJ,EAAS,IAAI,EAAAmZ,OACflZ,EACAK,EACAk3F,EACI,EAAAx1F,WAAWgf,WACXtY,EAAKI,WAAW,EAAA3R,gBACduR,EAAK64C,QAAQ,EAAA5qD,eAAgB,EAAAQ,eAAeqJ,QAAU,EACpD,EAAAwB,WAAW0O,cACX,EAAA1O,WAAWyO,QACb,EAAAzO,WAAWy1F,MAEf1wE,EAAU1yB,KAAK0yB,QACnBA,EAAQzO,QAAQvX,KAAKf,GACrB3L,KAAKqjG,cAAgB13F,EAGrB,IAAI23F,EAAK,IAAI,EAAApnD,UAAUvwC,EAAQ+mB,EAAQ7lB,aACvCy2F,EAAG/mD,UAAYv8C,KAAKu8C,UAEpB,IADA,IAAIjpC,EAAa3H,EAAO2H,YAChBgwF,EAAGtkD,KAAK,EAAA1xC,MAAMqxC,YAAY,CAChC,IAAI3qC,EAAYhU,KAAKujG,uBAAuBD,EAAI,MAC5CtvF,GAAWV,EAAW5G,KAAKsH,GAEjCsvF,EAAGE,UAIL,uBACEF,EACAn2B,EAAyC,MAOzC,IALA,IAAI36D,EAAQ,EAAAnQ,YAAYiW,KACpBmrF,GAAiB,EAGjB5vF,EAAqC,KAClCyvF,EAAGtkD,KAAK,EAAA1xC,MAAM2wC,KAAK,CACpBwlD,EAAW,IAAGA,EAAWH,EAAGnnD,UAChC,IAAIv9B,EAAY5e,KAAK0jG,eAAeJ,GAC/B1kF,EAIA/K,EACAA,EAAWnH,KAAKkS,GADJ/K,EAAa,CAAC+K,GAH7B5e,KAAK2jG,cAAcL,GAQvB,IAAIM,EAAmB,EACnBC,EAAiB,EACjBC,EAAoB,EACpBC,EAAkB,EAClBT,EAAGtkD,KAAK,EAAA1xC,MAAM4P,UACZumF,EAAW,IAAGA,EAAWH,EAAGnnD,UAChC3pC,GAAS,EAAAnQ,YAAY6a,OACrB0mF,EAAcN,EAAGnnD,SACjB0nD,EAAYP,EAAGrnF,IACXqnF,EAAGtkD,KAAK,EAAA1xC,MAAM+sC,WAChBypD,EAAeR,EAAGnnD,SAClB4nD,EAAaT,EAAGrnF,MAIpB,IAAI+nF,EAAoB,EACpBC,EAAkB,EAClBC,EAAgC,MAAb/2B,GAAqBA,EAAUr/C,GAAG,EAAAzrB,YAAY2tB,SACjEszE,EAAGtkD,KAAK,EAAA1xC,MAAM+kB,SACZ6xE,EACFlkG,KAAK8oB,MACH,EAAAhe,eAAeq5F,gEACfb,EAAGl4F,UAGDq4F,EAAW,IAAGA,EAAWH,EAAGnnD,UAChC6nD,EAAeP,EACfQ,EAAaX,EAAGrnF,IAChBzJ,GAAS,EAAAnQ,YAAYgwB,QAAU,EAAAhwB,YAAY2tB,SAEpCk0E,IACT1xF,GAAS,EAAAnQ,YAAY2tB,SAIvB,IAAIhc,EAA8B,KAG9BowF,EAAQd,EAAGe,OAEf,OADIZ,EAAW,IAAGA,EAAWH,EAAGjnD,cACxB+nD,GACN,KAAK,EAAA92F,MAAM4gB,MACTo1E,EAAGj1F,OACHmE,GAAS,EAAAnQ,YAAY6rB,MAEnBla,EADEsvF,EAAGtkD,KAAK,EAAA1xC,MAAM0mB,MACJh0B,KAAKskG,UAAUhB,EAAI9wF,EAAOqB,EAAY4vF,GAEtCzjG,KAAKukG,cAAcjB,EAAI9wF,EAAOqB,EAAY4vF,GAExD5vF,EAAa,KACb,MAEF,KAAK,EAAAvG,MAAMytC,IAAKvoC,GAAS,EAAAnQ,YAAY04C,IACrC,KAAK,EAAAztC,MAAMkuC,IACT8nD,EAAGj1F,OACH2F,EAAYhU,KAAKukG,cAAcjB,EAAI9wF,EAAOqB,EAAY4vF,GACtD5vF,EAAa,KACb,MAEF,KAAK,EAAAvG,MAAM0mB,KACTsvE,EAAGj1F,OACH2F,EAAYhU,KAAKskG,UAAUhB,EAAI9wF,EAAOqB,EAAY4vF,GAClD5vF,EAAa,KACb,MAEF,KAAK,EAAAvG,MAAMuN,SACTyoF,EAAGj1F,OACH2F,EAAYhU,KAAKwkG,cAAclB,EAAI9wF,EAAOqB,EAAY4vF,GACtD5vF,EAAa,KACb,MAEF,KAAK,EAAAvG,MAAM8iB,SAAU,CACnB,IAAI6uB,EAAQqkD,EAAGmB,OAEf,GADAnB,EAAGj1F,QACEi1F,EAAGtkD,KAAK,EAAA1xC,MAAMmN,OAAQ,CACzB6oF,EAAGoB,MAAMzlD,GACTjrC,EAAYhU,KAAK2kG,eAAerB,GAAI,GACpC,MAEAA,EAAGsB,QAAQ3lD,GAEbzsC,GAAS,EAAAnQ,YAAY+tB,SAGvB,KAAK,EAAA9iB,MAAMmN,MACX,KAAK,EAAAnN,MAAMmrB,UACT6qE,EAAGj1F,OACH2F,EAAYhU,KAAK6kG,sBAAsBvB,EAAI9wF,EAAOqB,EAAY4vF,GAC9D5vF,EAAa,KACb,MAEF,KAAK,EAAAvG,MAAMymB,UAAW,CACpB,IAAIkrB,EAAQqkD,EAAGmB,OACfnB,EAAGj1F,OACCi1F,EAAGe,MAAK,EAAO,EAAAxqD,mBAAmB2E,SAAW,EAAAlxC,MAAMmL,YACrD6qF,EAAGsB,QAAQ3lD,GACXjrC,EAAYhU,KAAK8kG,eAAexB,EAAI9wF,EAAOqB,EAAY4vF,GACvD5vF,EAAa,OAEbyvF,EAAGoB,MAAMzlD,GACTjrC,EAAYhU,KAAK2kG,eAAerB,GAAI,IAEtC,MAEF,KAAK,EAAAh2F,MAAMuQ,OACTylF,EAAGj1F,OAGD2F,GAFFxB,GAAS,EAAAnQ,YAAYwb,QACT,EAAAxb,YAAY6a,OACVld,KAAK+kG,kBAAkBzB,EAAIG,GAE3BzjG,KAAKglG,YAAY1B,GAE/B,MAEF,KAAK,EAAAh2F,MAAMguC,KAAM,CACf,IAAI2D,EAAQqkD,EAAGmB,OACfnB,EAAGj1F,OACCi1F,EAAGe,MAAK,EAAO,EAAAxqD,mBAAmB2E,SAAW,EAAAlxC,MAAMmL,YACrD6qF,EAAGsB,QAAQ3lD,GACXjrC,EAAYhU,KAAKilG,qBAAqB3B,EAAI9wF,EAAOqB,EAAY4vF,GAC7D5vF,EAAa,OAEbyvF,EAAGoB,MAAMzlD,GACTjrC,EAAYhU,KAAK2kG,eAAerB,GAAI,IAEtC,MAEF,QAGM9wF,EAAQ,EAAAnQ,YAAY6a,OAClB6mF,GAAcT,EAAG4B,eAAe,EAAArrD,mBAAmB2E,SACjDylD,GACFjkG,KAAK8oB,MACH,EAAAhe,eAAeq6F,2CACf7B,EAAGl4F,MAAM44F,EAAcC,IAG3BjwF,EAAYhU,KAAKolG,wBAAwB9B,EAAIG,EAAUK,EAAcC,GACrED,EAAeC,EAAa,GAE5B/vF,EAAYhU,KAAKqlG,YAAY/B,EAAIG,EAA2C,IAAhCjxF,EAAQ,EAAAnQ,YAAYgwB,WAK9DwxE,GACF7jG,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMw4F,EAAaC,GAAY,UAGlCI,GACFjkG,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAM44F,EAAcC,GAAa,WAGnC92B,IACHn5D,EAAYhU,KAAK2kG,eAAerB,GAAI,KAQ5C,GAAIzvF,EACF,IAAK,IAAIxT,EAAI,EAAGwX,EAAIhE,EAAW1H,OAAQ9L,EAAIwX,IAAKxX,EAC9CL,KAAK8oB,MACH,EAAAhe,eAAey6F,8BACf1xF,EAAWxT,GAAG+K,OAMpB,GAAI24F,GAA4B,OAAd/vF,EAChB,OAAQA,EAAUpG,MAChB,KAAK,EAAAJ,SAASsP,gBACd,KAAK,EAAAtP,SAASiQ,oBACd,KAAK,EAAAjQ,SAASmP,iBACd,KAAK,EAAAnP,SAASsQ,qBACd,KAAK,EAAAtQ,SAASwQ,qBACZ,OAAO,EAAA/P,KAAKu3F,6BAAmDxxF,EAAWsvF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAElG,QACEjc,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAM04F,EAAcC,GAAa,WAK5C,OAAO/vF,EAIT,WACE,IAAI6uF,EAAU7iG,KAAK6iG,QACnB,OAAOA,EAAQ12F,OAAS02F,EAAQr/D,QAAW,KAI7C,YAAYiiE,GACV,IAAI95F,EAAS3L,KAAKgjG,UAAU9hG,IAAIukG,GAChC,OAAI95F,EAAeA,EAAOgJ,aACnB,KAIT,SACE,GAAI3U,KAAK6iG,QAAQ12F,OAAQ,MAAM,IAAIvD,MAAM,wBACzC5I,KAAK6iG,QAAU,GACf7iG,KAAK8iG,QAAQ5nC,QACbl7D,KAAK+iG,QAAQ7nC,QACbl7D,KAAKgjG,UAAU9nC,QAMjB,cACEooC,GAOA,IAFA,IAAIc,EAAQ,EAAAn2F,KAAKgB,qBAAqBq0F,EAAGoC,iBAAkBpC,EAAGl4F,SAC1DynB,EAAUuxE,EACPd,EAAGtkD,KAAK,EAAA1xC,MAAM2vC,MAAM,CACzB,IAAIqmD,EAAGtkD,KAAK,EAAA1xC,MAAMmL,YAShB,OAJAzY,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,MAAMk4F,EAAGrnF,MAEP,KATsB,CAC7B,IAAI5N,EAAO,EAAAJ,KAAKgB,qBAAqBq0F,EAAGoC,iBAAkBpC,EAAGl4F,SAC7DynB,EAAQxkB,KAAOA,EACfwkB,EAAUxkB,GASd,OAAO+1F,EAIT,UACEd,EACAsC,GAA4B,EAC5BC,GAAuB,GAMvB,IAGIn3F,EAHAiT,EAAQ2hF,EAAGj1F,OACXo1F,EAAWH,EAAGnnD,SAKlB,GAAIx6B,GAAS,EAAArU,MAAMuvC,UAAW,CAG5B,IAAIipD,EAAsBxC,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,WAEpC5mC,EAAYjW,KAAK+lG,qBAAqBzC,GAC1C,GAAIrtF,EAAW,CACb,GAAI6vF,EAAqB,CACvB,IAAKxC,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAKjB,OAJA98C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAET,IAAKk4F,EAAGtkD,KAAK,EAAA1xC,MAAMkV,KAKjB,OAJAxiB,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAEJk4F,EAAGtkD,KAAK,EAAA1xC,MAAMQ,OACjB9N,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,QAGhB6K,EAAUxH,YAAa,EAEzB,OAAOwH,EACF,GAAI6vF,GAAuB9lG,KAAKijG,6BAKrC,OAJAjjG,KAAK8oB,MACH,EAAAhe,eAAek7F,iBACf1C,EAAGl4F,SAEE,KAIT,IAAIw6F,EAoBF,OAJA5lG,KAAK8oB,MACH,EAAAhe,eAAek7F,iBACf1C,EAAGl4F,SAEE,KApBgB,CACvB,IAAI66F,EAAYjmG,KAAKkmG,UAAU5C,GAAI,EAAOuC,GAC1C,IAAKI,EAAW,OAAO,KACvB,IAAK3C,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAOjB,OANK+oD,GACH7lG,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,MAAMk4F,EAAGrnF,KAAM,KAGf,MAETvN,EAAOu3F,GACF76F,MAAMgB,MAAQq3F,EACnB/0F,EAAKtD,MAAMiB,IAAMi3F,EAAGrnF,UAUjB,GAAI0F,GAAS,EAAArU,MAAMmR,KACxB/P,EAAO,EAAAT,KAAKe,gBACV,EAAAf,KAAKgB,qBAAqB,OAAQq0F,EAAGl4F,SAAU,IAAI,EAAOk4F,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,WAI7E,GAAI0F,GAAS,EAAArU,MAAMgO,KACxB5M,EAAO,EAAAT,KAAKe,gBACV,EAAAf,KAAKgB,qBAAqB,OAAQq0F,EAAGl4F,SAAU,IAAI,EAAOk4F,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,WAI7E,GAAI0F,GAAS,EAAArU,MAAMS,MAAQ4T,GAAS,EAAArU,MAAMU,MAC/CU,EAAO,EAAAT,KAAKe,gBACV,EAAAf,KAAKgB,qBAAqB,OAAQq0F,EAAGl4F,SAAU,IAAI,EAAOk4F,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,WAI7E,GAAI0F,GAAS,EAAArU,MAAMqvC,cACxB2mD,EAAG17D,aACHl5B,EAAO,EAAAT,KAAKe,gBACV,EAAAf,KAAKgB,qBAAqB,SAAUq0F,EAAGl4F,SAAU,IAAI,EAAOk4F,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,UAI/E,IAAI0F,GAAS,EAAArU,MAAMmL,WA8CxB,OANKotF,GACH7lG,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAGA,KA9C6B,CACpC,IAAIxK,EAAOZ,KAAKmmG,cAAc7C,GAC9B,IAAK1iG,EAAM,OAAO,KAClB,IAAIgO,EAAqC,KACrCw3F,GAAW,EAGf,GAAI9C,EAAGtkD,KAAK,EAAA1xC,MAAMgW,UAAW,CAC3B,EAAG,CACD,IAAI+iF,EAAYrmG,KAAKkmG,UAAU5C,GAAI,EAAMuC,GACzC,IAAKQ,EAAW,OAAO,KAClBz3F,EACAA,EAAWlC,KAAoB25F,GADnBz3F,EAAa,CAAgBy3F,SAEvC/C,EAAGtkD,KAAK,EAAA1xC,MAAMoN,QACvB,IAAK4oF,EAAGtkD,KAAK,EAAA1xC,MAAM8V,aAOjB,OANKyiF,GACH7lG,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,MAAMk4F,EAAGrnF,KAAM,KAGf,KAIX,KAAOqnF,EAAGtkD,KAAK,EAAA1xC,MAAMkV,MAAM,CACzB,IAAI8gF,EAAGtkD,KAAK,EAAA1xC,MAAMQ,MAShB,OANK+3F,GACH7lG,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,MAAMk4F,EAAGrnF,KAAM,QAGf,KARPmqF,GAAW,EAWf13F,EAAO,EAAAT,KAAKe,gBAAgBpO,EAAMgO,GAAc,GAAIw3F,EAAU9C,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,OAWtF,KAAOqnF,EAAGtkD,KAAK,EAAA1xC,MAAMuwC,cAAc,CACjC,IAAIyoD,EAAehD,EAAGnnD,SACtB,IAAKmnD,EAAGtkD,KAAK,EAAA1xC,MAAMwwC,cAOjB,OANK+nD,GACH7lG,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAGT,KAET,IAAIm7F,EAAejD,EAAGl4F,MAAMk7F,EAAchD,EAAGrnF,KAGzCmqF,GAAW,EACf,GAAI9C,EAAGtkD,KAAK,EAAA1xC,MAAMkV,KAAM,CACtB,IAAI8gF,EAAGtkD,KAAK,EAAA1xC,MAAMQ,MAShB,OANK+3F,GACH7lG,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,QAGT,KARPg7F,GAAW,EAiBf,GANA13F,EAAO,EAAAT,KAAKe,gBACV,EAAAf,KAAKgB,qBAAqB,QAASs3F,GACnC,CAAE73F,GACF03F,EACA9C,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAEpBmqF,EAAU,MAGhB,OAAO13F,EAOT,qBACE40F,GAKA,IA2HIz0F,EA3HAowC,EAAQqkD,EAAGmB,OACXhB,EAAWH,EAAGnnD,SACdvtC,EAAqC,KACrC8nB,EAAiC,KACjC8vE,GAAoB,EACpBC,EAAoD,KACpDC,EAAgC,EAAAvuF,cAAckiC,QAElD,GAAIipD,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAChB0pD,GAAc,EACdlD,EAAGsB,QAAQ3lD,GACXrwC,EAAa,OAER,CACL43F,GAAc,EACd,EAAG,CACD,IAAI54F,EAAO,EAAAuK,cAAckiC,QAMzB,GALIipD,EAAGtkD,KAAK,EAAA1xC,MAAMsuC,eAChB4qD,GAAc,EACdlD,EAAGsB,QAAQ3lD,GACXrxC,EAAO,EAAAuK,cAAcorC,MAEnB+/C,EAAGtkD,KAAK,EAAA1xC,MAAMgO,MAAO,CACvB,IAAIgoF,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,OAiBhB,OAFA6lD,EAAGoB,MAAMzlD,GACTj/C,KAAKijG,8BAA+B,EAC7B,KAjBiB,CACxBuD,GAAc,EACdlD,EAAGsB,QAAQ3lD,GACX,IAAI19C,EAAIvB,KAAKkmG,UAAU5C,GAAI,GAC3B,IAAK/hG,EAAG,OAAO,KACf,GAAIA,EAAEqM,MAAQ,EAAAJ,SAASmK,UAMrB,OALA3X,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfpkG,EAAE6J,OAEJpL,KAAKijG,8BAA+B,EAC7B,KAETvsE,EAA0Bn1B,OAMvB,KAAI+hG,EAAG4B,iBAgEZ,OATIsB,EACFxmG,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAGLk4F,EAAGoB,MAAMzlD,GAEXj/C,KAAKijG,6BAA+BuD,EAC7B,KAhEuB,CAC9B,IAAI5lG,EAAO,EAAAqN,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,MAAMk4F,EAAGnnD,SAAUmnD,EAAGrnF,MAazF,GAZIqnF,EAAGtkD,KAAK,EAAA1xC,MAAMswC,YAChB4oD,GAAc,EACdlD,EAAGsB,QAAQ3lD,GACPrxC,GAAQ,EAAAuK,cAAcorC,KACxBvjD,KAAK8oB,MACH,EAAAhe,eAAe67F,oCACfrD,EAAGl4F,SAGLwC,EAAO,EAAAuK,cAAcyuF,UAGrBtD,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,OAAQ,CACxB+oD,GAAc,EACdlD,EAAGsB,QAAQ3lD,GACX,IAAIvwC,EAAO1O,KAAKkmG,UAAU5C,GAC1B,IAAK50F,EAEH,OADA1O,KAAKijG,6BAA+BuD,EAC7B,KAET,IAAIK,EAAQ,IAAI,EAAAt3F,cAChBs3F,EAAMr3F,cAAgB5B,EACtBi5F,EAAMjmG,KAAOA,EACbimG,EAAMn4F,KAAOA,EACRE,EACAA,EAAWlC,KAAKm6F,GADJj4F,EAAa,CAAEi4F,QAShC,GANKL,GACClD,EAAGe,QAAU,EAAA/2F,MAAMoN,QACrB8rF,GAAc,EACdlD,EAAGsB,QAAQ3lD,IAGXunD,EAAa,CACf,IAAIK,EAAQ,IAAI,EAAAt3F,cAChBs3F,EAAMr3F,cAAgB5B,EACtBi5F,EAAMjmG,KAAOA,EACbimG,EAAMn4F,KAAO,EAAAT,KAAK4X,kBAAkBy9E,EAAGl4F,QAAQg6C,OAC1Cx2C,EACAA,EAAWlC,KAAKm6F,GADJj4F,EAAa,CAAEi4F,GAEhC7mG,KAAK8oB,MACH,EAAAhe,eAAe44C,cACfmjD,EAAMn4F,KAAKtD,YAEHwD,IAIV63F,EAAuB7lG,EACvB8lG,EAAiB94F,WAehB01F,EAAGtkD,KAAK,EAAA1xC,MAAMoN,QACvB,IAAK4oF,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAUjB,OATI0pD,EACFxmG,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAGdk4F,EAAGoB,MAAMzlD,GAEXj/C,KAAKijG,6BAA+BuD,EAC7B,KAKX,IAAIlD,EAAGtkD,KAAK,EAAA1xC,MAAMqwC,oBAgChB,OATI6oD,EACFxmG,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,MAGdk4F,EAAGoB,MAAMzlD,GAEXj/C,KAAKijG,6BAA+BuD,EAC7B,KA/BP,IAAKA,IACHA,GAAc,EACdlD,EAAGsB,QAAQ3lD,GACPwnD,GAAsB,CACxB,IAAII,EAAQ,IAAI,EAAAt3F,cAChBs3F,EAAMr3F,cAAgBk3F,EACtBG,EAAMjmG,KAAO6lG,EACbI,EAAMn4F,KAAO,EAAAT,KAAK4X,kBAAkB4gF,EAAqBr7F,MAAMg6C,OAC1Dx2C,EACAA,EAAWlC,KAAKm6F,GADJj4F,EAAa,CAAEi4F,GAEhC7mG,KAAK8oB,MACH,EAAAhe,eAAe44C,cACfmjD,EAAMn4F,KAAKtD,OAKjB,OADAyD,EAAa7O,KAAKkmG,UAAU5C,KAiB9BtjG,KAAKijG,8BAA+B,EAC7B,EAAAh1F,KAAK6X,mBACVlX,GAAc,GACdC,EACA6nB,GACA,EACA4sE,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,QArBpBjc,KAAKijG,6BAA+BuD,EAC7B,MA0Bb,eACElD,GAKA,IAAIG,EAAWH,EAAGnnD,SAClB,GAAImnD,EAAG4B,iBAAkB,CACvB,IAkBIz1F,EAlBA7O,EAAO0iG,EAAGoC,iBACVj1F,EAAyB,EAAAxC,KAAKM,2BAA2B3N,EAAM0iG,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MACzF,KAAOqnF,EAAGtkD,KAAK,EAAA1xC,MAAM2vC,MAAM,CACzB,IAAIqmD,EAAG4B,eAAe,EAAArrD,mBAAmB2E,QAYvC,OAJAx+C,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAEE,KAXPxK,EAAO0iG,EAAGoC,iBACVj1F,EAAa,EAAAxC,KAAK64F,+BAChBr2F,EACA,EAAAxC,KAAKM,2BAA2B3N,EAAM0iG,EAAGl4F,SACzCk4F,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAW5B,IAAIqnF,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,WAMhB,OAAO,EAAA5uC,KAAK84F,gBAAgBt2F,EAAY,KAAM6yF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAJpE,GADAxM,EAAOzP,KAAKgnG,eAAe1D,GACvB7zF,EACF,OAAO,EAAAxB,KAAK84F,gBAAgBt2F,EAAYhB,EAAM6zF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,WAMxEjc,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAGP,OAAO,KAGT,cACEk4F,EACA9wF,EACAqB,EACA4vF,GAKA,IAAI7vF,EAAU,IAAInM,MAClB,EAAG,CACD,IAAI0lB,EAASntB,KAAKinG,yBAAyB3D,EAAI9wF,EAAOqB,GACtD,IAAKsZ,EAAQ,OAAO,KACpBvZ,EAAQlH,KAA0BygB,SAC3Bm2E,EAAGtkD,KAAK,EAAA1xC,MAAMoN,QAEvB,IAAIyjB,EAAM,EAAAlwB,KAAKi5F,wBAAwBtzF,EAASC,EAAYyvF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAElF,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAGT,yBACEmlE,EACA6D,EACAC,GAKA,IAAK9D,EAAG4B,iBAKN,OAJAllG,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAEE,KAET,IAAIgD,EAAa,EAAAH,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SACrE,EAAAi8F,4BAA4Bj5F,EAAWnC,OACzCjM,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfv3F,EAAWhD,OAGf,IAAIoH,EAAQ20F,EACR7D,EAAGtkD,KAAK,EAAA1xC,MAAMmW,eAChBjR,GAAS,EAAAnQ,YAAYilG,qBAGvB,IAAI54F,EAAwB,KACxB40F,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,SAChB/uC,EAAO1O,KAAKkmG,UAAU5C,IAGxB,IAAIh0F,EAAiC,KACrC,GAAIg0F,EAAGtkD,KAAK,EAAA1xC,MAAM2uC,SAQhB,GAPIzpC,EAAQ,EAAAnQ,YAAY2tB,SACtBhwB,KAAK8oB,MACH,EAAAhe,eAAey8F,iDACfjE,EAAGl4F,WAGPkE,EAActP,KAAKwnG,gBAAgBlE,EAAI,IACrB,OAAO,UAErB9wF,EAAQ,EAAAnQ,YAAY6rB,MAChB1b,EAAQ,EAAAnQ,YAAY2tB,SACxBhwB,KAAK8oB,MACH,EAAAhe,eAAe89D,wCACfx6D,EAAWhD,OAGLsD,GACV1O,KAAK8oB,MACH,EAAAhe,eAAe44C,cACf4/C,EAAGl4F,MAAMk4F,EAAGrnF,MAIlB,IAAI7Q,EAAQ,EAAAmC,MAAMZ,KAAKyB,EAAWhD,MAAOk4F,EAAGl4F,SAM5C,OALKoH,EAAQ,EAAAnQ,YAAYilG,qBAAwBh4F,GAC/CtP,KAAK8oB,MACH,EAAAhe,eAAe28F,iEACfr8F,GAEG,EAAA6C,KAAK0X,0BACVvX,EACAM,EACAY,EACA83F,EACA50F,EACApH,GAIJ,UACEk4F,EACA9wF,EACAqB,EACA4vF,GAKA,GAAIH,EAAGj1F,QAAU,EAAAf,MAAMmL,WAKrB,OAJAzY,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAEE,KAET,IAAIgD,EAAa,EAAAH,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SACzE,GAAIk4F,EAAGj1F,QAAU,EAAAf,MAAMywC,UAKrB,OAJA/9C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAGT,IADA,IAAIwI,EAAU,IAAInM,OACV67F,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,aAAa,CACjC,IAAI7wB,EAASntB,KAAK0nG,eAAepE,EAAI,EAAAjhG,YAAYiW,MACjD,IAAK6U,EAAQ,OAAO,KAEpB,GADAvZ,EAAQlH,KAA2BygB,IAC9Bm2E,EAAGtkD,KAAK,EAAA1xC,MAAMoN,OAAQ,CACzB,GAAI4oF,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,YAChB,MAMA,OAJAh+C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,MAIb,IAAI+yB,EAAM,EAAAlwB,KAAK05F,sBACbv5F,EACAwF,EACAC,EACArB,EACA8wF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAGxB,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAGT,eACEmlE,EACA6D,GAKA,IAAK7D,EAAG4B,iBAKN,OAJAllG,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAEE,KAET,IAAIgD,EAAa,EAAAH,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SACrE9J,EAA2B,KAC/B,OAAIgiG,EAAGtkD,KAAK,EAAA1xC,MAAM2uC,WAChB36C,EAAQtB,KAAKwnG,gBAAgBlE,EAAI,IACd,KAEd,EAAAr1F,KAAK25F,2BACVx5F,EACA9M,EACA6lG,EACA,EAAA55F,MAAMZ,KAAKyB,EAAWhD,MAAOk4F,EAAGl4F,UAIpC,YACEk4F,GAKA,IAAIG,EAAWH,EAAGnnD,SACdhsC,EAA0B,KAC9B,GACEmzF,EAAGe,MAAK,IAAS,EAAA/2F,MAAMowC,WACvB4lD,EAAGlnD,WAAa,EAAA9uC,MAAM0wC,aACrBslD,EAAGhnD,sBAEEnsC,EAAOnQ,KAAKwnG,gBAAgBlE,IAAM,OAAO,KAGjD,IAAInlE,EAAM,EAAAlwB,KAAK45F,sBAAsB13F,EAAMmzF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAEjE,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAGT,oBACEmlE,GAQA,IAHA,IAAI5vF,EAAiB,IAAIjM,MACrBqgG,GAAe,EACf17F,EAAQk3F,EAAGnnD,UACPmnD,EAAGtkD,KAAK,EAAA1xC,MAAM8V,cAAc,CAClC,IAAI2kF,EAAgB/nG,KAAKgoG,mBAAmB1E,GAC5C,IAAKyE,EAAe,OAAO,KAW3B,GAVkC,OAA9BA,EAAc54F,YAChB24F,GAAe,EACNA,IACT9nG,KAAK8oB,MACH,EAAAhe,eAAem9F,iEACfF,EAAc38F,OAEhB28F,EAAc54F,YAAc,MAE9BuE,EAAehH,KAAKq7F,IACfzE,EAAGtkD,KAAK,EAAA1xC,MAAMoN,OAAQ,CACzB,GAAI4oF,EAAGtkD,KAAK,EAAA1xC,MAAM8V,aAChB,MAMA,OAJApjB,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,MAUb,OANKsI,EAAevH,QAClBnM,KAAK8oB,MACH,EAAAhe,eAAeo9F,oCACf5E,EAAGl4F,MAAMgB,EAAOk3F,EAAGrnF,MAGhBvI,EAGT,mBACE4vF,GAKA,GAAIA,EAAGj1F,QAAU,EAAAf,MAAMmL,WAAY,CACjC,IAAIrK,EAAa,EAAAH,KAAKM,2BACpB+0F,EAAGoC,iBACHpC,EAAGl4F,SAED8D,EAAoC,KACxC,GAAIo0F,EAAGtkD,KAAK,EAAA1xC,MAAMktC,SAAU,CAC1B,IAAIj5C,EAAIvB,KAAKkmG,UAAU5C,GACvB,IAAK/hG,EAAG,OAAO,KACf,GAAIA,EAAEqM,MAAQ,EAAAJ,SAASmK,UAKrB,OAJA3X,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfpkG,EAAE6J,OAEG,KAET8D,EAA6B3N,EAE/B,IAAI4N,EAAoC,KACxC,GAAIm0F,EAAGtkD,KAAK,EAAA1xC,MAAM2uC,QAAS,CACzB,IAAI16C,EAAIvB,KAAKkmG,UAAU5C,GACvB,IAAK/hG,EAAG,OAAO,KACf,GAAIA,EAAEqM,MAAQ,EAAAJ,SAASmK,UAKrB,OAJA3X,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfpkG,EAAE6J,OAEG,KAET+D,EAA6B5N,EAE/B,OAAO,EAAA0M,KAAKk6F,oBACV/5F,EACAc,EACAC,EACA,EAAA5B,MAAMZ,KAAKyB,EAAWhD,MAAOk4F,EAAGl4F,UAQpC,OALEpL,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAGA,KAKT,gBACEk4F,EACA8E,GAAsB,GAKtB,IAAIx5F,EAAa,IAAInH,MACjB4gG,EAAiC,KACjCP,GAAe,EACfQ,GAAe,EACf5xE,EAA4B,KAIhC,GADA12B,KAAKkjG,oBAAsB,KACvBI,EAAGtkD,KAAK,EAAA1xC,MAAMgO,MAAO,CACvB,IAAIgoF,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,OAgBhB,OAJAz9C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAdP,KADAsrB,EAAW12B,KAAKkmG,UAAU5C,IACX,OAAO,KAgBxB,GAfM5sE,EAAS9oB,MAAQ,EAAAJ,SAASmK,UAC5B3X,KAAKkjG,oBAAqCxsE,EAE1C12B,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfjvE,EAAStrB,QAUVk4F,EAAGtkD,KAAK,EAAA1xC,MAAMoN,OACjB,OAAI4oF,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YACTluC,GAEP5O,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,MAKb,MAAQk4F,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,aAAa,CACjC,IAAI+pD,EAAQ7mG,KAAKuoG,eAAejF,EAAI8E,GACpC,IAAKvB,EAAO,OAAO,KAQnB,OAPIwB,IAAaC,IACftoG,KAAK8oB,MACH,EAAAhe,eAAe09F,kDACfH,EAASznG,KAAKwK,OAEhBk9F,GAAe,GAETzB,EAAMr3F,eACZ,QACMs4F,GACF9nG,KAAK8oB,MACH,EAAAhe,eAAe29F,yDACf5B,EAAMjmG,KAAKwK,OAGf,MAEF,KAAK,EAAA+M,cAAcyuF,SACjBkB,GAAe,EACf,MAEF,KAAK,EAAA3vF,cAAcorC,KACjB8kD,EAAWxB,EAKf,GADAj4F,EAAWlC,KAAKm6F,IACXvD,EAAGtkD,KAAK,EAAA1xC,MAAMoN,OAAQ,CACzB,GAAI4oF,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAChB,MAMA,OAJA98C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,MAIb,OAAOwD,EAGT,eACE00F,EACA8E,GAAsB,GAKtB,IAAIM,GAAS,EACTC,GAAa,EACbC,EAA2B,KAC3BC,EAA2B,EAAAxmG,YAAYiW,KAC3C,GAAI8vF,IACE9E,EAAGtkD,KAAK,EAAA1xC,MAAM+tC,SAChButD,EAAatF,EAAGl4F,QAChBy9F,GAAe,EAAAxmG,YAAYg5C,QAClBioD,EAAGtkD,KAAK,EAAA1xC,MAAM8tC,YACvBwtD,EAAatF,EAAGl4F,QAChBy9F,GAAe,EAAAxmG,YAAY+4C,WAClBkoD,EAAGtkD,KAAK,EAAA1xC,MAAM6tC,WACvBytD,EAAatF,EAAGl4F,QAChBy9F,GAAe,EAAAxmG,YAAY84C,SAEzBmoD,EAAGe,QAAU,EAAA/2F,MAAM6iB,UAAU,CAC/B,IAAI8uB,EAAQqkD,EAAGmB,OACfnB,EAAGj1F,OACCi1F,EAAGe,QAAU,EAAA/2F,MAAMmwC,OACrB6lD,EAAGsB,QAAQ3lD,GACN2pD,IAAYA,EAAatF,EAAGl4F,SACjCy9F,GAAe,EAAAxmG,YAAY8tB,UAE3BmzE,EAAGoB,MAAMzlD,GAef,GAXIqkD,EAAGtkD,KAAK,EAAA1xC,MAAMsuC,eACZitD,EACF7oG,KAAK8oB,MACH,EAAAhe,eAAeg+F,+DACfxF,EAAGl4F,SAGLw9F,EAAatF,EAAGl4F,QAElBs9F,GAAS,GAEPpF,EAAG4B,iBAAkB,CAClBwD,IAAQE,EAAatF,EAAGl4F,SAC7B,IAAIgD,EAAa,EAAAH,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SACrEsD,EAAwB,KAS5B,IARIi6F,EAAarF,EAAGtkD,KAAK,EAAA1xC,MAAMswC,YACzB8qD,GACF1oG,KAAK8oB,MACH,EAAAhe,eAAe67F,oCACfv4F,EAAWhD,OAIbk4F,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,QAEhB,GADA/uC,EAAO1O,KAAKkmG,UAAU5C,IACjB50F,EAAM,OAAO,UAElBA,EAAO,EAAAT,KAAK4X,kBAAkBy9E,EAAGl4F,MAAMk4F,EAAGrnF,MAE5C,IAAI3M,EAAiC,KACrC,GAAIg0F,EAAGtkD,KAAK,EAAA1xC,MAAM2uC,UACZysD,GACF1oG,KAAK8oB,MACH,EAAAhe,eAAei+F,4CACf36F,EAAWhD,OAGXu9F,EACF3oG,KAAK8oB,MACH,EAAAhe,eAAek+F,oDACf56F,EAAWhD,OAGbu9F,GAAa,EAEfr5F,EAActP,KAAKwnG,gBAAgBlE,EAAI,IAClCh0F,GAAa,OAAO,KAE3B,IAAIu3F,EAAQ,EAAA54F,KAAKg7F,gBACf76F,EACAM,EACAY,EACAo5F,EACI,EAAAvwF,cAAcorC,KACdolD,EACE,EAAAxwF,cAAcyuF,SACd,EAAAzuF,cAAckiC,QACpB,EAAA9sC,MAAMZ,KAAYi8F,EAAYtF,EAAGl4F,UAGnC,OADAy7F,EAAMr0F,OAASq2F,EACRhC,EAOT,OALE7mG,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAGA,KAGT,cACEk4F,EACA9wF,EACAqB,EACA4vF,GAUA,IAAKH,EAAG4B,iBAKN,OAJAllG,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,MAAMk4F,EAAGrnF,MAEP,KAGT,IAAIrb,EAAO,EAAAqN,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SAC/D89F,GAAuB,EAEvBx1F,EAA6C,KACjD,GAAI4vF,EAAGtkD,KAAK,EAAA1xC,MAAMgW,UAAW,CAG3B,GAFA4lF,EAAiB5F,EAAGnnD,WACpBzoC,EAAiB1T,KAAKmpG,oBAAoB7F,IACrB,OAAO,KAC5B9wF,GAAS,EAAAnQ,YAAYukB,QAGvB,IAAK08E,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,WAKjB,OAJA78C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,MAAMk4F,EAAGrnF,KAAM,KAEb,KAGLitF,EAAiB,IACnBA,EAAiB5F,EAAGnnD,UAGtB,IAAIvtC,EAAa5O,KAAKopG,gBAAgB9F,GACtC,IAAK10F,EAAY,OAAO,KACxB,IAAI8nB,EAAW12B,KAAKkjG,oBAEhBmG,EAAwC,IAA5B72F,EAAQ,EAAAnQ,YAAYwtB,KAChCw5E,IACuB,GAArBz6F,EAAWzC,QACbnM,KAAK8oB,MACH,EAAAhe,eAAew+F,+CACf1oG,EAAKwK,OAGLwD,EAAWzC,QAAUyC,EAAW,GAAGU,aACrCtP,KAAK8oB,MACH,EAAAhe,eAAey+F,oDACf3oG,EAAKwK,QAKPoH,EAAQ,EAAAnQ,YAAYutB,KAClBhhB,EAAWzC,QACbnM,KAAK8oB,MACH,EAAAhe,eAAe0+F,sCACf5oG,EAAKwK,OAKX,IAAIyD,EAA8B,KAClC,GAAIy0F,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,UAChB5uC,EAAa7O,KAAKkmG,UAAU5C,GAAI,EAAM+F,IACrB,OAAO,KAGrBx6F,IACHA,EAAa,EAAAZ,KAAK4X,kBAChBy9E,EAAGl4F,MAAMk4F,EAAGrnF,MAETotF,GACHrpG,KAAK8oB,MACH,EAAAhe,eAAe44C,cACf70C,EAAWzD,QAKjB,IAAI6K,EAAY,EAAAhI,KAAK6X,mBACnBlX,EACAC,EACA6nB,GACA,EACA4sE,EAAGl4F,MAAM89F,EAAgB5F,EAAGrnF,MAG1B/F,EAAyB,KAC7B,GAAIotF,EAAGtkD,KAAK,EAAA1xC,MAAMywC,YAShB,GARIvrC,EAAQ,EAAAnQ,YAAY2tB,SACtBhwB,KAAK8oB,MACH,EAAAhe,eAAes1D,yDACfkjC,EAAGl4F,WAIP8K,EAAOlW,KAAKypG,oBAAoBnG,GAAI,IACzB,OAAO,UACP9wF,EAAQ,EAAAnQ,YAAY2tB,SAC/BhwB,KAAK8oB,MACH,EAAAhe,eAAe21D,gFACf6iC,EAAGl4F,MAAMk4F,EAAGrnF,MAIhB,IAAIkiB,EAAM,EAAAlwB,KAAKyP,0BACb9c,EACA8S,EACAuC,EACAC,EACArC,EACArB,EAAK,EAEL8wF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAGxB,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAGT,wBAAwBmlE,GACtB,IACI1iG,EADA6iG,EAAWH,EAAGnnD,SAEdhmC,EAAY,EAOhB,GAAImtF,EAAG3hF,OAAS,EAAArU,MAAMuN,UAMpB,GAJEja,EADE0iG,EAAG4B,iBACE,EAAAj3F,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SAExD,EAAA6C,KAAKy7F,gCAAgCpG,EAAGl4F,MAAMk4F,EAAGrnF,OAErDqnF,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,WAKjB,OAJA78C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,MAAMk4F,EAAGrnF,KAAM,KAEb,UAQT9F,EAAY,EACZ3L,OAAO84F,EAAG3hF,OAAS,EAAArU,MAAMuvC,WACzBj8C,EAAO,EAAAqN,KAAKy7F,gCAAgCpG,EAAGl4F,MAAMk4F,EAAGnnD,WAK1D,IAAI+sD,EAAiB5F,EAAGrnF,IACpBrN,EAAa5O,KAAKopG,gBAAgB9F,GACtC,OAAK10F,EAEE5O,KAAK2pG,8BAA8BrG,EAAI1iG,EAAMgO,EAAYuH,EAAWstF,EAAUyF,GAF7D,KAKlB,8BACN5F,EACA1iG,EACAgO,EACAuH,EACAstF,GAAgB,EAChByF,GAAsB,GAElBzF,EAAW,IAAGA,EAAW7iG,EAAKwK,MAAMgB,OACpC88F,EAAiB,IAAGA,EAAiBzF,GAEzC,IAAI50F,EAA8B,KAClC,GAAiB,GAAbsH,GAAuCmtF,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,QAEvD,KADA5uC,EAAa7O,KAAKkmG,UAAU5C,IACX,OAAO,UAExBz0F,EAAa,EAAAZ,KAAK4X,kBAAkBy9E,EAAGl4F,MAAMk4F,EAAGrnF,MAGlD,GAAI9F,IACGmtF,EAAGtkD,KAAK,EAAA1xC,MAAMqwC,oBAKjB,OAJA39C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,MAAMk4F,EAAGrnF,KAAM,MAEb,KAIX,IAAIhG,EAAY,EAAAhI,KAAK6X,mBACnBlX,EACAC,EACA,MACA,EACAy0F,EAAGl4F,MAAM89F,EAAgB5F,EAAGrnF,MAG1B/F,EAAyB,KAC7B,GAAIC,EACF,GAAImtF,EAAGtkD,KAAK,EAAA1xC,MAAMywC,WAChB7nC,EAAOlW,KAAKypG,oBAAoBnG,GAAI,OAC/B,CACL,IAAIsG,EAAiB5pG,KAAKwnG,gBAAgBlE,EAAI,GAC1CsG,IAAgB1zF,EAAO,EAAAjI,KAAK47F,0BAA0BD,QAEvD,CACL,IAAKtG,EAAGtkD,KAAK,EAAA1xC,MAAMywC,WAKjB,OAJA/9C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,MAAMk4F,EAAGrnF,KAAM,KAEb,KAET/F,EAAOlW,KAAKypG,oBAAoBnG,GAAI,GAEtC,IAAKptF,EAAM,OAAO,KAElB,IAAIhF,EAAc,EAAAjD,KAAKyP,0BACrB9c,EACA,KACAqV,EACAC,EACA,KACA,EAAA7T,YAAYiW,KACZnC,EACAmtF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAExB,OAAO,EAAAhO,KAAK67F,yBAAyB54F,GAGvC,sBACEoyF,EACA9wF,EACAqB,EACA4vF,GAUA,IAAIsG,EAAczG,EAAG3hF,OAAS,EAAArU,MAAMmrB,UAEpC,IAAK6qE,EAAG4B,iBAKN,OAJAllG,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAEE,KAGT,IAAIgD,EAAa,EAAAH,KAAKM,2BACpB+0F,EAAGoC,iBACHpC,EAAGl4F,SAGDsI,EAA6C,KACjD,GAAI4vF,EAAGtkD,KAAK,EAAA1xC,MAAMgW,UAAW,CAE3B,KADA5P,EAAiB1T,KAAKmpG,oBAAoB7F,IACrB,OAAO,KAC5B9wF,GAAS,EAAAnQ,YAAYukB,QAGvB,IAAI1X,EAAoC,KACxC,GAAIo0F,EAAGtkD,KAAK,EAAA1xC,MAAMktC,SAAU,CAC1B,IAAIj5C,EAAIvB,KAAKkmG,UAAU5C,GACvB,IAAK/hG,EAAG,OAAO,KACf,GAAIA,EAAEqM,MAAQ,EAAAJ,SAASmK,UAKrB,OAJA3X,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfpkG,EAAE6J,OAEG,KAET8D,EAA6B3N,EAG/B,IAAIoS,EAA0C,KAC9C,GAAI2vF,EAAGtkD,KAAK,EAAA1xC,MAAMqtC,YAAa,CACzBovD,GACF/pG,KAAK8oB,MACH,EAAAhe,eAAek/F,oDACf1G,EAAGl4F,SAGP,EAAG,CACD,IAAIsD,EAAO1O,KAAKkmG,UAAU5C,GAC1B,IAAK50F,EAAM,OAAO,KACbq7F,IACEp2F,EACAA,EAAgBjH,KAAoBgC,GADnBiF,EAAkB,CAAgBjF,UAGnD40F,EAAGtkD,KAAK,EAAA1xC,MAAMoN,QAGzB,IAAK4oF,EAAGtkD,KAAK,EAAA1xC,MAAMywC,WAKjB,OAJA/9C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAGT,IACI8F,EADA0C,EAAU,IAAInM,MAyBlB,GAvBIsiG,GACFv/F,QAAQmJ,GACRzC,EAAc,EAAAjD,KAAKg8F,2BACjB77F,EACAsF,EACAxE,EACA0E,EACAC,EACArB,EACA8wF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,OAGxB/K,EAAc,EAAAjD,KAAKi8F,uBACjB97F,EACAsF,EACAxE,EACAyE,EACAC,EACAC,EACArB,EACA8wF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,OAGrBqnF,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,YACjB,EAAG,CACD,IAAI7wB,EAASntB,KAAKmqG,iBAAiB7G,EAAIpyF,GACvC,GAAIic,EAAQvZ,EAAQlH,KAA2BygB,QAG7C,GADAntB,KAAK2jG,cAAcL,GACfA,EAAGtkD,KAAK,EAAA1xC,MAAMqxC,WAKhB,OAJA3+C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,YAGHk4F,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,aAG1B,OADA9sC,EAAY9F,MAAMiB,IAAMi3F,EAAGrnF,IACpB/K,EAGT,qBAAqBoyF,GAInB,IACI1iG,EADA6iG,EAAWH,EAAGnnD,SASlB,GALEv7C,EADE0iG,EAAG4B,iBACE,EAAAj3F,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SAExD,EAAA6C,KAAKy7F,gCAAgCpG,EAAGl4F,MAAMk4F,EAAGrnF,OAGrDqnF,EAAGtkD,KAAK,EAAA1xC,MAAMywC,WAKjB,OAJA/9C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,MAAMk4F,EAAGrnF,KAAM,KAEb,KAGT,IAAIrI,EAAU,IAAInM,MACdyJ,EAAc,EAAAjD,KAAKi8F,uBACrBtpG,EACA,GACA,KACA,KACAgT,EACA,KACA,EAAAvR,YAAYiW,KACZgrF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAExB,IAAKqnF,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,YACjB,EAAG,CACD,IAAI7wB,EAASntB,KAAKmqG,iBAAiB7G,EAAIpyF,GACvC,GAAIic,EAAQvZ,EAAQlH,KAA2BygB,QAG7C,GADAntB,KAAK2jG,cAAcL,GACfA,EAAGtkD,KAAK,EAAA1xC,MAAMqxC,WAKhB,OAJA3+C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,YAGHk4F,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,aAG1B,OADA9sC,EAAY9F,MAAMiB,IAAMi3F,EAAGrnF,IACpB,EAAAhO,KAAKm8F,sBAAsBl5F,GAGpC,iBACEoyF,EACAznF,GAUA,IAAI4nF,EAAWH,EAAGrnF,IACd8tF,EAAcluF,EAAOjO,MAAQ,EAAAJ,SAASsQ,qBAEtCjK,EAAqC,KACzC,GAAIyvF,EAAGtkD,KAAK,EAAA1xC,MAAM2wC,IAAK,CACrB,EAAG,CACD,IAAIr/B,EAAY5e,KAAK0jG,eAAeJ,GACpC,IAAK1kF,EAAW,MACX/K,EACAA,EAAWnH,KAAoBkS,GADnB/K,EAAa,CAAgB+K,SAEvC0kF,EAAGtkD,KAAK,EAAA1xC,MAAM2wC,KACnBpqC,GAAck2F,GAChB/pG,KAAK8oB,MACH,EAAAhe,eAAey6F,8BACf,EAAAh4F,MAAMZ,KAAKkH,EAAW,GAAGzI,MAAOyI,EAAWA,EAAW1H,OAAS,GAAGf,QAMxE,IAAIoH,EAAQqJ,EAAOrJ,MAAQ,EAAAnQ,YAAY2tB,QAGnC+5E,IAAav3F,GAAS,EAAAnQ,YAAYgoG,SAEtC,IAAIC,EAAc,EACdC,EAAY,EACZjH,EAAGtkD,KAAK,EAAA1xC,MAAM+tC,SACZ0uD,GACF/pG,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,QAAS,UAGhBoH,GAAS,EAAAnQ,YAAYg5C,OACrBivD,EAAchH,EAAGnnD,SACjBouD,EAAYjH,EAAGrnF,KACNqnF,EAAGtkD,KAAK,EAAA1xC,MAAM6tC,UACnB4uD,GACF/pG,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,QAAS,WAGhBoH,GAAS,EAAAnQ,YAAY84C,QACrBmvD,EAAchH,EAAGnnD,SACjBouD,EAAYjH,EAAGrnF,KACNqnF,EAAGtkD,KAAK,EAAA1xC,MAAM8tC,aACnB2uD,GACF/pG,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,QAAS,aAGhBoH,GAAS,EAAAnQ,YAAY+4C,UACrBkvD,EAAchH,EAAGnnD,SACjBouD,EAAYjH,EAAGrnF,KAGjB,IAAIuuF,EAAc,EACdC,EAAY,EACZC,EAAgB,EAChBC,EAAc,EACdrH,EAAGtkD,KAAK,EAAA1xC,MAAM2iB,SACZ85E,GACF/pG,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,QAAS,UAGhBoH,GAAS,EAAAnQ,YAAY4tB,OACrBu6E,EAAclH,EAAGnnD,SACjBsuD,EAAYnH,EAAGrnF,MAEfzJ,GAAS,EAAAnQ,YAAY2vB,SACjBsxE,EAAGtkD,KAAK,EAAA1xC,MAAM8iB,YACZ25E,GACF/pG,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,QAAS,YAGhBoH,GAAS,EAAAnQ,YAAY+tB,SACrBs6E,EAAgBpH,EAAGnnD,SACnBwuD,EAAcrH,EAAGrnF,KAEfJ,EAAOrJ,MAAQ,EAAAnQ,YAAYukB,UAASpU,GAAS,EAAAnQ,YAAYuoG,kBAG/D,IAAIC,EAAqB,EACrBC,EAAmB,EACvB,GAAIxH,EAAGe,QAAU,EAAA/2F,MAAM6iB,SAAU,CAC/B,IAAI8uB,EAAQqkD,EAAGmB,OACfnB,EAAGj1F,OACCi1F,EAAGe,QAAU,EAAA/2F,MAAMmwC,OACrB6lD,EAAGsB,QAAQ3lD,GACXzsC,GAAS,EAAAnQ,YAAY8tB,SACrB06E,EAAgBvH,EAAGnnD,SACnB2uD,EAAcxH,EAAGrnF,KAEjBqnF,EAAGoB,MAAMzlD,GAKb,IA+DIr+C,EA/DAq+C,EAAQqkD,EAAGmB,OACX2D,GAAgB,EAChB72E,GAAW,EAGX83E,GAAW,EACXxuC,EAAgB,EAChBkwC,EAAc,EAyDlB,GAxDKhB,IACCzG,EAAGtkD,KAAK,EAAA1xC,MAAMsiB,KACZ0zE,EAAGe,MAAK,EAAM,EAAAxqD,mBAAmB2E,SAAW,EAAAlxC,MAAMmL,YAAe6qF,EAAGhnD,mBAYtEgnD,EAAGoB,MAAMzlD,IAXTzsC,GAAS,EAAAnQ,YAAYutB,IACrB2B,GAAW,EACXspC,EAAWyoC,EAAGnnD,SACd4uD,EAASzH,EAAGrnF,IACRzJ,EAAQ,EAAAnQ,YAAY8tB,UACtBnwB,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMy/F,EAAeC,GAAc,aAMnCxH,EAAGtkD,KAAK,EAAA1xC,MAAMuiB,KACnByzE,EAAGe,MAAK,EAAM,EAAAxqD,mBAAmB2E,SAAW,EAAAlxC,MAAMmL,YAAe6qF,EAAGhnD,mBAYtEgnD,EAAGoB,MAAMzlD,IAXTzsC,GAAS,EAAAnQ,YAAYwtB,IACrBw5E,GAAW,EACXxuC,EAAWyoC,EAAGnnD,SACd4uD,EAASzH,EAAGrnF,IACRzJ,EAAQ,EAAAnQ,YAAY8tB,UACtBnwB,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMy/F,EAAeC,GAAc,aAMnCxH,EAAGtkD,KAAK,EAAA1xC,MAAMqN,eAEvBytF,GAAgB,GADhB51F,GAAS,EAAAnQ,YAAYsY,aAET,EAAAtY,YAAY4tB,QACtBjwB,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMo/F,EAAaC,GAAY,UAGlCj4F,EAAQ,EAAAnQ,YAAY+tB,UACtBpwB,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMs/F,EAAeC,GAAc,YAGtCn4F,EAAQ,EAAAnQ,YAAY8tB,UACtBnwB,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMy/F,EAAeC,GAAc,cAO1C1C,EACFxnG,EAAO,EAAAqN,KAAK+8F,4BAA4B1H,EAAGl4F,aACtC,CACL,IAAMmmB,IAAY83E,GAAa/F,EAAGtkD,KAAK,EAAA1xC,MAAMuwC,aAAc,CAErDrrC,EAAQ,EAAAnQ,YAAYg5C,OACtBr7C,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMk/F,EAAaC,GAAY,UAE3B/3F,EAAQ,EAAAnQ,YAAY+4C,UAC7Bp7C,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMk/F,EAAaC,GAAY,aAE3B/3F,EAAQ,EAAAnQ,YAAY84C,SAC7Bn7C,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMk/F,EAAaC,GAAY,aAGlC/3F,EAAQ,EAAAnQ,YAAY4tB,QACtBjwB,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMo/F,EAAaC,GAAY,UAGlCj4F,EAAQ,EAAAnQ,YAAY+tB,UACtBpwB,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMs/F,EAAeC,GAAc,YAG1C,IAAIM,EAAWjrG,KAAKkrG,+BAA+B5H,EAAI9wF,EAAOqB,GAC9D,OAAKo3F,GASL3H,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPutD,IATDz4F,EAAQ,EAAAnQ,YAAY8tB,UACtBnwB,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMy/F,EAAeC,GAAc,YAGnC,MAKX,IAAKxH,EAAG4B,iBAKN,OAJAllG,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAEE,KAETxK,EAAO,EAAAqN,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SAEjE,IAAIsI,EAA6C,KACjD,GAAI4vF,EAAGtkD,KAAK,EAAA1xC,MAAMgW,UAAW,CAC3B,IAAI6nF,EAAsB7H,EAAGnnD,SAE7B,KADAzoC,EAAiB1T,KAAKmpG,oBAAoB7F,IACrB,OAAO,KACxB8E,EACFpoG,KAAK8oB,MACH,EAAAhe,eAAesgG,2DACf9H,EAAGl4F,MAAM+/F,EAAqB7H,EAAGrnF,MAE1BsV,GAAY83E,EACrBrpG,KAAK8oB,MACH,EAAAhe,eAAeugG,wCACf/H,EAAGl4F,MAAM+/F,EAAqB7H,EAAGrnF,MAGnCzJ,GAAS,EAAAnQ,YAAYukB,QAKzB,GAAI08E,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,WAAY,CAC5B,IAAIqsD,EAAiB5F,EAAGnnD,SACpBvtC,EAAa5O,KAAKopG,gBAAgB9F,EAAI8E,GAC1C,IAAKx5F,EAAY,OAAO,KACxB,IAAI8nB,EAAW12B,KAAKkjG,oBACpB,GAAIkF,EACF,IAAK,IAAI/nG,EAAI,EAAGwX,EAAIjJ,EAAWzC,OAAQ9L,EAAIwX,IAAKxX,EAAG,CACjD,IAAIgmG,EAAYz3F,EAAWvO,GAC3B,GAAIgmG,EAAU12E,MACZ,EAAAttB,YAAYg5C,OACZ,EAAAh5C,YAAY+4C,UACZ,EAAA/4C,YAAY84C,QACZ,EAAA94C,YAAY8tB,UACX,CACD,IAAI9X,EAA2B,EAAApK,KAAKq9F,uBAClCjF,EAAUzlG,KACVylG,EAAU33F,KACV,KACA,KACA23F,EAAU7zF,MAAQ,EAAAnQ,YAAY2vB,SAC9Bq0E,EAAUj7F,OAEZiN,EAAyBiF,eAAiBjd,EAC1CgmG,EAAUhuF,yBAA2BA,EACrCwD,EAAOjI,QAAQlH,KAAK2L,SAGfkZ,EACL3iB,EAAWzC,QACbnM,KAAK8oB,MACH,EAAAhe,eAAe0+F,sCACf5oG,EAAKwK,OAGAi+F,IACgB,GAArBz6F,EAAWzC,QACbnM,KAAK8oB,MACH,EAAAhe,eAAew+F,+CACf1oG,EAAKwK,OAGLwD,EAAWzC,QAAUyC,EAAW,GAAGU,aACrCtP,KAAK8oB,MACH,EAAAhe,eAAey+F,oDACf3oG,EAAKwK,QAKX,IAAIyD,EAA8B,KAClC,GAAIy0F,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,QAahB,GAZI78C,EAAKgN,MAAQ,EAAAJ,SAASmN,YACxB3a,KAAK8oB,MACH,EAAAhe,eAAeygG,2DACfjI,EAAGl4F,SAEIi+F,GACTrpG,KAAK8oB,MACH,EAAAhe,eAAe0gG,oDACflI,EAAGl4F,SAGPyD,EAAa7O,KAAKkmG,UAAU5C,EAAI1iG,EAAKgN,MAAQ,EAAAJ,SAASmN,aAAe0uF,IAChEx6F,EAAY,OAAO,UAExBA,EAAa,EAAAZ,KAAK4X,kBAAkBy9E,EAAGl4F,MAAMk4F,EAAGrnF,MAC3CotF,GAAYzoG,EAAKgN,MAAQ,EAAAJ,SAASmN,aACrC3a,KAAK8oB,MACH,EAAAhe,eAAe44C,cACf70C,EAAWzD,OAKjB,IAAI6K,EAAY,EAAAhI,KAAK6X,mBACnBlX,EACAC,EACA6nB,GACA,EACA4sE,EAAGl4F,MAAM89F,EAAgB5F,EAAGrnF,MAG1B/F,EAAyB,KAC7B,GAAIotF,EAAGtkD,KAAK,EAAA1xC,MAAMywC,YAahB,GAZIvrC,EAAQ,EAAAnQ,YAAY2tB,QACtBhwB,KAAK8oB,MACH,EAAAhe,eAAes1D,yDACfkjC,EAAGl4F,SAEIoH,EAAQ,EAAAnQ,YAAY+tB,UAC7BpwB,KAAK8oB,MACH,EAAAhe,eAAe2gG,qEACfnI,EAAGl4F,QAASxK,EAAKqL,MAGrBiK,EAAOlW,KAAKypG,oBAAoBnG,GAAI,IAC/BptF,EAAM,OAAO,UACP1D,EAAQ,EAAAnQ,YAAY2tB,SAAa+5E,GAC5C/pG,KAAK8oB,MACH,EAAAhe,eAAe21D,gFACf6iC,EAAGl4F,SAIP,IAAIsgG,EAAY,EAAAz9F,KAAK09F,wBACnB/qG,EACA8S,EACAuC,EACAC,EACArC,EACArB,EACA8wF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAGxB,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPguD,EAEF,GAAItD,EACTpoG,KAAK8oB,MACH,EAAAhe,eAAe8gG,sCACfhrG,EAAKwK,WAGF,KAAImmB,IAAY83E,EAOhB,CACD72F,EAAQ,EAAAnQ,YAAY+tB,UACtBpwB,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMs/F,EAAeC,GAAc,YAItCn4F,EAAQ,EAAAnQ,YAAYutB,KACtB5vB,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MArRW,EACF,GAoRgB,OAI5BoH,EAAQ,EAAAnQ,YAAYwtB,KACtB7vB,KAAK8oB,MACH,EAAAhe,eAAew6F,gCACfhC,EAAGl4F,MAAMyvD,EAAUkwC,GAAS,OAIhC,IAAIr8F,EAAwB,KAU5B,GATI40F,EAAGtkD,KAAK,EAAA1xC,MAAMswC,WAChB59C,KAAK8oB,MACH,EAAAhe,eAAe+gG,sCACfvI,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAGtBqnF,EAAGtkD,KAAK,EAAA1xC,MAAMmW,eAChBjR,GAAS,EAAAnQ,YAAYilG,qBAEnBhE,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,QAEhB,GADA/uC,EAAO1O,KAAKkmG,UAAU5C,IACjB50F,EAAM,OAAO,UAElB1O,KAAK8oB,MACH,EAAAhe,eAAe44C,cACf4/C,EAAGl4F,SAGP,IAAIkE,EAAiC,KACrC,GAAIg0F,EAAGtkD,KAAK,EAAA1xC,MAAM2uC,UAChB3sC,EAActP,KAAKwnG,gBAAgBlE,IAC9Bh0F,GAAa,OAAO,KAE3B,IAAIlE,EAAQk4F,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,KAC7BzJ,EAAQ,EAAAnQ,YAAYilG,sBAA0B90F,EAAQ,EAAAnQ,YAAY4tB,QAAW85E,GAAez6F,IAC/FtP,KAAK8oB,MACH,EAAAhe,eAAe28F,iEACfr8F,GAGJ,IAAI0gG,EAAW,EAAA79F,KAAKq9F,uBAClB1qG,EACA8N,EACAY,EACAuE,EACArB,EACApH,GAGF,OADAk4F,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPouD,EApEP9rG,KAAK8oB,MACH,EAAAhe,eAAe21D,gFACf7/D,EAAKwK,OAoET,OAAO,KAGT,+BACEk4F,EACA9wF,EACAqB,GAKIA,GAAcA,EAAW1H,QAC3BnM,KAAK8oB,MACH,EAAAhe,eAAey6F,8BACf,EAAAh4F,MAAMZ,KAAKkH,EAAW,GAAGzI,MAAOyI,EAAWA,EAAW1H,OAAS,GAAGf,QAItE,IAAIgB,EAAQk3F,EAAGnnD,SACf,GAAImnD,EAAG4B,iBAAkB,CAEvB,GAAU,OADD5B,EAAGoC,iBAEV,GAAIpC,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,OAAQ,CACxB,IAAIpnC,EAAUrW,KAAKkmG,UAAU5C,GAC7B,IAAKjtF,EAAS,OAAO,KACrB,GAAIA,EAAQzI,MAAQ,EAAAJ,SAASmK,UAK3B,OAJA3X,KAAK8oB,MACH,EAAAhe,eAAe44C,cACf4/C,EAAGl4F,SAEE,KAET,GAAIk4F,EAAGtkD,KAAK,EAAA1xC,MAAMwwC,cAAe,CAC/B,GAAIwlD,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,OAAQ,CACxB,IAAInnC,EAAYtW,KAAKkmG,UAAU5C,GAC/B,OAAKhtF,EACE,EAAArI,KAAK89F,gCAA+C11F,EAASC,EAAW9D,EAAO8wF,EAAGl4F,MAAMgB,EAAOk3F,EAAGrnF,MADlF,KAGvBjc,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,YAIhBpL,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAGP,OAAO,KAGT,eACEk4F,EACA9wF,EACAqB,EACA4vF,GAKA,GAAIH,EAAG4B,iBAAkB,CACvB,IAAI92F,EAAa,EAAAH,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SACzE,GAAIk4F,EAAGtkD,KAAK,EAAA1xC,MAAMywC,WAAY,CAC5B,IAAInqC,EAAU,IAAInM,MACdyJ,EAAc,EAAAjD,KAAK8X,2BACrB3X,EACAwF,EACAC,EACArB,EACA8wF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAExB,MAAQqnF,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,aAAa,CACjC,IAAI7wB,EAASntB,KAAKujG,uBAAuBD,EAAIpyF,GAC7C,GAAIic,EAAQvZ,EAAQlH,KAAKygB,QAGvB,GADAntB,KAAK2jG,cAAcL,GACfA,EAAGtkD,KAAK,EAAA1xC,MAAMqxC,WAKhB,OAJA3+C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAMb,OAFA8F,EAAY9F,MAAMiB,IAAMi3F,EAAGrnF,IAC3BqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPxsC,EAEPlR,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAGP,OAAO,KAGT,YACEk4F,EACAG,EACAnvF,GAKA,IAAID,EAAuC,KAC3C,GAAIivF,EAAGtkD,KAAK,EAAA1xC,MAAMywC,WAAY,CAC5B,IAAInqC,EAAU,IAAInM,MAClB,MAAQ67F,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,aAAa,CACjC,IAAI7wB,EAASntB,KAAKgsG,kBAAkB1I,GACpC,IAAKn2E,EAAQ,OAAO,KAEpB,GADAvZ,EAAQlH,KAAKygB,IACRm2E,EAAGtkD,KAAK,EAAA1xC,MAAMoN,OAAQ,CACzB,GAAI4oF,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,YAChB,MAMA,OAJAh+C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,MAIb,GAAIk4F,EAAGtkD,KAAK,EAAA1xC,MAAMotC,MAAO,CACvB,IAAI4oD,EAAGtkD,KAAK,EAAA1xC,MAAMqvC,eAOhB,OAJA38C,KAAK8oB,MACH,EAAAhe,eAAemmB,wBACfqyE,EAAGl4F,SAEE,KANPiJ,EAAO,EAAApG,KAAKg+F,8BAA8B3I,EAAG17D,aAAc07D,EAAGl4F,SASlE,IAAI+yB,EAAM,EAAAlwB,KAAKi+F,sBAAsBt4F,EAASS,EAAMC,EAAWgvF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MACjFtH,EAAewpB,EAAIxpB,aAOvB,OANqB,OAAjBA,GAA0B3U,KAAK8iG,QAAQ/1F,IAAI4H,KAC7C3U,KAAKgjG,UAAU71F,IAAIwH,EAAc3U,KAAKqjG,eACtCrjG,KAAK6iG,QAAQn2F,KAAKiI,GAClB3U,KAAK8iG,QAAQr8E,IAAI9R,IAEnB2uF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EACF,GAAImlE,EAAGtkD,KAAK,EAAA1xC,MAAMwU,UACvB,GAAIwhF,EAAGtkD,KAAK,EAAA1xC,MAAMotC,MAAO,CACvB,GAAI4oD,EAAGtkD,KAAK,EAAA1xC,MAAMqvC,eAAgB,CAChCtoC,EAAO,EAAApG,KAAKg+F,8BAA8B3I,EAAG17D,aAAc07D,EAAGl4F,SAC9D,IAAI+yB,EAAM,EAAAlwB,KAAKi+F,sBAAsB,KAAM73F,EAAMC,EAAWgvF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAC9EtH,EAAenK,OAAO2zB,EAAIxpB,cAC1BhJ,EAAS23F,EAAG33F,OACZoQ,EAAcpQ,EAAOoQ,YAQzB,OAPKA,EACKA,EAAY7O,SAASyH,IAAeoH,EAAYrP,KAAKiI,GAD7ChJ,EAAOoQ,YAAc,CAAEpH,GAEpC3U,KAAK8iG,QAAQ/1F,IAAI4H,KACpB3U,KAAKgjG,UAAU71F,IAAIwH,EAAc3U,KAAKqjG,eACtCrjG,KAAK6iG,QAAQn2F,KAAKiI,IAEpB2uF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAEPn+B,KAAK8oB,MACH,EAAAhe,eAAemmB,wBACfqyE,EAAGl4F,cAIPpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,aAIhBpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAGhB,OAAO,KAGT,kBACEk4F,GAKA,GAAIA,EAAG4B,iBAAkB,CACvB,IAAI92F,EAAa,EAAAH,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SACrE+gG,EAA4C,KAChD,GAAI7I,EAAGtkD,KAAK,EAAA1xC,MAAMysC,IAAK,CACrB,IAAIupD,EAAG4B,eAAe,EAAArrD,mBAAmB0E,QAOvC,OAJAv+C,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAEE,KANP+gG,EAAe,EAAAl+F,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SAS3E,OAAO,EAAA6C,KAAKm+F,mBACVh+F,EACA+9F,EACAA,EACI,EAAA5+F,MAAMZ,KAAKyB,EAAWhD,MAAO+gG,EAAa/gG,OAC1CgD,EAAWhD,OAQnB,OALEpL,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAGA,KAGT,wBACEk4F,EACAG,EACAK,EACAC,GAKA,IAAInjG,EAAO0iG,EAAGoC,iBACVt6F,EAAQk4F,EAAGl4F,QACX+yB,EAAM,EAAAlwB,KAAKi+F,sBAAsB,CACnC,EAAAj+F,KAAKm+F,mBACH,EAAAn+F,KAAKM,2BAA2B3N,EAAMwK,GACtC,EAAA6C,KAAKM,2BAA2B,UAAW+0F,EAAGl4F,MAAM04F,EAAcC,IAClE34F,IAED,MAAM,EAAOk4F,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAEtC,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAGT,YACEmlE,GAOA,IAAIG,EAAWH,EAAGnnD,SACdvoC,EAAsC,KACtC8B,EAA6C,KAC7C22F,GAAW,EACf,GAAI/I,EAAGtkD,KAAK,EAAA1xC,MAAMywC,WAEhB,IADAnqC,EAAU,IAAInM,OACN67F,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,aAAa,CACjC,IAAI7wB,EAASntB,KAAKssG,uBAAuBhJ,GACzC,IAAKn2E,EAAQ,OAAO,KAEpB,GADAvZ,EAAQlH,KAAKygB,IACRm2E,EAAGtkD,KAAK,EAAA1xC,MAAMoN,OAAQ,CACzB,GAAI4oF,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,YAChB,MAMA,OAJAh+C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,WAIR,GAAIk4F,EAAGtkD,KAAK,EAAA1xC,MAAMwU,UAAW,CAClC,IAAIwhF,EAAGtkD,KAAK,EAAA1xC,MAAMysC,IAehB,OAJA/5C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,MAEP,KAdP,IAAIk4F,EAAG4B,iBAOL,OAJAllG,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAEE,KANPsK,EAAgB,EAAAzH,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,cAevE,GAAIk4F,EAAGtkD,KAAK,EAAA1xC,MAAMmL,WAAY,EAAAohC,mBAAmB2E,QAAS,CAC/D,IAAI59C,EAAO0iG,EAAGoC,iBACVt6F,EAAQk4F,EAAGl4F,QAQf,GAPAwI,EAAU,CACR,EAAA3F,KAAKs+F,wBACH,EAAAt+F,KAAKM,2BAA2B,UAAWnD,GAC3C,EAAA6C,KAAKM,2BAA2B3N,EAAMwK,GACtCA,IAGAk4F,EAAGtkD,KAAK,EAAA1xC,MAAMoN,OAMhB,OAJA1a,KAAK8oB,MACH,EAAAhe,eAAeykB,gBACf+zE,EAAGl4F,SAEE,UAGTihG,GAAW,EAGb,GAAIA,GAAY/I,EAAGtkD,KAAK,EAAA1xC,MAAMotC,MAAO,CACnC,GAAI4oD,EAAGtkD,KAAK,EAAA1xC,MAAMqvC,eAAgB,CAChC,IACIxe,EADA9pB,EAAO,EAAApG,KAAKg+F,8BAA8B3I,EAAG17D,aAAc07D,EAAGl4F,SAE9DsK,GACFlL,QAAQoJ,GACRuqB,EAAM,EAAAlwB,KAAKu+F,kCAAkC92F,EAAerB,EAAMivF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,OAExFkiB,EAAM,EAAAlwB,KAAKw+F,sBAAsB74F,EAASS,EAAMivF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAExE,IAAItH,EAAewpB,EAAIxpB,aAMvB,OALK3U,KAAK8iG,QAAQ/1F,IAAI4H,KACpB3U,KAAKgjG,UAAU71F,IAAIwH,EAAc3U,KAAKqjG,eACtCrjG,KAAK6iG,QAAQn2F,KAAKiI,IAEpB2uF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAEPn+B,KAAK8oB,MACH,EAAAhe,eAAemmB,wBACfqyE,EAAGl4F,cAIPpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,QAGhB,OAAO,KAGT,uBACEk4F,GAKA,GAAIA,EAAG4B,eAAe,EAAArrD,mBAAmB0E,QAAS,CAChD,IAAInwC,EAAa,EAAAH,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SACrE+gG,EAA4C,KAChD,GAAI7I,EAAGtkD,KAAK,EAAA1xC,MAAMysC,IAAK,CACrB,IAAIupD,EAAG4B,iBAOL,OAJAllG,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAEE,KANP+gG,EAAe,EAAAl+F,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SAS3E,OAAO,EAAA6C,KAAKs+F,wBACVn+F,EACA+9F,EACAA,EACI,EAAA5+F,MAAMZ,KAAKyB,EAAWhD,MAAO+gG,EAAa/gG,OAC1CgD,EAAWhD,OAQnB,OALEpL,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAGA,KAGT,kBACEk4F,EACAG,GAKA,GAAIH,EAAG4B,iBAAkB,CACvB,IAAIiH,EAAe,EAAAl+F,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SAC3E,GAAIk4F,EAAGtkD,KAAK,EAAA1xC,MAAM2uC,QAAS,CACzB,GAAIqnD,EAAG4B,iBAAkB,CACvB,IAAI92F,EAAa,EAAAH,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SACrE+yB,EAAM,EAAAlwB,KAAKy+F,4BAA4Bt+F,EAAY+9F,EAAc7I,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAE3F,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAEPn+B,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,cAIPpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAGP,OAAO,KAGT,eACEk4F,EACAqJ,GAAiB,GAKjB,IAAI1tD,EAAQqkD,EAAGmB,OAEXzwF,EAA8B,KAClC,OAFYsvF,EAAGj1F,QAGb,KAAK,EAAAf,MAAMoP,MACT1I,EAAYhU,KAAK4sG,WAAWtJ,GAC5B,MAEF,KAAK,EAAAh2F,MAAM4gB,MACTla,EAAYhU,KAAKukG,cAAcjB,EAAI,EAAAjhG,YAAY6rB,MAAO,KAAMo1E,EAAGnnD,UAC/D,MAEF,KAAK,EAAA7uC,MAAMsP,SACT5I,EAAYhU,KAAK6sG,cAAcvJ,GAC/B,MAEF,KAAK,EAAAh2F,MAAMuP,GACT7I,EAAYhU,KAAK8sG,iBAAiBxJ,GAClC,MAEF,KAAK,EAAAh2F,MAAMiQ,IACTvJ,EAAYhU,KAAK+sG,kBAAkBzJ,GACnC,MAEF,KAAK,EAAAh2F,MAAMqQ,GACT3J,EAAYhU,KAAKgtG,iBAAiB1J,GAClC,MAEF,KAAK,EAAAh2F,MAAMytC,IACT/mC,EAAYhU,KAAKukG,cAAcjB,EAAI,EAAAjhG,YAAY04C,IAAK,KAAMuoD,EAAGnnD,UAC7D,MAEF,KAAK,EAAA7uC,MAAMkuC,IACTxnC,EAAYhU,KAAKukG,cAAcjB,EAAI,EAAAjhG,YAAYiW,KAAM,KAAMgrF,EAAGnnD,UAC9D,MAEF,KAAK,EAAA7uC,MAAMywC,UACT/pC,EAAYhU,KAAKypG,oBAAoBnG,EAAIqJ,GACzC,MAEF,KAAK,EAAAr/F,MAAM2Q,OACL0uF,GACF3sG,KAAK8oB,MACH,EAAAhe,eAAemiG,2DACf3J,EAAGl4F,SAGP4I,EAAYhU,KAAKktG,YAAY5J,GAC7B,MAEF,KAAK,EAAAh2F,MAAMowC,UACT,OAAO,EAAAzvC,KAAKk/F,qBAAqB7J,EAAGl4F,MAAMk4F,EAAGnnD,WAE/C,KAAK,EAAA7uC,MAAM6Q,OACTnK,EAAYhU,KAAKotG,qBAAqB9J,GACtC,MAEF,KAAK,EAAAh2F,MAAM8Q,MACTpK,EAAYhU,KAAKqtG,oBAAoB/J,GACrC,MAEF,KAAK,EAAAh2F,MAAM+Q,IACTrK,EAAYhU,KAAKstG,kBAAkBhK,GACnC,MAEF,KAAK,EAAAh2F,MAAMmR,KACTzK,EAAYhU,KAAKutG,mBAAmBjK,GACpC,MAEF,KAAK,EAAAh2F,MAAMoR,MACT1K,EAAYhU,KAAKwtG,oBAAoBlK,GACrC,MAEF,KAAK,EAAAh2F,MAAMguC,KACT,GAAIgoD,EAAGe,MAAK,EAAO,EAAAxqD,mBAAmB2E,SAAW,EAAAlxC,MAAMmL,WAAY,CACjEzE,EAAYhU,KAAKilG,qBAAqB3B,EAAI,EAAAjhG,YAAYiW,KAAM,KAAMgrF,EAAGnnD,UACrE,MAIJ,QACEmnD,EAAGoB,MAAMzlD,GACTjrC,EAAYhU,KAAKytG,yBAAyBnK,GAU9C,OANKtvF,EAIHsvF,EAAGsB,QAAQ3lD,IAHXqkD,EAAGoB,MAAMzlD,GACTj/C,KAAK2jG,cAAcL,IAIdtvF,EAGT,oBACEsvF,EACAqJ,GAOA,IAFA,IAAIlJ,EAAWH,EAAGnnD,SACd7oC,EAAa,IAAI7L,OACb67F,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,aAAa,CACjC,IAAIiB,EAAQqkD,EAAGmB,OACXzwF,EAAYhU,KAAK2kG,eAAerB,EAAIqJ,GACxC,GAAK34F,EAKHsvF,EAAGsB,QAAQ3lD,GACX3rC,EAAW5G,KAAKsH,OANF,CACd,GAAIsvF,EAAG3hF,OAAS,EAAArU,MAAMqxC,UAAW,OAAO,KACxC2kD,EAAGoB,MAAMzlD,GACTj/C,KAAK2jG,cAAcL,IAMvB,IAAInlE,EAAM,EAAAlwB,KAAKy/F,qBAAqBp6F,EAAYgwF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAEtE,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAGT,WACEmlE,GAKA,IAAIl1F,EAA0C,KAC1Ck1F,EAAGe,MAAK,IAAS,EAAA/2F,MAAMmL,YAAe6qF,EAAGhnD,qBAC3CgnD,EAAGj1F,KAAK,EAAAwrC,mBAAmB2E,QAC3BpwC,EAAa,EAAAH,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,UAEvE,IAAI+yB,EAAM,EAAAlwB,KAAK0/F,qBAAqBv/F,EAAYk1F,EAAGl4F,SAEnD,OADAk4F,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAGT,cACEmlE,GAKA,IAAIl1F,EAA0C,KAC1Ck1F,EAAGe,MAAK,IAAS,EAAA/2F,MAAMmL,YAAe6qF,EAAGhnD,qBAC3CgnD,EAAGj1F,KAAK,EAAAwrC,mBAAmB2E,QAC3BpwC,EAAa,EAAAH,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,UAEvE,IAAI+yB,EAAM,EAAAlwB,KAAK2/F,wBAAwBx/F,EAAYk1F,EAAGl4F,SAEtD,OADAk4F,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAGT,iBACEmlE,GAKA,IAAIG,EAAWH,EAAGnnD,SACdnoC,EAAYhU,KAAK2kG,eAAerB,GACpC,IAAKtvF,EAAW,OAAO,KAEvB,GAAIsvF,EAAGtkD,KAAK,EAAA1xC,MAAMoR,OAEhB,GAAI4kF,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,WAAY,CAC5B,IAAIlqC,EAAY3S,KAAKwnG,gBAAgBlE,GACrC,IAAK3wF,EAAW,OAAO,KAEvB,GAAI2wF,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAAa,CAC7B,IAAI3e,EAAM,EAAAlwB,KAAK4/F,kBAA6B75F,EAAuBrB,EAAW2wF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAEpG,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAEPn+B,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,SAGhB,OAAO,KAGT,yBACEk4F,GAKA,IAAInzF,EAAOnQ,KAAKwnG,gBAAgBlE,GAChC,IAAKnzF,EAAM,OAAO,KAElB,IAAIguB,EAAM,EAAAlwB,KAAK47F,0BAA0B15F,GAEzC,OADAmzF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAGT,kBACEmlE,GAKA,IAAIG,EAAWH,EAAGnnD,SAElB,GAAImnD,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,WAAY,CAC5B,IAAIvtC,EAAgC,KAEpC,GAAIg0F,EAAGtkD,KAAK,EAAA1xC,MAAM4gB,OAChB5e,EAActP,KAAKukG,cAAcjB,EAAI,EAAAjhG,YAAY6rB,MAAO,KAAMo1E,EAAGnnD,eAC5D,GAAImnD,EAAGtkD,KAAK,EAAA1xC,MAAMytC,KACvBzrC,EAActP,KAAKukG,cAAcjB,EAAI,EAAAjhG,YAAY04C,IAAK,KAAMuoD,EAAGnnD,eAC1D,GAAImnD,EAAGtkD,KAAK,EAAA1xC,MAAMkuC,KACvBlsC,EAActP,KAAKukG,cAAcjB,EAAI,EAAAjhG,YAAYiW,KAAM,KAAMgrF,EAAGnnD,eAE3D,IAAKmnD,EAAGtkD,KAAK,EAAA1xC,MAAMowC,aACxBpuC,EAActP,KAAKytG,yBAAyBnK,IACvCh0F,GAAa,OAAO,KAG3B,GAAIg0F,EAAG3hF,OAAS,EAAArU,MAAMowC,UAAW,CAC/B,IAAI/qC,EAAwC,KAC5C,IAAK2wF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,aACjB/qC,EAAY3S,KAAKytG,yBAAyBnK,IACrC3wF,GAAW,OAAO,KAGzB,GAAI2wF,EAAG3hF,OAAS,EAAArU,MAAMowC,UAAW,CAC/B,IAAI3nC,EAAiC,KACrC,IAAKutF,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAAa,CAE9B,GADA/mC,EAAc/V,KAAKwnG,gBAAgBlE,IAC9BvtF,EAAa,OAAO,KAEzB,IAAKutF,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAKjB,OAJA98C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAIX,IAAI4I,EAAYhU,KAAK2kG,eAAerB,GACpC,OAAKtvF,EAEE,EAAA/F,KAAK6/F,mBACVx+F,EACAqD,EACIA,EAAUlC,WACV,KACJsF,EACA/B,EACAsvF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MATD,KAavBjc,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAGhB,OAAO,KAGT,iBACEk4F,GAKA,IAAIG,EAAWH,EAAGnnD,SAClB,GAAImnD,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,WAAY,CAC5B,IAAIlqC,EAAY3S,KAAKwnG,gBAAgBlE,GACrC,IAAK3wF,EAAW,OAAO,KACvB,GAAI2wF,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAAa,CAC7B,IAAI9oC,EAAYhU,KAAK2kG,eAAerB,GACpC,IAAKtvF,EAAW,OAAO,KACvB,IAAI+5F,EAAkC,KACtC,OAAIzK,EAAGtkD,KAAK,EAAA1xC,MAAMitC,QAChBwzD,EAAgB/tG,KAAK2kG,eAAerB,IAC/ByK,GAAsB,KAEtB,EAAA9/F,KAAK+/F,kBACVr7F,EACAqB,EACA+5F,EACAzK,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAGxBjc,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAGhB,OAAO,KAGT,qBACEk4F,GAKA,IAAIG,EAAWH,EAAGnnD,SAClB,GAAImnD,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,WAAY,CAC5B,IAAIlqC,EAAY3S,KAAKwnG,gBAAgBlE,GACrC,IAAK3wF,EAAW,OAAO,KACvB,GAAI2wF,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAAa,CAC7B,GAAIwmD,EAAGtkD,KAAK,EAAA1xC,MAAMywC,WAAY,CAC5B,IAAIpnC,EAAQ,IAAIlP,MAChB,MAAQ67F,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,aAAa,CACjC,IAAIiwD,EAAQjuG,KAAKkuG,gBAAgB5K,GACjC,IAAK2K,EAAO,OAAO,KACnBt3F,EAAMjK,KAAiBuhG,GAEzB,IAAI9vE,EAAM,EAAAlwB,KAAKkgG,sBAAsBx7F,EAAWgE,EAAO2sF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAE7E,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAEPn+B,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAGhB,OAAO,KAGT,gBACEk4F,GAGA,IACIhwF,EACAU,EAFAyvF,EAAWH,EAAGnnD,SAMlB,GAAImnD,EAAGtkD,KAAK,EAAA1xC,MAAM4sC,MAAO,CACvB,IAAI1mC,EAAQxT,KAAKwnG,gBAAgBlE,GACjC,IAAK9vF,EAAO,OAAO,KACnB,GAAI8vF,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,OAAQ,CAExB,IADAnqC,EAAa,IAAI7L,MACV67F,EAAGe,QAAU,EAAA/2F,MAAM4sC,MAAQopD,EAAGlnD,WAAa,EAAA9uC,MAAM+sC,SAAWipD,EAAGlnD,WAAa,EAAA9uC,MAAM0wC,YAAY,CAEnG,KADAhqC,EAAYhU,KAAK2kG,eAAerB,IAChB,OAAO,KACvBhwF,EAAW5G,KAAKsH,GAElB,OAAO,EAAA/F,KAAKmgG,iBAAiB56F,EAAOF,EAAYgwF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAEtEjc,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAMX,GAAIk4F,EAAGtkD,KAAK,EAAA1xC,MAAM+sC,SAAU,CACjC,GAAIipD,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,OAAQ,CAExB,IADAnqC,EAAa,IAAI7L,MACV67F,EAAGe,QAAU,EAAA/2F,MAAM4sC,MAAQopD,EAAGlnD,WAAa,EAAA9uC,MAAM+sC,SAAWipD,EAAGlnD,WAAa,EAAA9uC,MAAM0wC,YAAY,CAEnG,KADAhqC,EAAYhU,KAAK2kG,eAAerB,IAChB,OAAO,KACvBhwF,EAAW5G,KAAKsH,GAElB,OAAO,EAAA/F,KAAKmgG,iBAAiB,KAAM96F,EAAYgwF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAErEjc,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAeujG,0BACf/K,EAAGl4F,SAGP,OAAO,KAGT,oBACEk4F,GAKA,IAAIG,EAAWH,EAAGnnD,SACd1rC,EAAazQ,KAAKwnG,gBAAgBlE,GACtC,IAAK7yF,EAAY,OAAO,KACxB,IAAI0tB,EAAM,EAAAlwB,KAAKqgG,qBAAiC79F,EAAY6yF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAElF,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAGT,kBACEmlE,GAQA,IACI5zF,EADA+zF,EAAWH,EAAGnnD,SAElB,GAAImnD,EAAGtkD,KAAK,EAAA1xC,MAAMywC,WAAY,CAC5B,IAAIzqC,EAAa,IAAI7L,MACrB,MAAQ67F,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,aAAa,CAEjC,KADAtuC,EAAO1P,KAAK2kG,eAAerB,IAChB,OAAO,KAClBhwF,EAAW5G,KAAgBgD,GAE7B,IAAIqH,EAA6C,KAC7CC,EAAsC,KACtCC,EAAwC,KAC5C,GAAIqsF,EAAGtkD,KAAK,EAAA1xC,MAAM6sC,OAAQ,CACxB,IAAKmpD,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,WAKjB,OAJA78C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAET,IAAKk4F,EAAG4B,iBAKN,OAJAllG,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAEE,KAGT,GADA2L,EAAgB,EAAA9I,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,UACnEk4F,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAKjB,OAJA98C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAET,IAAKk4F,EAAGtkD,KAAK,EAAA1xC,MAAMywC,WAKjB,OAJA/9C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAGT,IADA4L,EAAkB,IACVssF,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,aAAa,CAEjC,KADAtuC,EAAO1P,KAAK2kG,eAAerB,IAChB,OAAO,KAClBtsF,EAAgBtK,KAAgBgD,IAGpC,GAAI4zF,EAAGtkD,KAAK,EAAA1xC,MAAMmtC,SAAU,CAC1B,IAAK6oD,EAAGtkD,KAAK,EAAA1xC,MAAMywC,WAKjB,OAJA/9C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAGT,IADA6L,EAAoB,IACZqsF,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,aAAa,CAEjC,KADAtuC,EAAO1P,KAAK2kG,eAAerB,IAChB,OAAO,KAClBrsF,EAAkBvK,KAAgBgD,IAGtC,IAAMsH,IAAmBC,EAKvB,OAJAjX,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,SAEP,KAET,IAAI+yB,EAAM,EAAAlwB,KAAKsgG,mBACbj7F,EACAyD,EACAC,EACAC,EACAqsF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAGxB,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAOT,OALEn+B,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAGT,KAGT,qBACEk4F,EACA9wF,EACAqB,EACA4vF,GAKA,GAAIH,EAAG4B,iBAAkB,CACvB,IAAItkG,EAAO,EAAAqN,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SAC/DsI,EAA6C,KACjD,GAAI4vF,EAAGtkD,KAAK,EAAA1xC,MAAMgW,UAAW,CAE3B,GADA5P,EAAiB1T,KAAKmpG,oBAAoB7F,IACrC5vF,EAAgB,OAAO,KAC5BlB,GAAS,EAAAnQ,YAAYukB,QAEvB,GAAI08E,EAAGtkD,KAAK,EAAA1xC,MAAM2uC,QAAS,CACzB,IAAIvtC,EAAO1O,KAAKkmG,UAAU5C,GAC1B,IAAK50F,EAAM,OAAO,KAClB,IAAIyvB,EAAM,EAAAlwB,KAAK2X,sBACbhlB,EACA8S,EACAhF,EACAmF,EACArB,EACA8wF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAGxB,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAEPn+B,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAGP,OAAO,KAGT,mBACEk4F,GAKA,IAAIG,EAAWH,EAAGnnD,SACd1rC,EAAazQ,KAAKwnG,gBAAgBlE,EAAI,IAC1C,IAAK7yF,EAAY,OAAO,KACxB,IAAI0tB,EAAM,EAAAlwB,KAAKugG,oBAAoB/9F,EAAY6yF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAErE,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAGT,oBACEmlE,GAKA,IAAIG,EAAWH,EAAGnnD,SAClB,GAAImnD,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,WAAY,CAC5B,IAAIpsC,EAAazQ,KAAKwnG,gBAAgBlE,GACtC,IAAK7yF,EAAY,OAAO,KACxB,GAAI6yF,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAAa,CAC7B,IAAI9oC,EAAYhU,KAAK2kG,eAAerB,GACpC,IAAKtvF,EAAW,OAAO,KACvB,IAAImqB,EAAM,EAAAlwB,KAAKwgG,qBAAqBh+F,EAAYuD,EAAWsvF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAEjF,OADAqnF,EAAGtkD,KAAK,EAAA1xC,MAAMowC,WACPvf,EAEPn+B,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,UAIhBpL,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAGhB,OAAO,KAKT,qBACEk4F,GAEA,IAAI3hF,EAAQ2hF,EAAGj1F,KAAK,EAAAwrC,mBAAmB2E,QACnCilD,EAAWH,EAAGnnD,SAClB,OAAQx6B,GAGN,KAAK,EAAArU,MAAMsuC,YACX,KAAK,EAAAtuC,MAAMouC,MAGX,KAAK,EAAApuC,MAAMmW,YACX,KAAK,EAAAnW,MAAMoW,MACX,KAAK,EAAApW,MAAM2T,KACX,KAAK,EAAA3T,MAAM6T,MACX,KAAK,EAAA7T,MAAMiuC,OACX,KAAK,EAAAjuC,MAAMmR,KACX,KAAK,EAAAnR,MAAMgtC,OAAQ,CACjB,IAAInnC,EAAUnT,KAAKwnG,gBAAgBlE,EAAI,IACvC,OAAKnwF,EACE,EAAAlF,KAAKygG,4BAA4B/sF,EAAOxO,EAASmwF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MADzD,KAGvB,KAAK,EAAA3O,MAAMqW,UACX,KAAK,EAAArW,MAAMsW,YAAa,CACtB,IAAIzQ,EAAUnT,KAAKwnG,gBAAgBlE,EAAI,IACvC,IAAKnwF,EAAS,OAAO,KACrB,OAAQA,EAAQvF,MACd,KAAK,EAAAJ,SAASiL,WACd,KAAK,EAAAjL,SAASoN,cACd,KAAK,EAAApN,SAAS4L,eAAgB,MAC9B,QACEpZ,KAAK8oB,MACH,EAAAhe,eAAe6jG,0FACfx7F,EAAQ/H,OAId,OAAO,EAAA6C,KAAKygG,4BAA4B/sF,EAAOxO,EAASmwF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAIhF,KAAK,EAAA3O,MAAMyN,IAAK,CACd,IAAKuoF,EAAG4B,iBAKN,OAJAllG,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAEE,KAET,IAAI8C,EAAWlO,KAAKmmG,cAAc7C,GAClC,IAAKp1F,EAAU,OAAO,KACtB,IAAIM,EAAmC,KACnCogG,EAAkC,KACtC,GACEtL,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,YAEsD,QAAnEruC,EAAgBxO,KAAK6uG,qCAAqCvL,KAG3D,GADAsL,EAAa5uG,KAAKgnG,eAAe1D,IAC5BsL,EAAY,OAAO,UAExBA,EAAa,GAEf,OAAO,EAAA3gG,KAAK6gG,oBACV5gG,EACAM,EACAogG,EACAtL,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAK1B,KAAK,EAAA3O,MAAMQ,KAAM,OAAO,EAAAG,KAAK8gG,qBAAqBzL,EAAGl4F,SACrD,KAAK,EAAAkC,MAAMS,KAAM,OAAO,EAAAE,KAAK+gG,qBAAqB1L,EAAGl4F,SACrD,KAAK,EAAAkC,MAAMU,MAAO,OAAO,EAAAC,KAAKghG,sBAAsB3L,EAAGl4F,SACvD,KAAK,EAAAkC,MAAMgO,KAAM,OAAO,EAAArN,KAAKihG,qBAAqB5L,EAAGl4F,SACrD,KAAK,EAAAkC,MAAMqN,YAAa,OAAO,EAAA1M,KAAK+8F,4BAA4B1H,EAAGl4F,SAGnE,KAAK,EAAAkC,MAAMuvC,UAAW,CAGpB,GAAIymD,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAChB,OAAO98C,KAAK2pG,8BACVrG,EACA,EAAAr1F,KAAKy7F,gCAAgCpG,EAAGl4F,MAAMq4F,IAC9C,GAAE,GAIN,IAAIxkD,EAAQqkD,EAAGmB,OACX0K,GAAQ,EACZ,GACE,OAAQ7L,EAAGj1F,KAAK,EAAAwrC,mBAAmB2E,SAGjC,KAAK,EAAAlxC,MAAMsuC,YAET,OADA0nD,EAAGoB,MAAMzlD,GACFj/C,KAAKovG,wBAAwB9L,GAGtC,KAAK,EAAAh2F,MAAMmL,WAET,OADA6qF,EAAGoC,iBACKpC,EAAGj1F,QAGT,KAAK,EAAAf,MAAMwvC,WACT,IACGwmD,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,SACd6lD,EAAGtkD,KAAK,EAAA1xC,MAAMqwC,oBACf,CACAwxD,GAAQ,EACR,MAKJ,KAAK,EAAA7hG,MAAMmwC,MAET,OADA6lD,EAAGoB,MAAMzlD,GACFj/C,KAAKovG,wBAAwB9L,GAGtC,KAAK,EAAAh2F,MAAMswC,SACT,GACE0lD,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,QACd6lD,EAAGtkD,KAAK,EAAA1xC,MAAMoN,QACd4oF,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAGd,OADAwmD,EAAGoB,MAAMzlD,GACFj/C,KAAKovG,wBAAwB9L,GAEtC6L,GAAQ,EACR,MAEF,KAAK,EAAA7hG,MAAMoN,MACT,MAIF,QACEy0F,GAAQ,EAIZ,MAGF,QACEA,GAAQ,SAILA,GACT7L,EAAGoB,MAAMzlD,GAGT,IAAIowD,EAAQrvG,KAAKwnG,gBAAgBlE,GACjC,OAAK+L,EACA/L,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,aAOnBuyD,EAAQ,EAAAphG,KAAKqhG,8BAA8BD,EAAO/L,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MACjEjc,KAAKuvG,yBAAyBjM,EAAI+L,KAPvCrvG,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,MANU,KAYrB,KAAK,EAAAkC,MAAMuwC,YAAa,CACtB,IAAIttC,EAAqB,IAAI9I,MAC7B,MAAQ67F,EAAGtkD,KAAK,EAAA1xC,MAAMwwC,eAAe,CACnC,IAAI3tC,EACJ,GAAImzF,EAAGe,QAAU,EAAA/2F,MAAMoN,MACrBvK,EAAO,UAGP,GADAA,EAAOnQ,KAAKwnG,gBAAgBlE,EAAI,IAC3BnzF,EAAM,OAAO,KAGpB,GADAI,EAAmB7D,KAAKyD,IACnBmzF,EAAGtkD,KAAK,EAAA1xC,MAAMoN,OAAQ,CACzB,GAAI4oF,EAAGtkD,KAAK,EAAA1xC,MAAMwwC,cAChB,MAMA,OAJA99C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,MAIb,OAAO,EAAA6C,KAAKuhG,6BAA6Bj/F,EAAoB+yF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAGrF,KAAK,EAAA3O,MAAMywC,UAAW,CACpB,IAGIn9C,EAHA6iG,EAAWH,EAAGnnD,SACdjqC,EAAQ,IAAIzK,MACZ0K,EAAS,IAAI1K,MAEjB,MAAQ67F,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,aAAa,CACjC,GAAKslD,EAAG4B,iBAWNtkG,EAAO,EAAAqN,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,aAXvC,CACxB,IAAKk4F,EAAGtkD,KAAK,EAAA1xC,MAAMqvC,eAKjB,OAJA38C,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfrC,EAAGl4F,SAEE,KAETxK,EAAO,EAAAqN,KAAKM,2BAA2B+0F,EAAG17D,aAAc07D,EAAGl4F,SAC3DxK,EAAKsP,UAAW,EAKlB,GADAgC,EAAMxF,KAAK9L,GACP0iG,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,OAAQ,CACxB,IAAIn8C,EAAQtB,KAAKwnG,gBAAgBlE,EAAI,GACrC,IAAKhiG,EAAO,OAAO,KACnB6Q,EAAOzF,KAAKpL,OACP,IAAKV,EAAKsP,SAOf,OAJAlQ,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KANP+G,EAAOzF,KAAK9L,GAQd,IAAK0iG,EAAGtkD,KAAK,EAAA1xC,MAAMoN,OAAQ,CACzB,GAAI4oF,EAAGtkD,KAAK,EAAA1xC,MAAM0wC,YAChB,MAMA,OAJAh+C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,MAIb,OAAO,EAAA6C,KAAKwhG,8BAA8Bv9F,EAAOC,EAAQmxF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAGjF,KAAK,EAAA3O,MAAMgW,SAAU,CACnB,IAAI5S,EAAS1Q,KAAKkmG,UAAU5C,GAC5B,IAAK5yF,EAAQ,OAAO,KACpB,IAAK4yF,EAAGtkD,KAAK,EAAA1xC,MAAM8V,aAKjB,OAJApjB,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAET,IAAI+E,EAAOnQ,KAAKwnG,gBAAgBlE,EAAI,IACpC,OAAKnzF,EACE,EAAAlC,KAAKyhG,0BACV,EAAAv1F,cAAcyuC,OACdz4C,EACAO,EACA4yF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MALN,KAQpB,KAAK,EAAA3O,MAAMmL,WAAY,CACrB,IAAIk3F,EAAiBrM,EAAGoC,iBACxB,GAAsB,QAAlBiK,EAA0B,OAAO,EAAA1hG,KAAK8gG,qBAAqBzL,EAAGl4F,SAClE,IAAIgD,EAAa,EAAAH,KAAKM,2BAA2BohG,EAAgBrM,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MACvF,OAAIqnF,EAAGe,MAAK,IAAS,EAAA/2F,MAAMqwC,oBAAuB2lD,EAAGhnD,mBAiB9Ct8C,KAAKuvG,yBAAyBjM,EAAIl1F,GAAY,GAhB5CpO,KAAK2pG,8BACVrG,EACA,EAAAr1F,KAAKy7F,gCAAgCpG,EAAGl4F,MAAMq4F,IAC9C,CACE,EAAAx1F,KAAKg7F,gBACH76F,EACA,EAAAH,KAAK4X,kBAAkBzX,EAAWhD,MAAMg6C,OACxC,KACA,EAAAjtC,cAAckiC,QACdjsC,EAAWhD,QAEd,EAEDq4F,GAKN,KAAK,EAAAn2F,MAAM+N,MAAO,CACZioF,EAAGe,QAAU,EAAA/2F,MAAM2vC,KAAOqmD,EAAGlnD,WAAa,EAAA9uC,MAAMuvC,WAClD78C,KAAK8oB,MACH,EAAAhe,eAAe8kG,6DACftM,EAAGl4F,SAGP,IAAI+E,EAAO,EAAAlC,KAAK4hG,sBAAsBvM,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAC5D,OAAOjc,KAAKuvG,yBAAyBjM,EAAInzF,GAE3C,KAAK,EAAA7C,MAAMqvC,cACT,OAAO,EAAA1uC,KAAKg+F,8BAA8B3I,EAAG17D,aAAc07D,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAEnF,KAAK,EAAA3O,MAAMkwC,eACT,OAAO,EAAAvvC,KAAK6hG,+BAA+BxM,EAAGyM,cAAezM,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAErF,KAAK,EAAA3O,MAAM0vC,aACT,OAAO,EAAA/uC,KAAK+hG,6BAA6B1M,EAAG2M,YAAa3M,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAIjF,KAAK,EAAA3O,MAAM0U,MAAO,CAChB,IAAIkuF,EAAgB5M,EAAG6M,oBACvB,OAAK7M,EAAGtkD,KAAK,EAAA1xC,MAAM0U,OAOZ,EAAA/T,KAAKmiG,8BACVF,EACA5M,EAAG+M,kBACH/M,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,OATtBjc,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,MAQX,KAAK,EAAAkC,MAAMuN,SAAU,CACnB,IAAI1K,EAAOnQ,KAAKovG,wBAAwB9L,GACxC,OAAKnzF,EACEnQ,KAAKuvG,yBAAyBjM,EAAInzF,GADvB,KAGpB,KAAK,EAAA7C,MAAMmN,MACT,OAAOza,KAAKswG,qBAAqBhN,GAEnC,QAYE,OAXI3hF,GAAS,EAAArU,MAAMqxC,UACjB3+C,KAAK8oB,MACH,EAAAhe,eAAey0C,uBACf+jD,EAAGl4F,MAAMq4F,IAGXzjG,KAAK8oB,MACH,EAAAhe,eAAeylG,oBACfjN,EAAGl4F,SAGA,MAKb,qCACEk4F,GAKA,IAAIrkD,EAAQqkD,EAAGmB,OACf,IAAKnB,EAAGtkD,KAAK,EAAA1xC,MAAMgW,UAAW,OAAO,KACrC,IAAIlX,EAAQk3F,EAAGnnD,SACX3tC,EAAgB,IAAI/G,MACxB,EAAG,CACD,GAAI67F,EAAGe,SAAW,EAAA/2F,MAAM8V,YACtB,MAEF,IAAI1U,EAAO1O,KAAKkmG,UAAU5C,GAAI,GAAM,GACpC,IAAK50F,EAEH,OADA40F,EAAGoB,MAAMzlD,GACF,KAETzwC,EAAc9B,KAAKgC,SACZ40F,EAAGtkD,KAAK,EAAA1xC,MAAMoN,QACvB,GAAI4oF,EAAGtkD,KAAK,EAAA1xC,MAAM8V,aAAc,CAC9B,IAAI/W,EAAMi3F,EAAGrnF,IACb,GAAIqnF,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,WAOhB,OANKruC,EAAcrC,QACjBnM,KAAK8oB,MACH,EAAAhe,eAAe0lG,mCACflN,EAAGl4F,MAAMgB,EAAOC,IAGbmC,EAIX,OADA80F,EAAGoB,MAAMzlD,GACF,KAGT,eACEqkD,GAMA,IADA,IAAI7zF,EAAO,IAAIhI,OACP67F,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,aAAa,CACjC,IAAI3sC,EAAOnQ,KAAKwnG,gBAAgBlE,EAAI,GACpC,IAAKnzF,EAAM,OAAO,KAElB,GADAV,EAAK/C,KAAKyD,IACLmzF,EAAGtkD,KAAK,EAAA1xC,MAAMoN,OAAQ,CACzB,GAAI4oF,EAAGtkD,KAAK,EAAA1xC,MAAMwvC,YAChB,MAMA,OAJA98C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,MAIb,OAAOqE,EAGT,gBACE6zF,EACAmN,EAAA,GAEAjmG,OAAqB,GAAdimG,GACP,IAAItgG,EAAOnQ,KAAK0wG,qBAAqBpN,GACrC,IAAKnzF,EAAM,OAAO,KAMlB,IALA,IAIIwgG,EAJAlN,EAAWtzF,EAAK/E,MAAMgB,OAMvBukG,EAAiBC,EAAoBtN,EAAGe,UAAYoM,GACrD,CACA,IAAI9uF,EAAQ2hF,EAAGj1F,OACf,OAAQsT,GAGN,KAAK,EAAArU,MAAMysC,GACT,GAAIupD,EAAGtkD,KAAK,EAAA1xC,MAAM4gB,OAChB/d,EAAO,EAAAlC,KAAKyhG,0BACV,EAAAv1F,cAAc+T,MACd/d,EACA,KACAmzF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,UAEnB,CACL,IAAIvL,EAAS1Q,KAAKkmG,UAAU5C,GAC5B,IAAK5yF,EAAQ,OAAO,KACpBP,EAAO,EAAAlC,KAAKyhG,0BACV,EAAAv1F,cAAc4/B,GACd5pC,EACAO,EACA4yF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAG1B,MAEF,KAAK,EAAA3O,MAAMmW,YACTtT,EAAO,EAAAlC,KAAKyhG,0BACV,EAAAv1F,cAAc2uC,QACd34C,EACA,KACAmzF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAExB9L,EAAOnQ,KAAKuvG,yBAAyBjM,EAAInzF,GACzC,MAGF,KAAK,EAAA7C,MAAMwN,WAAY,CACrB,IAAIjJ,EAAS7R,KAAKkmG,UAAU5C,GAC5B,IAAKzxF,EAAQ,OAAO,KACpB1B,EAAO,EAAAlC,KAAK4iG,2BACV1gG,EACA0B,EACAyxF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAExB,MAGF,KAAK,EAAA3O,MAAMuwC,YAAa,CACtB,IAAIxvC,EAAOrO,KAAKwnG,gBAAgBlE,GAChC,IAAKj1F,EAAM,OAAO,KAClB,IAAKi1F,EAAGtkD,KAAK,EAAA1xC,MAAMwwC,cAKjB,OAJA99C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAET+E,EAAO,EAAAlC,KAAK6iG,8BACV3gG,EACA9B,EACAi1F,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAExB9L,EAAOnQ,KAAKuvG,yBAAyBjM,EAAInzF,GACzC,MAGF,KAAK,EAAA7C,MAAMqW,UACX,KAAK,EAAArW,MAAMsW,YAEPzT,EAAKvC,MAAQ,EAAAJ,SAASiL,YACtBtI,EAAKvC,MAAQ,EAAAJ,SAASoN,eACtBzK,EAAKvC,MAAQ,EAAAJ,SAAS4L,gBAEtBpZ,KAAK8oB,MACH,EAAAhe,eAAe6jG,0FACfx+F,EAAK/E,OAGT+E,EAAO,EAAAlC,KAAK8iG,6BACVpvF,EACAxR,EACAmzF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAExB,MAGF,KAAK,EAAA3O,MAAMswC,SAAU,CACnB,IAAIhrC,EAAS5S,KAAKwnG,gBAAgBlE,GAClC,IAAK1wF,EAAQ,OAAO,KACpB,IAAK0wF,EAAGtkD,KAAK,EAAA1xC,MAAMmwC,OAKjB,OAJAz9C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEP,KAET,IAAIyH,EAAS7S,KAAKwnG,gBAAgBlE,EAAImN,EAAa,EAC/C,EACA,GAEJ,IAAK59F,EAAQ,OAAO,KACpB1C,EAAO,EAAAlC,KAAK+iG,wBACV7gG,EACAyC,EACAC,EACAywF,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAExB,MAGF,KAAK,EAAA3O,MAAMoN,MAAO,CAChB,IAAIu2F,EAA2B,CAAE9gG,GACjC,EAAG,CAED,KADAA,EAAOnQ,KAAKwnG,gBAAgBlE,EAAI,IACrB,OAAO,KAClB2N,EAAWvkG,KAAKyD,SACTmzF,EAAGtkD,KAAK,EAAA1xC,MAAMoN,QACvBvK,EAAO,EAAAlC,KAAKijG,sBAAsBD,EAAY3N,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MACpE,MAGF,KAAK,EAAA3O,MAAM2vC,IACT,GAAIqmD,EAAG4B,iBAAkB,CACvB,IAAI72F,EAAO,EAAAJ,KAAKM,2BAA2B+0F,EAAGoC,iBAAkBpC,EAAGl4F,SACnE+E,EAAO,EAAAlC,KAAK64F,+BACV32F,EACsB9B,EACtBi1F,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,UAEnB,CACL,IAAI5N,EAAOrO,KAAKwnG,gBAAgBlE,EAAIqN,EAAiB,GACrD,IAAKtiG,EAAM,OAAO,KAClB,GAAIA,EAAKT,MAAQ,EAAAJ,SAAS8M,KAQxB,OAJAta,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACft3F,EAAKjD,OAEA,KANP,KADA+E,EAAOnQ,KAAKmxG,iBAAiB7N,EAAIG,EAAUtzF,EAAsB9B,IACtD,OAAO,KAStB8B,EAAOnQ,KAAKuvG,yBAAyBjM,EAAInzF,GAAM,GAC/C,MAGF,KAAK,EAAA7C,MAAM2uC,OACX,KAAK,EAAA3uC,MAAMsU,YACX,KAAK,EAAAtU,MAAMuU,aACX,KAAK,EAAAvU,MAAM+U,yBACX,KAAK,EAAA/U,MAAMyU,gBACX,KAAK,EAAAzU,MAAM2U,aACX,KAAK,EAAA3U,MAAM6U,eACX,KAAK,EAAA7U,MAAMuV,yBACX,KAAK,EAAAvV,MAAMyV,+BACX,KAAK,EAAAzV,MAAM2V,2CACX,KAAK,EAAA3V,MAAMiV,iBACX,KAAK,EAAAjV,MAAMqV,aACX,KAAK,EAAArV,MAAMmV,WACX,KAAK,EAAAnV,MAAM8U,kBAAmB,CAC5B,IAAI/T,EAAOrO,KAAKwnG,gBAAgBlE,EAAIqN,GACpC,IAAKtiG,EAAM,OAAO,KAClB8B,EAAO,EAAAlC,KAAKmjG,uBAAuBzvF,EAAOxR,EAAM9B,EAAMi1F,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAC5E,MAGF,KAAK,EAAA3O,MAAMgW,SACX,KAAK,EAAAhW,MAAM8V,YACX,KAAK,EAAA9V,MAAMiW,gBACX,KAAK,EAAAjW,MAAM+V,mBACX,KAAK,EAAA/V,MAAM4V,cACX,KAAK,EAAA5V,MAAMuuC,qBACX,KAAK,EAAAvuC,MAAMwuC,0BACX,KAAK,EAAAxuC,MAAM6V,mBACX,KAAK,EAAA7V,MAAM2T,KACX,KAAK,EAAA3T,MAAM6T,MACX,KAAK,EAAA7T,MAAMwU,SACX,KAAK,EAAAxU,MAAM0U,MACX,KAAK,EAAA1U,MAAM4U,QACX,KAAK,EAAA5U,MAAMsV,kBACX,KAAK,EAAAtV,MAAMwV,wBACX,KAAK,EAAAxV,MAAM0V,oCACX,KAAK,EAAA1V,MAAMgV,UACX,KAAK,EAAAhV,MAAMkV,IACX,KAAK,EAAAlV,MAAMoV,MACX,KAAK,EAAApV,MAAMyuC,oBACX,KAAK,EAAAzuC,MAAM0uC,QAAS,CAClB,IAAI3tC,EAAOrO,KAAKwnG,gBAAgBlE,EAAIqN,EAAiB,GACrD,IAAKtiG,EAAM,OAAO,KAClB8B,EAAO,EAAAlC,KAAKmjG,uBAAuBzvF,EAAOxR,EAAM9B,EAAMi1F,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAC5E,MAEF,QAASzR,QAAO,IAGpB,OAAO2F,EAGD,iBACNmzF,EACAG,EACAtzF,EACA3P,GAEA,IAAI6wG,EAAS7wG,EAAKiQ,WAClB,OAAQ4gG,EAAOzjG,MACb,KAAK,EAAAJ,SAASiL,WACZjY,EAAKiQ,WAAa,EAAAxC,KAAK64F,+BACrB32F,EACsBkhG,EACtB/N,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,MAExB,MAEF,KAAK,EAAAzO,SAAS8M,KAAM,CAClB,IAAI+0F,EAAQrvG,KAAKmxG,iBAAiB7N,EAAIG,EAAUtzF,EAAsBkhG,GACtE,IAAKhC,EAAO,OAAO,KACnB7uG,EAAKiQ,WAAa4+F,EAClB7uG,EAAK4K,MAAQk4F,EAAGl4F,MAAMq4F,EAAUH,EAAGrnF,KACnC,MAEF,QAKE,OAJAjc,KAAK8oB,MACH,EAAAhe,eAAe66F,oBACfnlG,EAAK4K,OAEA,KAGX,OAAO5K,EAGD,yBACN8iG,EACAnzF,EACAmhG,GAA2B,GAG3B,IADA,IAAI9iG,EAAmC,KAErC80F,EAAGtkD,KAAK,EAAA1xC,MAAMuvC,YAEdy0D,GAA0F,QAAnE9iG,EAAgBxO,KAAK6uG,qCAAqCvL,KACjF,CACA,IAAI7zF,EAAOzP,KAAKgnG,eAAe1D,GAC/B,IAAK7zF,EAAM,MACXU,EAAO,EAAAlC,KAAKsjG,qBACVphG,EACA3B,EACAiB,EACA6zF,EAAGl4F,MAAM+E,EAAK/E,MAAMgB,MAAOk3F,EAAGrnF,MAEhCq1F,GAAqB,EAEvB,OAAOnhG,EAIT,cAAcmzF,GAGZ,IAFAA,EAAGe,MAAK,GACJf,EAAGhnD,oBAAoBgnD,EAAGj1F,SAC3B,CACD,IAAI+tC,EAAYknD,EAAGe,MAAK,GACxB,GACEjoD,GAAa,EAAA9uC,MAAMqxC,WACnBvC,GAAa,EAAA9uC,MAAMowC,UACnB,CACA4lD,EAAGj1F,OACH,MAEF,GAAIi1F,EAAGhnD,mBAAoB,MAC3B,OAAQgnD,EAAGj1F,QACT,KAAK,EAAAf,MAAMmL,WACT6qF,EAAGoC,iBACH,MAEF,KAAK,EAAAp4F,MAAMqvC,cACT2mD,EAAG17D,aACH,MAEF,KAAK,EAAAt6B,MAAMkwC,eACT8lD,EAAGyM,cACH,MAEF,KAAK,EAAAziG,MAAM0vC,aACTsmD,EAAG2M,YACH,MAEF,KAAK,EAAA3iG,MAAMywC,UACT/9C,KAAKwxG,UAAUlO,KAQvB,UAAUA,GAER,IAAImO,EAAQ,EACRtC,GAAQ,EACZ,GACE,OAAQ7L,EAAGj1F,QACT,KAAK,EAAAf,MAAMqxC,UACT3+C,KAAK8oB,MACH,EAAAhe,eAAewyC,YACfgmD,EAAGl4F,QAAS,KAEd+jG,GAAQ,EACR,MAEF,KAAK,EAAA7hG,MAAMywC,YACP0zD,EACF,MAEF,KAAK,EAAAnkG,MAAM0wC,aACPyzD,IACUtC,GAAQ,GACpB,MAEF,KAAK,EAAA7hG,MAAMmL,WACT6qF,EAAGoC,iBACH,MAEF,KAAK,EAAAp4F,MAAMqvC,cACT2mD,EAAG17D,aACH,MAEF,KAAK,EAAAt6B,MAAMkwC,eACT8lD,EAAGyM,cACH,MAEF,KAAK,EAAAziG,MAAM0vC,aACTsmD,EAAG2M,mBAIAd,IA+Bb,SAASyB,EAAoBhjG,GAC3B,OAAQA,GACN,KAAK,EAAAN,MAAMoN,MAAO,OAAO,EACzB,KAAK,EAAApN,MAAM2uC,OACX,KAAK,EAAA3uC,MAAMsU,YACX,KAAK,EAAAtU,MAAMuU,aACX,KAAK,EAAAvU,MAAM+U,yBACX,KAAK,EAAA/U,MAAMyU,gBACX,KAAK,EAAAzU,MAAM2U,aACX,KAAK,EAAA3U,MAAM6U,eACX,KAAK,EAAA7U,MAAMuV,yBACX,KAAK,EAAAvV,MAAMyV,+BACX,KAAK,EAAAzV,MAAM2V,2CACX,KAAK,EAAA3V,MAAMiV,iBACX,KAAK,EAAAjV,MAAMqV,aACX,KAAK,EAAArV,MAAMmV,WAAY,OAAO,EAC9B,KAAK,EAAAnV,MAAMswC,SAAU,OAAO,EAC5B,KAAK,EAAAtwC,MAAM0uC,QAAS,OAAO,EAC3B,KAAK,EAAA1uC,MAAMyuC,oBAAqB,OAAO,EACvC,KAAK,EAAAzuC,MAAMkV,IAAK,OAAO,EACvB,KAAK,EAAAlV,MAAMoV,MAAO,OAAO,EACzB,KAAK,EAAApV,MAAMgV,UAAW,OAAO,GAC7B,KAAK,EAAAhV,MAAM4V,cACX,KAAK,EAAA5V,MAAM6V,mBACX,KAAK,EAAA7V,MAAMuuC,qBACX,KAAK,EAAAvuC,MAAMwuC,0BAA2B,OAAO,GAC7C,KAAK,EAAAxuC,MAAMysC,GACX,KAAK,EAAAzsC,MAAMstC,GACX,KAAK,EAAAttC,MAAMwN,WACX,KAAK,EAAAxN,MAAMgW,SACX,KAAK,EAAAhW,MAAM8V,YACX,KAAK,EAAA9V,MAAMiW,gBACX,KAAK,EAAAjW,MAAM+V,mBAAoB,OAAO,GACtC,KAAK,EAAA/V,MAAMsV,kBACX,KAAK,EAAAtV,MAAMwV,wBACX,KAAK,EAAAxV,MAAM0V,oCAAqC,OAAO,GACvD,KAAK,EAAA1V,MAAM2T,KACX,KAAK,EAAA3T,MAAM6T,MAAO,OAAO,GACzB,KAAK,EAAA7T,MAAMwU,SACX,KAAK,EAAAxU,MAAM0U,MACX,KAAK,EAAA1U,MAAM4U,QAAS,OAAO,GAC3B,KAAK,EAAA5U,MAAM8U,kBAAmB,OAAO,GACrC,KAAK,EAAA9U,MAAMqW,UACX,KAAK,EAAArW,MAAMsW,YAAa,OAAO,GAC/B,KAAK,EAAAtW,MAAM2vC,IACX,KAAK,EAAA3vC,MAAMyN,IACX,KAAK,EAAAzN,MAAMuwC,YACX,KAAK,EAAAvwC,MAAMmW,YAAa,OAAO,GAEjC,OAAO,EAr7HT,WA02HA,SAAkBiuF,GAChB,mBACA,qBACA,uBACA,qBACA,+BACA,iCACA,+BACA,iCACA,+BACA,iCACA,kCACA,4BACA,gCACA,sBACA,4BACA,wCACA,sCACA,oCACA,sCACA,oBACA,oCACA,4BAtBF,CAAkB,EAAAA,aAAA,EAAAA,WAAU,M,8ECh8H3B,aAID,OAyBA,OAIA,OAKA,MAAsBC,EAUpB,YAAYj/E,EAAkBk/E,GAAuB,GAHrD,KAAA9kG,KAA4B,IAAIlF,IAI9B5H,KAAK0yB,QAAUA,EACf1yB,KAAK4xG,eAIP,OACE,IAAK,IAAI/pF,KAAQ7nB,KAAK0yB,QAAQvO,YAAYhS,SACpC0V,EAAKlc,OAAOqQ,YAAc,EAAArO,WAAWgf,YAAY3sB,KAAK6xG,UAAUhqF,GAKxE,UAAUA,GACR,IAAIjU,EAAUiU,EAAKnoB,QACnB,GAAIkU,EACF,IAAK,IAAKhT,EAAMusB,KAAWvZ,EAAS5T,KAAK8xG,aAAalxG,EAAMusB,GAE9D,IAAI1E,EAAcZ,EAAKY,YACvB,GAAIA,EACF,IAAK,IAAIC,KAAcD,EAAazoB,KAAK6xG,UAAUnpF,GAKvD,aAAa9nB,EAAc2Q,GACzB,IAAIA,EAAQuc,GAAG,EAAAzrB,YAAY84C,UAAan7C,KAAK4xG,eAA7C,CACA,IAAI9kG,EAAO9M,KAAK8M,KAChB,GAAIA,EAAKC,IAAIwE,GACXvR,KAAK+xG,WAAWnxG,EAAM2Q,EAAiBzE,EAAK5L,IAAIqQ,SAIlD,OADAzE,EAAKK,IAAIoE,EAAS3Q,GACV2Q,EAAQ3D,MACd,KAAK,EAAA2R,YAAY1G,OACXtH,EAAQuc,GAAG,EAAAzrB,YAAYw6D,WAAW78D,KAAKgyG,YAAYpxG,EAAc2Q,GACrE,MAEF,KAAK,EAAAgO,YAAYyU,KACXziB,EAAQuc,GAAG,EAAAzrB,YAAYw6D,WAAW78D,KAAKiyG,UAAUrxG,EAAY2Q,GACjE,MAEF,KAAK,EAAAgO,YAAYwN,mBACf/sB,KAAKkyG,uBAAuBtxG,EAAyB2Q,GACrD,MAEF,KAAK,EAAAgO,YAAY0K,gBACfjqB,KAAKmyG,oBAAoBvxG,EAAsB2Q,GAC/C,MAEF,KAAK,EAAAgO,YAAYiO,MACHjc,EAASuc,GAAG,EAAAzrB,YAAYw6D,WAAW78D,KAAKoyG,WAAWxxG,EAAa2Q,GAC5E,MAEF,KAAK,EAAAgO,YAAY6N,mBACfptB,KAAKqyG,uBAAuBzxG,EAAyB2Q,GACrD,MAEF,KAAK,EAAAgO,YAAYgO,SAAU,CACzB,IAAI+kF,EAAiB/gG,EACjB1Q,EAASyxG,EAAKv6E,eACdl3B,GAAQb,KAAKuyG,cAAc3xG,EAAMC,GACrC,IAAI27D,EAAS81C,EAAKt6E,eACdwkC,GAAQx8D,KAAKuyG,cAAc3xG,EAAM47D,GACrC,MAEF,KAAK,EAAAj9C,YAAYwU,WA+bvB,SAASy+E,EAAkBjhG,GACzB,IAAIqC,EAAUrC,EAAQqC,QACtB,GAAIA,EACF,IAAK,IAAIuZ,KAAUvZ,EAAQzB,SACzB,OAAQgb,EAAOvf,MACb,KAAK,EAAA2R,YAAYwN,mBASjB,KAAK,EAAAxN,YAAY0K,gBAAiB,CAChC,IAAI2K,EAA6BzH,EAAQyH,UACzC,GAAIA,EACF,IAAK,IAAIrC,KAAYqC,EAAUziB,SAC7B,GAAIogB,EAASzE,GAAG,EAAAzrB,YAAYw6D,UAAW,OAAO,EAGlD,MAEF,QACE,GAAI1vC,EAAOW,GAAG,EAAAzrB,YAAYw6D,WAAa21C,EAAkBrlF,GAAS,OAAO,EAMjF,OAAO,GA5dGqlF,CAAkBjhG,IAAUvR,KAAKyyG,eAAe7xG,EAAM2Q,GAC1D,MAEF,KAAK,EAAAgO,YAAYqU,eAAgB,MACjC,QAASppB,QAAO,KAIZ,uBAAuB5J,EAAc2Q,GAC3C,IAAIqjB,EAAYrjB,EAAQqjB,UACxB,GAAIA,EACF,IAAK,IAAIrC,KAAYqC,EAAUziB,SACzBogB,EAASzE,GAAG,EAAAzrB,YAAYw6D,WAAW78D,KAAKuyG,cAAc3xG,EAAgB2xB,GAKxE,oBAAoB3xB,EAAc2Q,GACxC,IAAIqjB,EAAYrjB,EAAQqjB,UACxB,GAAIA,EACF,IAAK,IAAIrC,KAAYqC,EAAUziB,SACzBogB,EAASzE,GAAG,EAAAzrB,YAAYw6D,WAAW78D,KAAK0yG,WAAW9xG,EAAa2xB,GAKlE,uBAAuB3xB,EAAc2Q,GAO3C/G,QAAO,IA9GX,kBA4HA,MAAamoG,UAAmBhB,EAW9B,YAAYj/E,EAAkBk/E,GAAuB,GACnDj2F,MAAM+W,EAASk/E,GALT,KAAAplG,GAAe,GACf,KAAAomG,YAAmB,EAL3B,aAAalgF,GACX,OAAO,IAAIigF,EAAWjgF,GAASmgF,QAWjC,YAAYjyG,EAAc2Q,GACxB,IAAI/E,EAAKxM,KAAKwM,GACVm8D,EAAUp3D,EAAQuc,GAAG,EAAAzrB,YAAYgyB,SAMrC,GALA,EAAAy+E,OAAOtmG,EAAIxM,KAAK4yG,aACZjqC,GAASn8D,EAAGE,KAAK,UACrBF,EAAGE,KAAK1M,KAAK+yG,aAAaxhG,EAAQ7C,OAClClC,EAAGE,KAAK,KACRF,EAAGE,KAAK9L,GACJ+nE,EACF,OAAQp3D,EAAQ4iB,mBACd,KAAK,EACH3nB,EAAGE,KAAK,OACRF,EAAGE,KAAKsmG,cAAczhG,EAAQ6iB,uBAC9B,MAEF,KAAK,EACH5nB,EAAGE,KAAK,OACRF,EAAGE,KAAK6E,EAAQ+iB,mBAAmB5oB,YACnC,MAEF,QAASlB,QAAO,GAGpBgC,EAAGE,KAAK,OAGV,UAAU9L,EAAc2Q,GACtB,IAAI/E,EAAKxM,KAAKwM,GACd,EAAAsmG,OAAOtmG,EAAIxM,KAAK4yG,eAChBpmG,EAAGE,KAAK,cACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QACR,IAAIkH,EAAUrC,EAAQqC,QACtB,GAAIA,EAAS,CACX,IAAK,IAAKhT,EAAMusB,KAAWvZ,EACzB,GAAIuZ,EAAOvf,MAAQ,EAAA2R,YAAYgV,UAAW,CACxC,IAAIo0C,EAAsBx7C,EAAQW,GAAG,EAAAzrB,YAAYgyB,SACjD,EAAAy+E,OAAOtmG,EAAIxM,KAAK4yG,aACZjqC,EAASn8D,EAAGE,KAAK,UAChBF,EAAGE,KAAK,aACbF,EAAGE,KAAK,kBACRF,EAAGE,KAAK9L,GACJ+nE,IACFn8D,EAAGE,KAAK,OACRlC,OAAgD,GAA7B2iB,EAAQgH,mBAC3B3nB,EAAGE,KAAK45B,QAAoBnZ,EAAQiH,sBAAsB1oB,SAAS,MAErEc,EAAGE,KAAK,OAGZ,IAAK,IAAIygB,KAAUvZ,EAAQzB,SACrBgb,EAAOvf,MAAQ,EAAA2R,YAAYgV,WAAWv0B,KAAK8xG,aAAa3kF,EAAOvsB,KAAMusB,GAG7E,EAAA2lF,OAAOtmG,IAAMxM,KAAK4yG,aAClBpmG,EAAGE,KAAK,OAGV,cAAc9L,EAAc2Q,GAC1B,IAAI/E,EAAKxM,KAAKwM,GACVyJ,EAAY1E,EAAQ0E,UACxB,EAAA68F,OAAOtmG,EAAIxM,KAAK4yG,aAChBpmG,EAAGE,KAAK1M,KAAK+yG,aAAa98F,EAAUpH,aACpCrC,EAAGE,KAAK,KACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,KACR,IAAIkC,EAAaqH,EAAU0gB,eACvB0iB,EAAgBzqC,EAAWzC,OAE/B,IAAK,IAAI9L,EAAI,EAAGA,EAAIg5C,IAAiBh5C,EAC/BA,GAAGmM,EAAGE,KAAK,MAEfF,EAAGE,KAAK1M,KAAK+yG,aAAankG,EAAWvO,KACrCmM,EAAGE,KAAK,KACRF,EAAGE,KAAKuJ,EAAU6gB,iBAAiBz2B,IAErCmM,EAAGE,KAAK,QACR,IAAIkH,EAAUrC,EAAQqC,QACtB,GAAIA,GAAWA,EAAQmuB,KAAM,CAC3B,EAAA+wE,OAAOtmG,EAAIxM,KAAK4yG,aAChBpmG,EAAGE,KAAK,cACRF,EAAGE,KAAK6E,EAAQ3Q,MAChB4L,EAAGE,KAAK,QACR,IAAK,IAAIygB,KAAUvZ,EAAQzB,SAAUnS,KAAK8xG,aAAa3kF,EAAOvsB,KAAMusB,GACpE,EAAA2lF,OAAOtmG,IAAMxM,KAAK4yG,aAClBpmG,EAAGE,KAAK,QAIZ,WAAW9L,EAAc2Q,GACvB,IAAI/E,EAAKxM,KAAKwM,GACd,EAAAsmG,OAAOtmG,EAAIxM,KAAK4yG,eAChBpmG,EAAGE,KAAK,cACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QAER,EAAAomG,OAAOtmG,IAAMxM,KAAK4yG,aAClBpmG,EAAGE,KAAK,OAGV,eAAe9L,EAAc2Q,GAC3BvR,KAAK0yG,WAAW9xG,EAAM2Q,GAGxB,WAAW3Q,EAAc2Q,IAIzB,eAAe3Q,EAAc2Q,GAC3B,IAAI/E,EAAKxM,KAAKwM,GACd,EAAAsmG,OAAOtmG,EAAIxM,KAAK4yG,eAChBpmG,EAAGE,KAAK,cACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QACR,IAAIkH,EAAUrC,EAAQqC,QACtB,GAAIA,EACF,IAAK,IAAIuZ,KAAUvZ,EAAQzB,SAAUnS,KAAK8xG,aAAa3kF,EAAOvsB,KAAMusB,GAEtE,EAAA2lF,OAAOtmG,IAAMxM,KAAK4yG,aAClBpmG,EAAGE,KAAK,OAGV,WAAW9L,EAAc2Q,EAAkB2gE,IAI3C,aAAaxjE,GACX,OAAQA,EAAKd,MACX,KAAK,EAAa,MAAO,OACzB,KAAK,EAAc,MAAO,QAC1B,KAAK,EAAc,MAAO,OAC1B,KAAK,EAAc,MAAO,YAC1B,KAAK,EAAgB,OAAO5N,KAAK0yB,QAAQ1O,QAAQgD,SAAW,YAAc,OAC1E,KAAK,EAAa,MAAO,QACzB,KAAK,EAAc,MAAO,iBAC1B,KAAK,EAAc,MAAO,gBAE1B,KAAK,EAAc,MAAO,qBAC1B,KAAK,EAAgB,OAAOhnB,KAAK0yB,QAAQ1O,QAAQgD,SAAW,qBAAuB,gBAEnF,KAAK,GAAe,MAAO,UAC3B,KAAK,GAAc,MAAO,qBAC1B,KAAK,GAAc,MAAO,sBAC1B,KAAK,GAAe,MAAO,OAC3B,QAEE,OADAxc,QAAO,GACA,IAKb,QACE,IAAIgC,EAAKxM,KAAKwM,GAMd,OALAA,EAAGE,KAAK,4BACN1M,KAAK4yG,YACP5yG,KAAKizG,SACHjzG,KAAK4yG,YACPpmG,EAAGE,KAAK,OACDF,EAAGG,KAAK,KA7KnB,eAkLA,MAAaumG,UAAmBvB,EAY9B,YAAYj/E,EAAkBk/E,GAAuB,GACnDj2F,MAAM+W,EAASk/E,GANT,KAAAplG,GAAe,GACf,KAAAomG,YAAmB,EACnB,KAAAO,QAAuB,IAAIxrG,IANnC,aAAa+qB,GACX,OAAO,IAAIwgF,EAAWxgF,GAASmgF,QAYjC,YAAYjyG,EAAc2Q,GACxB,IAAI/E,EAAKxM,KAAKwM,GACVm8D,EAAUp3D,EAAQuc,GAAG,EAAAzrB,YAAYgyB,SACrC,EAAAy+E,OAAOtmG,EAAIxM,KAAK4yG,aACZrhG,EAAQuc,GAAG,EAAAzrB,YAAY4tB,QACrB04C,EAASn8D,EAAGE,KAAK,oBAChBF,EAAGE,KAAK,WAETi8D,EAASn8D,EAAGE,KAAK,iBAChBF,EAAGE,KAAK,eAEfF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,MACRF,EAAGE,KAAK1M,KAAK+yG,aAAaxhG,EAAQ7C,OAClClC,EAAGE,KAAK,OACR1M,KAAKyyG,eAAe7xG,EAAM2Q,GAG5B,UAAU3Q,EAAc2Q,GACtB,IAAI/E,EAAKxM,KAAKwM,GACd,EAAAsmG,OAAOtmG,EAAIxM,KAAK4yG,eAChBpmG,EAAGE,KAAK,gBACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QACR,IAAIkH,EAAUrC,EAAQqC,QACtB,GAAIA,EAAS,CACX,IAAIw/F,EAAax/F,EAAQmuB,KACzB,IAAK,IAAKnhC,EAAMusB,KAAWvZ,EACrBuZ,EAAOvf,MAAQ,EAAA2R,YAAYgV,YAC7B,EAAAu+E,OAAOtmG,EAAIxM,KAAK4yG,aAChBpmG,EAAGE,KAAK9L,GACJusB,EAAOW,GAAG,EAAAzrB,YAAYgyB,WACxB7nB,EAAGE,KAAK,OACRlC,OAAgD,GAA7B2iB,EAAQgH,mBAC3B3nB,EAAGE,KAAK45B,QAAoBnZ,EAAQiH,sBAAsB1oB,SAAS,MAErEc,EAAGE,KAAK,SACN0mG,GAGFA,GAAYpzG,KAAKyyG,eAAe7xG,EAAM2Q,GAE5C,EAAAuhG,OAAOtmG,IAAMxM,KAAK4yG,aAClBpmG,EAAGE,KAAK,OAGV,cAAc9L,EAAc2Q,GAC1B,IAAIA,EAAQoe,MAAM,EAAAttB,YAAY84C,QAAU,EAAA94C,YAAYwtB,KAApD,CACA,IAAIrjB,EAAKxM,KAAKwM,GACVyJ,EAAY1E,EAAQ0E,UAIxB,GAHA,EAAA68F,OAAOtmG,EAAIxM,KAAK4yG,aACZrhG,EAAQuc,GAAG,EAAAzrB,YAAY+4C,YAAY5uC,EAAGE,KAAK,cAC3C6E,EAAQuc,GAAG,EAAAzrB,YAAY4tB,SAASzjB,EAAGE,KAAK,WACxC6E,EAAQuc,GAAG,EAAAzrB,YAAYutB,KAMzB,OALApjB,EAAGE,KAAK,QACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QACRF,EAAGE,KAAK1M,KAAK+yG,aAAa98F,EAAUpH,kBACpCrC,EAAGE,KAAK,OAGH6E,EAAQoe,MAAM,EAAAttB,YAAY4tB,OAAS,EAAA5tB,YAAY2vB,WAAWxlB,EAAGE,KAAK,oBACvEF,EAAGE,KAAK9L,GAEV4L,EAAGE,KAAK,KACR,IAAIkC,EAAaqH,EAAU0gB,eACvB0iB,EAAgBzqC,EAAWzC,OAE/B,IAAK,IAAI9L,EAAI,EAAGA,EAAIg5C,IAAiBh5C,EAC/BA,GAAGmM,EAAGE,KAAK,MAEfF,EAAGE,KAAKuJ,EAAU6gB,iBAAiBz2B,IACnCmM,EAAGE,KAAK,MACRF,EAAGE,KAAK1M,KAAK+yG,aAAankG,EAAWvO,KAEnCkR,EAAQoe,MAAM,EAAAttB,YAAYsY,YAAc,EAAAtY,YAAYwtB,KACtDrjB,EAAGE,KAAK,MAERF,EAAGE,KAAK,OACRF,EAAGE,KAAK1M,KAAK+yG,aAAa98F,EAAUpH,cAEtCrC,EAAGE,KAAK,OACR1M,KAAKyyG,eAAe7xG,EAAM2Q,IAG5B,WAAW3Q,EAAc2Q,GACvB,IAAI/E,EAAKxM,KAAKwM,GACVu9F,EAAcx4F,EAAQ3D,MAAQ,EAAA2R,YAAYkZ,UAC9C,EAAAq6E,OAAOtmG,EAAIxM,KAAK4yG,eACZ7I,EACFv9F,EAAGE,KAAK,sBAEJ6E,EAAQuc,GAAG,EAAAzrB,YAAY+tB,WAAW5jB,EAAGE,KAAK,aAC9CF,EAAGE,KAAK,kBAEVF,EAAGE,KAAK9L,GAMR4L,EAAGE,KAAK,QACR,IAAI80D,EAAgBjwD,EAAQtP,UAAU2R,QACtC,GAAI4tD,EACF,IAAK,IAAIr0C,KAAUq0C,EAAcrvD,SAAUnS,KAAK8xG,aAAa3kF,EAAOvsB,KAAMusB,GAE5E,IAAID,EAAkB3b,EAAQqC,QAC9B,GAAIsZ,EACF,IAAK,IAAIC,KAAUD,EAAgB/a,SAAUnS,KAAK8xG,aAAa3kF,EAAOvsB,KAAMusB,GAE9E,EAAA2lF,OAAOtmG,IAAMxM,KAAK4yG,aAClBpmG,EAAGE,KAAK,OAGV,eAAe9L,EAAc2Q,GAC3BvR,KAAK0yG,WAAW9xG,EAAM2Q,GAGxB,WAAW3Q,EAAc2Q,GACvB,IAAIA,EAAQuc,GAAG,EAAAzrB,YAAY84C,SAA3B,CACA,IAAI3uC,EAAKxM,KAAKwM,GACd,EAAAsmG,OAAOtmG,EAAIxM,KAAK4yG,aACZrhG,EAAQuc,GAAG,EAAAzrB,YAAY+4C,YAAY5uC,EAAGE,KAAK,cAC3C6E,EAAQuc,GAAG,EAAAzrB,YAAY4tB,SAASzjB,EAAGE,KAAK,WACxC6E,EAAQuc,GAAG,EAAAzrB,YAAY8tB,WAAW3jB,EAAGE,KAAK,aAC9CF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,MACRF,EAAGE,KAAK1M,KAAK+yG,aAAaxhG,EAAQ7C,OAClClC,EAAGE,KAAK,QAGV,eAAe9L,EAAc2Q,GAC3B,IAAIqC,EAAUrC,EAAQqC,QACtB,GAAIA,GAAWA,EAAQmuB,KAAM,CAC3B,IAAIv1B,EAAKxM,KAAKwM,GACd,EAAAsmG,OAAOtmG,EAAIxM,KAAK4yG,eAChBpmG,EAAGE,KAAK,qBACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QACR,IAAK,IAAIygB,KAAUvZ,EAAQzB,SAAUnS,KAAK8xG,aAAa3kF,EAAOvsB,KAAMusB,GACpE,EAAA2lF,OAAOtmG,IAAMxM,KAAK4yG,aAClBpmG,EAAGE,KAAK,QAIZ,WAAW9L,EAAc2Q,EAAkB2gE,GACzC,IAAI1lE,EAAKxM,KAAKwM,GACd,EAAAsmG,OAAOtmG,EAAIxM,KAAK4yG,aAChBpmG,EAAGE,KAAK,iBACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,aACRF,EAAGE,KAAKwlE,GACR1lE,EAAGE,KAAK,OAGV,aAAagC,GACX,OAAQA,EAAKd,MACX,KAAK,EAAa,MAAO,KACzB,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAgB,OAAO5N,KAAK0yB,QAAQ1O,QAAQgD,SAAW,MAAQ,MACpE,KAAK,EAAa,MAAO,KACzB,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAE1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAgB,OAAOhnB,KAAK0yB,QAAQ1O,QAAQgD,SAAW,MAAQ,MAEpE,KAAK,GAAe,MAAO,OAC3B,KAAK,GAAc,MAAO,MAC1B,KAAK,GAAc,MAAO,MAC1B,KAAK,GAAe,MAAO,OAC3B,KAAK,GAAe,MAAO,OAC3B,QAEE,OADAxc,QAAO,GACA,OAKb,QACE,IAAIgC,EAAKxM,KAAKwM,GAgBd,OAfAA,EAAGE,KAAK,+BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACN1M,KAAK4yG,YACP5yG,KAAKizG,SACHjzG,KAAK4yG,YACPpmG,EAAGE,KAAK,OACRF,EAAGE,KAAK,8BACD1M,KAAKwM,GAAGG,KAAK,KAtNxB,gB,qHCnVA,MACA,MACA,MACA,O,iBCTA,YAEA,IAAI0mG,EAAgC,oBAAXzxD,QAA0BA,aAA4B,IAAX7zB,GAA0BA,GAAUhuB,KAExGszG,EAAY5tG,WAAa,EACzB4tG,EAAY1tG,eAAgB,EAC5B0tG,EAAYztG,gBAAkB,EAC9BytG,EAAYvtG,mBAAqB,EACjCutG,EAAYttG,iBAAmB,EAC/BstG,EAAYC,4BAA6B,EACzCD,EAAYrtG,4BAA6B,EACzCqtG,EAAYltG,yBAA0B,EACtCktG,EAAYjtG,kBAAmB,EAC/BitG,EAAYhtG,qBAAsB,EAElC,IAAIgB,EAAM,IAAIsB,aAAa,GACvB1B,EAAM,IAAIuB,YAAYnB,EAAIie,QA2I9B,SAASiuF,IACH3qG,MAAM4qG,kBACR5qG,MAAM4qG,kBAAkBxzG,KAAMuzG,GAE9BvzG,KAAKkvD,MAAQlvD,KAAKY,KAAO,KAAOZ,KAAKmL,QAAU,MAAO,IAAIvC,OAAQsmD,MAWtE,SAASukD,EAAetoG,GACtBnL,KAAKmL,QAAUA,GAAW,mBACtBvC,MAAM4qG,kBACR5qG,MAAM4qG,kBAAkBxzG,KAAMyzG,GAE9BzzG,KAAKkvD,MAAQlvD,KAAKY,KAAO,KAAOZ,KAAKmL,QAAU,MAAO,IAAIvC,OAAQsmD,MAiCtE,SAASwkD,EAAkBrwE,EAAGC,GAC5B,GAAID,IAAMC,EAAG,CACX,GAAU,IAAND,EAAS,OAAO,EACpBA,EAAI,EAAIA,EAAGC,EAAI,EAAIA,MACd,CACL,IAAIqwE,EAAOtwE,GAAKA,EAAGuwE,EAAOtwE,GAAKA,EAC/B,GAAIqwE,EAAOC,EAAM,OAAOD,EAAOC,EACtB,MAALvwE,IAAWA,EAAI77B,OAAO67B,IACjB,MAALC,IAAWA,EAAI97B,OAAO87B,IAE5B,OAAOD,EAAIC,EAAI,GAAK,EAxMtBviC,OAAO8yG,iBACLR,EAAgB,GAAI,SAAY/xG,GAAS,OAAOA,GAAS,IAAM,IAC/D,CACA,UAAa,CAAEA,OAAQ,IAAKwyG,UAAU,GACtC,UAAa,CAAExyG,MAAQ,IAAKwyG,UAAU,KAGxC/yG,OAAO8yG,iBACLR,EAAiB,IAAI,SAAa/xG,GAAS,OAAOA,GAAS,IAAM,IACjE,CACA,UAAa,CAAEA,OAAQ,MAAOwyG,UAAU,GACxC,UAAa,CAAExyG,MAAQ,MAAOwyG,UAAU,KAG1C/yG,OAAO8yG,iBACLR,EAAiB,IAAIA,EAAmB,MAAI,SAAa/xG,GAAS,OAAe,EAARA,GACzE,CACA,UAAa,CAAEA,OAAQ,WAAYwyG,UAAU,GAC7C,UAAa,CAAExyG,MAAQ,WAAYwyG,UAAU,KAG/C/yG,OAAO8yG,iBACLR,EAAgB,GAAI,SAAY/xG,GAAS,OAAe,IAARA,GAChD,CACA,UAAa,CAAEA,MAAS,EAAGwyG,UAAU,GACrC,UAAa,CAAExyG,MAAO,IAAKwyG,UAAU,KAGvC/yG,OAAO8yG,iBACLR,EAAiB,IAAI,SAAa/xG,GAAS,OAAe,MAARA,GAClD,CACA,UAAa,CAAEA,MAAW,EAAGwyG,UAAU,GACvC,UAAa,CAAExyG,MAAO,MAAOwyG,UAAU,KAGzC/yG,OAAO8yG,iBACLR,EAAiB,IAAIA,EAAmB,MAAI,SAAa/xG,GAAS,OAAOA,IAAU,GACnF,CACA,UAAa,CAAEA,MAAgB,EAAGwyG,UAAU,GAC5C,UAAa,CAAExyG,MAAO,WAAYwyG,UAAU,KAG9C/yG,OAAO8yG,iBACLR,EAAkB,KAAI,SAAc/xG,GAAS,QAASA,GACtD,CACA,UAAa,CAAEA,OAAO,EAAOwyG,UAAU,GACvC,UAAa,CAAExyG,OAAO,EAAOwyG,UAAU,KAGzC/yG,OAAO8yG,iBACLR,EAAiB,IAAI,SAAa/xG,GAAS,OAAOyG,KAAKgsG,OAAOzyG,IAC9D,CACA,QAAa,CAAEA,MAAOyG,KAAKgsG,OAAO,cAAgBD,UAAU,GAC5D,UAAa,CAAExyG,MAAOyG,KAAKgsG,OAAO,cAAgBD,UAAU,GAC5D,UAAa,CAAExyG,MAAOyG,KAAKgsG,OAAO,aAAgBD,UAAU,GAC5D,iBAAqB,CAAExyG,MAAQyG,KAAKgsG,OAAO,eAAiBD,UAAU,GACtE,iBAAqB,CAAExyG,OAAQ,SAAUwyG,UAAU,GACnD,iBAAqB,CAAExyG,MAAQ,SAAUwyG,UAAU,KAGrD/yG,OAAO8yG,iBACLR,EAAiB,IAAI,SAAa/xG,GAAS,OAAQA,GACnD,CACA,QAAa,CAAEA,MAAO,qBAAyBwyG,UAAU,GACzD,UAAa,CAAExyG,MAAwB,OAAQwyG,UAAU,GACzD,UAAa,CAAExyG,MAAO,sBAAyBwyG,UAAU,GACzD,iBAAqB,CAAExyG,MAAO,uBAA0BwyG,UAAU,GAClE,iBAAqB,CAAExyG,OAAQ,iBAAkBwyG,UAAU,GAC3D,iBAAqB,CAAExyG,MAAQ,iBAAkBwyG,UAAU,KAG7DT,EAAiB,IAAItrG,KAAKisG,MAE1BX,EAAiB,IAAI,SAAa/xG,GAChC,IAAIZ,EAAIqH,KAAKisG,MAAM1yG,GAASA,GAC5B,OAAOA,EAAQ,GAAKZ,EAAIA,GAG1B2yG,EAAoB,OAAI,SAAgB/xG,GAGtC,OAAiD,WADjDA,GAAiB,WADjBA,GAASA,IAAU,EAAI,cACSA,IAAU,EAAI,aAC3BA,IAAU,GAAM,aAA8B,IAGnE+xG,EAAkB,KAAI,SAAc/xG,EAAOkiC,GAEzC,OAAQliC,IADRkiC,GAAS,IACkBliC,IAAW,GAAKkiC,GAG7C6vE,EAAkB,KAAI,SAAc/xG,EAAOkiC,GAEzC,OAAQliC,KADRkiC,GAAS,IACmBliC,GAAU,GAAKkiC,GAG7C6vE,EAAiB,IAAItrG,KAAKyzE,IAE1B63B,EAAiB,IAAItrG,KAAK8nD,IAE1BwjD,EAAiB,IAAItrG,KAAK4oD,IAE1B0iD,EAAkB,KAAItrG,KAAKkvC,KAE3Bo8D,EAAmB,MAAItrG,KAAKo0E,MAG5Bk3B,EAAqB,QAAI,SAAiB/xG,GACxC,MAA4C,KAAxCyG,KAAKyzE,IAAIl6E,EAAQyG,KAAKq1E,MAAM97E,IACvB,EAAMyG,KAAKksG,MAAc,GAAR3yG,GAEnByG,KAAKksG,MAAM3yG,IAGpB+xG,EAAoB,OAAI,SAAgBj+F,EAAQC,EAAS1C,GACvD,OAAOA,EAAYyC,EAASC,GAG9Bg+F,EAAkB,KAAItrG,KAAKk1E,KAE3Bo2B,EAAmB,MAAItrG,KAAKq1E,MAE5Bi2B,EAAsB,SAAI,SAAkBrpG,EAAGkqG,GAC7C,OAAOnsG,KAAKyzE,IAAIxxE,GAAKjC,KAAKosG,KAAKD,IAGjCb,EAAmB,MAAI,SAAe/xG,GACpC,IAAI+hC,EAAI/hC,GAAS,EAAI,SACjBgiC,GAAa,SAARhiC,IAAuB,EAIhC,OAFA+hC,GADA/hC,EAAQ+hC,EAAIC,IACC,GAAK,QAClBA,GAAa,MAARhiC,IAAuB,KAI9B+xG,EAAqB,QAAI,SAAiB/xG,GACxC,OAASA,GAAS,EAAK,MAAYA,GAAS,EAAK,IAAmB,WAARA,GAU9DiyG,EAAiBtxG,UAAYlB,OAAOY,OAAOiH,MAAM3G,WACjDsxG,EAAiBtxG,UAAUrB,KAAO,mBAClC2yG,EAAiBtxG,UAAUkJ,QAAU,cAErCkoG,EAAyB,YAAI,WAC3B,MAAM,IAAIE,GAWZE,EAAexxG,UAAYlB,OAAOY,OAAOiH,MAAM3G,WAC/CwxG,EAAexxG,UAAUrB,KAAO,iBAEhCyyG,EAAoB,OAAI,SAAgBe,EAAWjpG,GACjD,GAAIipG,EAAW,OAAOA,EACtB,MAAM,IAAIX,EAAetoG,IAG3BkoG,EAAwB,WAAI,SAAoB/xG,GAC9C,OAAOA,GAGTkG,OAAsB,cAAI,SAAuBkqC,GAC/C,OAAOlqC,OAAOm4C,aAAa00D,MAAM7sG,OAAQkqC,IAG3ClqC,OAAuB,eAAI,SAAwBkqC,GACjD,OAAOlqC,OAAO8sG,cAAcD,MAAM7sG,OAAQkqC,IAGvClqC,OAAOvF,UAAUsyG,YACpBxzG,OAAOC,eAAewG,OAAOvF,UAAW,aAAc,CACpDX,MAAO,SAAoBkzG,EAAQC,GACjC,IAAIC,EAAM10G,KAAK20G,MAAMH,GAAQ7nG,KAAK8nG,GAElC,OADKD,EAAOroG,SAAQuoG,EAAMD,EAAaC,EAAMD,GACtCC,KAkBb,MAAME,EAAYntG,MAAMxF,UAAU4yG,KAClCptG,MAAMxF,UAAU4yG,KAAO,SAAcC,GACnC,OAAOF,EAAUp0G,KAAKR,KAAM80G,GAAcpB,IAG5CL,EAAuB,UAAI0B,OAAO77B,UAElCm6B,EAAqB,QAAI,SAAiB3zF,GACxC,MAAsB,iBAARA,GAGhB2zF,EAAwB,WAAI,SAAoB3zF,GAC9C,OAAO,GAGT2zF,EAAyB,YAAI,SAAqB3zF,GAChD,MAAsB,iBAARA,GAAmC,iBAARA,GAG3C2zF,EAAwB,WAAI,SAAoB3zF,GAC9C,MAAsB,mBAARA,GAGhB2zF,EAAsB,SAAI,SAAkB3zF,GAC1C,MAAsB,iBAARA,GAAoBA,aAAelY,QAGnD6rG,EAAqB,QAAI5rG,MAAMgyE,QAC/B45B,EAAyB,YAAI,SAAqBljG,GAChD,OAAOA,GACc,iBAATA,GACgB,iBAAhBA,EAAKhE,QACZgE,EAAKhE,QAAU,GACfpE,KAAKq1E,MAAMjtE,EAAKhE,UAAYgE,EAAKhE,QAGxCknG,EAAuB,UAAI,SAAmBljG,GAC5C,YAAuB,IAATA,GAGhBkjG,EAAwB,WAAI,SAAoBljG,GAC9C,OAAO,GAGTkjG,EAAuB,UAAI,SAAmBljG,GAC5C,OAAOA,GAGTkjG,EAAkB,KAAI,SAAcrpG,EAAGkqG,GACrC,OAAOlqG,EAAIkqG,GAGbb,EAAmB,MAAI,SAAerpG,EAAGkqG,GACvC,OAAOnsG,KAAKgsG,OAAO/pG,EAAIkqG,IAGzBb,EAAoB,OAAItrG,KAExBhH,OAAO8yG,iBAAiBR,EAAoB,OAAG,CAC7C2B,WAAY,CAAE1zG,MAAO,EAAKwyG,UAAU,GACpCmB,WAAY,CAAE3zG,MAAO,EAAKwyG,UAAU,GACpCoB,QAAS,CACP5zG,MAAO,SAAiB0I,GACV,OAAZ3C,EAAI,GAAK2C,EAAUmrG,QAASluG,EAAI,KAAO,GAAO+C,GAAKA,KAGvDorG,OAAQ,CACN9zG,MAAO,SAAgB0I,GACrBhK,KAAKg1G,WAAajtG,KAAKstG,IAAIrrG,GAC3BhK,KAAKi1G,WAAaltG,KAAKutG,IAAItrG,KAG/BurG,KAAM,CACJj0G,MAAO,SAAc0I,GACnB,OAAOjC,KAAKe,IAAI,EAAGkB,OAKzBqpG,EAAuB,UAAI,e,+BC5S3B1zG,EAAOD,QAAUO,G,8ECGjB,SAAkB0J,GAEhB,mBAEA,uCAEA,yCAEA,yCAEA,iCAEA,oBAEA,0BAEA,gDAEA,iCAEA,2CApBF,CAAkB,EAAAA,UAAA,EAAAA,QAAO,KAwBzB,2BAAgCwtD,GAC9B,OAAQA,GACN,KAAK,EAAwB,MAAO,iBACpC,KAAK,EAAyB,MAAO,kBACrC,KAAK,EAAyB,MAAO,kBACrC,KAAK,EAAqB,MAAO,cACjC,KAAK,GAAc,MAAO,OAC1B,KAAK,GAAiB,MAAO,UAC7B,KAAK,GAA4B,MAAO,qBACxC,KAAK,IAAoB,MAAO,aAChC,KAAK,IAAyB,MAAO,kBAGvC,OADA3sD,QAAO,GACA,K,8ECrCT,SAAYX,GAEV,uBAEA,uBAEA,eANF,CAAY,EAAAA,SAAA,EAAAA,OAAM,M,+aCalB,IAAaC,EAAb,QAAaA,EAAQ,GADpB0rG,WACY1rG,GAAA,EAAAA,WAQb,SAAkBC,GAEhB,mBAEA,yCAEA,qBAEA,iBAEA,iBAEA,0BAEA,sCAEA,sCAEA,uCAEA,uCAEA,uCAEA,sCAEA,oCAEA,0CAEA,wCAEA,qCAEA,qCAEA,qCAEA,sCAEA,sCAEA,oCAEA,mCAEA,yCAEA,uCAhDF,CAAkB,EAAAA,gBAAA,EAAAA,cAAa,M,iBCxB/B,wCACM3C,EAAM,IAAIsB,aAAarB,EAAIie,QAC3B3e,EAAM,IAAIwB,WAAWd,EAAIie,QAE/ByI,EAAO0nF,WAAa,SAASn0G,GAE3B,OADA8F,EAAI,GAAK9F,EACFqF,EAAI,IAGbonB,EAAO2nF,WAAa,SAASp0G,GAE3B,OADAqF,EAAI,GAAKrF,EACF8F,EAAI,IAGb2mB,EAAO4nF,WAAa,SAASr0G,GAE3B,OADA+F,EAAI,GAAK/F,EACFylB,QAAQpgB,EAAI,GAAIA,EAAI,KAG7BonB,EAAO6nF,WAAa,SAASt0G,GAG3B,OAFAqF,EAAI,GAAK2/B,QAAQhlC,GACjBqF,EAAI,GAAK4/B,SAASjlC,GACX+F,EAAI,M,kCCtBb,4BAA4B,EAAQ,IAEpC0mB,EAAOo7B,SAAW0sD,EAAKC,KAEvB/nF,EAAOgoF,QAAUF,EAAKG,IAEtBjoF,EAAOhH,QAAU,SAASkvF,EAAIC,GAC5B,OAAOL,EAAKM,SAASF,EAAIC,IAG3BnoF,EAAOuY,QAAU,SAAShlC,GACxB,OAAOA,EAAM80G,KAGfroF,EAAOwY,SAAW,SAASjlC,GACzB,OAAOA,EAAM+0G,MAGftoF,EAAOwyB,QAAU,SAAS1vC,EAAMC,GAC9B,OAAOD,EAAK4V,IAAI3V,IAGlBid,EAAOm7B,QAAU,SAASr4C,EAAMC,GAC9B,OAAOD,EAAKylG,IAAIxlG,IAGlBid,EAAO8yB,QAAU,SAAShwC,EAAMC,GAC9B,OAAOD,EAAK0lG,IAAIzlG,IAGlBid,EAAOyoF,QAAU,SAAS3lG,EAAMC,GAC9B,OAAOD,EAAK4lG,IAAI3lG,IAGlBid,EAAO2oF,UAAY,SAAS7lG,EAAMC,GAChC,OAAOD,EAAK8lG,aAAaF,IAAI3lG,EAAM6lG,cAAcC,YAGnD7oF,EAAO8oF,QAAU,SAAShmG,EAAMC,GAC9B,OAAOD,EAAK9H,IAAI+H,IAGlBid,EAAO+oF,UAAY,SAASjmG,EAAMC,GAChC,OAAOD,EAAK8lG,aAAa5tG,IAAI+H,EAAM6lG,cAAcC,YAGnD7oF,EAAOgpF,QAAU,SAASlmG,EAAMC,GAC9B,OAAOD,EAAKmmG,IAAIlmG,IAGlBid,EAAOkpF,OAAS,SAASpmG,EAAMC,GAC7B,OAAOD,EAAKqmG,GAAGpmG,IAGjBid,EAAOopF,QAAU,SAAStmG,EAAMC,GAC9B,OAAOD,EAAKumG,IAAItmG,IAGlBid,EAAOyyB,QAAU,SAAS3vC,EAAMC,GAC9B,OAAOD,EAAKwmG,IAAIvmG,IAGlBid,EAAOupF,QAAU,SAASzmG,EAAMC,GAC9B,OAAOD,EAAK0mG,IAAIzmG,IAGlBid,EAAO6tC,UAAY,SAAS/qD,EAAMC,GAChC,OAAOD,EAAK2mG,KAAK1mG,IAGnBid,EAAO0pF,QAAU,SAASn2G,GACxB,OAAOA,EAAMo2G,OAGf3pF,EAAO4pF,OAAS,SAAS9mG,EAAMC,GAC7B,OAAOD,EAAK+mG,GAAG9mG,IAGjBid,EAAO8pF,OAAS,SAAShnG,EAAMC,GAC7B,OAAOD,EAAKinG,GAAGhnG,IAGjBid,EAAO0tC,UAAY,SAASn6D,EAAOihE,GACjC/3D,OAAO+3D,GAA8C,IAAhCA,EAAaA,EAAY,IAC9C,IAAIp/B,EAAO0yE,EAAKkC,QAAQx1C,EAAY,GACpC,OAAOjhE,EAAMmlB,IAAI0c,GAAM6zE,IAAI7zE,EAAKu0E,QAGlC3pF,EAAOs6B,UAAY,SAAS/mD,GAC1B,OAAsB,IAAfA,EAAM+0G,MAAe/0G,EAAM80G,KAAO,GAAK90G,EAAM80G,KAAOlzG,GAAGqnC,YACvC,IAAhBjpC,EAAM+0G,MAAgB/0G,EAAM80G,KAAOlzG,GAAGqyD,WAAaj0D,EAAM80G,IAAM,GAGxEroF,EAAOw6B,WAAa,SAASjnD,GAC3B,OAAsB,IAAfA,EAAM+0G,MAAe/0G,EAAM80G,KAAO,GAAK90G,EAAM80G,KAAOjzG,IAAIonC,YACxC,IAAhBjpC,EAAM+0G,MAAgB/0G,EAAM80G,KAAOjzG,IAAIoyD,WAAaj0D,EAAM80G,IAAM,GAGzEroF,EAAO06B,WAAa,SAASnnD,GAC3B,OAAuB,IAAfA,EAAM+0G,MAAc/0G,EAAM80G,KAAO,IACjB,IAAhB90G,EAAM+0G,MAAe/0G,EAAM80G,IAAM,GAG3CroF,EAAOu6B,UAAY,SAAShnD,GAC1B,OAAsB,IAAfA,EAAM+0G,MAAc/0G,EAAM80G,KAAO,GAAK90G,EAAM80G,KAAO7yG,GAAGgnC,WAG/Dxc,EAAOy6B,WAAa,SAASlnD,GAC3B,OAAsB,IAAfA,EAAM+0G,MAAc/0G,EAAM80G,KAAO,GAAK90G,EAAM80G,KAAO5yG,IAAI+mC,WAGhExc,EAAO26B,WAAa,SAASpnD,GAC3B,OAAsB,IAAfA,EAAM+0G,MAGftoF,EAAO46B,YAAc,SAASrnD,GAC5B,OAAsB,IAAfA,EAAM+0G,OAA6B,IAAd/0G,EAAM80G,KAA2B,IAAd90G,EAAM80G,MAGvD,MAAM4B,EAAanC,EAAKoC,WAAWp0G,IAAIq0G,kBACjCC,EAAatC,EAAKoC,WAAWp0G,IAAIu0G,kBAEvCrqF,EAAOsqF,WAAa,SAAS/2G,GAC3B,OAAOA,EAAMg3G,IAAIN,IAAe12G,EAAMi3G,IAAIJ,IAG5C,MAAMK,EAAa3C,EAAKoC,WAAWn0G,IAAIo0G,kBACjCO,EAAa5C,EAAKoC,WAAWn0G,IAAIs0G,kBAEvCrqF,EAAO2qF,WAAa,SAASp3G,GAC3B,OAAOA,EAAMg3G,IAAIE,IAAel3G,EAAMi3G,IAAIE,IAG5C1qF,EAAOunD,WAAa,SAASh0E,GAC3B,OAAOysB,EAAOhmB,KAAKgsG,OAAOzyG,EAAMq3G,aAGlC5qF,EAAOwnD,WAAa,SAASj0E,GAC3B,OAAOA,EAAMq3G,YAGf5qF,EAAOilF,cAAgB,SAAS1xG,EAAOs3G,GACrC,OAAQA,EAAWt3G,EAAMq1G,aAAer1G,GAAOoK,SAAS,O,+BC9I1D/L,EAAOD,QAAUm2G,EAKjB,IAAIgD,EAAO,KAEX,IACEA,EAAO,IAAIC,YAAYC,SAAS,IAAID,YAAY58E,OAAO,IAAI7zB,WAAW,CACpE,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,MACvnC,IAAI3I,QACT,MAAOiiD,IAcT,SAASk0D,EAAKO,EAAKC,EAAMuC,GAMrB54G,KAAKo2G,IAAY,EAANA,EAMXp2G,KAAKq2G,KAAc,EAAPA,EAMZr2G,KAAK44G,WAAaA,EAoCtB,SAASI,EAAOC,GACZ,OAAsC,KAA9BA,GAAOA,EAAgB,YAXnCpD,EAAK5zG,UAAUi3G,WAEfn4G,OAAOC,eAAe60G,EAAK5zG,UAAW,aAAc,CAAEX,OAAO,IAkB7Du0G,EAAKmD,OAASA,EAOd,IAAIG,EAAY,GAOZC,EAAa,GAQjB,SAASrB,EAAQz2G,EAAOs3G,GACpB,IAAIK,EAAKI,EAAWC,EACpB,OAAIV,GAEIU,EAAS,IADbh4G,KAAW,IACgBA,EAAQ,OAC/B+3G,EAAYD,EAAW93G,IAEZ+3G,GAEfJ,EAAM9C,EAAS70G,GAAgB,EAARA,GAAa,GAAK,EAAI,GAAG,GAC5Cg4G,IACAF,EAAW93G,GAAS23G,GACjBA,IAGHK,GAAU,MADdh4G,GAAS,IACqBA,EAAQ,OAClC+3G,EAAYF,EAAU73G,IAEX+3G,GAEfJ,EAAM9C,EAAS70G,EAAOA,EAAQ,GAAK,EAAI,GAAG,GACtCg4G,IACAH,EAAU73G,GAAS23G,GAChBA,GAmBf,SAAShB,EAAW32G,EAAOs3G,GACvB,GAAIjqB,MAAMrtF,GACN,OAAOs3G,EAAWW,EAAQzD,EAC9B,GAAI8C,EAAU,CACV,GAAIt3G,EAAQ,EACR,OAAOi4G,EACX,GAAIj4G,GAASk4G,EACT,OAAOC,MACR,CACH,GAAIn4G,IAAUo4G,EACV,OAAOnkD,EACX,GAAIj0D,EAAQ,GAAKo4G,EACb,OAAOnvE,EAEf,OAAIjpC,EAAQ,EACD22G,GAAY32G,EAAOs3G,GAAUe,MACjCxD,EAAU70G,EAAQs4G,EAAkB,EAAIt4G,EAAQs4G,EAAkB,EAAGhB,GAmBhF,SAASzC,EAAS0D,EAASC,EAAUlB,GACjC,OAAO,IAAI/C,EAAKgE,EAASC,EAAUlB,GA5CvC/C,EAAKkC,QAAUA,EAkCflC,EAAKoC,WAAaA,EAsBlBpC,EAAKM,SAAWA,EAShB,IAAI4D,EAAUhyG,KAAKe,IASnB,SAASkxG,EAAW9vE,EAAK0uE,EAAUqB,GAC/B,GAAmB,IAAf/vE,EAAI/9B,OACJ,MAAMvD,MAAM,gBAChB,GAAY,QAARshC,GAAyB,aAARA,GAA8B,cAARA,GAA+B,cAARA,EAC9D,OAAO4rE,EASX,GARwB,iBAAb8C,GAEPqB,EAAQrB,EACRA,GAAW,GAEXA,IAAcA,GAElBqB,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMC,WAAW,SAErB,IAAI/3G,EACJ,IAAKA,EAAI+nC,EAAIgjB,QAAQ,MAAQ,EACzB,MAAMtkD,MAAM,mBACX,GAAU,IAANzG,EACL,OAAO63G,EAAW9vE,EAAIz9B,UAAU,GAAImsG,EAAUqB,GAAON,MAQzD,IAHA,IAAIQ,EAAelC,EAAW8B,EAAQE,EAAO,IAEzCx1E,EAASqxE,EACJz1G,EAAI,EAAGA,EAAI6pC,EAAI/9B,OAAQ9L,GAAK,EAAG,CACpC,IAAI0hC,EAAOh6B,KAAK4oD,IAAI,EAAGzmB,EAAI/9B,OAAS9L,GAChCiB,EAAQkqB,SAAS0e,EAAIz9B,UAAUpM,EAAGA,EAAI0hC,GAAOk4E,GACjD,GAAIl4E,EAAO,EAAG,CACV,IAAIq4E,EAAQnC,EAAW8B,EAAQE,EAAOl4E,IACtC0C,EAASA,EAAO8xE,IAAI6D,GAAO3zF,IAAIwxF,EAAW32G,SAG1CmjC,GADAA,EAASA,EAAO8xE,IAAI4D,IACJ1zF,IAAIwxF,EAAW32G,IAIvC,OADAmjC,EAAOm0E,SAAWA,EACXn0E,EAoBX,SAAS41E,EAAUrpE,EAAK4nE,GACpB,MAAmB,iBAAR5nE,EACAinE,EAAWjnE,EAAK4nE,GACR,iBAAR5nE,EACAgpE,EAAWhpE,EAAK4nE,GAEpBzC,EAASnlE,EAAIolE,IAAKplE,EAAIqlE,KAA0B,kBAAbuC,EAAyBA,EAAW5nE,EAAI4nE,UAftF/C,EAAKmE,WAAaA,EAyBlBnE,EAAKwE,UAAYA,EAUjB,IAcIT,EAAiBU,WAOjBd,EAAiBI,EAAiBA,EAOlCF,EAAiBF,EAAiB,EAOlCe,EAAaxC,EA5BI,GAAK,IAkCtBjC,EAAOiC,EAAQ,GAMnBlC,EAAKC,KAAOA,EAMZ,IAAIyD,EAAQxB,EAAQ,GAAG,GAMvBlC,EAAK0D,MAAQA,EAMb,IAAIvD,EAAM+B,EAAQ,GAMlBlC,EAAKG,IAAMA,EAMX,IAAIwE,EAAOzC,EAAQ,GAAG,GAMtBlC,EAAK2E,KAAOA,EAMZ,IAAIC,EAAU1C,GAAS,GAMvBlC,EAAK4E,QAAUA,EAMf,IAAIlwE,EAAY4rE,GAAS,EAAc,YAAc,GAMrDN,EAAKtrE,UAAYA,EAMjB,IAAIkvE,EAAqBtD,GAAS,GAAc,GAAc,GAM9DN,EAAK4D,mBAAqBA,EAM1B,IAAIlkD,EAAY4gD,EAAS,GAAG,YAAc,GAM1CN,EAAKtgD,UAAYA,EAMjB,IAAImlD,EAAgB7E,EAAK5zG,UAMzBy4G,EAAcC,MAAQ,WAClB,OAAO36G,KAAK44G,SAAW54G,KAAKo2G,MAAQ,EAAIp2G,KAAKo2G,KAOjDsE,EAAc/B,SAAW,WACrB,OAAI34G,KAAK44G,UACI54G,KAAKq2G,OAAS,GAAKuD,GAAmB55G,KAAKo2G,MAAQ,GACzDp2G,KAAKq2G,KAAOuD,GAAkB55G,KAAKo2G,MAAQ,IAUtDsE,EAAchvG,SAAW,SAAkBuuG,GAEvC,IADAA,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMC,WAAW,SACrB,GAAIl6G,KAAK46G,SACL,MAAO,IACX,GAAI56G,KAAK66G,aAAc,CACnB,GAAI76G,KAAK43G,GAAGriD,GAAY,CAGpB,IAAIulD,EAAY7C,EAAWgC,GACvBxD,EAAMz2G,KAAKy2G,IAAIqE,GACfC,EAAOtE,EAAIF,IAAIuE,GAAWxE,IAAIt2G,MAClC,OAAOy2G,EAAI/qG,SAASuuG,GAASc,EAAKJ,QAAQjvG,SAASuuG,GAEnD,MAAO,IAAMj6G,KAAK25G,MAAMjuG,SAASuuG,GAQzC,IAHA,IAAIE,EAAelC,EAAW8B,EAAQE,EAAO,GAAIj6G,KAAK44G,UAClDoC,EAAMh7G,KACNykC,EAAS,KACA,CACT,IAAIw2E,EAASD,EAAIvE,IAAI0D,GAEjBe,GADSF,EAAI1E,IAAI2E,EAAO1E,IAAI4D,IAAeQ,UAAY,GACvCjvG,SAASuuG,GAE7B,IADAe,EAAMC,GACEL,SACJ,OAAOM,EAASz2E,EAEhB,KAAOy2E,EAAO/uG,OAAS,GACnB+uG,EAAS,IAAMA,EACnBz2E,EAAS,GAAKy2E,EAASz2E,IASnCi2E,EAAcS,YAAc,WACxB,OAAOn7G,KAAKq2G,MAOhBqE,EAAcU,oBAAsB,WAChC,OAAOp7G,KAAKq2G,OAAS,GAOzBqE,EAAcW,WAAa,WACvB,OAAOr7G,KAAKo2G,KAOhBsE,EAAcY,mBAAqB,WAC/B,OAAOt7G,KAAKo2G,MAAQ,GAOxBsE,EAAca,cAAgB,WAC1B,GAAIv7G,KAAK66G,aACL,OAAO76G,KAAK43G,GAAGriD,GAAa,GAAKv1D,KAAK25G,MAAM4B,gBAEhD,IADA,IAAIvqE,EAAmB,GAAbhxC,KAAKq2G,KAAYr2G,KAAKq2G,KAAOr2G,KAAKo2G,IACnCoF,EAAM,GAAIA,EAAM,GACK,IAArBxqE,EAAO,GAAKwqE,GADOA,KAG5B,OAAoB,GAAbx7G,KAAKq2G,KAAYmF,EAAM,GAAKA,EAAM,GAO7Cd,EAAcE,OAAS,WACnB,OAAqB,IAAd56G,KAAKq2G,MAA2B,IAAbr2G,KAAKo2G,KAOnCsE,EAAce,IAAMf,EAAcE,OAMlCF,EAAcG,WAAa,WACvB,OAAQ76G,KAAK44G,UAAY54G,KAAKq2G,KAAO,GAOzCqE,EAAcgB,WAAa,WACvB,OAAO17G,KAAK44G,UAAY54G,KAAKq2G,MAAQ,GAOzCqE,EAAciB,MAAQ,WAClB,OAA0B,IAAP,EAAX37G,KAAKo2G,MAOjBsE,EAAckB,OAAS,WACnB,OAA0B,IAAP,EAAX57G,KAAKo2G,MAQjBsE,EAAc9hE,OAAS,SAAgBpe,GAGnC,OAFKw+E,EAAOx+E,KACRA,EAAQ6/E,EAAU7/E,KAClBx6B,KAAK44G,WAAap+E,EAAMo+E,UAAa54G,KAAKq2G,OAAS,IAAQ,GAAM77E,EAAM67E,OAAS,IAAQ,KAErFr2G,KAAKq2G,OAAS77E,EAAM67E,MAAQr2G,KAAKo2G,MAAQ57E,EAAM47E,MAS1DsE,EAAc9C,GAAK8C,EAAc9hE,OAOjC8hE,EAAcmB,UAAY,SAAmBrhF,GACzC,OAAQx6B,KAAK43G,GAAmBp9E,IASpCkgF,EAAcoB,IAAMpB,EAAcmB,UAQlCnB,EAAc5C,GAAK4C,EAAcmB,UAOjCnB,EAAcqB,SAAW,SAAkBvhF,GACvC,OAAOx6B,KAAKg8G,KAAqBxhF,GAAS,GAS9CkgF,EAAcuB,GAAKvB,EAAcqB,SAOjCrB,EAAcwB,gBAAkB,SAAyB1hF,GACrD,OAAOx6B,KAAKg8G,KAAqBxhF,IAAU,GAS/CkgF,EAAcnC,IAAMmC,EAAcwB,gBAQlCxB,EAAcyB,GAAKzB,EAAcwB,gBAOjCxB,EAAc0B,YAAc,SAAqB5hF,GAC7C,OAAOx6B,KAAKg8G,KAAqBxhF,GAAS,GAS9CkgF,EAAc2B,GAAK3B,EAAc0B,YAOjC1B,EAAc4B,mBAAqB,SAA4B9hF,GAC3D,OAAOx6B,KAAKg8G,KAAqBxhF,IAAU,GAS/CkgF,EAAcpC,IAAMoC,EAAc4B,mBAQlC5B,EAAc6B,GAAK7B,EAAc4B,mBAQjC5B,EAAc/hE,QAAU,SAAiBne,GAGrC,GAFKw+E,EAAOx+E,KACRA,EAAQ6/E,EAAU7/E,IAClBx6B,KAAK43G,GAAGp9E,GACR,OAAO,EACX,IAAIgiF,EAAUx8G,KAAK66G,aACf4B,EAAWjiF,EAAMqgF,aACrB,OAAI2B,IAAYC,GACJ,GACPD,GAAWC,EACL,EAENz8G,KAAK44G,SAGFp+E,EAAM67E,OAAS,EAAMr2G,KAAKq2G,OAAS,GAAO77E,EAAM67E,OAASr2G,KAAKq2G,MAAS77E,EAAM47E,MAAQ,EAAMp2G,KAAKo2G,MAAQ,GAAO,EAAI,EAFhHp2G,KAAKs2G,IAAI97E,GAAOqgF,cAAgB,EAAI,GAYnDH,EAAcsB,KAAOtB,EAAc/hE,QAMnC+hE,EAAcgC,OAAS,WACnB,OAAK18G,KAAK44G,UAAY54G,KAAK43G,GAAGriD,GACnBA,EACJv1D,KAAK03G,MAAMjxF,IAAIuvF,IAQ1B0E,EAAcf,IAAMe,EAAcgC,OAOlChC,EAAcj0F,IAAM,SAAak2F,GACxB3D,EAAO2D,KACRA,EAAStC,EAAUsC,IAIvB,IAAIC,EAAM58G,KAAKq2G,OAAS,GACpBwG,EAAkB,MAAZ78G,KAAKq2G,KACXyG,EAAM98G,KAAKo2G,MAAQ,GACnB2G,EAAiB,MAAX/8G,KAAKo2G,IAEX4G,EAAML,EAAOtG,OAAS,GACtB4G,EAAoB,MAAdN,EAAOtG,KACb6G,EAAMP,EAAOvG,MAAQ,GAGrB+G,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAYrC,OAVAD,IADAC,GAAOP,GAHgB,MAAbJ,EAAOvG,QAIF,GAGfgH,IADAC,GAAOP,EAAMI,KACE,GAGfC,IADAC,GAAOP,EAAMI,KACE,GAEfE,GAAOP,EAAMI,EAEN7G,GANPkH,GAAO,QAMiB,IATxBC,GAAO,QAQPH,GAAO,QACoC,IAH3CC,GAAO,OAG+Cp9G,KAAK44G,WAQ/D8B,EAAc6C,SAAW,SAAkBC,GAGvC,OAFKxE,EAAOwE,KACRA,EAAanD,EAAUmD,IACpBx9G,KAAKymB,IAAI+2F,EAAW7D,QAS/Be,EAAcpE,IAAMoE,EAAc6C,SAOlC7C,EAAc+C,SAAW,SAAkBC,GACvC,GAAI19G,KAAK46G,SACL,OAAO9E,EAKX,GAJKkD,EAAO0E,KACRA,EAAarD,EAAUqD,IAGvB7E,EAKA,OAAO1C,EAJG0C,EAAKtC,IAAIv2G,KAAKo2G,IACLp2G,KAAKq2G,KACLqH,EAAWtH,IACXsH,EAAWrH,MACTwC,EAAK8E,WAAY39G,KAAK44G,UAG/C,GAAI8E,EAAW9C,SACX,OAAO9E,EACX,GAAI91G,KAAK43G,GAAGriD,GACR,OAAOmoD,EAAW/B,QAAUpmD,EAAYugD,EAC5C,GAAI4H,EAAW9F,GAAGriD,GACd,OAAOv1D,KAAK27G,QAAUpmD,EAAYugD,EAEtC,GAAI91G,KAAK66G,aACL,OAAI6C,EAAW7C,aACJ76G,KAAK25G,MAAMpD,IAAImH,EAAW/D,OAE1B35G,KAAK25G,MAAMpD,IAAImH,GAAY/D,MACnC,GAAI+D,EAAW7C,aAClB,OAAO76G,KAAKu2G,IAAImH,EAAW/D,OAAOA,MAGtC,GAAI35G,KAAKi8G,GAAG1B,IAAemD,EAAWzB,GAAG1B,GACrC,OAAOtC,EAAWj4G,KAAK24G,WAAa+E,EAAW/E,WAAY34G,KAAK44G,UAKpE,IAAIgE,EAAM58G,KAAKq2G,OAAS,GACpBwG,EAAkB,MAAZ78G,KAAKq2G,KACXyG,EAAM98G,KAAKo2G,MAAQ,GACnB2G,EAAiB,MAAX/8G,KAAKo2G,IAEX4G,EAAMU,EAAWrH,OAAS,GAC1B4G,EAAwB,MAAlBS,EAAWrH,KACjB6G,EAAMQ,EAAWtH,MAAQ,GACzBwH,EAAuB,MAAjBF,EAAWtH,IAEjB+G,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAqBrC,OAnBAD,IADAC,GAAOP,EAAMa,KACE,GAGfR,IADAC,GAAOP,EAAMc,KACE,GACfP,GAAO,MAEPD,IADAC,GAAON,EAAMG,KACE,GAGfC,IADAC,GAAOP,EAAMe,KACE,GACfR,GAAO,MAEPD,IADAC,GAAON,EAAMI,KACE,GACfE,GAAO,MAEPD,IADAC,GAAOL,EAAME,KACE,GAEfE,GAAOP,EAAMgB,EAAMf,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE1C7G,GAZPkH,GAAO,QAYiB,IAlBxBC,GAAO,QAiBPH,GAAO,QACoC,IAH3CC,GAAO,OAG+Cp9G,KAAK44G,WAS/D8B,EAAcnE,IAAMmE,EAAc+C,SAQlC/C,EAAcmD,OAAS,SAAgBC,GAGnC,GAFK9E,EAAO8E,KACRA,EAAUzD,EAAUyD,IACpBA,EAAQlD,SACR,MAAMhyG,MAAM,oBAaZ,IAWAm1G,EAAQ/C,EAAKtG,EArBjB,GAAImE,EAIA,OAAK74G,KAAK44G,WACS,aAAf54G,KAAKq2G,OACY,IAAjByH,EAAQ1H,MAAgC,IAAlB0H,EAAQzH,KAU3BF,GANIn2G,KAAK44G,SAAWC,EAAKmF,MAAQnF,EAAKoF,OACzCj+G,KAAKo2G,IACLp2G,KAAKq2G,KACLyH,EAAQ1H,IACR0H,EAAQzH,MAESwC,EAAK8E,WAAY39G,KAAK44G,UARhC54G,KAWf,GAAIA,KAAK46G,SACL,OAAO56G,KAAK44G,SAAWW,EAAQzD,EAEnC,GAAK91G,KAAK44G,SA6BH,CAKH,GAFKkF,EAAQlF,WACTkF,EAAUA,EAAQnH,cAClBmH,EAAQzB,GAAGr8G,MACX,OAAOu5G,EACX,GAAIuE,EAAQzB,GAAGr8G,KAAKw3G,KAAK,IACrB,OAAOgD,EACX9F,EAAM6E,MAtCU,CAGhB,GAAIv5G,KAAK43G,GAAGriD,GACR,OAAIuoD,EAAQlG,GAAG5B,IAAQ8H,EAAQlG,GAAG6C,GACvBllD,EACFuoD,EAAQlG,GAAGriD,GACTygD,GAIP+H,EADe/9G,KAAKu3G,IAAI,GACNd,IAAIqH,GAASzG,IAAI,IACxBO,GAAG9B,GACHgI,EAAQjD,aAAe7E,EAAMyE,GAEpCO,EAAMh7G,KAAKs2G,IAAIwH,EAAQvH,IAAIwH,IAC3BrJ,EAAMqJ,EAAOt3F,IAAIu0F,EAAIvE,IAAIqH,KAI9B,GAAIA,EAAQlG,GAAGriD,GAClB,OAAOv1D,KAAK44G,SAAWW,EAAQzD,EACnC,GAAI91G,KAAK66G,aACL,OAAIiD,EAAQjD,aACD76G,KAAK25G,MAAMlD,IAAIqH,EAAQnE,OAC3B35G,KAAK25G,MAAMlD,IAAIqH,GAASnE,MAC5B,GAAImE,EAAQjD,aACf,OAAO76G,KAAKy2G,IAAIqH,EAAQnE,OAAOA,MACnCjF,EAAMoB,EAmBV,IADAkF,EAAMh7G,KACCg7G,EAAI1C,IAAIwF,IAAU,CAGrBC,EAASh2G,KAAK8nD,IAAI,EAAG9nD,KAAKo0E,MAAM6+B,EAAIrC,WAAamF,EAAQnF,aAWzD,IAPA,IAAIuF,EAAOn2G,KAAKkvC,KAAKlvC,KAAKo2G,IAAIJ,GAAUh2G,KAAKq2G,KACzCC,EAASH,GAAQ,GAAM,EAAInE,EAAQ,EAAGmE,EAAO,IAI7CI,EAAYrG,EAAW8F,GACvBQ,EAAYD,EAAU/H,IAAIuH,GACvBS,EAAU1D,cAAgB0D,EAAUlC,GAAGrB,IAG1CuD,GADAD,EAAYrG,EADZ8F,GAAUM,EACqBr+G,KAAK44G,WACdrC,IAAIuH,GAK1BQ,EAAU1D,WACV0D,EAAYtI,GAEhBtB,EAAMA,EAAIjuF,IAAI63F,GACdtD,EAAMA,EAAI1E,IAAIiI,GAElB,OAAO7J,GASXgG,EAAcjE,IAAMiE,EAAcmD,OAOlCnD,EAAc8D,OAAS,SAAgBV,GAKnC,OAJK9E,EAAO8E,KACRA,EAAUzD,EAAUyD,IAGpBjF,EAOO1C,GANIn2G,KAAK44G,SAAWC,EAAK4F,MAAQ5F,EAAK6F,OACzC1+G,KAAKo2G,IACLp2G,KAAKq2G,KACLyH,EAAQ1H,IACR0H,EAAQzH,MAESwC,EAAK8E,WAAY39G,KAAK44G,UAGxC54G,KAAKs2G,IAAIt2G,KAAKy2G,IAAIqH,GAASvH,IAAIuH,KAS1CpD,EAAc3xG,IAAM2xG,EAAc8D,OAQlC9D,EAAcM,IAAMN,EAAc8D,OAMlC9D,EAAchD,IAAM,WAChB,OAAOvB,GAAUn2G,KAAKo2G,KAAMp2G,KAAKq2G,KAAMr2G,KAAK44G,WAQhD8B,EAAc1D,IAAM,SAAax8E,GAG7B,OAFKw+E,EAAOx+E,KACRA,EAAQ6/E,EAAU7/E,IACf27E,EAASn2G,KAAKo2G,IAAM57E,EAAM47E,IAAKp2G,KAAKq2G,KAAO77E,EAAM67E,KAAMr2G,KAAK44G,WAQvE8B,EAAcxD,GAAK,SAAY18E,GAG3B,OAFKw+E,EAAOx+E,KACRA,EAAQ6/E,EAAU7/E,IACf27E,EAASn2G,KAAKo2G,IAAM57E,EAAM47E,IAAKp2G,KAAKq2G,KAAO77E,EAAM67E,KAAMr2G,KAAK44G,WAQvE8B,EAActD,IAAM,SAAa58E,GAG7B,OAFKw+E,EAAOx+E,KACRA,EAAQ6/E,EAAU7/E,IACf27E,EAASn2G,KAAKo2G,IAAM57E,EAAM47E,IAAKp2G,KAAKq2G,KAAO77E,EAAM67E,KAAMr2G,KAAK44G,WAQvE8B,EAAciE,UAAY,SAAmBC,GAGzC,OAFI5F,EAAO4F,KACPA,EAAUA,EAAQjE,SACE,IAAnBiE,GAAW,IACL5+G,KACF4+G,EAAU,GACRzI,EAASn2G,KAAKo2G,KAAOwI,EAAU5+G,KAAKq2G,MAAQuI,EAAY5+G,KAAKo2G,MAAS,GAAKwI,EAAW5+G,KAAK44G,UAE3FzC,EAAS,EAAGn2G,KAAKo2G,KAAQwI,EAAU,GAAK5+G,KAAK44G,WAS5D8B,EAAcrD,IAAMqD,EAAciE,UAOlCjE,EAAcmE,WAAa,SAAoBD,GAG3C,OAFI5F,EAAO4F,KACPA,EAAUA,EAAQjE,SACE,IAAnBiE,GAAW,IACL5+G,KACF4+G,EAAU,GACRzI,EAAUn2G,KAAKo2G,MAAQwI,EAAY5+G,KAAKq2G,MAAS,GAAKuI,EAAW5+G,KAAKq2G,MAAQuI,EAAS5+G,KAAK44G,UAE5FzC,EAASn2G,KAAKq2G,MAASuI,EAAU,GAAK5+G,KAAKq2G,MAAQ,EAAI,GAAK,EAAGr2G,KAAK44G,WASnF8B,EAAcnD,IAAMmD,EAAcmE,WAOlCnE,EAAcoE,mBAAqB,SAA4BF,GAI3D,GAHI5F,EAAO4F,KACPA,EAAUA,EAAQjE,SAEN,KADhBiE,GAAW,IAEP,OAAO5+G,KAEP,IAAIq2G,EAAOr2G,KAAKq2G,KAChB,OAAIuI,EAAU,GAEHzI,EADGn2G,KAAKo2G,MACUwI,EAAYvI,GAAS,GAAKuI,EAAWvI,IAASuI,EAAS5+G,KAAK44G,UAE9EzC,EADY,KAAZyI,EACSvI,EAEAA,IAAUuI,EAAU,GAFd,EAAG5+G,KAAK44G,WAY1C8B,EAAclD,KAAOkD,EAAcoE,mBAQnCpE,EAAcqE,MAAQrE,EAAcoE,mBAMpCpE,EAAc9D,SAAW,WACrB,OAAK52G,KAAK44G,SAEHzC,EAASn2G,KAAKo2G,IAAKp2G,KAAKq2G,MAAM,GAD1Br2G,MAQf06G,EAAc/D,WAAa,WACvB,OAAI32G,KAAK44G,SACE54G,KACJm2G,EAASn2G,KAAKo2G,IAAKp2G,KAAKq2G,MAAM,IAQzCqE,EAAcsE,QAAU,SAAiB7C,GACrC,OAAOA,EAAKn8G,KAAKi/G,YAAcj/G,KAAKk/G,aAOxCxE,EAAcuE,UAAY,WACtB,IAAI/I,EAAKl2G,KAAKq2G,KACVJ,EAAKj2G,KAAKo2G,IACd,MAAO,CACS,IAAZH,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,GACK,IAAZC,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,KAQfwE,EAAcwE,UAAY,WACtB,IAAIhJ,EAAKl2G,KAAKq2G,KACVJ,EAAKj2G,KAAKo2G,IACd,MAAO,CACHF,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,EACAD,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,IAWRJ,EAAKsJ,UAAY,SAAmB3hF,EAAOo7E,EAAUuD,GACjD,OAAOA,EAAKtG,EAAKuJ,YAAY5hF,EAAOo7E,GAAY/C,EAAKwJ,YAAY7hF,EAAOo7E,IAS5E/C,EAAKuJ,YAAc,SAAqB5hF,EAAOo7E,GAC3C,OAAO,IAAI/C,EACPr4E,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZo7E,IAUR/C,EAAKwJ,YAAc,SAAqB7hF,EAAOo7E,GAC3C,OAAO,IAAI/C,EACPr4E,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNo7E,K,4IClyCR,cACA,QACA,OAqIoC,EAAA0G,iBArIY,EAAAC,wBAEhD,aAKA,wBACE,OAAO,IAAI,EAAAC,SAIb,qBAA0Bx7F,EAAkBuV,GAC1CvV,EAAQuV,OAASA,GAInB,uBAA4BvV,EAAkBmD,GAC5CnD,EAAQmD,SAAWA,GAIrB,2BAAgCnD,EAAkB4yC,GAChD5yC,EAAQ4yC,aAAeA,GAIzB,2BAAgC5yC,EAAkB6yC,GAChD7yC,EAAQ6yC,aAAeA,GAIzB,0BAA+B7yC,EAAkB8yC,GAC/C9yC,EAAQ8yC,YAAcA,GAIxB,0BAA+B9yC,EAAkB+yC,GAC/C/yC,EAAQ+yC,YAAcA,GAIxB,wBAA6B/yC,EAAkBmT,GAC7CnT,EAAQmT,UAAYA,GAItB,yBAA8BnT,EAAkBoD,GAC9CpD,EAAQoD,WAAaA,GAIvB,wBAA6BpD,EAAkBqD,GAC7CrD,EAAQqD,UAAYA,GAItB,0BAA+BrD,EAAkB7M,EAAevW,GAC9D,IAAI0qB,EAAgBtH,EAAQsH,cACvBA,IAAetH,EAAQsH,cAAgBA,EAAgB,IAAI1jB,KAChE0jB,EAAcne,IAAIgK,EAAOvW,IAI3B,4BAAiCojB,EAAkBgzC,GACjDhzC,EAAQgzC,cAAgBA,GAI1B,uBAA4BhzC,EAAkBizC,GAC5CjzC,EAAQizC,SAAWA,GAIR,EAAAwoD,uBAAyB,EAEzB,EAAAC,wBAA0B,EAE1B,EAAAC,wBAA0B,EAE1B,EAAAC,oBAAsB,EAEtB,EAAAC,aAAe,GAEf,EAAAC,gBAAkB,GAElB,EAAAC,2BAA6B,GAE7B,EAAAC,mBAAqB,IAErB,EAAAC,wBAA0B,IAGvC,yBAA8Bj8F,EAAkBmzC,GAC9CnzC,EAAQ0sB,UAAYymB,GAItB,0BAA+BnzC,EAAkBmzC,GAC/CnzC,EAAQ0sB,WAAaymB,GAIvB,iCAAsCnzC,EAAkBk8F,EAAoBC,GAC1En8F,EAAQsD,kBAAoB44F,EAC5Bl8F,EAAQuD,gBAAkB44F,GAI5B,uBAA4Bn8F,EAAkBkzC,GAC5ClzC,EAAQkzC,SAAWA,GAMrB,sBAA2BlzC,GACzB,OAAO,IAAI,EAAAF,QAAQE,IAIrB,0BAA+B0O,GAC7B,OAAOA,EAAQxO,kBAAoBwO,EAAQ7lB,YAAYV,OACnDumB,EAAQ7lB,YAAY6lB,EAAQxO,qBAC5B,MAIN,qBAA0BwO,EAAkB/d,GAC1C,OAAO+d,EAAQ0tF,UAAUzrG,IAO3B,kBAAuBxJ,GACrB,OAAOA,EAAQhB,UAAY,EAAAF,mBAAmBI,MAIhD,qBAA0Bc,GACxB,OAAOA,EAAQhB,UAAY,EAAAF,mBAAmBK,SAIhD,mBAAwBa,GACtB,OAAOA,EAAQhB,UAAY,EAAAF,mBAAmBM,OAMhD,iBAEEmoB,EAEAzmB,EAEAoI,EAEA8uF,GAAgB,GAEhBzwE,EAAQxN,OAAOm7F,UAAUp0G,EAAMoI,EAAM8uF,IAIvC,oBAAyBzwE,GACvB,OAAOA,EAAQxN,OAAOo7F,YAIxB,uBAA4B5tF,EAAkB7K,GAC5C,OAAO6K,EAAQxN,OAAOq7F,YAAY14F,IAMpC,mBAAwB6K,GAEtB,OADAA,EAAQxN,OAAOs+E,SACR,IAAI,EAAA9rC,SAAShlC,GAASymC,WAI/B,oBAAyBzmC,GACvB,OAAO,EAAAigF,WAAWE,MAAMngF,IAI1B,oBAAyBA,GACvB,OAAO,EAAAwgF,WAAWL,MAAMngF,IAI1B,qBAA0BA,GACxB,IAAIlmB,EAAK,IAAI/E,MACb+E,EAAGE,KAAK,qBACR,IAAK,IAAI8zG,KAAO9tF,EAAQlO,eAAerS,SACrC3F,EAAGE,KAAK,SACRF,EAAGE,KAAK8zG,EAAIv7F,cACZzY,EAAGE,KAAK,QAEVF,EAAGE,KAAK,uBACR,IAAK,IAAI8zG,KAAO9tF,EAAQlO,eAAerS,SAAU,CAC/C,IAAIgnB,EAAOqnF,EAAIrnF,KACf3sB,EAAGE,KAAK,QACRF,EAAGE,KAAKysB,EAAOA,EAAK3T,GAAG9Z,WAAa,KACpCc,EAAGE,KAAK,OAEVF,EAAGE,KAAK,wBACR,IAAK,IAAI8zG,KAAO9tF,EAAQlO,eAAerS,SACrC3F,EAAGE,KAAK,QACRF,EAAGE,KAAK8zG,EAAIznF,UAAUrtB,YACtBc,EAAGE,KAAK,OAGV,OADAF,EAAGE,KAAK,YACDF,EAAGG,KAAK,KAIjB,WAAS,EAAA7J,eAAA,EAAAA,eAGT,QACA,QACA,SACA,SACA,SACA,QACA,SACA,QACA,SACA,QACA,QACA,QACA,QACA,S,8EClPA,oBAAyB29G,EAAU/rF,GAEjC,OADAlqB,OAAOkqB,GAAS,GAAKA,EAAQ,IACtBmjF,OACLd,QACE0J,EACAjgE,QACEu1D,QACAhvF,QAAQ2N,KAGZy0B,WAKJ,qBAA0Bs3D,EAAU/rF,EAAYgsF,GAE9C,OADAl2G,OAAOkqB,GAAS,GAAKA,EAAQ,IACtBgsF,EACHzJ,OACEwJ,EACAjgE,QACEu1D,QACAhvF,QAAQ2N,KAGZqiF,QACE0J,EACAhJ,QACEj3D,QACEu1D,QACAhvF,QAAQ2N,Q,8EC9BpB,SAAkBisF,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4BjgH,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,MAAMkgH,EAAS,GAAJlgH,EACX,OAAOkgH,GAAM,IAAcA,GAAM,KACrB,IAALlgH,GACK,IAALA,GACAA,EAAI,SAmLqBwK,EAnLYxK,GAoL9B,KAAOwK,EAAO,QACrB21G,EAAmB31G,EAAa41G,IAFzC,IAAkC51G,GA/KlC,8BAAmCxK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAMkgH,EAAS,GAAJlgH,EACX,OAAOkgH,GAAM,IAAcA,GAAM,KAC1BlgH,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBwK,EAzKYxK,GA0K7B,KAAOwK,EAAO,QACrB21G,EAAmB31G,EAAa61G,IAFzC,IAAiC71G,GArKjC,MAAM41G,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmB31G,EAAWu1G,GACrC,GAAIv1G,EAAOu1G,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIO,EACAC,EAHAhL,EAAK,EACLC,EAAKuK,EAAIt0G,OAIN8pG,EAAK,EAAIC,GAAI,CAIlB,GAHA8K,EAAM/K,GAAOC,EAAKD,GAAO,IAEzBgL,EAASR,EADTO,GAAc,EAANA,KAEM91G,GAAQA,GAAQu1G,EAAIO,EAAM,GACtC,OAAO,EAEL91G,EAAO+1G,EACT/K,EAAK8K,EAEL/K,EAAK+K,EAAM,EAGf,OAAO,I,8EC9WT,qBAA6B9uF,EAA4B,MACvD,GAAIA,EAAU,CACZ,IAAIhmB,EAAMgmB,EAAS/lB,OACf+0G,EAAS,IAAIz5G,MAASyE,GAC1B,IAAK,IAAI7L,EAAI,EAAGA,EAAI6L,IAAO7L,EAAGm5B,UAAU0nF,EAAO7gH,GAAK6xB,EAAS7xB,IAC7D,OAAO6gH,EAET,OAAO,IAAIz5G,OAGb,mBAA2ByqB,EAA0B,MACnD,GAAIA,EAAU,CACZ,IAAIgvF,EAAS,IAAIv5G,IACjB,IAAK,IAAIw5G,KAAKjvF,EAAUgvF,EAAOz6F,IAAI06F,GACnC,OAAOD,EAET,OAAO,IAAIv5G,KAGb,mBAA6BuqB,EAA4B,KAAMkvF,EAA6B,MAC1F,IAAIF,EAAS,IAAIt5G,IACjB,GAAIsqB,EAAU,CACZ,IAAK,IAAKra,EAAGspG,KAAMjvF,EAAUgvF,EAAO/zG,IAAI0K,EAAGspG,GAC3C,GAAIC,EAAW,IAAK,IAAKvpG,EAAGspG,KAAMC,EAAWF,EAAO/zG,IAAI0K,EAAGspG,QACtD,GAAIC,EACT,IAAK,IAAKvpG,EAAGspG,KAAMC,EAAWF,EAAO/zG,IAAI0K,EAAGspG,GAE9C,OAAOD,I,8ECrBT,aAUA,SAAgB1sG,EAAcH,GAK5B,IAJA,IAiBI+wC,EAjBAnpC,EAAM,EACN/P,EAAMmI,EAAKlI,OAGR8P,EAAM,EAAI/P,GACS,IAAxBmI,EAAK9H,WAAW0P,IAZF,IAad5H,EAAK9H,WAAW0P,EAAM,IAEtBA,GAAO,EAUT,KAPIA,EAAM,GAAK/P,EAAMmI,EAAKlI,UACxBkI,EAAOA,EAAK5H,UAAUwP,EAAK/P,GAC3BA,GAAO+P,EACPA,EAAM,GAIDA,EAAM,EAAI/P,GAAK,CAIpB,GAHAk5C,GAAQ,EA1BM,IA8BZ/wC,EAAK9H,WAAW0P,IACY,IAA5B5H,EAAK9H,WAAW0P,EAAM,GACtB,CAGA,IADAmpC,EAAQnpC,EAAM,GAAK/P,IAEjB+P,EAAM,EAAI/P,GApCA,IAqCVmI,EAAK9H,WAAW0P,EAAM,GACtB,CACA5H,EAAO+wC,EACH/wC,EAAK5H,UAAU,EAAGwP,GAClB5H,EAAK5H,UAAU,EAAGwP,GAAO5H,EAAK5H,UAAUwP,EAAM,GAClD/P,GAAO,EACP,SAKF,IADAk5C,EAAQnpC,EAAM,GAAK/P,IACsB,IAA5BmI,EAAK9H,WAAW0P,EAAM,IACjCA,EAAM,EAAI/P,GACkB,IAA5BmI,EAAK9H,WAAW0P,EAAM,IAlDZ,IAmDV5H,EAAK9H,WAAW0P,EAAM,GACtB,CAEA,IAAIolG,EAAOplG,EACX,OAASolG,GAAQ,GACf,GAxDQ,IAwDJhtG,EAAK9H,WAAW80G,GAAoB,CAClCplG,EAAMolG,GAAQ,GACa,IAA7BhtG,EAAK9H,WAAW80G,EAAO,IACM,IAA7BhtG,EAAK9H,WAAW80G,EAAO,KAEvBhtG,EAAO+wC,EACH/wC,EAAK5H,UAAU,EAAG40G,GAClBhtG,EAAK5H,UAAU,EAAG40G,GAAQhtG,EAAK5H,UAAUwP,EAAM,GACnD/P,GAAO+P,EAAM,EAAIolG,EACjBplG,EAAMolG,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAKplG,EAAM,IACT,GAAPA,GACoB,IAAtB5H,EAAK9H,WAAW,IACM,IAAtB8H,EAAK9H,WAAW,IAChB,CAEAL,GADAmI,EAAOA,EAAK5H,UAAUwP,EAAM,IACjB9P,OACX,WAKR8P,IAEF,OAAO/P,EAAM,EAAImI,EAAO,IAc1B,SAAgBitG,EAAQ11G,GACtB,IAAIqQ,EAAMrQ,EAAeO,OACzB,GAAI8P,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAxGc,IAwGVrQ,EAAeW,WAAW,GAC5B,OAAOX,EAGX,OAASqQ,EAAM,GACb,GA7Gc,IA6GVrQ,EAAeW,WAAW0P,GAC5B,OAAOrQ,EAAea,UAAU,EAAGwP,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4BrQ,EAAwB21G,GAClD,OAAI31G,EAAe6I,WAAW,QACrB7I,EAEF4I,EACL8sG,EAAQC,GAAU,EAAAj/G,eAAiBsJ,IAKvC,a,8ECvGA,kBAAuBY,EAAc06B,GACnC,KAAOA,GAAS,GACd16B,EAAGE,KALU,YAMbw6B,GAAS,EAEPA,GAAS,IACX16B,EAAGE,KAVU,QAWbw6B,GAAS,GAEPA,GACF16B,EAAGE,KAfU,Q,6BCuBjB,SAAgB80G,EAAQl8F,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgBG,EAASpkB,EAAYgkB,EAAoBC,GACvDD,EAAOC,GAAcjkB,EACrBgkB,EAAOC,EAAS,GAAKjkB,IAAU,EAC/BgkB,EAAOC,EAAS,GAAKjkB,IAAU,GAC/BgkB,EAAOC,EAAS,GAAKjkB,IAAU,GAIjC,SAAgBmgH,EAAQn8F,EAAoBC,GAC1C,IAAI0wF,EAAKuL,EAAQl8F,EAAQC,GACrB2wF,EAAKsL,EAAQl8F,EAAQC,EAAS,GAClC,OAAOwB,QAAQkvF,EAAIC,G,iDAzCrB,kBAAuB5wF,EAAoBC,GACzC,OAAOD,EAAOC,IAIhB,mBAAwBjkB,EAAYgkB,EAAoBC,GACtDD,EAAOC,GAAUjkB,GAInB,mBAAwBgkB,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/B,oBAAyBjkB,EAAYgkB,EAAoBC,GACvDD,EAAOC,GAAcjkB,EACrBgkB,EAAOC,EAAS,GAAKjkB,IAAU,GAIjC,YAQA,aAQA,YAOA,oBAAyBA,EAAYgkB,EAAoBC,GACvDG,EAAS4gB,QAAQhlC,GAAQgkB,EAAQC,GACjCG,EAAS6gB,SAASjlC,GAAQgkB,EAAQC,EAAS,IAI7C,mBAAwBD,EAAoBC,GAC1C,OAAOmwF,WAAW8L,EAAQl8F,EAAQC,KAIpC,oBAAyBjkB,EAAYgkB,EAAoBC,GACvDG,EAAS+vF,WAAWn0G,GAAQgkB,EAAQC,IAItC,mBAAwBD,EAAoBC,GAC1C,OAAOqwF,WAAW6L,EAAQn8F,EAAQC,KAIpC,oBAAyBjkB,EAAYgkB,EAAoBC,GACvD,IAAIm8F,EAAW/L,WAAWr0G,GAC1BokB,EAAS4gB,QAAQo7E,GAAWp8F,EAAQC,GACpCG,EAAS6gB,SAASm7E,GAAWp8F,EAAQC,EAAS","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocBuffer = \"__allocBuffer\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range,\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString(10));\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,i32[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = seen.get(range.source)!;\n        if (seenInSource.has(range.start)) {\n          let seenCodesAtPos = seenInSource.get(range.start)!;\n          if (seenCodesAtPos.includes(code)) return;\n          seenCodesAtPos.push(code);\n        } else {\n          seenInSource.set(range.start, [ code ]);\n        }\n      } else {\n        let seenInSource = new Map();\n        seenInSource.set(range.start, [ code ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.typeName = typeName;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    elem.flags = flags;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Checks if the given node represents a numeric (float or integer) literal. */\nexport function isNumericLiteral(node: Expression): bool {\n  if (node.kind == NodeKind.LITERAL) {\n    switch ((<LiteralExpression>node).literalKind) {\n      case LiteralKind.FLOAT:\n      case LiteralKind.INTEGER: return true;\n    }\n  }\n  return false;\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL,\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  kind = NodeKind.NEW;\n\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Token,\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Static array prototype reference. */\n  staticArrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocBuffer(size: usize, id: u32, data: usize = 0): usize` */\n  allocBufferInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    this.options = options;\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, id: u32, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? elementsByDeclaration.get(declaration)!\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonNames.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let localIdentifier = queuedImport.localIdentifier;\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            localIdentifier.text,\n            element,\n            localIdentifier // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonNames.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonNames.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonNames.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    this.staticArrayPrototype = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonNames.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonNames.alloc);\n    this.reallocInstance = this.requireFunction(CommonNames.realloc);\n    this.freeInstance = this.requireFunction(CommonNames.free);\n    this.retainInstance = this.requireFunction(CommonNames.retain);\n    this.releaseInstance = this.requireFunction(CommonNames.release);\n    this.collectInstance = this.requireFunction(CommonNames.collect);\n    this.typeinfoInstance = this.requireFunction(CommonNames.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonNames.instanceof_);\n    this.visitInstance = this.requireFunction(CommonNames.visit);\n    this.allocBufferInstance = this.requireFunction(CommonNames.allocBuffer);\n    this.allocArrayInstance = this.requireFunction(CommonNames.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = exports.get(\"default\")!;\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var managedClasses = this.managedClasses;\n    var cyclics = new Set<Class>();\n    for (let instance of managedClasses.values()) {\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = members.get(name)!;\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport || element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element, localIdentifier: IdentifierExpression): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name)!;\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\nvar nextFunctionTarget = 0;\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      \"~sig\" + nextFunctionTarget.toString(),\n      \"~sig\" + nextFunctionTarget.toString(),\n      program,\n      program.nativeFile\n    );\n    ++nextFunctionTarget;\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n    } while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = instanceMembers.get(name)!;\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      for (let [baseName, baseType] of inheritedTypeArguments) {\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field !== null && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = []\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport enum NativeType {\n  None = 0 /* _BinaryenTypeNone */,\n  Unreachable = 1 /* _BinaryenTypeUnreachable */,\n  I32 = 2 /* _BinaryenTypeInt32 */,\n  I64 = 3 /* _BinaryenTypeInt64 */,\n  F32 = 4 /* _BinaryenTypeFloat32 */,\n  F64 = 5 /* _BinaryenTypeFloat64 */,\n  V128 = 6 /* _BinaryenTypeVec128 */,\n  Funcref = 7 /* _BinaryenTypeFuncref */,\n  Anyref = 8 /* _BinaryenTypeAnyref */,\n  Nullref = 9 /* _BinaryenTypeNullref */,\n  Exnref = 10 /* _BinaryenTypeExnref */,\n  Auto = -1 /* _BinaryenTypeAuto */\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  All = 511 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  Host = 20 /* _BinaryenHostId */,\n  Nop = 21 /* _BinaryenNopId */,\n  Unreachable = 22 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 24 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 23 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 25 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 26 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 27 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 28 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 29 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 30 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 31 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 32 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 33 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 34 /* _BinaryenMemoryInitId */,\n  DataDrop = 35 /* _BinaryenDataDropId */,\n  MemoryCopy = 36 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 37 /* _BinaryenMemoryFillId */,\n  Push = 38 /* _BinaryenPushId */,\n  Pop = 39 /* _BinaryenPopId */,\n  RefNull = 40 /* _BinaryenRefNullId */,\n  RefIsNull = 41 /* _BinaryenRefIsNullId */,\n  RefFunc = 42 /* _BinaryenRefFuncId */,\n  Try = 43 /* _BinaryenTryId */,\n  Throw = 44 /* _BinaryenThrowId */,\n  Rethrow = 45 /* _BinaryenRethrowId */,\n  BrOnExn = 46 /* _BinaryenBrOnExnId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  NegI8x16 = 67 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 68 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 69 /* _BinaryenAllTrueVecI8x16 */,\n  NegI16x8 = 70 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 71 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 72 /* _BinaryenAllTrueVecI16x8 */,\n  NegI32x4 = 73 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 74 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 75 /* _BinaryenAllTrueVecI32x4 */,\n  NegI64x2 = 76 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 77 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 78 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 79 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 80 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 81 /* _BinaryenSqrtVecF32x4 */,\n  AbsF64x2 = 82 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 83 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 84 /* _BinaryenSqrtVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 85 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 86 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 87 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 88 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 89 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 90 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 91 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 92 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 93 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 94 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 95 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 96 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 97 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 98 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 99 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 100 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrU32 = 11 /* _BinaryenShrUInt32 */,\n  ShrI32 = 12 /* _BinaryenShrSInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrU64 = 36 /* _BinaryenShrUInt64 */,\n  ShrI64 = 37 /* _BinaryenShrSInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n  AddF32x4 = 156 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 157 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 158 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 159 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 160 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 161 /* _BinaryenMaxVecF32x4 */,\n  AddF64x2 = 162 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 163 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 164 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 165 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 166 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 167 /* _BinaryenMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 168 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 169 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 170 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 171 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 172 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum HostOp {\n  MemorySize = 0 /* _BinaryenMemorySize */,\n  MemoryGrow = 1 /* _BinaryenMemoryGrow */,\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = binaryen._BinaryenModuleCreate();\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var module = new Module();\n    var cArr = allocU8Array(buffer);\n    module.ref = binaryen._BinaryenModuleRead(cArr, buffer.length);\n    binaryen._free(changetype<usize>(cArr));\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n      binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, params, results)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, params, results);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, params, results, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, params, results);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      binaryen._BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      binaryen._BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(names[i]);\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = binaryen._BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = binaryen._BinaryenGetShrinkLevel();\n    var previousDebugInfo = binaryen._BinaryenGetDebugInfo();\n    binaryen._BinaryenSetOptimizeLevel(4);\n    binaryen._BinaryenSetShrinkLevel(0);\n    binaryen._BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = binaryen._BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    binaryen._BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = binaryen._BinaryenFunctionGetBody(func);\n    if (binaryen._BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = binaryen._BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    binaryen._BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(previousShrinkLevel);\n    binaryen._BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = binaryen.__i32_load(out);\n      let binaryLen = binaryen.__i32_load(out + 4);\n      sourceMapPtr = binaryen.__i32_load(out + 8);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryLen);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) binaryen._free(cStr);\n      if (binaryPtr) binaryen._free(binaryPtr);\n      if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) binaryen._free(ptr);\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (binaryen._BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocI32Array(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array(arity);\n  for (let i = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): Index {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType {\n  // TODO: unify this on Binaryen's side?\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return createType(types);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInit(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventType(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetType(event));\n}\n\nexport function getEventParamCount(event: EventRef): Index {\n  return binaryen._BinaryenEventGetNumParams(event);\n}\n\nexport function getEventParam(event: EventRef, index: Index): NativeType {\n  return binaryen._BinaryenEventGetParam(event, index);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = binaryen._RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  Any = 2047 /* _BinaryenSideEffectAny */,\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Any host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is a host type. */\n  HOST = 1 << 11\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Any host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.HOST       |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          let start = this.pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && this.pos < this.end &&\n            ((text.charCodeAt(this.pos)) & 0xFC00) == 0xDC00\n          ) ++this.pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, this.pos)\n          );\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.text) {\n          case CommonNames.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonNames.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonNames.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonNames.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(10), numArguments.toString(10)\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = contextualTypeArguments.get(name)!;\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type)!;\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          node.range\n        );\n        return null;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType)!;\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType)!;\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.classReference;\n        if (ctxType.is(TypeFlags.REFERENCE) && classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.is(TypeFlags.REFERENCE) &&\n          !elementType.is(TypeFlags.HOST) // TODO: anyref isn't nullable as-is\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked` behaves like parenthesized\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinNames.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool)!;\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Class[] = [];\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.push(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n      } while (current = current.basePrototype);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.includes(base)) return instance;\n    }\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var instanceMembers = instance.members;\n    if (!instanceMembers) instance.members = instanceMembers = new Map();\n\n    // Alias base members\n    var pendingClasses = this.resolveClassPending;\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.includes(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let field = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            field.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, field); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.nextMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          assert(instance.contextualTypeArguments),\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    var pendingIndex = pendingClasses.indexOf(instance);\n    assert(~pendingIndex); // must be pending\n    pendingClasses.splice(pendingIndex, 1);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    var derivedPendingClasses = new Array<Class>();\n    for (let i = 0, k = pendingClasses.length; i < k; ++i) {\n      let pending = pendingClasses[i];\n      if (instance == pending.base) derivedPendingClasses.push(pending);\n    }\n    for (let i = 0, k = derivedPendingClasses.length; i < k; ++i) {\n      this.finishResolveClass(derivedPendingClasses[i], reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow always calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 13,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.parentFunction = this.parentFunction;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop()!;\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      case NativeType.Anyref: {\n        temps = parentFunction.tempAnyrefs || (parentFunction.tempAnyrefs = []);\n        break;\n      }\n      case NativeType.Exnref: {\n        temps = parentFunction.tempExnrefs || (parentFunction.tempExnrefs = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name)!;\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && scope.has(name)) return scope.get(name)!;\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name)!;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ALLOCATES) { // can become conditional\n      if (otherFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (otherFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ALLOCATES) {\n      if (rightFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (rightFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n    var combinedFlags = new Array<LocalFlags>(maxLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n      let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n      let newFlags = leftFlags & rightFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (leftFlags & LocalFlags.RETAINED) {\n        if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (rightFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      combinedFlags[i] = newFlags;\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.is(TypeFlags.REFERENCE)) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0), iff);\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr)))!);\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ALLOCATES)) sb.push(\"ALLOCATES\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ALLOCATES)) sb.push(\"CONDITIONALLY_ALLOCATES\");\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","const binaryen = global.Binaryen || (global.Binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinNames,\n  compileCall as compileBuiltinCall,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonNames,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Static table start offset. */\n  tableBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: string[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled library functions. */\n  lazyLibraryFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    var module = Module.create();\n    this.module = module;\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        for (let classInstance of cyclicClasses) {\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy library functions\n    var lazyLibraryFunctions = this.lazyLibraryFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      for (let instance of lazyLibraryFunctions) {\n        functionsToCompile.push(instance);\n      }\n      lazyLibraryFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyLibraryFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    for (let prototype of this.pendingClassInstanceOf.values()) {\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      ExportNames.memory,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTable, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureBuiltinArgumentsLength();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport((<Field>element).internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport((<Field>element).internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (instance) this.compileClass(instance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          assert(!getterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(getterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          assert(!setterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) for (let element of members.values()) this.compileElement(element);\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          let origInitExpr = initExpr;\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n          if (this.skippedAutoreleases.has(origInitExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = elementsByName.get(fromName)!;\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n          }\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyLibraryFunctions.add(instance);\n        return true;\n      }\n    }\n\n    var previousType = this.currentType;\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        module.flatten(stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitializationInConstructor(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n            if (getterPrototype) {\n              assert(!getterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(getterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n            if (setterPrototype) {\n              assert(!setterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(setterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) instance.set(CommonFlags.COMPILED);\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType))\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType))\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) instance.set(CommonFlags.COMPILED);\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance.id, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, id, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.nextMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance.id, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(instance: Function): i32 {\n    assert(instance.is(CommonFlags.COMPILED));\n    var index = instance.functionTableIndex;\n    if (index >= 0) return index;\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    index = tableBase + functionTable.length;\n    if (!instance.is(CommonFlags.TRAMPOLINE) && instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      instance = this.ensureTrampoline(instance);\n    }\n    functionTable.push(instance.internalName);\n    instance.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = (<NamespaceDeclaration>statement).members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(statement.condition, Type.i32),\n          this.currentType\n        )\n      );\n      let condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          bodyStmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileWhileStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(condition, Type.bool),\n          this.currentType\n        )\n      );\n      condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          stmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        if (hasSideEffects(condExpr)) {\n          return module.block(null, [\n            module.drop(condExpr),\n            this.compileStatement(ifTrue)\n          ]);\n        }\n        return this.compileStatement(ifTrue);\n      }\n      case ConditionKind.FALSE: {\n        if (hasSideEffects(condExpr)) {\n          return ifFalse\n            ? module.block(null, [\n                module.drop(condExpr),\n                this.compileStatement(ifFalse)\n              ])\n            : module.drop(condExpr);\n        }\n        return ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    if (thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = scopedLocals.get(name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.is(TypeFlags.REFERENCE) || toType.is(TypeFlags.REFERENCE)) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.is(TypeFlags.NULLABLE) && !toType.is(TypeFlags.NULLABLE)) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonNames.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    return this.makeAssignment(\n      target,\n      valueExpr,\n      this.currentType,\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        assert(valueType == returnType);\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let instance = <Class>(<Property>target).parent;\n        assert(instance.kind == ElementKind.CLASS);\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), instance.type);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let instance = <Class>(<IndexSignature>target).parent;\n        assert(instance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = instance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, instance.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = instance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, instance.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2);\n        let valueType = indexedSet.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), instance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(instance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (!valueType.is(TypeFlags.NULLABLE) || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          module.local_get(localIndex, type.toNativeType()),\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          module.global_get(global.internalName, nativeType),\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitializationInConstructor(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.flatten(stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression;\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\n        if (!instance) return this.module.unreachable();\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          instance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonNames.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      trampolineSignature.nativeParams,\n      trampolineSignature.nativeResults,\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureBuiltinArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n      // TODO: Enable this once mutable globals are the default nearly everywhere.\n      // if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n      //   module.addGlobalExport(BuiltinNames.argumentsLength, ExportNames.argumentsLength);\n      // } else {\n        module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n          module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n        );\n        module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n      // }\n    }\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        for (let local of scopedLocals.values()) {\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType())\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        let returnType = this.currentType;\n        if (returnType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, returnType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureBuiltinArgumentsLength();\n          return module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.ensureBuiltinArgumentsLength();\n    var expr = module.block(null, [\n      module.global_set(BuiltinNames.argumentsLength, // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      module.call_indirect(\n        this.options.isWasm64\n          ? module.unary(UnaryOp.WrapI64, indexArg)\n          : indexArg,\n        operands,\n        signature.nativeParams,\n        signature.nativeResults\n      )\n    ], returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            if (!isUnchecked && this.options.pedantic) {\n              this.pedantic(\n                DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n                expression.range\n              );\n            }\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          return module.ref_null();\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitializationInConstructor(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.flatten(stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentParent || actualFunction\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        if (contextualType.is(TypeFlags.HOST | TypeFlags.REFERENCE)) {\n          this.currentType = Type.anyref;\n          return module.ref_func(instance.internalName);\n        }\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      makeMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.classReference;\n    if (actualType.is(TypeFlags.REFERENCE) && classReference !== null) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.is(TypeFlags.NULLABLE)) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.block(null, [\n            module.drop(expr),\n            module.i32(1)\n          ], NativeType.I32);\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    if (contextualType.is(TypeFlags.REFERENCE)) {\n      let classReference = contextualType.classReference;\n      if (classReference !== null && classReference.extends(program.staticArrayPrototype)) {\n        return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n      }\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = assert(arrayInstance.getTypeArgumentsTo(program.arrayPrototype))[0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __allocArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32((<Class>arrayInstance).id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = (<Class>arrayInstance).lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32((<Class>arrayInstance).id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression)\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    assert(contextualType.is(TypeFlags.REFERENCE));\n    var arrayInstance = assert(contextualType.classReference);\n    var arrayType = arrayInstance.type;\n    var elementType = assert(arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype))[0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr: ExpressionRef;\n      if (expression) {\n        expr = module.precomputeExpression(\n          this.compileExpression(<Expression>expression, elementType,\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          )\n        );\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n        } else {\n          isStatic = false;\n        }\n      } else {\n        expr = this.makeZero(elementType);\n      }\n      values[i] = expr;\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.runtimeHeaderSize));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __allocBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression)\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression)\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(classReference.type);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.flatten(exprs, this.options.nativeSizeType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    var contextualTypeArguments = makeMap(classInstance.contextualTypeArguments);\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        contextualTypeArguments\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        contextualTypeArguments\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitializationInConstructor(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n        let thisType = this.currentType;\n        if (thisType.is(TypeFlags.NULLABLE)) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.resolver.resolveFunction(prototype, null);\n          if (!instance) return module.unreachable();\n          if (!this.compileFunction(instance)) return module.unreachable();\n          this.currentType = instance.type;\n          return module.i32(this.ensureFunctionTableEntry(instance));\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.ANYREF: return module.ref_null();\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ANYREF: {\n        // TODO: non-null object might still be considered falseish\n        // i.e. a ref to Boolean(false), Number(0), String(\"\") etc.\n        return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonNames.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var stringInstance = program.stringInstance;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type);\n    }\n\n    var filenameArg = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageArg,\n          filenameArg,\n          module.i32(codeLocation.range.line),\n          module.i32(codeLocation.range.column)\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(type.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.is(TypeFlags.REFERENCE) && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(assert(toType.classReference).id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Evaluates the kind of a boolean condition from its expression. */\nfunction evaluateConditionKind(expr: ExpressionRef): ConditionKind {\n  assert(getExpressionType(expr) == NativeType.I32 || getExpressionType(expr) == NativeType.Unreachable);\n  if (getExpressionId(expr) == ExpressionId.Const) {\n    return getConstValueI32(expr)\n      ? ConditionKind.TRUE\n      : ConditionKind.FALSE;\n  }\n  return ConditionKind.UNKNOWN;\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression,\n  isNumericLiteral\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects,\n  createType\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinNames.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinNames.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinNames.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinNames.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinNames.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinNames.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinNames.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinNames.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinNames.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinNames.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinNames.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinNames.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinNames.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.nextMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinNames.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinNames.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let temp1 = flow.getTempLocal(Type.i32);\n            let temp2 = flow.getTempLocal(Type.i32);\n            // (x + (x >> 31)) ^ (x >> 31)\n            let ret = module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I32)\n              ),\n              module.local_get(temp2.index, NativeType.I32)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let temp1 = flow.getTempLocal(options.usizeType);\n            let temp2 = flow.getTempLocal(options.usizeType);\n            let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, options.nativeSizeType)\n              ),\n              module.local_get(temp2.index, options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let temp1 = flow.getTempLocal(Type.i64);\n            let temp2 = flow.getTempLocal(Type.i64);\n            // (x + (x >> 63)) ^ (x >> 63)\n            let ret = module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(temp1.index, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I64)\n              ),\n              module.local_get(temp2.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinNames.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinNames.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinNames.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinNames.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinNames.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinNames.atomic_sub:\n    case BuiltinNames.atomic_and:\n    case BuiltinNames.atomic_or:\n    case BuiltinNames.atomic_xor:\n    case BuiltinNames.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinNames.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinNames.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinNames.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinNames.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinNames.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinNames.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinNames.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinNames.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinNames.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinNames.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinNames.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinNames.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinNames.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinNames.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinNames.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinNames.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinNames.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinNames.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinNames.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinNames.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        // use stdlib alternative if not supported\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinNames.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        // use stdlib alternative if not supported\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinNames.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (!fromType.isChangeableTo(toType)) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinNames.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        let flow = compiler.currentFlow;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let temp = flow.getTempLocal(type);\n            flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            let ret = module.if(\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.I32),\n              abort\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let temp = flow.getTempLocal(Type.i64);\n            let ret = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let temp = flow.getTempLocal(compiler.options.usizeType);\n            let ret = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, compiler.options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F32: {\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(temp.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(temp.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinNames.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinNames.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinNames.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinNames.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinNames.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinNames.v128: // alias for now\n    case BuiltinNames.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_swizzle: { // swizzle(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n    }\n    case BuiltinNames.v128_load_splat: { // load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I16:\n          case TypeKind.U16: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          case TypeKind.F32: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n            }\n            // fall-through\n          }\n          case TypeKind.I64:\n          case TypeKind.U64:\n          case TypeKind.F64: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_load_ext: { // load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n          case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n          case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n          case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_dot: { // dot<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_avgr: { // avgr<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinNames.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinNames.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinNames.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndNotV128, arg0, arg1);\n    }\n    case BuiltinNames.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    case BuiltinNames.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinNames.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinNames.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinNames.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n    case BuiltinNames.isNaN: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // never NaN\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(0)\n                ], NativeType.I32)\n              : module.i32(0);\n          }\n          // (t = arg0) != t\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF32,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.NeF32,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF64,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.NeF64,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.isFinite: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // always finite\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(1)\n                ], NativeType.I32)\n              : module.i32(1);\n          }\n          // (t = arg0) - t == 0\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF32,\n                module.binary(BinaryOp.SubF32,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n                ),\n                module.f32(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.EqF32,\n              module.binary(BinaryOp.SubF32,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F32)\n              ),\n              module.f32(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF64,\n                module.binary(BinaryOp.SubF64,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n                ),\n                module.f64(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.EqF64,\n              module.binary(BinaryOp.SubF64,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F64)\n              ),\n              module.f64(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n      );\n      return module.unreachable();\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinNames.i32_clz: return deferASM(BuiltinNames.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_clz: return deferASM(BuiltinNames.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i32_ctz: return deferASM(BuiltinNames.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_ctz: return deferASM(BuiltinNames.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i32_popcnt: return deferASM(BuiltinNames.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_popcnt: return deferASM(BuiltinNames.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i32_rotl: return deferASM(BuiltinNames.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_rotl: return deferASM(BuiltinNames.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i32_rotr: return deferASM(BuiltinNames.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_rotr: return deferASM(BuiltinNames.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.f32_abs: return deferASM(BuiltinNames.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_abs: return deferASM(BuiltinNames.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_max: return deferASM(BuiltinNames.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_max: return deferASM(BuiltinNames.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_min: return deferASM(BuiltinNames.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_min: return deferASM(BuiltinNames.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_ceil: return deferASM(BuiltinNames.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_ceil: return deferASM(BuiltinNames.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_floor: return deferASM(BuiltinNames.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_floor: return deferASM(BuiltinNames.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_copysign: return deferASM(BuiltinNames.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_copysign: return deferASM(BuiltinNames.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_nearest: return deferASM(BuiltinNames.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_nearest: return deferASM(BuiltinNames.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.i32_reinterpret_f32: return deferASM(BuiltinNames.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinNames.i64_reinterpret_f64: return deferASM(BuiltinNames.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_reinterpret_i32: return deferASM(BuiltinNames.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinNames.f64_reinterpret_i64: return deferASM(BuiltinNames.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinNames.f32_sqrt: return deferASM(BuiltinNames.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_sqrt: return deferASM(BuiltinNames.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_trunc: return deferASM(BuiltinNames.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_trunc: return deferASM(BuiltinNames.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.i32_load8_s: return deferASM(BuiltinNames.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_load8_u: return deferASM(BuiltinNames.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_load16_s: return deferASM(BuiltinNames.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_load16_u: return deferASM(BuiltinNames.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_load: return deferASM(BuiltinNames.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_load8_s: return deferASM(BuiltinNames.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load8_u: return deferASM(BuiltinNames.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load16_s: return deferASM(BuiltinNames.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load16_u: return deferASM(BuiltinNames.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load32_s: return deferASM(BuiltinNames.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load32_u: return deferASM(BuiltinNames.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load: return deferASM(BuiltinNames.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.f32_load: return deferASM(BuiltinNames.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_load: return deferASM(BuiltinNames.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.i32_store8: return deferASM(BuiltinNames.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_store16: return deferASM(BuiltinNames.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_store: return deferASM(BuiltinNames.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_store8: return deferASM(BuiltinNames.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_store16: return deferASM(BuiltinNames.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_store32: return deferASM(BuiltinNames.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_store: return deferASM(BuiltinNames.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.f32_store: return deferASM(BuiltinNames.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_store: return deferASM(BuiltinNames.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinNames.i32_atomic_load8_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_load16_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_load: return deferASM(BuiltinNames.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_load8_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_load16_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_load32_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_load: return deferASM(BuiltinNames.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_store8: return deferASM(BuiltinNames.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_store16: return deferASM(BuiltinNames.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_store: return deferASM(BuiltinNames.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_store8: return deferASM(BuiltinNames.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_store16: return deferASM(BuiltinNames.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_store32: return deferASM(BuiltinNames.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_store: return deferASM(BuiltinNames.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_add: return deferASM(BuiltinNames.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_add: return deferASM(BuiltinNames.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_sub: return deferASM(BuiltinNames.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_sub: return deferASM(BuiltinNames.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_and: return deferASM(BuiltinNames.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_and: return deferASM(BuiltinNames.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_or: return deferASM(BuiltinNames.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_or: return deferASM(BuiltinNames.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_xor: return deferASM(BuiltinNames.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_xor: return deferASM(BuiltinNames.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_xchg: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_xchg: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_wait: return deferASM(BuiltinNames.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_wait: return deferASM(BuiltinNames.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinNames.v128_load: return deferASM(BuiltinNames.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinNames.v128_store: return deferASM(BuiltinNames.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinNames.i8x16_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_extract_lane_s: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinNames.i8x16_extract_lane_u: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinNames.i8x16_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_add: return deferASM(BuiltinNames.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_min_s: return deferASM(BuiltinNames.v128_min, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_min_u: return deferASM(BuiltinNames.v128_min, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_max_s: return deferASM(BuiltinNames.v128_max, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_max_u: return deferASM(BuiltinNames.v128_max, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_avgr_u: return deferASM(BuiltinNames.v128_avgr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_add_saturate_s: return deferASM(BuiltinNames.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_add_saturate_u: return deferASM(BuiltinNames.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_sub_saturate_s: return deferASM(BuiltinNames.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_sub_saturate_u: return deferASM(BuiltinNames.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_shl: return deferASM(BuiltinNames.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_shr_s: return deferASM(BuiltinNames.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_shr_u: return deferASM(BuiltinNames.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_any_true: return deferASM(BuiltinNames.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinNames.i8x16_all_true: return deferASM(BuiltinNames.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinNames.i8x16_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_lt_s: return deferASM(BuiltinNames.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_lt_u: return deferASM(BuiltinNames.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_le_s: return deferASM(BuiltinNames.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_le_u: return deferASM(BuiltinNames.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_gt_s: return deferASM(BuiltinNames.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_gt_u: return deferASM(BuiltinNames.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_ge_s: return deferASM(BuiltinNames.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_ge_u: return deferASM(BuiltinNames.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_narrow_i16x8_s: return deferASM(BuiltinNames.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_narrow_i16x8_u: return deferASM(BuiltinNames.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinNames.i16x8_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_extract_lane_s: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinNames.i16x8_extract_lane_u: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinNames.i16x8_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_add: return deferASM(BuiltinNames.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_min_s: return deferASM(BuiltinNames.v128_min, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_min_u: return deferASM(BuiltinNames.v128_min, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_max_s: return deferASM(BuiltinNames.v128_max, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_max_u: return deferASM(BuiltinNames.v128_max, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_avgr_u: return deferASM(BuiltinNames.v128_avgr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_add_saturate_s: return deferASM(BuiltinNames.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_add_saturate_u: return deferASM(BuiltinNames.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_sub_saturate_s: return deferASM(BuiltinNames.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_sub_saturate_u: return deferASM(BuiltinNames.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_shl: return deferASM(BuiltinNames.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_shr_s: return deferASM(BuiltinNames.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_shr_u: return deferASM(BuiltinNames.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_any_true: return deferASM(BuiltinNames.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinNames.i16x8_all_true: return deferASM(BuiltinNames.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinNames.i16x8_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_lt_s: return deferASM(BuiltinNames.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_lt_u: return deferASM(BuiltinNames.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_le_s: return deferASM(BuiltinNames.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_le_u: return deferASM(BuiltinNames.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_gt_s: return deferASM(BuiltinNames.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_gt_u: return deferASM(BuiltinNames.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_ge_s: return deferASM(BuiltinNames.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_ge_u: return deferASM(BuiltinNames.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_narrow_i32x4_s: return deferASM(BuiltinNames.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_narrow_i32x4_u: return deferASM(BuiltinNames.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_widen_low_i8x16_s: return deferASM(BuiltinNames.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_widen_low_i8x16_u: return deferASM(BuiltinNames.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_widen_high_i8x16_s: return deferASM(BuiltinNames.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_widen_high_i8x16_u: return deferASM(BuiltinNames.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_load8x8_s: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_load8x8_u: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinNames.i32x4_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_extract_lane: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i32x4_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_add: return deferASM(BuiltinNames.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_min_s: return deferASM(BuiltinNames.v128_min, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_min_u: return deferASM(BuiltinNames.v128_min, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_max_s: return deferASM(BuiltinNames.v128_max, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_max_u: return deferASM(BuiltinNames.v128_max, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_dot_i16x8_s: return deferASM(BuiltinNames.v128_dot, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_shl: return deferASM(BuiltinNames.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_shr_s: return deferASM(BuiltinNames.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_shr_u: return deferASM(BuiltinNames.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_any_true: return deferASM(BuiltinNames.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i32x4_all_true: return deferASM(BuiltinNames.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i32x4_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_lt_s: return deferASM(BuiltinNames.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_lt_u: return deferASM(BuiltinNames.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_le_s: return deferASM(BuiltinNames.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_le_u: return deferASM(BuiltinNames.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_gt_s: return deferASM(BuiltinNames.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_gt_u: return deferASM(BuiltinNames.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_ge_s: return deferASM(BuiltinNames.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_ge_u: return deferASM(BuiltinNames.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinNames.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinNames.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_widen_low_i16x8_s: return deferASM(BuiltinNames.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_widen_low_i16x8_u: return deferASM(BuiltinNames.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_widen_high_i16x8_s: return deferASM(BuiltinNames.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_widen_high_i16x8_u: return deferASM(BuiltinNames.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_load16x4_s: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_load16x4_u: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinNames.i64x2_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_extract_lane: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i64x2_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_add: return deferASM(BuiltinNames.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_shl: return deferASM(BuiltinNames.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_shr_s: return deferASM(BuiltinNames.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_shr_u: return deferASM(BuiltinNames.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_any_true: return deferASM(BuiltinNames.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinNames.i64x2_all_true: return deferASM(BuiltinNames.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinNames.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinNames.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinNames.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_load32x2_s: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_load32x2_u: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.u32, operands, Type.v128, reportNode);\n\n    case BuiltinNames.f32x4_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_extract_lane: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f32x4_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_add: return deferASM(BuiltinNames.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_div: return deferASM(BuiltinNames.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_min: return deferASM(BuiltinNames.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_max: return deferASM(BuiltinNames.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_abs: return deferASM(BuiltinNames.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_sqrt: return deferASM(BuiltinNames.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_lt: return deferASM(BuiltinNames.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_le: return deferASM(BuiltinNames.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_gt: return deferASM(BuiltinNames.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_ge: return deferASM(BuiltinNames.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_convert_i32x4_s: return deferASM(BuiltinNames.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_convert_i32x4_u: return deferASM(BuiltinNames.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_qfma: return deferASM(BuiltinNames.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_qfms: return deferASM(BuiltinNames.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinNames.f64x2_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_extract_lane: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f64x2_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_add: return deferASM(BuiltinNames.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_div: return deferASM(BuiltinNames.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_min: return deferASM(BuiltinNames.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_max: return deferASM(BuiltinNames.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_abs: return deferASM(BuiltinNames.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_sqrt: return deferASM(BuiltinNames.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_lt: return deferASM(BuiltinNames.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_le: return deferASM(BuiltinNames.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_gt: return deferASM(BuiltinNames.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_ge: return deferASM(BuiltinNames.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_convert_i64x2_s: return deferASM(BuiltinNames.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_convert_i64x2_u: return deferASM(BuiltinNames.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_qfma: return deferASM(BuiltinNames.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_qfms: return deferASM(BuiltinNames.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinNames.v8x16_shuffle: return deferASM(BuiltinNames.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.v8x16_swizzle: return deferASM(BuiltinNames.v128_swizzle, compiler, null, operands, Type.v128, reportNode);\n    case BuiltinNames.v8x16_load_splat: return deferASM(BuiltinNames.v128_load_splat, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.v16x8_load_splat: return deferASM(BuiltinNames.v128_load_splat, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.v32x4_load_splat: return deferASM(BuiltinNames.v128_load_splat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.v64x2_load_splat: return deferASM(BuiltinNames.v128_load_splat, compiler, Type.u64, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    typeArgument ? [ typeArgument ] : null,\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        let visitThisType = assert(visitSig.thisType);\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size) {\n    for (let instance of instances.values()) {\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift()! : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(name, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments = new Array<TypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments.length) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier()) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              <IdentifierExpression>next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() {};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}