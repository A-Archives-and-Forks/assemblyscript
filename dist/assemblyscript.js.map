{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/extra/ast.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","StaticArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","NativeMath","NativeMathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","trace","seed","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocBuffer","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","source","toString","normalizedPath","lineAt","start","columnAt","formatDiagnosticContext","useColors","text","len","length","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","relatedSource","diagnostics","seen","has","seenInSource","seenCodesAtPos","includes","set","withRange","emitDiagnostic","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","node","TypeName","kind","TYPENAME","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","NAMEDTYPE","parameters","returnType","explicitThisType","FunctionTypeNode","FUNCTIONTYPE","createNamedType","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","TYPEPARAMETER","type","initializer","ParameterNode","PARAMETER","parameterKind","args","DecoratorNode","DECORATOR","arguments","decoratorKind","fromNode","CommentNode","COMMENT","commentKind","isQuoted","IdentifierExpression","IDENTIFIER","elements","ArrayLiteralExpression","LITERAL","literalKind","ARRAY","elementExpressions","assertionKind","expression","toType","AssertionExpression","ASSERTION","operator","left","right","BinaryExpression","BINARY","typeArgs","CallExpression","CALL","declaration","ClassExpression","CLASS","expressions","CommaExpression","COMMA","ConstructorExpression","CONSTRUCTOR","element","ElementAccessExpression","ELEMENTACCESS","elementExpression","FalseExpression","FALSE","FloatLiteralExpression","FLOAT","FunctionExpression","FUNCTION","isType","InstanceOfExpression","INSTANCEOF","IntegerLiteralExpression","INTEGER","typeName","NewExpression","NEW","NullExpression","NULL","names","values","ObjectLiteralExpression","OBJECT","ParenthesizedExpression","PARENTHESIZED","PropertyAccessExpression","PROPERTYACCESS","pattern","flags","RegexpLiteralExpression","REGEXP","patternFlags","condition","ifThen","ifElse","TernaryExpression","TERNARY","StringLiteralExpression","STRING","SuperExpression","SUPER","ThisExpression","THIS","TrueExpression","TRUE","operand","UnaryPostfixExpression","UNARYPOSTFIX","UnaryPrefixExpression","UNARYPREFIX","statements","BlockStatement","BLOCK","label","BreakStatement","BREAK","typeParameters","implementsTypes","members","decorators","ClassDeclaration","CLASSDECLARATION","ContinueStatement","CONTINUE","statement","DoStatement","DO","EmptyStatement","EnumDeclaration","ENUMDECLARATION","EnumValueDeclaration","ENUMVALUEDECLARATION","path","isDeclare","ExportStatement","EXPORT","normalizePath","startsWith","resolvePath","internalPath","ExportDefaultStatement","EXPORTDEFAULT","externalName","ExportImportStatement","EXPORTIMPORT","ExportMember","EXPORTMEMBER","localName","exportedName","ExpressionStatement","EXPRESSION","ifTrue","ifFalse","IfStatement","IF","decls","ImportStatement","IMPORT","declarations","namespaceName","foreignName","ImportDeclaration","IMPORTDECLARATION","InterfaceDeclaration","INTERFACEDECLARATION","FieldDeclaration","FIELDDECLARATION","incrementor","ForStatement","FOR","variable","iterable","ForOfStatement","FOROF","signature","body","arrowKind","FunctionDeclaration","FUNCTIONDECLARATION","keyType","valueType","IndexSignatureDeclaration","INDEXSIGNATUREDECLARATION","MethodDeclaration","METHODDECLARATION","NamespaceDeclaration","NAMESPACEDECLARATION","ReturnStatement","RETURN","cases","SwitchStatement","SWITCH","SwitchCase","SWITCHCASE","ThrowStatement","THROW","catchVariable","catchStatements","finallyStatements","TryStatement","TRY","alias","TypeDeclaration","TYPEDECLARATION","VariableStatement","VARIABLE","VariableDeclaration","VARIABLEDECLARATION","VoidStatement","VOID","WhileStatement","WHILE","changetype","TypeNode","typeParameterNodes","namedTypeNode","typeArgumentNodes","k","hasGenericComponent","functionTypeNode","parameterNodes","ParameterKind","implicitFieldDeclaration","NONE","flag","nameNode","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","CommentKind","Expression","LiteralExpression","AssertionKind","numTypeArguments","Range","numArguments","UnaryExpression","Statement","super","debugInfoIndex","exportPaths","lineCache","lineColumn","SOURCE","sourceKind","mangleInternalPath","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","off","unchecked","DeclarationStatement","VariableLikeDeclarationStatement","parameterIndex","ArrowKind","createFunctionDeclaration","cur","isTrivialAlphanum","decorator","Token","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","CONST","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","ENUM","EXTENDS","FINALLY","FROM","GET","IMPLEMENTS","IN","INTERFACE","IS","KEYOF","LET","MODULE","NAMESPACE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","SET","STATIC","TYPE","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","debugInfoRef","a","b","Tokenizer","DiagnosticEmitter","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","MAX_VALUE","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","error","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","result","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_new","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","i64_low","invalid","i64_high","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PREFIX_INC","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","Program","options","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","initialized","nativeDummySignature","nativeSource","Source","nativeFile","File","internalName","parser","Parser","resolver","Resolver","buffer","offset","id","payloadSize","writeI32","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","parent","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","registerConstantInteger","isWasm64","WASM64","WASM32","noAssert","memoryBase","tableBase","optimizeLevelHint","shrinkLevelHint","lowMemoryLimit","hasFeature","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","_keys","Map_keys","starExports","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportNames","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","isDeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","isWasi","BuiltinNames","wasiAbort","wasiTrace","wasiSeed","firstChar","parseInt","arrayPrototype","staticArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocBufferInstance","allocArrayInstance","_values","Map_values","USER_ENTRY","markModuleExports","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","markModuleExport","exportsStar","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","propertyPrototype","getterPrototype","setterPrototype","PROPERTY","FIELD","staticMembers","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","isAny","initializeProperty","method","initializeMethod","constructorPrototype","AMBIENT","INTERFACE_PROTOTYPE","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","isLiteralKind","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","declaredElements","DeclaredElement","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","ensureGlobal","makeNativeNamespaceDeclaration","SCOPED","copyExportsToNamespace","memberName","TYPEDEFINITION","mangleInternalName","lookup","inSelf","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","classInstance","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","setDebugLocation","AcyclicState","nextFunctionTarget","FUNCTION_TARGET","FIELD_PROTOTYPE","memoryOffset","getterRef","setterRef","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","extendees","extends","basePtototype","Class","base","nextMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","isBuiltinArray","lengthField","thisInstanceMembers","baseInstanceMembers","VIRTUAL","nextPrototype","inheritedTypeArguments","baseName","baseType","target","uncheckedOverload","overload","fieldName","field","baseOffset","fieldInstance","writeI8","writeI16","writeF32","writeF64","extendedPrototype","getTypeArgumentsTo","abvInstance","acyclic","hasCycle","cyclesTo","other","except","fieldType","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","NativeType","FeatureFlags","ExpressionId","SideEffects","None","Unreachable","Funcref","Nullref","Exnref","Auto","UnaryOp","BinaryOp","HostOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","ExpressionRunnerFlags","MemorySegment","segment","Module","hasTemporaryFunction","cachedStrings","binaryen","_BinaryenModuleCreate","lit","_malloc","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","_free","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","expr","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","getSideEffects","ReadsLocal","ReadsGlobal","drop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","_BinaryenTupleMake","tuple","_BinaryenTupleExtract","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","val","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","pass","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","passes","cStrs","optimizeLevel","shrinkLevel","debugInfo","usesARC","runPasses","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","output","__i32_load8_u","readBuffer","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","maxLoopIterations","runner","_ExpressionRunnerCreate","precomp","_ExpressionRunnerRunAndDispose","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetBody","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","features","All","_BinaryenExpressionGetSideEffects","u8s","numValues","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","ch","fromCharCodes","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","Host","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Push","_BinaryenPushGetValue","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperand","TupleExtract","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","auto","isize64","isize32","usize64","usize32","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","typesToNativeTypes","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","numParameterTypes","nativeTypes","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cachedDefaultParameterNames","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","variableLikeElement","indexedGet","resolvedType","baseInstance","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","PREFIX","Type_0_is_illegal_in_this_context","NONNULL","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","elementType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","functionPrototype","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","pendingClasses","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","finishResolveClass","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldPrototype","fieldTypeNode","baseField","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","operatorInstance","overloadKind","overloadPrototype","Type_0_is_not_assignable_to_type_1","IndexSignature","pendingIndex","indexOf","splice","derivedPendingClasses","pending","LocalFlags","FlowFlags","ConditionKind","scopedLocals","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","resetBreakContext","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","INITIALIZED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","before","after","min","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","functionInstance","levels","findUsedLocalsVisit","used","traverse","started","argumentsLength","setArgumentsLength","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","ctz","popcnt","rotl","rotr","abs","floor","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","instantiate","idof","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_min","v128_max","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","heap_base","rtti_base","visit_globals","visit_members","isNaN","isFinite","memory_size","memory_grow","memory_copy","memory_fill","memory_data","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","compileExpression","unary","ClzI64","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","builtin_ctz","CtzI64","builtin_popcnt","PopcntI64","builtin_rotl","ensureSmallIntegerWrap","binary","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","currentFlow","temp1","temp2","XorI32","AddI32","local_tee","local_get","XorI64","AddI64","ShrI64","nativeSizeType","AbsF32","AbsF64","builtin_max","isNumericLiteral","MaxF32","MaxF64","nativeType","builtin_min","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","contextualType","outType","numOperands","immOffset","immAlign","evaluateImmediateOffset","evaluateImmediateAlign","builtin_store","contextIsExact","inType","convertExpression","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","builtin_atomic_wait","builtin_diagnostic","checkTypeAbsent","User_defined_0","builtin_conversion","builtin_i8x16","runExpression","PreserveSideeffects","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","maxIdx","_0_must_be_a_value_between_1_and_2_inclusive","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","AnyTrueI8x16","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","builtin_v128_qfma","simd_ternary","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","typeToRuntimeFlags","alignLog2","evaluateConstantType","argumentsRange","naturalAlign","_0_must_be_a_power_of_two","feature","Feature_0_is_not_enabled","setCurrentTypeOnError","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","builtins","firstOperand","classMembers","Type_0_has_no_property_1","resultType","ensureStaticString","maybeDropCondition","temp","SubF32","SubF64","makeIsTrueish","host","MemorySize","MemoryGrow","compileFunction","compileCallDirect","valuesOperand","Array_literal_expected","numElements","exprs","makeZero","buf","writeStaticBuffer","byteLength","addMemorySegment","isChangeableTo","Type_0_cannot_be_changed_to_type_1","evaled","Default","makeAbort","if","alreadyUnchecked","unset","compileInstantiate","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","runtimeFeatures","COMPILED","global_get","addFunction","nativeSizeSize","blocks","outer","addBlockWithSwitch","SubI64","SubI32","lastId","visitImpl","instanceId","isDeclaredInLibrary","visitFunc","visitSig","visitThisType","isStrictlyAssignableTo","fieldOffset","return","addBlock","flatten","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","addGlobal","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","importMemory","sharedMemory","importTable","exportTable","explicitStart","noUnsafe","pedantic","Constraints","RuntimeFeatures","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","skippedAutoreleases","inlineStack","lazyLibraryFunctions","pendingClassInstanceOf","virtualCalls","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","setLowMemoryUnused","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","setFeatures","compile","initialize","initializeProgram","startFunctionInstance","startFunctionBody","currentBody","files","compileFile","compileExports","startIsEmpty","unshift","global_set","funcRef","nativeParams","nativeResults","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Set_values","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileClassInstanceOf","setupVirtualLookupTables","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","Function_0_is_possibly_called_virtually_which_is_not_yet_supported","elementName","ensureModuleExport","prefix","functionInstances","fullName","classInstances","addGlobalExport","Cannot_export_a_mutable_global","enumValue","ensureTrampoline","ensureBuiltinArgumentsLength","setter","internalGetterName","internalSetterName","isUnmanaged","subPrefix","implicitExport","compileMembers","compileGlobal","compileEnum","compileClass","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","checkTypeSupported","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","initializeInStart","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","compileInlineConstant","findDecorator","decoratorNodes","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","local_set","compileFunctionBody","performAutoreleases","addFunctionImport","getFunction","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","makeAllocation","makeFieldInitializationInConstructor","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureConstructor","compileField","compileProperty","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","makeRelease","compilePropertyGetter","compilePropertySetter","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","labelNode","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateCondition","tcond","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","thenTerminates","elseStmts","elseFlow","elseTerminates","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","newArgs","numDeclarations","initializers","initAutoreleaseSkipped","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","doCompileWhileStatement","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","compileAssignment","AddF32","AddF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrU64","AndI64","OrI32","OrI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","retainLeftInThen","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","makeReplace","nativeFieldType","tempThis","findUsedLocals","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","functionTarget","compileCallIndirect","BuiltinContext","fn","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","relatedReportNode","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","Optional_parameter_must_have_an_initializer","newExpr","oldExpr","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","theOperands","isCallImport","allOptionalsAreConstant","compilesToConst","makeCallIndirect","numExpressions","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","ref_null","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","makeInstanceofClass","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","bufferAddress","arraySegment","addStaticArrayHeader","arrayAddress","nativeArrayType","dataStartMember","bufferSize","Cannot_create_an_instance_of_an_abstract_class","Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal","hasErrors","nativeClassType","omittedFields","memberKey","Property_0_is_private_and_only_accessible_within_class_1","Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses","delete","Property_0_is_missing_in_type_1_but_required_in_type_2","baseClass","baseCtor","allocExpr","ctor","parentEnum","Object_is_possibly_null","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","supported","v128_zero","ref_is_null","thisLocalIndex","codeLocation","messageArg","filenameArg","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","USER","currentSource","tn","parseTopLevelStatement","finish","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","getStart","getEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","remainingMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","x","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","gt","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","map","keys","formatDiagnostic","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","getSource","parseFile","nextFile","getDependee","cls","util","readI32","readI64","valueI64","cloned","v","overrides","ipos","dirname","origin","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","ASTBuilder","builder","visitNode","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitIndexSignatureDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitNodeAndTerminate","visitTypeName","visitTypeNode","visitStringLiteral","visitArguments","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitRegexpLiteralExpression","visitArrayLiteralExpression","visitObjectLiteralExpression","singleQuoted","lastCharPos","isDefault","serializeExternalModifiers","numMembers","serializeAccessModifiers"],"mappings":"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KACX,KAAKoM,EAAMiC,SACX,KAAKjC,EAAMkC,IACX,KAAKlC,EAAMoC,KACX,KAAKpC,EAAMjE,KAAM,OAAO,EACxB,QAAS,OAAO,IAlSpB,SAAYiE,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYC,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAgIA,0BAwBA,uCAA4Cjf,GAE1C,OADAkK,OAAOlK,EAAK8L,QACJ9L,EAAKiM,WAAW,IACtB,KAAK,IAAY,MAAe,UAARjM,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsC2hB,GACpC,OAAQA,GACN,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A8HN,wB,8ECh9HA,aACA,QAoBA,IAAiB03B,EAeLC,EAeAC,EAgiEAC,GA9jEZ,SAAiBH,GACF,EAAAI,KAAmB,EACnB,EAAAC,YAA0B,EAC1B,EAAA3/B,IAAkB,EAClB,EAAAC,IAAkB,EAClB,EAAAQ,IAAkB,EAClB,EAAAC,IAAkB,EAClB,EAAAC,KAAmB,EACnB,EAAAi/B,QAAsB,EACtB,EAAAh/B,OAAqB,EACrB,EAAAi/B,QAAsB,EACtB,EAAAC,OAAqB,GACrB,EAAAC,MAAoB,EAZnC,CAAiBT,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAe3B,SAAYC,GACV,iBACA,yBACA,uCACA,+CACA,yBACA,gCACA,0BACA,8CACA,6BACA,yCACA,iCACA,oBAZF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAexB,SAAYC,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,oBACA,kBACA,kCACA,sCACA,8BACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,gCACA,4BACA,gCACA,gCACA,oBACA,kBACA,0BACA,8BACA,0BACA,kBACA,sBACA,0BACA,0BACA,8BACA,oCAjDF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAoDxB,SAAYQ,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,4BACA,4BACA,8BACA,oDACA,oDACA,oDACA,oDACA,kDACA,kDACA,kDACA,kDACA,oDACA,uDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDAjHF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KAoHnB,SAAYC,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,iDACA,iDACA,iDACA,iDACA,qCA/KF,CAAY,EAAAA,WAAA,EAAAA,SAAQ,KAkLpB,SAAYC,GACV,+BACA,+BAFF,CAAY,EAAAA,SAAA,EAAAA,OAAM,KAKlB,SAAYC,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KASvB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CARF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAWzB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CANF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KASzB,SAAYC,GACV,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,4BACA,4BAZF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAevB,SAAYC,GACV,6BACA,6BACA,6BACA,6BACA,6BALF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAQzB,SAAYC,GACV,uCACA,uCACA,uCACA,uCACA,qCACA,qCACA,uCACA,uCACA,uCACA,uCAVF,CAAY,EAAAA,aAAA,EAAAA,WAAU,KAatB,SAAYC,GACV,yBACA,iDACA,qCAHF,CAAY,EAAAA,wBAAA,EAAAA,sBAAqB,KAMjC,MAAaC,EAKX,cAAcjY,EAAoBC,GAChC,IAAIiY,EAAU,IAAID,EAGlB,OAFAC,EAAQlY,OAASA,EACjBkY,EAAQjY,OAASA,EACViY,GATX,kBAaA,MAAaC,EAsBX,cAulBQ,KAAAC,sBAA6B,EA6hB7B,KAAAC,cAAmC,IAAI7/B,IApoC/C,gBACE,IAAIpI,EAAS,IAAI+nC,EAGjB,OAFA/nC,EAAO2gC,IAAMuH,EAASC,wBACtBnoC,EAAOooC,IAAMF,EAASG,QAAQH,EAASI,0BAChCtoC,EAGT,kBAAkB4vB,GAChB,IAAI5vB,EAAS,IAAI+nC,EACbQ,EAAOC,EAAa5Y,GAIxB,OAHA5vB,EAAO2gC,IAAMuH,EAASO,oBAAoBF,EAAM3Y,EAAO7iB,QACvDm7B,EAASQ,MAAMvsB,WAAkBosB,IACjCvoC,EAAOooC,IAAMF,EAASG,QAAQH,EAASI,0BAChCtoC,EAOT,IAAI2B,GACF,IAAIgnC,EAAMtoC,KAAK+nC,IAEf,OADAF,EAASU,sBAAsBD,EAAKhnC,GAC7BumC,EAASW,eAAexoC,KAAKsgC,IAAKgI,GAG3C,IAAIG,EAAeC,EAAiB,GAClC,IAAIJ,EAAMtoC,KAAK+nC,IAEf,OADAF,EAASc,sBAAsBL,EAAKG,EAAUC,GACvCb,EAASW,eAAexoC,KAAKsgC,IAAKgI,GAG3C,IAAIhnC,GACF,IAAIgnC,EAAMtoC,KAAK+nC,IAEf,OADAF,EAASe,wBAAwBN,EAAKhnC,GAC/BumC,EAASW,eAAexoC,KAAKsgC,IAAKgI,GAG3C,IAAIhnC,GACF,IAAIgnC,EAAMtoC,KAAK+nC,IAEf,OADAF,EAASgB,wBAAwBP,EAAKhnC,GAC/BumC,EAASW,eAAexoC,KAAKsgC,IAAKgI,GAG3C,KAAKQ,GACHh+B,OAAuB,IAAhBg+B,EAAMp8B,QACb,IAAI47B,EAAMtoC,KAAK+nC,IACf,IAAK,IAAI1nC,EAAI,EAAGA,EAAI,KAAMA,EAAGwnC,EAASkB,aAAaT,EAAMjoC,EAAGyoC,EAAMzoC,IAElE,OADAwnC,EAASmB,uBAAuBV,EAAKA,GAC9BT,EAASW,eAAexoC,KAAKsgC,IAAKgI,GAG3C,WACE,OAAOT,EAASoB,iBAAiBjpC,KAAKsgC,KAKxC,MACE4I,EACAC,GAEA,OAAOtB,EAASuB,eAAeppC,KAAKsgC,IAAK4I,EAAIC,GAG/C,OACED,EACA53B,EACAC,GAEA,OAAOs2B,EAASwB,gBAAgBrpC,KAAKsgC,IAAK4I,EAAI53B,EAAMC,GAGtD,KACE23B,EACAtoC,EAAsB,KACtB0oC,EAAmC,MAEnC,IAAIC,EAAOvpC,KAAKwpC,kBAAkB5oC,GAC9BsnC,EAAOuB,EAAcH,GACrBI,EAAM7B,EAAS8B,cAAc3pC,KAAKsgC,IAAK4I,EAAIK,EAAMrB,EAAMoB,EAA6BA,EAAU58B,OAAS,GAE3G,OADAm7B,EAASQ,MAAMH,GACRwB,EAGT,UACEjK,EACAhwB,GAEA,OAAOo4B,EAAS+B,kBAAkB5pC,KAAKsgC,IAAKb,EAAOhwB,GAGrD,UACEgwB,EACAn+B,EACAmO,EAAmB22B,EAAWS,MAG9B,OADIp3B,GAAQ22B,EAAWS,OAAMp3B,EAAOo4B,EAASgC,2BAA2BvoC,IACjEumC,EAASiC,kBAAkB9pC,KAAKsgC,IAAKb,EAAOn+B,EAAOmO,GAG5D,WACE7O,EACA6O,GAEA,IAAI85B,EAAOvpC,KAAKwpC,kBAAkB5oC,GAClC,OAAOinC,EAASkC,mBAAmB/pC,KAAKsgC,IAAKiJ,EAAM95B,GAGrD,KACEq5B,EACAkB,EACAC,EACAx6B,EACA+f,EAAgB,EAChB0a,EAAepB,GAEf,OAAOjB,EAASsC,cAAcnqC,KAAKsgC,IAAKwI,EAAOkB,EAAS,EAAI,EAAGxa,EAAQ0a,EAAOz6B,EAAMw6B,GAGtF,MACEnB,EACAmB,EACA3oC,EACAmO,EACA+f,EAAgB,EAChB0a,EAAepB,GAEf,OAAOjB,EAASuC,eAAepqC,KAAKsgC,IAAKwI,EAAOtZ,EAAQ0a,EAAOD,EAAK3oC,EAAOmO,GAG7E,YACEq5B,EACAmB,EACAx6B,EACA+f,EAAgB,GAEhB,OAAOqY,EAASwC,oBAAoBrqC,KAAKsgC,IAAKwI,EAAOtZ,EAAQ/f,EAAMw6B,GAGrE,aACEnB,EACAmB,EACA3oC,EACAmO,EACA+f,EAAgB,GAEhB,OAAOqY,EAASyC,qBAAqBtqC,KAAKsgC,IAAKwI,EAAOtZ,EAAQya,EAAK3oC,EAAOmO,GAG5E,WACEy5B,EACAJ,EACAtZ,EACAya,EACA3oC,EACAmO,GAEA,OAAOo4B,EAAS0C,mBAAmBvqC,KAAKsgC,IAAK4I,EAAIJ,EAAOtZ,EAAQya,EAAK3oC,EAAOmO,GAG9E,eACEq5B,EACAtZ,EACAya,EACAO,EACAC,EACAh7B,GAEA,OAAOo4B,EAAS6C,uBAAuB1qC,KAAKsgC,IAAKwI,EAAOtZ,EAAQya,EAAKO,EAAUC,EAAah7B,GAG9F,YACEw6B,EACAO,EACAG,EACAC,GAEA,OAAO/C,EAASgD,oBAAoB7qC,KAAKsgC,IAAK2J,EAAKO,EAAUG,EAASC,GAGxE,cACEX,EACAa,GAEA,OAAOjD,EAASkD,sBAAsB/qC,KAAKsgC,IAAK2J,EAAKa,GAGvD,eACE,OAAOjD,EAASmD,qBAAqBhrC,KAAKsgC,KAK5C,UACEb,EACAn+B,GAEA,OAAOumC,EAASoD,kBAAkBjrC,KAAKsgC,IAAKb,EAAOn+B,GAGrD,WACEV,EACAU,GAEA,IAAIioC,EAAOvpC,KAAKwpC,kBAAkB5oC,GAClC,OAAOinC,EAASqD,mBAAmBlrC,KAAKsgC,IAAKiJ,EAAMjoC,GAGrD,MACEqU,EACAw1B,EACA17B,EAAmB22B,EAAWI,MAE9B,IAAI+C,EAAOvpC,KAAKwpC,kBAAkB7zB,GAC9BuyB,EAAOuB,EAAc0B,GACrBzB,EAAM7B,EAASuD,eAAeprC,KAAKsgC,IAAKiJ,EAAMrB,EAAMiD,EAASz+B,OAAQ+C,GAEzE,OADAo4B,EAASQ,MAAMH,GACRwB,EAIT,QACE2B,EACA57B,EAAmB22B,EAAWI,MAE9B,IAAI95B,EAAS2+B,EAAM3+B,OACnB,GAAc,GAAVA,EAAa,OAAO1M,KAAKsrC,MAC7B,GAAc,GAAV5+B,EAAa,CACf,IAAI6+B,EAASF,EAAM,GACnB,OAAQG,EAAgBD,IACtB,KAAKjF,EAAamF,OAClB,KAAKnF,EAAaoF,MAClB,KAAKpF,EAAaG,YAEhB,OAAO8E,EAGX,IAAII,EAAaC,EAAkBL,GAEnC,OADAzgC,OAAO6gC,GAAcvF,EAAWK,aAAekF,GAAcl8B,GACtD87B,EAET,OAAOvrC,KAAK6rC,MAAM,KAAMR,EAAO57B,GAGjC,GACEkG,EACArB,EAA2B,EAC3BhT,EAAuB,GAEvB,IAAIioC,EAAOvpC,KAAKwpC,kBAAkB7zB,GAClC,OAAOkyB,EAASiE,eAAe9rC,KAAKsgC,IAAKiJ,EAAMj1B,EAAWhT,GAG5D,KACE2P,GAEA,OAAO42B,EAASkE,cAAc/rC,KAAKsgC,IAAKrvB,GAG1C,mBAAmBqD,EAA0BmU,GAK3C,OAAyF,IAApFujB,EAAe13B,KAAeiyB,EAAY0F,WAAa1F,EAAY2F,cAC/DlsC,KAAK6rC,MAAM,KAAM,CACtB7rC,KAAKmsC,KAAK73B,GACVmU,GACCmjB,EAAkBnjB,IAEhBA,EAGT,KACE9S,EACA8D,GAEA,IAAI8vB,EAAOvpC,KAAKwpC,kBAAkB7zB,GAClC,OAAOkyB,EAASuE,cAAcpsC,KAAKsgC,IAAKiJ,EAAM9vB,GAGhD,GACEnF,EACA2D,EACAC,EAAyB,GAEzB,OAAO2vB,EAASwE,YAAYrsC,KAAKsgC,IAAKhsB,EAAW2D,EAAQC,GAG3D,MACE,OAAO2vB,EAASyE,aAAatsC,KAAKsgC,KAGpC,OACErvB,EAA4B,GAE5B,OAAO42B,EAAS0E,gBAAgBvsC,KAAKsgC,IAAKrvB,GAG5C,OACEgH,EACAC,EACA5D,EACA7E,EAAmB22B,EAAWS,MAM9B,OAJIp3B,GAAQ22B,EAAWS,OACrBp3B,EAAOo4B,EAASgC,2BAA2B5xB,GAC3CnN,OAAO2E,GAAQo4B,EAASgC,2BAA2B3xB,KAE9C2vB,EAAS2E,gBAAgBxsC,KAAKsgC,IAAKhsB,EAAW2D,EAAQC,EAASzI,GAGxE,OACEgE,EACAg5B,EACAn4B,EACAhT,EAAuB,GAEvB,IAAIorC,EAAWj5B,EAAM/G,OACjBigC,EAAO,IAAI/kC,MAAa8kC,GAC5B,IAAK,IAAIrsC,EAAI,EAAGA,EAAIqsC,IAAYrsC,EAC9BssC,EAAKtsC,GAAKL,KAAKwpC,kBAAkB/1B,EAAMpT,IAEzC,IAAI6nC,EAAOuB,EAAckD,GACrBpD,EAAOvpC,KAAKwpC,kBAAkBiD,GAC9B/C,EAAM7B,EAAS+E,gBAAgB5sC,KAAKsgC,IAAK4H,EAAMwE,EAAUnD,EAAMj1B,EAAWhT,GAE9E,OADAumC,EAASQ,MAAMH,GACRwB,EAGT,KACEnF,EACA+E,EACAv6B,EACA89B,GAAiB,GAEjB,IAAItD,EAAOvpC,KAAKwpC,kBAAkBjF,GAC9B2D,EAAOuB,EAAcH,GACrBI,EAAMmD,EACNhF,EAASiF,oBAAoB9sC,KAAKsgC,IAAKiJ,EAAMrB,EAAMoB,EAAWA,EAAS58B,OAAS,EAAGqC,GACnF84B,EAASkF,cAAc/sC,KAAKsgC,IAAKiJ,EAAMrB,EAAMoB,EAAWA,EAAS58B,OAAS,EAAGqC,GAEjF,OADE84B,EAASQ,MAAMH,GACVwB,EAGT,YACEnF,EACA+E,EACAv6B,GAEA,OAAO/O,KAAKQ,KAAK+jC,EAAQ+E,EAAUv6B,GAAY,GAGjD,cACE0wB,EACA6J,EACA0D,EACAC,EACAJ,GAAiB,GAEjB,IAAI3E,EAAOuB,EAAcH,GACrBI,EAAMmD,EACNhF,EAASqF,4BAA4BltC,KAAKsgC,IAAKb,EAAOyI,EAAMoB,EAAWA,EAAS58B,OAAS,EAAGsgC,EAAQC,GACpGpF,EAASsF,sBAAsBntC,KAAKsgC,IAAKb,EAAOyI,EAAMoB,EAAWA,EAAS58B,OAAS,EAAGsgC,EAAQC,GAElG,OADApF,EAASQ,MAAMH,GACRwB,EAGT,qBACEjK,EACA6J,EACA0D,EACAC,GAEA,OAAOjtC,KAAKotC,cAAc3N,EAAO6J,EAAU0D,EAAQC,GAAS,GAG9D,cACE,OAAOpF,EAASwF,qBAAqBrtC,KAAKsgC,KAK5C,YACEyF,EACA/5B,EACAshC,GAEA,OAAOzF,EAAS0F,oBAAoBvtC,KAAKsgC,IAAKyF,EAAM/5B,EAAQshC,GAG9D,YACEvH,EACAzkC,EACAgsC,GAEA,OAAOzF,EAAS2F,oBAAoBxtC,KAAKsgC,IAAKyF,EAAMzkC,EAAOgsC,GAK7D,IACE7zB,EACAg0B,GAEA,OAAO5F,EAAS6F,aAAa1tC,KAAKsgC,IAAK7mB,EAAMg0B,GAG/C,MACEE,EACArE,GAEA,IAAIC,EAAOvpC,KAAKwpC,kBAAkBmE,GAC9BzF,EAAOuB,EAAcH,GACrBI,EAAM7B,EAAS+F,eAAe5tC,KAAKsgC,IAAKiJ,EAAMrB,EAAMoB,EAAS58B,QAEjE,OADAm7B,EAASQ,MAAMH,GACRwB,EAGT,QACEmE,GAEA,OAAOhG,EAASiG,iBAAiB9tC,KAAKsgC,IAAKuN,GAG7C,UACEjtC,EACA+sC,EACAE,GAEA,IAAIE,EAAQ/tC,KAAKwpC,kBAAkB5oC,GAC/BotC,EAAQhuC,KAAKwpC,kBAAkBmE,GACnC,OAAO9F,EAASoG,iBAAiBjuC,KAAKsgC,IAAKyN,EAAOC,EAAOH,GAK3D,KACEvsC,GAEA,OAAOumC,EAASqG,cAAcluC,KAAKsgC,IAAKh/B,GAG1C,IACEmO,GAEA,OAAOo4B,EAASsG,aAAanuC,KAAKsgC,IAAK7wB,GAKzC,aACEy5B,EACAkF,EACAC,GAEA,OAAOxG,EAASyG,qBAAqBtuC,KAAKsgC,IAAK4I,EAAIkF,EAAKC,GAG1D,aACEnF,EACAkF,EACAC,EACA/sC,GAEA,OAAOumC,EAAS0G,qBAAqBvuC,KAAKsgC,IAAK4I,EAAIkF,EAAKC,EAAK/sC,GAG/D,aACEktC,EACAC,EACAC,GAEA5jC,OAAsB,IAAf4jC,EAAKhiC,QACZ,IAAIw7B,EAAOC,EAAauG,GACpBhF,EAAM7B,EAAS8G,qBAAqB3uC,KAAKsgC,IAAKkO,EAAMC,EAAMvG,GAE9D,OADAL,EAASQ,MAAMH,GACRwB,EAGT,aACER,EACAjkB,EACAC,EACAxkB,GAEA,OAAOmnC,EAAS+G,qBAAqB5uC,KAAKsgC,IAAK4I,EAAIjkB,EAAGC,EAAGxkB,GAG3D,WACEwoC,EACAkF,EACAS,GAEA,OAAOhH,EAASiH,mBAAmB9uC,KAAKsgC,IAAK4I,EAAIkF,EAAKS,GAGxD,UACE3F,EACAe,EACAza,EACA0a,GAEA,OAAOrC,EAASkH,kBAAkB/uC,KAAKsgC,IAAK4I,EAAI1Z,EAAQ0a,EAAOD,GAKjE,YACEd,GAEA,OAAOtB,EAASmH,mBAAmBhvC,KAAKsgC,IAAK6I,GAG/C,SACEvoC,GAEA,IAAI2oC,EAAOvpC,KAAKwpC,kBAAkB5oC,GAClC,OAAOinC,EAASoH,iBAAiBjvC,KAAKsgC,IAAKiJ,GAK7C,WAAWD,GACT,IAAIpB,EAAOuB,EAAcH,GACrBI,EAAM7B,EAASqH,mBAAmBlvC,KAAKsgC,IAAK4H,EAAMoB,EAAS58B,QAE/D,OADAm7B,EAASQ,MAAMH,GACRwB,EAGT,cAAcyF,EAAsB1P,GAClC,OAAOoI,EAASuH,sBAAsBpvC,KAAKsgC,IAAK6O,EAAO1P,GAKzD,UACE7+B,EACA6O,EACA4/B,EACA3/B,GAEA,IAAI65B,EAAOvpC,KAAKwpC,kBAAkB5oC,GAClC,OAAOinC,EAASyH,mBAAmBtvC,KAAKsgC,IAAKiJ,EAAM95B,EAAM4/B,EAAS3/B,GAGpE,UACE9O,GAEA,IAAI2oC,EAAOvpC,KAAKwpC,kBAAkB5oC,GAClC,OAAOinC,EAAS0H,mBAAmBvvC,KAAKsgC,IAAKiJ,GAG/C,aACE3oC,GAEA,IAAI2oC,EAAOvpC,KAAKwpC,kBAAkB5oC,GAClCinC,EAAS2H,sBAAsBxvC,KAAKsgC,IAAKiJ,GAK3C,SACE3oC,EACA6uC,EACAzC,EACAC,GAEA,IAAI1D,EAAOvpC,KAAKwpC,kBAAkB5oC,GAClC,OAAOinC,EAAS6H,kBAAkB1vC,KAAKsgC,IAAKiJ,EAAMkG,EAAWzC,EAAQC,GAGvE,SACErsC,GAEA,IAAI2oC,EAAOvpC,KAAKwpC,kBAAkB5oC,GAClC,OAAOinC,EAAS8H,kBAAkB3vC,KAAKsgC,IAAKiJ,GAG9C,YACE3oC,GAEA,IAAI2oC,EAAOvpC,KAAKwpC,kBAAkB5oC,GAClCinC,EAAS+H,qBAAqB5vC,KAAKsgC,IAAKiJ,GAK1C,YACE3oC,EACAosC,EACAC,EACA4C,EACAp2B,GAEA,IAAI8vB,EAAOvpC,KAAKwpC,kBAAkB5oC,GAC9BsnC,EAAOuB,EAAcoG,GACrBnG,EAAM7B,EAASiI,qBAAqB9vC,KAAKsgC,IAAKiJ,EAAMyD,EAAQC,EAAS/E,EAAM2H,EAAWA,EAASnjC,OAAS,EAAG+M,GAE/G,OADAouB,EAASQ,MAAMH,GACRwB,EAGT,YACE9oC,GAEA,IAAI2oC,EAAOvpC,KAAKwpC,kBAAkB5oC,GAClC,OAAOinC,EAASkI,qBAAqB/vC,KAAKsgC,IAAKiJ,GAGjD,eAAe3oC,GACb,IAAI2oC,EAAOvpC,KAAKwpC,kBAAkB5oC,GAClCinC,EAASmI,wBAAwBhwC,KAAKsgC,IAAKiJ,GAK7C,qBAAqB9gB,EAAoBwnB,EAAiCx2B,GACxEzZ,KAAK2nC,qBAAuB78B,QAAQ9K,KAAK2nC,sBACzC,IAAIuI,EAAWlwC,KAAKwpC,kBAAkB,IAClCtB,EAAOuB,EAAcwG,GACrBvG,EAAM7B,EAASiI,qBAAqB9vC,KAAKsgC,IAC3C4P,EACAC,EAAWF,GACXxnB,EACA,EAAG,EACHhP,GAGF,OADAouB,EAASQ,MAAMH,GACRwB,EAGT,0BACE1pC,KAAK2nC,sBAAwB78B,OAAO9K,KAAK2nC,sBACzC,IAAIuI,EAAWlwC,KAAKwpC,kBAAkB,IACtC3B,EAASmI,wBAAwBhwC,KAAKsgC,IAAK4P,GAG7C,SAASE,GACPvI,EAASwI,kBAAkBrwC,KAAKsgC,IAAK8P,GAKvC,kBACElhB,EACA1X,GAEA,IAAIu2B,EAAQ/tC,KAAKwpC,kBAAkBta,GAC/B8e,EAAQhuC,KAAKwpC,kBAAkBhyB,GACnC,OAAOqwB,EAASyI,2BAA2BtwC,KAAKsgC,IAAKyN,EAAOC,GAG9D,eACE9e,EACA1X,GAEA,IAAIu2B,EAAQ/tC,KAAKwpC,kBAAkBta,GAC/B8e,EAAQhuC,KAAKwpC,kBAAkBhyB,GACnC,OAAOqwB,EAAS0I,wBAAwBvwC,KAAKsgC,IAAKyN,EAAOC,GAG3D,gBACE9e,EACA1X,GAEA,IAAIu2B,EAAQ/tC,KAAKwpC,kBAAkBta,GAC/B8e,EAAQhuC,KAAKwpC,kBAAkBhyB,GACnC,OAAOqwB,EAAS2I,yBAAyBxwC,KAAKsgC,IAAKyN,EAAOC,GAG5D,gBACE9e,EACA1X,GAEA,IAAIu2B,EAAQ/tC,KAAKwpC,kBAAkBta,GAC/B8e,EAAQhuC,KAAKwpC,kBAAkBhyB,GACnC,OAAOqwB,EAAS4I,yBAAyBzwC,KAAKsgC,IAAKyN,EAAOC,GAG5D,eACE9e,EACA1X,GAEA,IAAIu2B,EAAQ/tC,KAAKwpC,kBAAkBta,GAC/B8e,EAAQhuC,KAAKwpC,kBAAkBhyB,GACnC,OAAOqwB,EAAS6I,wBAAwB1wC,KAAKsgC,IAAKyN,EAAOC,GAG3D,aAAax2B,GACX,IAAI+xB,EAAOvpC,KAAKwpC,kBAAkBhyB,GAClCqwB,EAAS8I,sBAAsB3wC,KAAKsgC,IAAKiJ,GAK3C,kBACEra,EACA0hB,EACAC,EACA7D,EACAC,GAEA,IAAIc,EAAQ/tC,KAAKwpC,kBAAkBta,GAC/B8e,EAAQhuC,KAAKwpC,kBAAkBoH,GAC/BE,EAAQ9wC,KAAKwpC,kBAAkBqH,GACnChJ,EAASkJ,2BAA2B/wC,KAAKsgC,IAAKyN,EAAOC,EAAO8C,EAAO9D,EAAQC,GAG7E,eACE/d,EACA0hB,EACAC,GAEA,IAAI9C,EAAQ/tC,KAAKwpC,kBAAkBta,GAC/B8e,EAAQhuC,KAAKwpC,kBAAkBoH,GAC/BE,EAAQ9wC,KAAKwpC,kBAAkBqH,GACnChJ,EAASmJ,wBAAwBhxC,KAAKsgC,IAAKyN,EAAOC,EAAO8C,GAG3D,gBACE5hB,EACA0hB,EACAC,EACAI,GAAe,GAEf,IAAIlD,EAAQ/tC,KAAKwpC,kBAAkBta,GAC/B8e,EAAQhuC,KAAKwpC,kBAAkBoH,GAC/BE,EAAQ9wC,KAAKwpC,kBAAkBqH,GACnChJ,EAASqJ,yBAAyBlxC,KAAKsgC,IAAKyN,EAAOC,EAAO8C,EAAOG,GAGnE,gBACE/hB,EACA0hB,EACAC,EACAM,EACA9B,GAAgB,GAEhB,IAAItB,EAAQ/tC,KAAKwpC,kBAAkBta,GAC/B8e,EAAQhuC,KAAKwpC,kBAAkBoH,GAC/BE,EAAQ9wC,KAAKwpC,kBAAkBqH,GACnChJ,EAASuJ,yBAAyBpxC,KAAKsgC,IAAKyN,EAAOC,EAAO8C,EAAOK,EAAY9B,GAG/E,eACEngB,EACA0hB,EACAC,EACApB,EACAzC,EACAC,GAEA,IAAIc,EAAQ/tC,KAAKwpC,kBAAkBta,GAC/B8e,EAAQhuC,KAAKwpC,kBAAkBoH,GAC/BE,EAAQ9wC,KAAKwpC,kBAAkBqH,GACnChJ,EAASwJ,wBAAwBrxC,KAAKsgC,IAAKyN,EAAOC,EAAO8C,EAAOrB,EAAWzC,EAAQC,GAQrF,UACEqE,EACAC,EACAC,EACAjN,EACA/Q,EAA4B,KAC5Byd,GAAe,GAEf,IAAI1H,EAAOvpC,KAAKwpC,kBAAkBhW,GAC9BrX,EAAIq1B,EAAS9kC,OACb+kC,EAAO,IAAI7pC,MAAauU,GACxBu1B,EAAO,IAAIhpC,WAAWyT,GACtBw1B,EAAO,IAAI/pC,MAAqBuU,GAChCy1B,EAAO,IAAIhqC,MAAauU,GAC5B,IAAK,IAAI9b,EAAI,EAAGA,EAAI8b,IAAK9b,EAAG,CAC1B,IAAIkvB,EAASiiB,EAASnxC,GAAGkvB,OACrBC,EAASgiB,EAASnxC,GAAGmvB,OACzBiiB,EAAKpxC,GAAK8nC,EAAa5Y,GACvBmiB,EAAKrxC,GAAK,EACVsxC,EAAKtxC,GAAKkkC,GAAU,EAAAn6B,OAAO6mB,OACvBjxB,KAAKqD,IAAIwnB,QAAQ2E,GAASzE,SAASyE,IACnCxvB,KAAKoD,IAAIynB,QAAQ2E,IACrBoiB,EAAKvxC,GAAKkvB,EAAO7iB,OAEnB,IAAImlC,EAAQpI,EAAcgI,GACtBK,EAAQ3J,EAAauJ,GACrBK,EAAQtI,EAAckI,GACtBK,EAk4BR,SAAuBC,GACrB,IAAKA,EAAM,OAAO,EAClB,IAAIhI,EAAMpC,EAASG,QAAQiK,EAAKvlC,QAAU,GACtC2hC,EAAMpE,EACV,IAAK,IAAI5pC,EAAI,EAAG8b,EAAI81B,EAAKvlC,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC3C,IAAI6xC,EAAMD,EAAK5xC,GACfwnC,EAASsK,YAAY9D,EAAK6D,GAC1B7D,GAAO,EAET,OAAOpE,EA34BOmI,CAAcR,GAC1B/J,EAASwK,mBAAmBryC,KAAKsgC,IAAKgR,EAASC,EAAShI,EAAMsI,EAAOC,EAAOC,EAAOC,EAAO71B,EAAG80B,GAC7FpJ,EAASQ,MAAM2J,GACfnK,EAASQ,MAAM0J,GACflK,EAASQ,MAAMyJ,GACfjK,EAASQ,MAAMwJ,GACf,IAAK,IAAIxxC,EAAI8b,EAAI,EAAG9b,GAAK,IAAKA,EAAGwnC,EAASQ,MAAMoJ,EAAKpxC,IAQvD,iBACEixC,EACAC,EACAe,EACA9iB,GAEA,IAAIkd,EAAW4F,EAAM5lC,OACjB+G,EAAQ,IAAI7L,MAAa8kC,GAC7B,IAAK,IAAIrsC,EAAI,EAAGA,EAAIqsC,IAAYrsC,EAC9BoT,EAAMpT,GAAKL,KAAKwpC,kBAAkB8I,EAAMjyC,IAE1C,IAAI6nC,EAAOuB,EAAch2B,GACzBo0B,EAAS0K,0BAA0BvyC,KAAKsgC,IAAKgR,EAASC,EAASrJ,EAAMwE,EAAUld,GAC/EqY,EAASQ,MAAMH,GAKjB,iBAAiBtnC,EAAc4xC,GAC7B,IAAIjJ,EAAOvpC,KAAKwpC,kBAAkB5oC,GAC9BsnC,EAAOC,EAAaqK,GACxB3K,EAAS4K,0BAA0BzyC,KAAKsgC,IAAKiJ,EAAMrB,EAAMsK,EAAS9lC,QAClEm7B,EAASQ,MAAMH,GAKjB,mBACE,OAAOL,EAAS6K,4BAGlB,iBAAiBC,GACf9K,EAAS+K,0BAA0BD,GAGrC,iBACE,OAAO9K,EAASgL,0BAGlB,eAAeF,GACb9K,EAASiL,wBAAwBH,GAGnC,eACE,OAAO9K,EAASkL,wBAGlB,aAAaC,GACXnL,EAASoL,sBAAsBD,GAGjC,qBACE,OAAOnL,EAASqL,8BAGlB,mBAAmBF,GACjBnL,EAASsL,4BAA4BH,GAGvC,gBAAgBpxC,GACd,IAAI2nC,EAAOvpC,KAAKwpC,kBAAkB5nC,GAC9BqoC,EAAMpC,EAASuL,yBAAyB7J,GAC5C,OAAOU,EAAMoJ,EAAWpJ,GAAO,KAGjC,gBAAgBroC,EAAaN,GAC3B,IAAIysC,EAAQ/tC,KAAKwpC,kBAAkB5nC,GAC/BosC,EAAQhuC,KAAKwpC,kBAAkBloC,GACnCumC,EAASyL,yBAAyBvF,EAAOC,GAG3C,qBACEnG,EAAS0L,8BAGX,yBACE,OAAO1L,EAAS2L,kCAGlB,uBAAuBlG,GACrBzF,EAAS4L,gCAAgCnG,GAG3C,2BACE,OAAOzF,EAAS6L,oCAGlB,yBAAyBpG,GACvBzF,EAAS8L,kCAAkCrG,GAG7C,4BACE,OAAOzF,EAAS+L,qCAGlB,0BAA0BtG,GACxBzF,EAASgM,mCAAmCvG,GAK9C,cACE,OAAOzF,EAASiM,2BAA2B9zC,KAAKsgC,KAGlD,YAAYyT,GACVlM,EAASmM,2BAA2Bh0C,KAAKsgC,IAAKyT,GAGhD,QAAQE,EAAc7D,EAAoB,GACxC,IAAI7G,EAAO2K,EAAYD,GACnB7D,EACFvI,EAASsM,2BAA2B/D,EAAMpwC,KAAKsgC,IAAKiJ,EAAM,GAE1D1B,EAASuM,yBAAyBp0C,KAAKsgC,IAAKiJ,EAAM,GAEpD1B,EAASQ,MAAMkB,GAGjB,UAAU8K,EAAkBjE,EAAoB,GAC9C,IAAI1D,EAAW2H,EAAO3nC,OAClB4nC,EAAQ,IAAI1sC,MAAa8kC,GAC7B,IAAK,IAAIrsC,EAAI,EAAGA,EAAIqsC,IAAYrsC,EAC9Bi0C,EAAMj0C,GAAK6zC,EAAYG,EAAOh0C,IAEhC,IAAI6nC,EAAOuB,EAAc6K,GACrBlE,EACFvI,EAASsM,2BAA2B/D,EAAMpwC,KAAKsgC,IAAK4H,EAAMwE,GAE1D7E,EAASuM,yBAAyBp0C,KAAKsgC,IAAK4H,EAAMwE,GAEpD7E,EAASQ,MAAMH,GACf,IAAK,IAAI7nC,EAAIqsC,EAAUrsC,GAAK,IAAKA,EAAGwnC,EAASQ,MAAMiM,EAAMj0C,IAG3D,SAASk0C,EAAoBC,EAAkBC,GAAkB,EAAOC,GAAgB,GAyBtF,IAvBIH,GAAiB,GAAKC,GAAe,KAAGD,EAAgB,GAE5D1M,EAAS+K,0BAA0B2B,GACnC1M,EAASiL,wBAAwB0B,GACjC3M,EAASoL,sBAAsBwB,GAG3BF,GAAiB,GAAqB,IAAhBC,GACxB3M,EAAS4L,gCAAgC,IACzC5L,EAAS8L,kCAAkC,IAC3C9L,EAASgM,mCAAmC,OAE5ChM,EAAS4L,gCACU,GAAjBc,GAAsBC,GAAe,EACjC,EACA,GAEN3M,EAAS8L,kCAAkC,IAC3C9L,EAASgM,mCAAmC,KAK1CU,EAAgB,GAAKC,EAAc,EAAG,CACxC,IAAIH,EAAS,IAAIzsC,MAIjBysC,EAAOrnC,KAAK,kCACZqnC,EAAOrnC,KAAK,kCAIRunC,GAAiB,GAAKC,GAAe,IACvCH,EAAOrnC,KAAK,eAEVunC,GAAiB,IACnBF,EAAOrnC,KAAK,WACZqnC,EAAOrnC,KAAK,qCACZqnC,EAAOrnC,KAAK,UACZqnC,EAAOrnC,KAAK,gBACZqnC,EAAOrnC,KAAK,WACZqnC,EAAOrnC,KAAK,aACZqnC,EAAOrnC,KAAK,oBAEVunC,GAAiB,GAAKC,GAAe,KACvCH,EAAOrnC,KAAK,OACZqnC,EAAOrnC,KAAK,WAEV0nC,IACEH,EAAgB,GAClBF,EAAOrnC,KAAK,WAEdqnC,EAAOrnC,KAAK,wBAEdqnC,EAAOrnC,KAAK,yBACZqnC,EAAOrnC,KAAK,YACZqnC,EAAOrnC,KAAK,OACZqnC,EAAOrnC,KAAK,qBACZqnC,EAAOrnC,KAAK,uBACZqnC,EAAOrnC,KAAK,wBACRunC,GAAiB,GAAKC,GAAe,KACvCH,EAAOrnC,KAAK,mBACZqnC,EAAOrnC,KAAK,gCAEVunC,GAAiB,GAAKC,GAAe,EACvCH,EAAOrnC,KAAK,wBAEZqnC,EAAOrnC,KAAK,cAEdqnC,EAAOrnC,KAAK,UACRunC,GAAiB,GAAKC,GAAe,GACvCH,EAAOrnC,KAAK,QAEdqnC,EAAOrnC,KAAK,+BACZqnC,EAAOrnC,KAAK,UACZqnC,EAAOrnC,KAAK,kBACZqnC,EAAOrnC,KAAK,qBACZqnC,EAAOrnC,KAAK,mBACZqnC,EAAOrnC,KAAK,mBACZqnC,EAAOrnC,KAAK,UACZqnC,EAAOrnC,KAAK,kBACZqnC,EAAOrnC,KAAK,mBACZqnC,EAAOrnC,KAAK,mBACRunC,GAAiB,GAAKC,GAAe,IACvCH,EAAOrnC,KAAK,gBAEdqnC,EAAOrnC,KAAK,WACRunC,GAAiB,GAAKC,GAAe,IACvCH,EAAOrnC,KAAK,iBAEVunC,GAAiB,GAAKC,GAAe,IACvCH,EAAOrnC,KAAK,+BAEdqnC,EAAOrnC,KAAK,gBACZqnC,EAAOrnC,KAAK,qBACZqnC,EAAOrnC,KAAK,uBACZqnC,EAAOrnC,KAAK,gBACRunC,GAAiB,GACnBF,EAAOrnC,KAAK,0BAEVunC,GAAiB,GAAKC,GAAe,IACvCH,EAAOrnC,KAAK,OAEdqnC,EAAOrnC,KAAK,WAIRunC,GAAiB,GAAKC,GAAe,KACvCH,EAAOrnC,KAAK,+BACZqnC,EAAOrnC,KAAK,oBAEVunC,GAAiB,GAAKC,GAAe,IACvCH,EAAOrnC,KAAK,uBAEV66B,EAASqL,gCACPqB,GAAiB,GAAKC,GAAe,EACvCH,EAAOrnC,KAAK,sCAEZqnC,EAAOrnC,KAAK,6BAGhBqnC,EAAOrnC,KAAK,gCACRunC,GAAiB,GAAKC,GAAe,EACvCH,EAAOrnC,KAAK,gCAEZqnC,EAAOrnC,KAAK,oBACZqnC,EAAOrnC,KAAK,WAGVunC,GAAiB,GAAKC,GAAe,EACvCH,EAAOrnC,KAAK,wBAEZqnC,EAAOrnC,KAAK,cAEdqnC,EAAOrnC,KAAK,aACZqnC,EAAOrnC,KAAK,kBACZqnC,EAAOrnC,KAAK,uBACR0nC,GAEFL,EAAOrnC,KAAK,iCAEVunC,GAAiB,GAAKC,GAAe,KACvCH,EAAOrnC,KAAK,OAEZqnC,EAAOrnC,KAAK,gBACRunC,GAAiB,IAEnBF,EAAOrnC,KAAK,oBACZqnC,EAAOrnC,KAAK,UAEZqnC,EAAOrnC,KAAK,uBACZqnC,EAAOrnC,KAAK,aACZqnC,EAAOrnC,KAAK,kBACZqnC,EAAOrnC,KAAK,wBACZqnC,EAAOrnC,KAAK,UACZqnC,EAAOrnC,KAAK,gBACZqnC,EAAOrnC,KAAK,mBACZqnC,EAAOrnC,KAAK,+BACZqnC,EAAOrnC,KAAK,UACZqnC,EAAOrnC,KAAK,uBACZqnC,EAAOrnC,KAAK,yBAEdqnC,EAAOrnC,KAAK,qBACZqnC,EAAOrnC,KAAK,uBACZqnC,EAAOrnC,KAAK,UACZqnC,EAAOrnC,KAAK,yBACZqnC,EAAOrnC,KAAK,gCAGdqnC,EAAOrnC,KAAK,kCACZqnC,EAAOrnC,KAAK,6CACZqnC,EAAOrnC,KAAK,kBACZqnC,EAAOrnC,KAAK,iCAEZhN,KAAK20C,UAAUN,IAInB,WACE,OAAqD,GAA9CxM,EAAS+M,wBAAwB50C,KAAKsgC,KAG/C,YACEuH,EAASgN,yBAAyB70C,KAAKsgC,KAGzC,SAASwU,GACP,IAAIxM,EAAMtoC,KAAK+nC,IACfj9B,OAAO+8B,EAASI,0BAA4B,IAC5C,IACI8M,EACAC,EAFAzL,EAAO2K,EAAYY,GAGvBjN,EAASoN,gCAAgC3M,EAAKtoC,KAAKsgC,IAAKiJ,GACxDwL,EAAYjqC,OAAO+8B,EAASqN,WAAW5M,IACvC,IAAI6M,EAAYtN,EAASqN,WAAW5M,EAAM,GAC1C0M,EAAenN,EAASqN,WAAW5M,EAAM,GACzC,IAAIoB,EAAM,IAAI0L,EAMd,OALA1L,EAAI2L,OAkoBR,SAAoBpL,EAAYv9B,GAC9B,IAAIg9B,EAAM,IAAIhhC,WAAWgE,GACzB,IAAK,IAAIrM,EAAI,EAAGA,EAAIqM,IAAUrM,EAC5BqpC,EAAIrpC,GAAKwnC,EAASyN,cAAcrL,EAAa5pC,GAE/C,OAAOqpC,EAvoBQ6L,CAAWR,EAAWI,GACnCzL,EAAIxH,UAAYmR,EAAW2B,GAC3BnN,EAASQ,MAAMkB,GACf1B,EAASQ,MAAM0M,GACXC,GAAcnN,EAASQ,MAAM2M,GAC1BtL,EAGT,SACE,MAAM,IAAIzgC,MAAM,mBAGlB,UACE,MAAM,IAAIA,MAAM,mBAKV,kBAAkBusC,GACxB,GAAY,OAARA,EAAc,OAAO,EACzB,IAAI5N,EAAgB5nC,KAAK4nC,cACzB,GAAIA,EAAct6B,IAAIkoC,GAAM,OAAc5N,EAAc1mC,IAAIs0C,GAC5D,IAAIvL,EAAMiK,EAAYsB,GAEtB,OADA5N,EAAcl6B,IAAI8nC,EAAKvL,GAChBA,EAGT,UACEn/B,OAAO9K,KAAKsgC,KAEZ,IAAK,IAAIlJ,EAAUC,WAAWr3B,KAAK4nC,eAAgBvnC,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CACxF,IAAI4pC,EAAM9qB,UAAUiY,EAAQ/2B,IAC5BwnC,EAASQ,MAAM4B,GAEjBjqC,KAAK4nC,cAAgB,IAAI7/B,IACzB8/B,EAASQ,MAAMroC,KAAK+nC,KACpBF,EAAS4N,uBAAuBz1C,KAAKsgC,KACrCtgC,KAAKsgC,IAAM,EAGb,iBACE,OAAOoV,EAAS/zC,OAAO3B,MAGzB,gBACEmpC,EACAwM,GAAsB,EACtBC,EAAgBxyC,IAAIyiB,WAEpB,GAAI+vB,EAAW,EAAG,OAAO,EAGzB,IAAIC,EACAC,EAEJ,OALAF,GAAY,EAKJ/N,EAASkO,yBAAyB5M,IACxC,KAAK7C,EAAa0P,MAChB,OAAanO,EAASgC,2BAA2BV,IAC/C,KAAU/C,EAAWt/B,IACnB,OAAO9G,KAAKoD,IAAIykC,EAASoO,0BAA0B9M,IAErD,KAAU/C,EAAWr/B,IACnB,OAAO/G,KAAKqD,IACVwkC,EAASqO,6BAA6B/M,GACtCtB,EAASsO,8BAA8BhN,IAG3C,KAAU/C,EAAW7+B,IACnB,OAAOvH,KAAK6D,IAAIgkC,EAASuO,0BAA0BjN,IAErD,KAAU/C,EAAW5+B,IACnB,OAAOxH,KAAK8D,IAAI+jC,EAASwO,0BAA0BlN,IAErD,KAAU/C,EAAW3+B,KAKrB,KAAU2+B,EAAW1+B,OACnB,OAAO,EAET,QACE,MAAM,IAAIuB,MAAM,0BAItB,KAAKq9B,EAAagQ,SAChB,OAAOzO,EAAS+B,kBAAkB5pC,KAAKsgC,IACrCuH,EAAS0O,0BAA0BpN,GACnCtB,EAASgC,2BAA2BV,IAGxC,KAAK7C,EAAakQ,UAAW,CAC3B,IAAIC,EAAa5O,EAAS6O,0BAA0BvN,GACpD,IAAKsN,EAAY,MACjB,OAAO5O,EAASkC,mBAAmB/pC,KAAKsgC,IAAKmW,EAAY5O,EAASgC,2BAA2BV,IAE/F,KAAK7C,EAAaqQ,KAChB,KAAMd,EAAU71C,KAAK42C,gBAAgB/O,EAASgP,oBAAoB1N,GAAOwM,EAAeC,IACtF,MAEF,OACE/N,EAASiP,sBAAsB3N,GAC3BtB,EAASwC,oBAAoBrqC,KAAKsgC,IAChCuH,EAASkP,sBAAsB5N,GAC/BtB,EAASmP,uBAAuB7N,GAChCtB,EAASgC,2BAA2BV,GACpC0M,GAEFhO,EAASsC,cAAcnqC,KAAKsgC,IAC1BuH,EAASkP,sBAAsB5N,GAC/BtB,EAASoP,sBAAsB9N,GAAQ,EAAI,EAC3CtB,EAASmP,uBAAuB7N,GAChCtB,EAASqP,sBAAsB/N,GAC/BtB,EAASgC,2BAA2BV,GACpC0M,GAIV,KAAKvP,EAAa6Q,MAChB,KAAMtB,EAAU71C,KAAK42C,gBAAgB/O,EAASuP,uBAAuBjO,GAAOwM,EAAeC,IACzF,MAEF,OAAO/N,EAASuB,eAAeppC,KAAKsgC,IAAKuH,EAASwP,oBAAoBlO,GAAO0M,GAE/E,KAAKvP,EAAagR,OAChB,KAAMzB,EAAU71C,KAAK42C,gBAAgB/O,EAAS0P,uBAAuBpO,GAAOwM,EAAeC,IACzF,MAEF,KAAME,EAAU91C,KAAK42C,gBAAgB/O,EAAS2P,wBAAwBrO,GAAOwM,EAAeC,IAC1F,MAEF,OAAO/N,EAASwB,gBAAgBrpC,KAAKsgC,IAAKuH,EAAS4P,qBAAqBtO,GAAO0M,EAASC,GAG5F,OAAO,EAGT,cAAc3M,EAAqBj1B,EAA8B0hC,EAAgB,GAAI8B,EAAyB,GAC5G,IAAIC,EAAS9P,EAAS+P,wBAAwB53C,KAAKsgC,IAAKpsB,EAAO0hC,EAAU8B,GACrEG,EAAWhQ,EAASiQ,+BAA+BH,EAAQxO,GAK/D,OAJI0O,IACF/sC,OAAO0gC,EAAgBqM,IAAYvR,EAAa0P,OAChDlrC,OAAO8gC,EAAkBiM,IAAYjM,EAAkBzC,KAElD0O,EAKT,iBAAiBj3C,GACf,IAAI2oC,EAAO2K,EAAYtzC,GACnB8oC,EAAM7B,EAASkQ,oCAAoC/3C,KAAKsgC,IAAKiJ,GAEjE,OADA1B,EAASQ,MAAMkB,GACRG,EAGT,iBAAiBjK,GACf,OAAO4T,EAAWxL,EAASmQ,oCAAoCh4C,KAAKsgC,IAAKb,IAG3E,iBACE2Q,EACAjH,EACA8O,EACAC,EACAC,GAEAtQ,EAASuQ,kCAAkChI,EAAMjH,EAAM8O,EAAWC,EAAYC,IAMlF,SAAgBhI,EAAWkI,GACzB,IAAKA,EAAO,OAAOjS,EAAWI,KAC9B,OAAQ6R,EAAM3rC,QACZ,KAAK,EAAG,OAAO05B,EAAWI,KAC1B,KAAK,EAAG,OAAO6R,EAAM,GAEvB,IAAInQ,EAAOuB,EAAc4O,GACrB3O,EAAM7B,EAASyQ,oBAAoBpQ,EAAMmQ,EAAM3rC,QAEnD,OADAm7B,EAASQ,MAAMH,GACRwB,EAiBT,SAAgB8B,EAAgBrC,GAC9B,OAAOtB,EAASkO,yBAAyB5M,GAG3C,SAAgByC,EAAkBzC,GAChC,OAAOtB,EAASgC,2BAA2BV,GAv0C7C,WAgwBkB,EAAAoP,kBAAkC,EAyClC,EAAAC,iBAAiC,EA+fnD,eAYA,sBAA2B/oC,GACzB,IAAIgpC,EAAQ5Q,EAAS6Q,mBAAmBjpC,GACpCy4B,EAAOL,EAASG,QAAeyQ,GAAS,GAC5C5Q,EAAS8Q,oBAAoBlpC,EAAMy4B,GACnC,IAAImQ,EAAQ,IAAIzwC,MAAkB6wC,GAClC,IAAK,IAAIp4C,EAAS,EAAGA,EAAIo4C,IAASp4C,EAChCg4C,EAAMh4C,GAAKwnC,EAASqN,WAAWhN,GAAe7nC,GAAK,IAGrD,OADAwnC,EAASQ,MAAMH,GACRmQ,GAKT,oBAIA,sBAIA,4BAAiClP,GAC/B,OAAOtB,EAASoO,0BAA0B9M,IAG5C,+BAAoCA,GAClC,OAAOtB,EAASqO,6BAA6B/M,IAG/C,gCAAqCA,GACnC,OAAOtB,EAASsO,8BAA8BhN,IAGhD,4BAAiCA,GAC/B,OAAOtB,EAASuO,0BAA0BjN,IAG5C,4BAAiCA,GAC/B,OAAOtB,EAASwO,0BAA0BlN,IAG5C,4BAAiCA,GAC/B,OAAOtB,EAAS0O,0BAA0BpN,IAG5C,4BAAiCA,GAC/B,OAAOtB,EAAS+Q,0BAA0BzP,IAG5C,4BAAiCA,GAC/B,OAAOtB,EAASgR,0BAA0B1P,IAG5C,sBAA2BA,GACzB,OAAOtB,EAASiR,uBAAuB3P,IAGzC,4BAAiCA,GAC/B,OAAOkK,EAAWxL,EAAS6O,0BAA0BvN,KAGvD,uBAA4BA,GAC1B,OAAOtB,EAAS4P,qBAAqBtO,IAGvC,yBAA8BA,GAC5B,OAAOtB,EAAS0P,uBAAuBpO,IAGzC,0BAA+BA,GAC7B,OAAOtB,EAAS2P,wBAAwBrO,IAG1C,sBAA2BA,GACzB,OAAOtB,EAASwP,oBAAoBlO,IAGtC,yBAA8BA,GAC5B,OAAOtB,EAASuP,uBAAuBjO,IAGzC,wBAA6BA,GAC3B,OAAOtB,EAASkP,sBAAsB5N,IAGxC,yBAA8BA,GAC5B,OAAOtB,EAASmP,uBAAuB7N,IAGzC,sBAA2BA,GACzB,OAAOtB,EAASgP,oBAAoB1N,IAGtC,wBAA6BA,GAC3B,OAAOtB,EAASoP,sBAAsB9N,IAGxC,yBAA8BA,GAC5B,OAAOtB,EAASkR,uBAAuB5P,IAGzC,0BAA+BA,GAC7B,OAAOtB,EAASmR,wBAAwB7P,IAG1C,uBAA4BA,GAC1B,OAAOtB,EAASoR,qBAAqB9P,IAGvC,yBAA8BA,GAC5B,OAAOtB,EAASqR,uBAAuB/P,IAGzC,wBAA6BA,GAC3B,OAAOkK,EAAWxL,EAASsR,sBAAsBhQ,KAGnD,8BAAmCA,GACjC,OAAOtB,EAASuR,6BAA6BjQ,IAG/C,yBAA8BA,EAAqB1J,GACjD,OAAOoI,EAASwR,uBAAuBlQ,EAAM1J,IAG/C,0BAA+B0J,GAC7B,OAAOtB,EAASyR,wBAAwBnQ,IAG1C,qBAA0BA,GACxB,OAAOtB,EAAS0R,qBAAqBpQ,IAGvC,sBAA2BA,GACzB,OAAOtB,EAAS2R,sBAAsBrQ,IAGxC,uBAA4BA,GAC1B,OAAOkK,EAAWxL,EAAS4R,qBAAqBtQ,KAGlD,uBAA4BA,GAC1B,OAAOtB,EAAS6R,qBAAqBvQ,IAGvC,wBAA6BA,GAC3B,OAAOkK,EAAWxL,EAAS8R,sBAAsBxQ,KAGnD,6BAAkCA,GAChC,OAAOtB,EAAS+R,2BAA2BzQ,IAG7C,yBAA8BA,GAC5B,OAAOtB,EAASgS,yBAAyB1Q,IAG3C,yBAA8BA,GAC5B,OAAOtB,EAASiS,0BAA0B3Q,IAG5C,8BAAmCA,GACjC,OAAOtB,EAASkS,4BAA4B5Q,IAG9C,wBAA6BA,GAC3B,OAAOtB,EAASmS,sBAAsB7Q,IAGxC,0BAA+BA,GAC7B,OAAOtB,EAASoS,wBAAwB9Q,IAG1C,yBAA8BA,GAC5B,OAAOkK,EAAWxL,EAASqS,uBAAuB/Q,KAGpD,+BAAoCA,GAClC,OAAOtB,EAASsS,4BAA4BhR,IAG9C,0BAA+BA,EAAqB1J,GAClD,OAAOoI,EAASuS,wBAAwBjR,EAAM1J,IAGhD,qBAA0B0J,GACxB,OAAOtB,EAASwS,mBAAmBlR,IAGrC,+BAAoCA,GAClC,OAAOtB,EAASyS,4BAA4BnR,IAG9C,0BAA+BA,EAAqB1J,GAClD,OAAOoI,EAAS0S,wBAAwBpR,EAAM1J,IAGhD,uBAA4B0J,GAC1B,OAAOkK,EAAWxL,EAAS2S,4BAA4BrR,KAKzD,2BAAgCiH,GAC9B,OAAOvI,EAAS4S,yBAAyBrK,IAG3C,2BAAgCA,GAC9B,OAAOiD,EAAWxL,EAAS6S,yBAAyBtK,KAGtD,6BAAkCA,GAChC,OAAOvI,EAAS8S,2BAA2BvK,IAG7C,8BAAmCA,GACjC,OAAOvI,EAAS+S,4BAA4BxK,IAG9C,2BAAgCA,GAE9B,IAAIyK,EAAQhT,EAASiT,4BAA4B1K,GAC7CiI,EAAQ,IAAIzwC,MAAkBizC,GAClC,IAAK,IAAIx6C,EAAW,EAAGA,EAAIw6C,IAASx6C,EAClCg4C,EAAMh4C,GAAKwnC,EAASkT,wBAAwB3K,EAAM/vC,GAEpD,OAAO8vC,EAAWkI,IAKpB,yBAA8Bvf,GAC5B,OAAOua,EAAWxL,EAASmT,uBAAuBliB,KAGpD,yBAA8BA,GAC5B,OAAO+O,EAASoT,uBAAuBniB,IAGzC,2BAAgCA,GAC9B,OAAO+O,EAASqT,yBAAyBpiB,IAG3C,yBAA8BA,GAC5B,OAAO+O,EAASsT,2BAA2BriB,IAK7C,wBAA6BsiB,GAC3B,OAAO/H,EAAWxL,EAASwT,sBAAsBD,KAGnD,6BAAkCA,GAChC,OAAOvT,EAASyT,2BAA2BF,IAG7C,0BAA+BA,GAC7B,OAAOvT,EAAS0T,wBAAwBH,IAG1C,2BAAgCA,GAC9B,OAAOvT,EAAS2T,yBAAyBJ,IAG3C,MAAa1F,EAYX,eAPA,cAAc/1C,GACZ,IAAI87C,EAAW,IAAI/F,EAGnB,OAFA+F,EAAS97C,OAASA,EAClB87C,EAASnb,IAAMuH,EAAS6T,gBAAgB/7C,EAAO2gC,KACxCmb,EAKT,SAASjwC,GACP,OAAOq8B,EAAS8T,kBAAkB37C,KAAKsgC,IAAK90B,GAG9C,UACEowC,EACAC,EACAvnC,EAA2B,EAC3B9I,EAAsB,GAEtBq8B,EAASiU,mBAAmBF,EAAMC,EAAIvnC,EAAW9I,GAGnD,mBAAmBA,EAAqB8I,GACtC,OAAOuzB,EAASkU,4BAA4B/7C,KAAKsgC,IAAK90B,EAAM8I,GAG9D,mBACEsnC,EACAC,EACAG,EACAxwC,EAAsB,GAEtB,IAAI08B,EAgDR,SAAuB+T,GACrB,IAAKA,EAAM,OAAO,EAClB,IAAIhS,EAAMpC,EAASG,QAAQiU,EAAKvvC,QAAU,GACtC2hC,EAAMpE,EACV,IAAK,IAAI5pC,EAAI,EAAG8b,EAAI8/B,EAAKvvC,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC3C,IAAI6xC,EAAM+J,EAAK57C,GACfwnC,EAASsK,YAAY9D,EAAK6D,GAC1B7D,GAAO,EAET,OAAOpE,EAzDMiS,CAAcF,GACzBnU,EAASsU,4BAA4BP,EAAMC,EAAI3T,EAAM8T,EAAQtvC,OAAQlB,GACrEq8B,EAASQ,MAAMH,GAGjB,iBAAiBkU,EAAyBC,GACxC,OAAOxU,EAASyU,0BAA0Bt8C,KAAKsgC,IAAK8b,EAAOC,IAoB/D,SAAgBrQ,EAAe7C,EAAqBoT,EAAyBlW,EAAamW,KACxF,OAAO3U,EAAS4U,kCAAkCtT,EAAMoT,GAU1D,SAASpU,EAAauU,GACpB,IAAKA,EAAK,OAAO,EACjB,IAAIC,EAAYD,EAAIhwC,OAChBu9B,EAAMpC,EAASG,QAAQ2U,GACvBtO,EAAMpE,EACV,IAAK,IAAI5pC,EAAI,EAAGA,EAAIs8C,IAAat8C,EAC/BwnC,EAASkB,aAAasF,IAAOqO,EAAIr8C,IAEnC,OAAO4pC,EA2BT,SAASR,EAAcmT,GACrB,IAAKA,EAAM,OAAO,EAElB9xC,OAAOrF,YAAc,EAAA2E,OAAO6mB,QAC5B,IAAIgZ,EAAMpC,EAASG,QAAQ4U,EAAKlwC,QAAU,GACtC2hC,EAAMpE,EACV,IAAK,IAAI5pC,EAAI,EAAG8b,EAAIygC,EAAKlwC,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC3C,IAAI6xC,EAAM0K,EAAKv8C,GACfwnC,EAASsK,YAAY9D,EAAU6D,GAC/B7D,GAAO,EAET,OAAOpE,EA2BT,SAASiK,EAAYsB,GACnB,GAAY,OAARA,EAAc,OAAO,EACzB,IAAIvL,EAAMpC,EAASG,QA1BrB,SAA0BwN,GACxB,IAAI/oC,EAAM,EACV,IAAK,IAAIpM,EAAI,EAAG8b,EAAIq5B,EAAI9oC,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC1C,IAAIw8C,EAAIrH,EAAI3oC,WAAWxM,GACnBw8C,GAAK,OAAUA,GAAK,OAAUx8C,EAAI,EAAI8b,IACxC0gC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBrH,EAAI3oC,aAAaxM,IAEpDw8C,GAAK,MACLpwC,EAEFA,GADSowC,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAOpwC,EAKoBqwC,CAAiBtH,GAAO,GAE/CnH,EAAMpE,EACV,IAAK,IAAI5pC,EAAI,EAAG8b,EAAIq5B,EAAI9oC,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC1C,IAAIw8C,EAAIrH,EAAI3oC,WAAWxM,GACnBw8C,GAAK,OAAUA,GAAK,OAAUx8C,EAAI,EAAI8b,IACxC0gC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBrH,EAAI3oC,aAAaxM,IAEpDw8C,GAAK,IACPhV,EAASkB,aAAasF,IAAOwO,GACpBA,GAAK,MACdhV,EAASkB,aAAasF,IAAQ,IAASwO,IAAM,GAC7ChV,EAASkB,aAAasF,IAAQ,IAAqB,GAAZwO,IAC9BA,GAAK,OACdhV,EAASkB,aAAasF,IAAQ,IAASwO,IAAM,IAC7ChV,EAASkB,aAAasF,IAAQ,IAASwO,IAAO,EAAK,IACnDhV,EAASkB,aAAasF,IAAQ,IAAqB,GAAZwO,IAC9BA,GAAK,SACdhV,EAASkB,aAAasF,IAAQ,IAASwO,IAAM,IAC7ChV,EAASkB,aAAasF,IAAQ,IAASwO,IAAM,GAAM,IACnDhV,EAASkB,aAAasF,IAAQ,IAASwO,IAAO,EAAK,IACnDhV,EAASkB,aAAasF,IAAQ,IAAqB,GAAZwO,IAC9BA,GAAK,UACdhV,EAASkB,aAAasF,IAAQ,IAASwO,IAAM,IAC7ChV,EAASkB,aAAasF,IAAQ,IAASwO,IAAM,GAAM,IACnDhV,EAASkB,aAAasF,IAAQ,IAASwO,IAAM,GAAM,IACnDhV,EAASkB,aAAasF,IAAQ,IAASwO,IAAO,EAAK,IACnDhV,EAASkB,aAAasF,IAAQ,IAAqB,GAAZwO,KAEvChV,EAASkB,aAAasF,IAAQ,IAASwO,IAAM,IAC7ChV,EAASkB,aAAasF,IAAQ,IAASwO,IAAM,GAAM,IACnDhV,EAASkB,aAAasF,IAAQ,IAASwO,IAAM,GAAM,IACnDhV,EAASkB,aAAasF,IAAQ,IAASwO,IAAM,GAAM,IACnDhV,EAASkB,aAAasF,IAAQ,IAASwO,IAAO,EAAK,IACnDhV,EAASkB,aAAasF,IAAQ,IAAqB,GAAZwO,IAI3C,OADAhV,EAASkB,aAAasF,EAAK,GACpBpE,EAWT,SAAgBoJ,EAAWpJ,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEI8S,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAIx1C,MAIPm1C,EAAKlV,EAASyN,cAAcrL,MACjC,GAAW,IAAL8S,EAKN,GADAC,EAAqC,GAAhCnV,EAASyN,cAAcrL,KACT,MAAT,IAAL8S,GAsBL,GAlBAE,EAAqC,GAAhCpV,EAASyN,cAAcrL,KACT,MAAT,IAAL8S,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAqC,GAAhCrV,EAASyN,cAAcrL,KACT,MAAT,IAAL8S,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAqC,GAAhCtV,EAASyN,cAAcrL,KAE1B8S,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EADjC,GAAhCtV,EAASyN,cAAcrL,OAKlCmT,EAAIpwC,KAAK+vC,GACLA,EAAK,MACPK,EAAIpwC,KAAK+vC,OACJ,CACL,IAAIM,EAAKN,EAAK,MACdK,EAAIpwC,KAAK,MAAUqwC,GAAM,IACzBD,EAAIpwC,KAAK,MAAe,KAALqwC,QA1BnBD,EAAIpwC,MAAY,GAAL+vC,IAAY,EAAKC,QAL5BI,EAAIpwC,KAAK+vC,GAkCb,OAAOp1C,OAAO21C,cAAcF,GAhP9B,aA+CA,SAAY7W,GACV,mBACA,2BACA,qBACA,+BACA,iCACA,kCACA,oCACA,kCACA,qCACA,qCACA,6BACA,0BACA,oBAbF,CAAYA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KAgBvB,mBAIA,0BAA+B4C,EAAqBoT,EAAyBlW,EAAamW,KACxF,OAAOxQ,EAAe7C,EAAMoT,IAAahW,EAAYC,MAkIvD,eA+CA,MAAa4O,GAAb,iBAQA,oCAAgBmI,EAAyBpU,GAEvC,GAAItB,EAASgC,2BAA2BV,IAAS/C,EAAWK,YAAa,OAAO,EAEhF,OAAQoB,EAASkO,yBAAyB5M,IACxC,KAAK7C,EAAaG,YAClB,KAAKH,EAAamF,OAAQ,OAAO,EACjC,KAAKnF,EAAakX,MAAO,OAAoD,GAA7C3V,EAAS+R,2BAA2BzQ,GACpE,KAAK7C,EAAamX,MAChB,IAAK5V,EAASsR,sBAAsBhQ,GAAO,CACzC,IAAIuU,EAAc7V,EAASuR,6BAA6BjQ,GACxD,OAAOuU,EAAc,GAAKH,EAAyB1V,EAASwR,uBAAuBlQ,EAAMuU,EAAc,KAI7G,OAAO,GAIT,oBAA4BvU,EAAqBwU,EAAS5zC,GACxD,OAAQyhC,EAAgBrC,IACtB,KAAK7C,EAAamX,MAChB,IAAK,IAAIp9C,EAAW,EAAGyB,EAAI+lC,EAASuR,6BAA6BjQ,GAAO9oC,EAAIyB,IAAKzB,EAC/E0J,EAAM89B,EAASwR,uBAAuBlQ,EAAM9oC,GAAIs9C,GAElD,MAEF,KAAKrX,EAAasX,GAAI,CACpB7zC,EAAM89B,EAASyR,wBAAwBnQ,GAAOwU,GAC9C5zC,EAAM89B,EAAS0R,qBAAqBpQ,GAAOwU,GAC3C,IAAIzlC,EAAU2vB,EAAS2R,sBAAsBrQ,GACzCjxB,GAASnO,EAAMmO,EAASylC,GAC5B,MAEF,KAAKrX,EAAauX,KAChB9zC,EAAM89B,EAAS6R,qBAAqBvQ,GAAOwU,GAC3C,MAEF,KAAKrX,EAAakX,MAAO,CACvB,IAAIlpC,EAAYuzB,EAAS+R,2BAA2BzQ,GAChD70B,GAAWvK,EAAMuK,EAAWqpC,GAChC,MAEF,KAAKrX,EAAawX,OAChB/zC,EAAM89B,EAASkW,4BAA4B5U,GAAOwU,GAClD,MAEF,KAAKrX,EAAa0X,KAChB,IAAK,IAAI39C,EAAW,EAAGyB,EAAI+lC,EAASsS,4BAA4BhR,GAAO9oC,EAAIyB,IAAKzB,EAC9E0J,EAAM89B,EAASuS,wBAAwBjR,EAAM9oC,GAAIs9C,GAEnD,MAEF,KAAKrX,EAAa2X,aAChB,IAAK,IAAI59C,EAAW,EAAGyB,EAAI+lC,EAASqW,oCAAoC/U,GAAO9oC,EAAIyB,IAAKzB,EACtF0J,EAAM89B,EAASsW,gCAAgChV,EAAM9oC,GAAIs9C,GAE3D,MAEF,KAAKrX,EAAagQ,SAChB,MAEF,KAAKhQ,EAAa8X,SAChBr0C,EAAM89B,EAASgR,0BAA0B1P,GAAOwU,GAChD,MAEF,KAAKrX,EAAakQ,UAChB,MAEF,KAAKlQ,EAAa+X,UAChBt0C,EAAM89B,EAASyW,2BAA2BnV,GAAOwU,GACjD,MAEF,KAAKrX,EAAaqQ,KAChB5sC,EAAM89B,EAASgP,oBAAoB1N,GAAOwU,GAC1C,MAEF,KAAKrX,EAAaiY,MAChBx0C,EAAM89B,EAASoR,qBAAqB9P,GAAOwU,GAC3C5zC,EAAM89B,EAASqR,uBAAuB/P,GAAOwU,GAC7C,MAEF,KAAKrX,EAAa0P,MAChB,MAEF,KAAK1P,EAAa6Q,MAChBptC,EAAM89B,EAASuP,uBAAuBjO,GAAOwU,GAC7C,MAEF,KAAKrX,EAAagR,OAChBvtC,EAAM89B,EAAS0P,uBAAuBpO,GAAOwU,GAC7C5zC,EAAM89B,EAAS2P,wBAAwBrO,GAAOwU,GAC9C,MAEF,KAAKrX,EAAakY,OAChBz0C,EAAM89B,EAASgS,yBAAyB1Q,GAAOwU,GAC/C5zC,EAAM89B,EAASiS,0BAA0B3Q,GAAOwU,GAChD5zC,EAAM89B,EAASkS,4BAA4B5Q,GAAOwU,GAClD,MAEF,KAAKrX,EAAamY,KAChB10C,EAAM89B,EAASmS,sBAAsB7Q,GAAOwU,GAC5C,MAEF,KAAKrX,EAAamF,OAChB1hC,EAAM89B,EAASoS,wBAAwB9Q,GAAOwU,GAC9C,MAEF,KAAKrX,EAAaoY,KAChB,IAAK,IAAIr+C,EAAW,EAAGyB,EAAI+lC,EAASyS,4BAA4BnR,GAAO9oC,EAAIyB,IAAKzB,EAC9E0J,EAAM89B,EAAS0S,wBAAwBpR,EAAM9oC,GAAIs9C,GAEnD,MAEF,KAAKrX,EAAaqY,IAGlB,KAAKrY,EAAaG,YAChB,MAEF,KAAKH,EAAasY,UAChB70C,EAAM89B,EAASgX,yBAAyB1V,GAAOwU,GAC/C5zC,EAAM89B,EAASiX,2BAA2B3V,GAAOwU,GACjD,MAEF,KAAKrX,EAAayY,cAChBh1C,EAAM89B,EAASmX,6BAA6B7V,GAAOwU,GACnD5zC,EAAM89B,EAASoX,kCAAkC9V,GAAOwU,GACxD5zC,EAAM89B,EAASqX,qCAAqC/V,GAAOwU,GAC3D,MAEF,KAAKrX,EAAa6Y,WAChBp1C,EAAM89B,EAASuX,0BAA0BjW,GAAOwU,GAChD5zC,EAAM89B,EAASwX,+BAA+BlW,GAAOwU,GACrD5zC,EAAM89B,EAASyX,8BAA8BnW,GAAOwU,GACpD,MAEF,KAAKrX,EAAaiZ,aAChBx1C,EAAM89B,EAAS2X,4BAA4BrW,GAAOwU,GAClD,MAEF,KAAKrX,EAAamZ,YAChB,MAEF,KAAKnZ,EAAaoZ,YAChB31C,EAAM89B,EAAS8X,2BAA2BxW,GAAOwU,GACjD,MAEF,KAAKrX,EAAasZ,YAChB71C,EAAM89B,EAASgY,2BAA2B1W,GAAOwU,GACjD5zC,EAAM89B,EAASiY,6BAA6B3W,GAAOwU,GACnD,MAEF,KAAKrX,EAAayZ,YAChBh2C,EAAM89B,EAASmY,4BAA4B7W,GAAOwU,GAClD5zC,EAAM89B,EAASoY,6BAA6B9W,GAAOwU,GACnD,MAEF,KAAKrX,EAAa4Z,YAChBn2C,EAAM89B,EAASsY,yBAAyBhX,GAAOwU,GAC/C5zC,EAAM89B,EAASuY,yBAAyBjX,GAAOwU,GAC/C5zC,EAAM89B,EAASwY,yBAAyBlX,GAAOwU,GAC/C,MAEF,KAAKrX,EAAaga,UAChBv2C,EAAM89B,EAAS0Y,yBAAyBpX,GAAOwU,GAC/C5zC,EAAM89B,EAAS2Y,2BAA2BrX,GAAOwU,GACjD,MAEF,KAAKrX,EAAama,SAChB12C,EAAM89B,EAAS6Y,wBAAwBvX,GAAOwU,GAC9C,MAEF,KAAKrX,EAAaqa,WAChB52C,EAAM89B,EAAS+Y,2BAA2BzX,GAAOwU,GACjD5zC,EAAM89B,EAASgZ,6BAA6B1X,GAAOwU,GACnD5zC,EAAM89B,EAASiZ,2BAA2B3X,GAAOwU,GACjD,MAEF,KAAKrX,EAAaya,SAChB,MAEF,KAAKza,EAAa0a,WAChBj3C,EAAM89B,EAASoZ,2BAA2B9X,GAAOwU,GACjD5zC,EAAM89B,EAASqZ,6BAA6B/X,GAAOwU,GACnD5zC,EAAM89B,EAASsZ,2BAA2BhY,GAAOwU,GACjD,MAEF,KAAKrX,EAAa8a,WAChBr3C,EAAM89B,EAASwZ,2BAA2BlY,GAAOwU,GACjD5zC,EAAM89B,EAASyZ,4BAA4BnY,GAAOwU,GAClD5zC,EAAM89B,EAAS0Z,2BAA2BpY,GAAOwU,GACjD,MAEF,KAAKrX,EAAakb,KAChBz3C,EAAM89B,EAAS4Z,sBAAsBtY,GAAOwU,GAC5C,MAEF,KAAKrX,EAAaob,IAGlB,KAAKpb,EAAaqb,QAChB,MAEF,KAAKrb,EAAasb,UAChB73C,EAAM89B,EAASga,2BAA2B1Y,GAAOwU,GACjD,MAEF,KAAKrX,EAAawb,QAChB,MAEF,KAAKxb,EAAayb,IAChBh4C,EAAM89B,EAASma,oBAAoB7Y,GAAOwU,GAC1C5zC,EAAM89B,EAASoa,yBAAyB9Y,GAAOwU,GAC/C,MAEF,KAAKrX,EAAaoF,MAChB,IAAK,IAAIrrC,EAAW,EAAGyB,EAAI+lC,EAASqa,6BAA6B/Y,GAAO9oC,EAAIyB,IAAKzB,EAC/E0J,EAAM89B,EAASsa,yBAAyBhZ,EAAM9oC,GAAIs9C,GAEpD,MAEF,KAAKrX,EAAa8b,QAChBr4C,EAAM89B,EAASwa,0BAA0BlZ,GAAOwU,GAChD,MAEF,KAAKrX,EAAagc,QAChBv4C,EAAM89B,EAAS0a,0BAA0BpZ,GAAOwU,GAChD,MAEF,KAAKrX,EAAakc,UAChB,IAAK,IAAIniD,EAAW,EAAGyB,EAAI+lC,EAAS4a,iCAAiCtZ,GAAO9oC,EAAIyB,IAAKzB,EACnF0J,EAAM89B,EAAS6a,6BAA6BvZ,EAAM9oC,GAAIs9C,GAExD,MAEF,KAAKrX,EAAaqc,aAChB,MAEF,QAAS73C,QAAO,GAElB,OAAO,I,8ECvhFT,aAOA,QAMA,SAAkB83C,GAKhB,eAEA,iBAEA,iBAEA,iBAEA,qBAKA,eAEA,iBAEA,iBAEA,iBAEA,qBAEA,oBAKA,kBAEA,kBAKA,oBAKA,wBAKA,oBAlDF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAsD1B,SAAkBC,GAChB,mBAEA,uBAEA,2BAEA,yBAEA,qBAEA,0BAEA,sBAEA,oBAEA,uBAEA,+BAEA,6BAEA,0BAEA,sBAzBF,CAAkB,EAAAA,YAAA,EAAAA,UAAS,KA6B3B,MAAatyB,EAoBX,YAAYniB,EAAgB8F,EAAkBo5B,GAHtC,KAAAwV,mBAAkC,KAIxC9iD,KAAKoO,KAAOA,EACZpO,KAAKkU,MAAQA,EACblU,KAAKstC,KAAOA,EACZttC,KAAK+iD,SAAgBC,KAAe1V,EAAO,GAC3CttC,KAAK04B,eAAiB,KACtB14B,KAAKijD,mBAAqB,KAC1BjjD,KAAKkjD,gBAAkBljD,KAIzB,cACE,GAAIA,MAAQuwB,EAAK4yB,KAAM,OAAOnjD,KAC9B,OAAQA,KAAKoO,MACX,KAAK,EAAa,OAAOmiB,EAAKrtB,GAC9B,KAAK,EAAc,OAAOqtB,EAAKptB,IAC/B,KAAK,GACL,KAAK,EAAc,OAAOotB,EAAKntB,IAC/B,KAAK,GACL,KAAK,EAAc,OAAOmtB,EAAKltB,IAC/B,KAAK,EAAgB,OAAoB,IAAbrD,KAAKstC,KAAa/c,EAAK6yB,QAAU7yB,EAAK8yB,QAClE,KAAK,EAAa,OAAO9yB,EAAKhtB,GAC9B,KAAK,EAAc,OAAOgtB,EAAK/sB,IAC/B,KAAK,EAAc,OAAO+sB,EAAK9sB,IAC/B,KAAK,EAAc,OAAO8sB,EAAK7sB,IAC/B,KAAK,EAAgB,OAAoB,IAAb1D,KAAKstC,KAAa/c,EAAK+yB,QAAU/yB,EAAKgzB,QAClE,KAAK,GACL,QAAS,OAAOhzB,EAAKntB,KAKzB,iBACE,OAAiB,IAAbpD,KAAKoO,KAA8BmiB,EAAK4yB,KACrCnjD,KAIT,gBACE,OAAO,GAAKwjD,IAASxjD,KAAK+iD,UAI5B,gBACE,GAAI/iD,KAAK64B,GAAG,KAA0C,CACpD,IAAIH,EAAiB14B,KAAK04B,eAC1B,GAAIA,EAAgB,OAAQA,EAAerD,aAAa,EAAAxJ,eAAezO,WAGzE,OAAO,EAIT,kBACE,IAAIsb,EAAiB14B,KAAK04B,eAC1B,OAA0B,OAAnBA,GAA2BA,EAAerD,aAAa,EAAAxJ,eAAezO,WAI/E,yBAAyBqmC,GACvB,OAAOA,EAAWnW,KAAOttC,KAAKstC,KAIhC,wBAAwBmW,GACtB,IAAInW,EAAOttC,KAAK64B,GAAG,GAAsB74B,KAAKstC,KAAOttC,KAAKstC,KAAO,EACjE,OAAO,IAAQmW,EAAWnW,KAAOA,EAInC,GAAGp5B,GAA0B,OAAQlU,KAAKkU,MAAQA,IAAUA,EAE5D,MAAMA,GAA0B,OAA+B,IAAvBlU,KAAKkU,MAAQA,GAGrD,QAAQwvC,GACN54C,OAAoB,GAAb9K,KAAKoO,OAA2BpO,KAAK04B,gBAC5C,IAAIgR,EAAM,IAAInZ,EAAKvwB,KAAKoO,MAAmB,IAAbpO,KAAKkU,MAA2B,IAAqBlU,KAAKstC,MAExF,OADA5D,EAAIhR,eAAiBgrB,EACdha,EAIT,WAAWlwB,GACT1O,OAAoB,GAAb9K,KAAKoO,OAA2BpO,KAAKijD,oBAC5C,IAAIvZ,EAAM,IAAInZ,EAAKvwB,KAAKoO,MAAmB,IAAbpO,KAAKkU,MAA2B,IAAqBlU,KAAKstC,MAExF,OADA5D,EAAIuZ,mBAAqBzpC,EAClBkwB,EAIT,aACE5+B,OAAO9K,KAAK64B,GAAG,MACf,IAAIiqB,EAAqB9iD,KAAK8iD,mBAQ9B,OAPKA,IACHh4C,QAAQ9K,KAAK64B,GAAG,MAChB74B,KAAK8iD,mBAAqBA,EAAqB,IAAIvyB,EAAKvwB,KAAKoO,KAAmB,IAAbpO,KAAKkU,MAA4BlU,KAAKstC,MACzGwV,EAAmBI,gBAAkBljD,KACrC8iD,EAAmBpqB,eAAiB14B,KAAK04B,eACzCoqB,EAAmBG,mBAAqBjjD,KAAKijD,oBAExCH,EAIT,eAAeve,EAAcof,GAA6B,GACxD,IAAIC,EACAC,EACAC,EACAC,EACJ,GAAI/jD,KAAK64B,GAAG,MACV,GAAI0L,EAAO1L,GAAG,QACP74B,KAAK64B,GAAG,MAAuB0L,EAAO1L,GAAG,MAC5C,GAAI+qB,EAAe5jD,KAAK04B,gBACtB,GAAImrB,EAActf,EAAO7L,eACvB,OAAOkrB,EAAaI,eAAeH,QAEhC,GAAIC,EAAkB9jD,KAAKijD,oBAChC,GAAIc,EAAiBxf,EAAO0e,mBAC1B,OAAOa,EAAgBE,eAAeD,QAEnC,GAAiB,IAAb/jD,KAAKoO,MAA0C,IAAfm2B,EAAOn2B,KAChD,OAAO,OAIR,IAAKm2B,EAAO1L,GAAG,KACpB,GAAI74B,KAAK64B,GAAG,GACV,GAAI0L,EAAO1L,GAAG,IACZ,IACG8qB,GACD3jD,MAAQuwB,EAAK3sB,MACb5D,KAAK64B,GAAG,IAAqB0L,EAAO1L,GAAG,GAEvC,OAAO74B,KAAKstC,MAAQ/I,EAAO+I,SAExB,IAAmB,IAAf/I,EAAOn2B,KAChB,OAAOpO,KAAKstC,MAAQ,GACf,GAAmB,IAAf/I,EAAOn2B,KAChB,OAAOpO,KAAKstC,MAAQ,QAEjB,GAAIttC,KAAK64B,GAAG,IACjB,GAAI0L,EAAO1L,GAAG,GACZ,OAAO74B,KAAKstC,MAAQ/I,EAAO+I,UAExB,GAAIttC,KAAK64B,GAAG,OACb0L,EAAO1L,GAAG,MACZ,OAAO74B,KAAKstC,MAAQ/I,EAAO+I,KAIjC,OAAO,EAIT,uBAAuB/I,EAAcof,GAA6B,GAChE,OAAI3jD,KAAK64B,GAAG,KAA6B74B,KAAKgkD,eAAezf,IACpDA,EAAO1L,GAAG,OACf74B,KAAK64B,GAAG,GACH0L,EAAO1L,GAAG,IAAsB0L,EAAO+I,MAAQttC,KAAKstC,QACxDqW,GAAwB3jD,KAAK64B,GAAG,IAAqB0L,EAAO1L,GAAG,IAG7D74B,KAAKoO,MAAQm2B,EAAOn2B,MAI7B,eAAem2B,GACb,GAAIvkC,KAAK64B,GAAG,IAAsB0L,EAAO1L,GAAG,GAAoB,CAC9D,IAAIyU,EAAOttC,KAAKstC,KAChB,OAAOA,GAAQ/I,EAAO+I,OAASA,GAAQ,IAAMttC,KAAK64B,GAAG,IAAqB0L,EAAO1L,GAAG,IAEtF,OAAO74B,KAAKoO,MAAQm2B,EAAOn2B,KAI7B,yBAAyBkD,EAAYC,EAAa0yC,GAChD,OAAI1yC,EAAMyyC,eAAe1yC,EAAM2yC,GAA+B3yC,EACrDA,EAAK0yC,eAAezyC,EAAO0yC,GAA+B1yC,EAC5D,KAIT,WACE,GAAIvR,KAAK64B,GAAG,KAAsB,CAChC,IAAIH,EAAiB14B,KAAK04B,eAC1B,GAAIA,EACF,OAAO14B,KAAK64B,GAAG,KACXH,EAAexJ,aAAe,UAC9BwJ,EAAexJ,aAErB,IAAI+zB,EAAqBjjD,KAAKijD,mBAC9B,OAAIA,EACKjjD,KAAK64B,GAAG,KACX,IAAMoqB,EAAmBh3C,WAAa,WACtCg3C,EAAmBh3C,YAGzBnB,OAAoB,IAAb9K,KAAKoO,MACL,UAET,OAAQpO,KAAKoO,MACX,KAAK,EAAa,MAAO,KACzB,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAgB,MAAO,QAC5B,KAAK,EAAa,MAAO,KACzB,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAgB,MAAO,QAC5B,KAAK,GAAe,MAAO,OAC3B,KAAK,GAAc,MAAO,MAC1B,KAAK,GAAc,MAAO,MAC1B,KAAK,GAAe,MAAO,OAC3B,KAAK,GAAiB,MAAO,SAC7B,QAAStD,QAAO,GAChB,KAAK,GAAe,MAAO,QAO/B,eACE,OAAQ9K,KAAKoO,MACX,QAAStD,QAAO,GAChB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAO,EAAAs7B,WAAWt/B,IACtC,KAAK,EACL,KAAK,EAAgB,GAAiB,IAAb9G,KAAKstC,KAAY,OAAO,EAAAlH,WAAWt/B,IAC5D,KAAK,EACL,KAAK,EAAc,OAAO,EAAAs/B,WAAWr/B,IACrC,KAAK,GAAc,OAAO,EAAAq/B,WAAW7+B,IACrC,KAAK,GAAc,OAAO,EAAA6+B,WAAW5+B,IACrC,KAAK,GAAe,OAAO,EAAA4+B,WAAW3+B,KACtC,KAAK,GAAiB,OAAO,EAAA2+B,WAAW1+B,OACxC,KAAK,GAAe,OAAO,EAAA0+B,WAAWI,OAiJ5C,SAAgB0d,EAAmB7L,GACjC,IAAI8L,EAAW9L,EAAM3rC,OACjBg9B,EAAM,IAAI9hC,MAAkBu8C,GAChC,IAAK,IAAI9jD,EAAI,EAAGA,EAAI8jD,IAAY9jD,EAAGqpC,EAAIrpC,GAAKg4C,EAAMh4C,GAAG+jD,eACrD,OAAO1a,EA5ZT,SA8QkB,EAAAxmC,GAAY,IAAIqtB,EAAK,EACnC,IAGmB,GAIL,EAAAptB,IAAY,IAAIotB,EAAK,EACnC,IAGkB,IAIJ,EAAAntB,IAAY,IAAImtB,EAAK,EACnC,IAEkB,IAIJ,EAAAltB,IAAY,IAAIktB,EAAK,EACnC,IAGkB,IAIJ,EAAA8yB,QAAgB,IAAI9yB,EAAK,EACvC,IAGkB,IAIJ,EAAA6yB,QAAgB,IAAI7yB,EAAK,EACvC,IAIkB,IAIJ,EAAAhtB,GAAW,IAAIgtB,EAAK,EAClC,IAGmB,GAIL,EAAA/sB,IAAY,IAAI+sB,EAAK,EACnC,IAGkB,IAIJ,EAAA9sB,IAAY,IAAI8sB,EAAK,EACnC,IAEkB,IAIJ,EAAA7sB,IAAY,IAAI6sB,EAAK,EACnC,IAGkB,IAIJ,EAAAgzB,QAAgB,IAAIhzB,EAAK,EACvC,IAGkB,IAIJ,EAAA+yB,QAAgB,IAAI/yB,EAAK,EACvC,IAIkB,IAIJ,EAAA3sB,KAAa,IAAI2sB,EAAK,GACpC,IAGmB,GAIL,EAAA1sB,IAAY,IAAI0sB,EAAK,GACnC,IAEkB,IAIJ,EAAAzsB,IAAY,IAAIysB,EAAK,GACnC,IAGkB,IAIJ,EAAAxsB,KAAa,IAAIwsB,EAAK,GACpC,KACiB,KAIH,EAAAvsB,OAAe,IAAIusB,EAAK,GACtC,KACqB,GAIP,EAAAG,KAAa,IAAIH,EAAK,GAAD,EAAgC,GAGrD,EAAA4yB,KAAa,IAAI5yB,EAAKA,EAAKntB,IAAIgL,KAAMmiB,EAAKntB,IAAI8Q,MAAOqc,EAAKntB,IAAIkqC,MAIhF,uBAQA,yBAA8B+K,GAC5B,IAAI8L,EAAW9L,EAAM3rC,OACrB,IAAKy3C,EAAU,MAAO,GACtB,IAAIr3C,EAAK,IAAIlF,MAAcu8C,GAC3B,IAAK,IAAI9jD,EAAI,EAAGA,EAAI8jD,IAAY9jD,EAAGyM,EAAGzM,GAAKg4C,EAAMh4C,GAAG4L,WACpD,OAAOa,EAAGG,KAAK,MAIjB,kBAuBE,YACEswB,EACAmE,EAAgC,KAChC3yB,EAA0B,KAC1B0yB,EAAwB,MAzB1B,KAAAhS,GAAU,EAcV,KAAA40B,qBAA8C,KAa5CrkD,KAAK0hC,eAAiBA,GAAkC,GACxD1hC,KAAKskD,eAAiB,KACtBtkD,KAAKukD,mBAAqB,EAC1BvkD,KAAK+O,WAAaA,GAA0BwhB,EAAKG,KACjD1wB,KAAKyhC,SAAWA,EAChBzhC,KAAKu9B,QAAUA,EACfv9B,KAAKwkD,SAAU,EACfxkD,KAAKyP,KAAO8tB,EAAQvP,QAAQyC,UAAU6Q,WAAWthC,MAEjD,IAAIykD,EAAiBlnB,EAAQ9O,iBACzB/hB,EAAS+3C,EAAe/3C,OAC5B,IAAK,IAAIrM,EAAI,EAAGA,EAAIqM,EAAQrM,IAAK,CAC/B,IAAIqkD,EAAUD,EAAepkD,GAC7B,GAAIL,KAAK2kD,OAAOD,GAEd,OADA1kD,KAAKyvB,GAAKi1B,EAAQj1B,GACXzvB,KAGXu9B,EAAQ9O,iBAAiBzhB,KAAKhN,MAC9BA,KAAKyvB,GAAK8N,EAAQ5O,kBAGpB,mBACE,IAAI8S,EAAWzhC,KAAKyhC,SAChBC,EAAiB1hC,KAAK0hC,eACtBkjB,EAAoBljB,EAAeh1B,OACvC,IAAKk4C,EACH,OAAKnjB,EACEA,EAAS2iB,eADM,EAAAhe,WAAWI,KAGnC,GAAI/E,EAAU,CACZ,IAAIojB,EAAc,IAAIj9C,MAAkB,EAAIg9C,GAC5CC,EAAY,GAAKpjB,EAAS2iB,eAC1B,IAAK,IAAI/jD,EAAI,EAAGA,EAAIukD,IAAqBvkD,EACvCwkD,EAAYxkD,EAAI,GAAKqhC,EAAerhC,GAAG+jD,eAEzC,OAAO,EAAAjU,WAAW0U,GAEpB,OAAO,EAAA1U,WAAW+T,EAAmBxiB,IAGvC,oBACE,OAAO1hC,KAAK+O,WAAWq1C,eAGzB,iBAAiB7mB,GACf,IAAIgH,EAASvkC,KAAKqkD,qBAGlB,OAFK9f,EACAz5B,OAAOy5B,EAAOhH,SAAWA,GADjBv9B,KAAKqkD,qBAAuB9f,EAAS,IAAI,EAAAugB,eAAe9kD,KAAMu9B,GAEpEgH,EAIT,iBAAiB9E,GACf,IAAI6kB,EAAiBtkD,KAAKskD,eAC1B,OAA0B,OAAnBA,GAA2BA,EAAe53C,OAAS+yB,EACtD6kB,EAAe7kB,GACfslB,EAAwBtlB,GAI9B,eAAe8E,GACb,OAAOvkC,KAAK2kD,OAAOpgB,GAIrB,OAAOjjC,GAIL,IAAI0jD,EAAehlD,KAAKyhC,SACpBwjB,EAAiB3jD,EAAMmgC,SAC3B,GAAqB,OAAjBujB,GACF,GAAuB,OAAnBC,IAA4BD,EAAahB,eAAeiB,GAAiB,OAAO,OAC/E,GAAIA,EACT,OAAO,EAIT,GAAIjlD,KAAKwkD,SAAWljD,EAAMkjD,QAAS,OAAO,EAG1C,IAAIU,EAAqBllD,KAAK0hC,eAC1ByjB,EAAuB7jD,EAAMogC,eAC7B0jB,EAAgBF,EAAmBx4C,OACvC,GAAI04C,GAAiBD,EAAqBz4C,OAAQ,OAAO,EACzD,IAAK,IAAIrM,EAAI,EAAGA,EAAI+kD,IAAiB/kD,EAAG,CACtC,IAAIglD,EAAoBH,EAAmB7kD,GACvCilD,EAAsBH,EAAqB9kD,GAC/C,IAAKglD,EAAkBrB,eAAesB,GAAsB,OAAO,EAIrE,IAAIC,EAAiBvlD,KAAK+O,WACtBy2C,EAAmBlkD,EAAMyN,WAC7B,OAAOw2C,GAAkBC,GAAoBD,EAAevB,eAAewB,GAI7E,WACE,IAAI14C,EAAK,IAAIlF,MACbkF,EAAGE,KAAK,KACR,IAAIyyB,EAAQ,EACRgC,EAAWzhC,KAAKyhC,SAChBA,IACF30B,EAAGE,KAAK,UACRlC,QAAQ22B,EAASwhB,oBACjBn2C,EAAGE,KAAKy0B,EAASx1B,YACjBwzB,EAAQ,GAEV,IAAI3wB,EAAa9O,KAAK0hC,eAClB0jB,EAAgBt2C,EAAWpC,OAC/B,GAAI04C,EAAe,CACjB,IAAI3xC,EAAQzT,KAAKskD,eACb5X,EAAWj5B,EAAQA,EAAM/G,OAAS,EAClC+4C,EAAgBzlD,KAAKukD,mBACrBmB,EAAY1lD,KAAKwkD,QAAUY,EAAgB,GAAK,EACpD,IAAK,IAAI/kD,EAAI,EAAGA,EAAI+kD,IAAiB/kD,IAAKo/B,EACpCA,GAAO3yB,EAAGE,KAAK,MACf3M,GAAKqlD,GAAW54C,EAAGE,KAAK,OACxB3M,EAAIqsC,EAAU5/B,EAAGE,KAAgByG,EAAOpT,IACvCyM,EAAGE,KAAK+3C,EAAwB1kD,IACjCA,GAAKolD,GAAiBplD,GAAKqlD,EAAW54C,EAAGE,KAAK,OAC7CF,EAAGE,KAAK,MACbF,EAAGE,KAAK8B,EAAWzO,GAAG4L,YAK1B,OAFAa,EAAGE,KAAK,SACRF,EAAGE,KAAKhN,KAAK+O,WAAW9C,YACjBa,EAAGG,KAAK,MAOnB,IAAI04C,EAAwC,GAG5C,SAAgBZ,EAAwBtlB,GACtC,IAAK,IAAIp/B,EAAIslD,EAA4Bj5C,OAAQrM,GAAKo/B,IAASp/B,EAC7DslD,EAA4B34C,KAAK,OAAS3M,EAAE4L,YAE9C,OAAO05C,EAA4BlmB,EAAQ,GAJ7C,6B,cCtrBA,IAAImmB,EAGJA,EAAI,WACH,OAAO5lD,KADJ,GAIJ,IAEC4lD,EAAIA,GAAK,IAAIz1B,SAAS,cAAb,GACR,MAAO01B,GAEc,iBAAXC,SAAqBF,EAAIE,QAOrCnmD,EAAOD,QAAUkmD,G,8ECNjB,aAKA,OA0BA,OAIA,OAkCA,OAQA,OAKA,OAKA,OAKA,QAKA,IAAYG,GAAZ,SAAYA,GAEV,uBAEA,yBAJF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAQtB,MAAaz2B,UAAiB,EAAAlK,kBAW5B,YAEEmY,GAEAlf,MAAMkf,EAAQnwB,aAThB,KAAA44C,sBAA2C,KAE3C,KAAAC,yBAA+C,KA6qFvC,KAAAC,oBAA+B,GArqFrClmD,KAAKu9B,QAAUA,EAMjB,YAEErvB,EAEAi4C,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,OAAQp4C,EAAKE,MACX,KAAK,EAAAP,SAASgB,UACZ,OAAO7O,KAAKumD,iBACKr4C,EACfi4C,EACAC,EACAC,GAGJ,KAAK,EAAAx4C,SAASqB,aACZ,OAAOlP,KAAKwmD,oBACQt4C,EAClBi4C,EACAC,EACAC,GAGJ,QAASv7C,QAAO,GAElB,OAAO,KAID,iBAENoD,EAEAi4C,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,IAAI3pC,EAAWzO,EAAKtN,KAChBsb,EAAoBhO,EAAKQ,cACzB+3C,GAAgB9pC,EAASpO,KAG7B,GAAIk4C,EAAc,CAChB,IAAIC,EAAa/pC,EAASrO,WAAW9B,KACrC,GAAiB,OAAb45C,GAAqBA,EAAS94C,IAAIo5C,GAAa,CACjD,IAAIj3C,EAAO3E,OAAOs7C,EAASllD,IAAIwlD,IAS/B,GAR0B,OAAtBxqC,GAA8BA,EAAkBxP,OAAS,GACvD25C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeu7C,sBACfz4C,EAAKxC,MAAO+D,EAAKxD,YAInBiC,EAAKS,WAAY,CACnB,GAAIc,EAAKopB,GAAG,KAAsB,OAAOppB,EAAKm3C,aAC1CP,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAey7C,gCACf34C,EAAKxC,MAAO+D,EAAKxD,YAIvB,OAAOwD,GAKX,IAAI4C,EAAUrS,KAAKm1B,gBAAgBxY,EAAUwpC,EAAYE,GACzD,IAAKh0C,EAAS,OAAO,KAGrB,IAAImrB,EAAanrB,EAAQmrB,WACzB,GAAIA,EACFnrB,EAAUmrB,MAEL,CAGL,GAAInrB,EAAQjE,MAAQ,EAAAwd,YAAYjL,KAiB9B,OAhB0B,OAAtBzE,GAA8BA,EAAkBxP,OAAS,GACvD25C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeu7C,sBACfz4C,EAAKxC,MAAO2G,EAAQ6c,cAItBhhB,EAAKS,YACH03C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAey7C,gCACf34C,EAAKxC,MAAO2G,EAAQzR,KAAO,QAI1B,EAAA2vB,KAAKntB,IAId,GAAIiP,EAAQjE,MAAQ,EAAAwd,YAAYyI,gBAAiB,CAC/C,IAAI+I,EAAWp9B,KAAK8mD,8BACFz0C,EAChB6J,EACAiqC,EACA,EAAAY,QAAqBX,GACrBl4C,EACAm4C,GAEF,OAAKjpB,EACElvB,EAAKS,WAAayuB,EAAS3tB,KAAKm3C,aAAexpB,EAAS3tB,KADzC,MAM1B,GAAI4C,EAAQjE,MAAQ,EAAAwd,YAAYgT,eAAgB,CAC9C,IAAIooB,EAAiC30C,EAGrC,GAAIA,EAAQwmB,GAAG,EAAAx2B,YAAY87B,UAAW,CACV,OAAtBjiB,GAA8BA,EAAkBxP,OAAS,GACvD25C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeu7C,sBACfz4C,EAAKxC,MAAO2G,EAAQ6c,cAI1B,IAAIzf,EAAOu3C,EAAev3C,KAC1B,GAAIvB,EAAKS,WAAY,CACnB,GAAKc,EAAKopB,GAAG,KAQX,OAAOppB,EAAKm3C,aAPRP,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAey7C,gCACflqC,EAASjR,MAAOiR,EAASrO,WAAW9B,MAO5C,OAAOiD,EAIT,GAAIg3C,EAAc,CAChB,IAAIj6C,EAAOmQ,EAASrO,WAAW9B,KAC/B,GAAIA,GAAQ,EAAAxJ,YAAY+B,OAAQ,OAAO/E,KAAKinD,yBAAyB/4C,EAAMi4C,EAAYC,EAAUC,GACjG,GAAI75C,GAAQ,EAAAxJ,YAAYgC,QAAS,OAAOhF,KAAKknD,0BAA0Bh5C,EAAMi4C,EAAYC,EAAUC,GACnG,GAAI75C,GAAQ,EAAAxJ,YAAYiC,QAAS,OAAOjF,KAAKmnD,0BAA0Bj5C,EAAMi4C,EAAYC,EAAUC,GACnG,GAAI75C,GAAQ,EAAAxJ,YAAYkC,SAAU,OAAOlF,KAAKonD,6BAA6Bl5C,EAAMi4C,EAAYC,EAAUC,GAIzG,IAAIrqC,EAAqBgrC,EAAehrC,mBACpCtN,EAA+B,KACnC,GAAIsN,GASF,GARAtN,EAAgB1O,KAAKqnD,qBACnBrrC,EACAE,EACAiqC,EACAC,EAAW,EAAAW,QAAQX,GACnBl4C,EACAm4C,IAEG33C,EAAe,OAAO,UACI,OAAtBwN,GAA8BA,EAAkBxP,OAAS,GAClE1M,KAAKymB,MACH,EAAArb,eAAeu7C,sBACfz4C,EAAKxC,MAAOiR,EAASrO,WAAW9B,MAGpC,IAAIiD,EAAOzP,KAAKsnD,YACdN,EAAeO,SACfl1C,EACA+zC,EACAC,GAEF,IAAK52C,EAAM,OAAO,KAClB,GAAIvB,EAAKS,WAAY,CACnB,GAAKc,EAAKopB,GAAG,KAQX,OAAOppB,EAAKm3C,aAPRP,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAey7C,gCACflqC,EAASjR,MAAOiR,EAASrO,WAAW9B,MAO5C,OAAOiD,EAQT,OANI42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeo8C,mBACf7qC,EAASjR,MAAOiR,EAASrO,WAAW9B,MAGjC,KAID,oBAEN0B,EAEAi4C,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,IAAIt3C,EAAmBd,EAAKc,iBACxByyB,EAAwB,KAC5B,GAAIzyB,KACFyyB,EAAWzhC,KAAKsnD,YACdt4C,EACAm3C,EACAC,EACAC,IAEa,OAAO,KAExB,IAAI/pC,EAAiBpO,EAAKY,WACtBs2C,EAAgB9oC,EAAe5P,OAC/Bg1B,EAAiB,IAAI95B,MAAYw9C,GACjCd,EAAiB,IAAI18C,MAAcw9C,GACnCb,EAAqB,EACrBC,GAAU,EACd,IAAK,IAAInkD,EAAI,EAAGA,EAAI+kD,IAAiB/kD,EAAG,CACtC,IAAIonD,EAAgBnrC,EAAejc,GACnC,OAAQonD,EAAc53C,eACpB,KAAK,EAAA0M,cAAciE,QACjB+jC,EAAqBlkD,EAAI,EACzB,MAEF,KAAK,EAAAkc,cAAcmrC,KACjB58C,OAAOzK,GAAK+kD,GACZZ,GAAU,EAId,IAAImD,EAAoBF,EAAch4C,KACtC,GAAI,EAAAm4C,cAAcD,GAOhB,OANItB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAey8C,cACfF,EAAkBj8C,OAGf,KAET,IAAIi2B,EAAgB3hC,KAAKsnD,YACvBK,EACAxB,EACAC,EACAC,GAEF,IAAK1kB,EAAe,OAAO,KAC3BD,EAAerhC,GAAKshC,EACpB2iB,EAAejkD,GAAKonD,EAAc7mD,KAAK4L,KAEzC,IACIuC,EADA+4C,EAAiB55C,EAAKa,WAE1B,GAAI,EAAA64C,cAAcE,GACZzB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAey8C,cACfC,EAAep8C,OAGnBqD,EAAa,EAAAwhB,KAAKG,UAQlB,KANA3hB,EAAa/O,KAAKsnD,YAChBQ,EACA3B,EACAC,EACAC,IAEe,OAAO,KAE1B,IAAI7sC,EAAY,IAAI,EAAA8kB,UAAUt+B,KAAKu9B,QAASmE,EAAgB3yB,EAAY0yB,GAIxE,OAHAjoB,EAAU8qC,eAAiBA,EAC3B9qC,EAAU+qC,mBAAqBA,EAC/B/qC,EAAUgrC,QAAUA,EACbt2C,EAAKS,WAAa6K,EAAU/J,KAAKm3C,aAAeptC,EAAU/J,KAG3D,yBAENvB,EAEAi4C,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,IAAIpqC,EAAoBhO,EAAKQ,cAC7B,IAAKwN,GAAiD,GAA5BA,EAAkBxP,OAAa,CACvD,GAAI25C,GAAcN,EAAWO,OAAQ,CACnC,IAAItoC,EAAmB,EACnB9B,IAAmB8B,EAAmB9B,EAAkBxP,QAC5D1M,KAAKymB,MACH,EAAArb,eAAe28C,oCACf75C,EAAKxC,MAAO,IAAKsS,EAAiB/R,YAGtC,OAAO,KAET,IAAI+7C,EAAehoD,KAAKsnD,YAAYprC,EAAkB,GAAIiqC,EAAYC,EAAUC,GAChF,IAAK2B,EAAc,OAAO,KAC1B,OAAQA,EAAa55C,MACnB,KAAK,EACL,KAAK,EACL,KAAK,EAAc,OAAO,EAAAmiB,KAAKntB,IAC/B,KAAK,EAAgB,IAAKpD,KAAKu9B,QAAQvP,QAAQgD,SAAU,OAAO,EAAAT,KAAKntB,IACrE,KAAK,EAAc,OAAO,EAAAmtB,KAAKltB,IAC/B,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAO,EAAAktB,KAAK9sB,IAChC,KAAK,EAAgB,IAAKzD,KAAKu9B,QAAQvP,QAAQgD,SAAU,OAAO,EAAAT,KAAK9sB,IACrE,KAAK,EAAc,OAAO,EAAA8sB,KAAK7sB,IAC/B,KAAK,GAAc,OAAO,EAAA6sB,KAAK1sB,IAC/B,KAAK,GAAc,OAAO,EAAA0sB,KAAKzsB,IAC/B,KAAK,GAAe,OAAO,EAAAysB,KAAKxsB,KAChC,KAAK,GAAe,OAAO,EAAAwsB,KAAKG,KAChC,QAAS5lB,QAAO,GAElB,OAAO,KAGD,0BAENoD,EAEAi4C,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,IAAIpqC,EAAoBhO,EAAKQ,cAC7B,IAAKwN,GAAiD,GAA5BA,EAAkBxP,OAAa,CACvD,GAAI25C,GAAcN,EAAWO,OAAQ,CACnC,IAAItoC,EAAmB,EACnB9B,IAAmB8B,EAAmB9B,EAAkBxP,QAC5D1M,KAAKymB,MACH,EAAArb,eAAe28C,oCACf75C,EAAKxC,MAAO,IAAKsS,EAAiB/R,YAGtC,OAAO,KAET,IAAI+7C,EAAehoD,KAAKsnD,YAAYprC,EAAkB,GAAIiqC,EAAYC,EAAUC,GAChF,IAAK2B,EAAc,OAAO,KAC1B,IAAItvB,EAAiBsvB,EAAatvB,eAClC,IAAKA,EAOH,OANI2tB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe68C,qCACf/rC,EAAkB,GAAGxQ,MAAOs8C,EAAa/7C,YAGtC,KAET,IAAIw4B,EAAW/L,EAAesK,eAAe,EAAArX,aAAaK,aAC1D,OAAIyY,EACEA,EAAS5L,GAAG,EAAAx2B,YAAY0f,SAC1BjX,OAAmD,GAA5C25B,EAASjrB,UAAUkoB,eAAeh1B,QAClC+3B,EAASjrB,UAAUkoB,eAAe,KAEzC52B,OAAmD,GAA5C25B,EAASjrB,UAAUkoB,eAAeh1B,QAClC+3B,EAASjrB,UAAUkoB,eAAe,KAGzC2kB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe68C,qCACf/rC,EAAkB,GAAGxQ,MAAOs8C,EAAa/7C,YAGtC,MAGD,0BAENiC,EAEAi4C,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,IAAIpqC,EAAoBhO,EAAKQ,cAC7B,IAAKwN,GAAiD,GAA5BA,EAAkBxP,OAAa,CACvD,IAAIsR,EAAmB,EAQvB,OAPI9B,IAAmB8B,EAAmB9B,EAAkBxP,QACxD25C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe28C,oCACf75C,EAAKxC,MAAO,IAAKsS,EAAiB/R,YAG/B,KAET,IAAI+7C,EAAehoD,KAAKsnD,YAAYprC,EAAkB,GAAIiqC,EAAYC,EAAUC,GAChF,IAAK2B,EAAc,OAAO,KAC1B,IAAItvB,EAAiBsvB,EAAatvB,eAClC,IAAKA,EAOH,OANI2tB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe68C,qCACf/rC,EAAkB,GAAGxQ,MAAOs8C,EAAa/7C,YAGtC,KAGT,IAAIw4B,EAAW/L,EAAesK,eAAe,EAAArX,aAAaK,aAC1D,OAAIyY,EAAiBA,EAASjrB,UAAUzK,YACpCs3C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe68C,qCACf/rC,EAAkB,GAAGxQ,MAAOs8C,EAAa/7C,YAGtC,MAGD,6BAENiC,EAEAi4C,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,IAAIpqC,EAAoBhO,EAAKQ,cAC7B,IAAKwN,GAAiD,GAA5BA,EAAkBxP,OAAa,CACvD,GAAI25C,GAAcN,EAAWO,OAAQ,CACnC,IAAItoC,EAAmB,EACnB9B,IAAmB8B,EAAmB9B,EAAkBxP,QAC5D1M,KAAKymB,MACH,EAAArb,eAAe28C,oCACf75C,EAAKxC,MAAO,IAAKsS,EAAiB/R,YAGtC,OAAO,KAET,IAAI+7C,EAAehoD,KAAKsnD,YAAYprC,EAAkB,GAAIiqC,EAAYC,EAAUC,GAChF,IAAK2B,EAAc,OAAO,KAC1B,IAAI/E,EAAqB+E,EAAa/E,mBACtC,OAAKA,EASEA,EAAmBl0C,YARpBs3C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe88C,8BACfhsC,EAAkB,GAAGxQ,MAAOs8C,EAAa/7C,YAGtC,MAMX,gBAEEiC,EAEAi4C,EAEAE,EAAyBN,EAAWO,QAEpC,IAAIj0C,EAAU8zC,EAAWrnB,OAAO5wB,EAAKI,WAAW9B,MAChD,IAAK6F,EAOH,OANIg0C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeo8C,mBACft5C,EAAKxC,MAAOwC,EAAKI,WAAW9B,MAGzB,KAIT,IAFA,IAAI27C,EAAOj6C,EACPK,EAAOL,EAAKK,KACTA,GAAM,CACX,KAAM8D,EAAUA,EAAQshB,aAAaplB,EAAKD,WAAW9B,OAOnD,OANI65C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeg9C,oCACf75C,EAAK7C,MAAO6C,EAAKD,WAAW9B,KAAM27C,EAAK75C,WAAW9B,MAG/C,KAET27C,EAAO55C,EACPA,EAAOA,EAAKA,KAEd,OAAO8D,EAIT,qBAEEyD,EAEAoG,EAEAiqC,EAEAC,EAA6B,EAAAW,UAE7BsB,EAAqC,KAErChC,EAAyBN,EAAWO,QAEpC,IAAIgC,EAAoB,EACpBC,EAAoB,EACxB,IAAK,IAAIloD,EAAI,EAAG8b,EAAIrG,EAAepJ,OAAQrM,EAAI8b,IAAK9b,EAC7CyV,EAAezV,GAAGiP,eAAeg5C,IACpCC,EAEJ,IAAIC,EAAgBtsC,EAAoBA,EAAkBxP,OAAS,EACnE,GAAI87C,EAAgBF,GAAqBE,EAAgBD,EAcvD,OAbIlC,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe28C,oCACfS,EACI,EAAAvqC,MAAMhR,KACJiP,EAAmB,GAAGxQ,MACtBwQ,EAAmBssC,EAAgB,GAAG98C,OAExC28C,EAAuB38C,OAC1B88C,EAAgBF,EAAoBA,EAAoBC,GAAmBt8C,WAC5Eu8C,EAAcv8C,YAGX,KAET,IAAIyC,EAAgB,IAAI9G,MAAY2gD,GACpC,IAAK,IAAIloD,EAAI,EAAGA,EAAIkoD,IAAqBloD,EAAG,CAC1C,IAAIoP,EAAOpP,EAAImoD,EACXxoD,KAAKsnD,YACHprC,EAAmB7b,GACnB8lD,EACAC,EACAC,GAEFrmD,KAAKsnD,YACHx8C,OAAOgL,EAAezV,GAAGiP,aACzB62C,EACAC,EACAC,GAEN,IAAK52C,EAAM,OAAO,KAElB22C,EAAS14C,IAAIoI,EAAezV,GAAGO,KAAK4L,KAAMiD,GAC1Cf,EAAcrO,GAAKoP,EAErB,OAAOf,EAIT,eACER,EACAjM,EACAwmD,EACApC,EAAyBN,EAAWO,QAEpC,IAAI53C,EAAgBR,EAAKQ,cAGzB,GAAIA,EACF,OAAKzM,EAAU42B,GAAG,EAAAx2B,YAAYyuB,SASvB9wB,KAAK0oD,iCACVzmD,EACAyM,EACA+5C,EAAQE,eACR,EAAA5B,QAAQ0B,EAAQxoB,yBAChB/xB,EACAm4C,IAdIA,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeu7C,sBACfz4C,EAAK+C,WAAWvF,MAAOzJ,EAAUitB,cAG9B,MAaX,GAAIjtB,EAAU42B,GAAG,EAAAx2B,YAAYyuB,SAAU,CACrC,IAAImP,EAA0B,EAAA8mB,QAAqB0B,EAAQxoB,yBAGvDjkB,EAAqBlR,OAAO7I,EAAU+Z,oBACtC4sC,EAAoB5sC,EAAmBtP,OACvCm8C,EAAqB,IAAI/gD,IAC7B,IAAK,IAAIzH,EAAI,EAAGA,EAAIuoD,IAAqBvoD,EAAG,CAC1C,IAAIO,EAAOob,EAAmB3b,GAAGO,KAAK4L,KACtCyzB,EAAwBvyB,IAAI9M,EAAM,EAAA2vB,KAAK4yB,MACvC0F,EAAmBl4B,IAAI/vB,GAGzB,IAAI0b,EAAiBra,EAAUoa,iBAAiBvN,WAC5Cs2C,EAAgB9oC,EAAe5P,OAC/Bo8C,EAAgB56C,EAAK+B,UACrBiO,EAAe4qC,EAAcp8C,OAGjC,IAAK,IAAIrM,EAAI,EAAGA,EAAI+kD,IAAiB/kD,EAAG,CACtC,IAAI0oD,EAAqB1oD,EAAI6d,EAAe4qC,EAAczoD,GAAKic,EAAejc,GAAGqP,YACjF,IAAKq5C,EAOH,OANI1C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe2wB,+BACf7tB,EAAKxC,MAAO05C,EAAcn5C,WAAYiS,EAAajS,YAGhD,KAET,IAAIs7C,EAAWjrC,EAAejc,GAAGoP,KACjC,GAAI83C,EAASnrC,oBAAoBJ,GAAqB,CACpD,IAAIvM,EAAOzP,KAAKgpD,kBAAkBD,EAAoBN,EAAS,EAAAl4B,KAAK4yB,KAAM4C,EAAWkD,SACjFx5C,GAAMzP,KAAKkpD,8BAA8B3B,EAAU93C,EAAMg5C,EAASxoB,EAAyB4oB,IAKnG,IAAIM,EAAwB,IAAIvhD,MAAYghD,GAC5C,IAAK,IAAIvoD,EAAI,EAAGA,EAAIuoD,IAAqBvoD,EAAG,CAC1C,IAAIO,EAAOob,EAAmB3b,GAAGO,KAAK4L,KACtC,GAAIyzB,EAAwB3yB,IAAI1M,GAAO,CACrC,IAAIwoD,EAAet+C,OAAOm1B,EAAwB/+B,IAAIN,IACtD,GAAIwoD,GAAgB,EAAA74B,KAAK4yB,KAAM,CAC7BgG,EAAsB9oD,GAAK+oD,EAC3B,UAWJ,OANI/C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAei+C,uBACfn7C,EAAK+C,WAAWvF,MAAM49C,OAGnB,KAET,OAAOtpD,KAAK23B,gBACV11B,EACAknD,EACA,EAAApC,QAAqB0B,EAAQxoB,yBAC7BomB,GAKJ,OAAOrmD,KAAK23B,gBAAgB11B,EAAW,KAAM,EAAA8kD,UAAwBV,GAI/D,8BAENn4C,EAEAuB,EAEAg5C,EAEArC,EAEAyC,GAEA,GAAI36C,EAAKE,MAAQ,EAAAP,SAASgB,UAAW,CACnC,IAAIoN,EAA+B/N,EAC/BgO,EAAoBD,EAAcvN,cACtC,GAA0B,OAAtBwN,GAA8BA,EAAkBxP,OAAS,EAAG,CAC9D,IAAIgsB,EAAiBjpB,EAAKipB,eAC1B,GAAIA,EAAgB,CAClB,IAAI2C,EAAiBr7B,KAAKm1B,gBAAgBlZ,EAAcrb,KAAM6nD,EAAQE,gBACtE,IAAKttB,GAAkBA,EAAejtB,MAAQ,EAAAwd,YAAYyI,gBAAiB,OAC3E,GAAIqE,EAAez2B,WAA6Bo5B,EAAgB,CAC9D,IAAI3sB,EAAgBgqB,EAAehqB,cACnC,GAAsB,OAAlBA,GAA0BA,EAAchC,QAAUwP,EAAkBxP,OAAQ,CAC9E,IAAK,IAAIrM,EAAI,EAAG8b,EAAIzN,EAAchC,OAAQrM,EAAI8b,IAAK9b,EACjDL,KAAKkpD,8BAA8BhtC,EAAkB7b,GAAIqO,EAAcrO,GAAIooD,EAASrC,EAAUyC,GAEhG,cAID,CACL,IAAIjoD,EAAOqb,EAAcrb,KAAK0N,WAAW9B,KACzC,GAAI45C,EAAS94C,IAAI1M,GAAO,CACtB,IAAI2oD,EAAcz+C,OAAOs7C,EAASllD,IAAIN,KAClC2oD,GAAe,EAAAh5B,KAAK4yB,MAAS0F,EAAmBv7C,IAAI1M,IAAS2oD,EAAYvF,eAAev0C,KAC1F22C,EAAS14C,IAAI9M,EAAM6O,UAIpB,GAAIvB,EAAKE,MAAQ,EAAAP,SAASqB,aAAc,CAC7C,IAAImN,EAAqCnO,EACrCoO,EAAiBD,EAAiBvN,WACtC,GAAuB,OAAnBwN,GAA2BA,EAAe5P,OAAS,EAAG,CACxD,IAAIu2C,EAAqBxzC,EAAKwzC,mBAC9B,GAAIA,EAAoB,CACtB,IAAIvhB,EAAiBuhB,EAAmBvhB,eACpCD,EAAWwhB,EAAmBxhB,SAClC,GAAIC,EAAeh1B,QAAU4P,EAAe5P,SAAW+0B,IAAaplB,EAAiBrN,iBAAkB,CACrG,IAAK,IAAI3O,EAAI,EAAG8b,EAAIulB,EAAeh1B,OAAQrM,EAAI8b,IAAK9b,EAClDL,KAAKkpD,8BAA8B5sC,EAAejc,GAAGoP,KAAMiyB,EAAerhC,GAAIooD,EAASrC,EAAUyC,GAInG,OAFA7oD,KAAKkpD,8BAA8B7sC,EAAiBtN,WAAYk0C,EAAmBl0C,WAAY05C,EAASrC,EAAUyC,QAC9GpnB,GAAUzhC,KAAKkpD,8BAA8B7sC,EAAiBrN,iBAAmByyB,EAAUgnB,EAASrC,EAAUyC,QAS5H,iBAAiBx2C,GACf,IAAIjE,EAAOiE,EAAQjE,KACnB,GAAIA,GAAQ,EAAAwd,YAAY7O,SACjB/c,KAAKwpD,yBAAiCn3C,EAAS0zC,EAAWkD,SAAU,OAAO,KAElF,GAAI,EAAAQ,eAAer7C,GAAO,CACxB,IAAIqB,EAAsB4C,EAAS5C,KACnC3E,OAAO2E,GAAQ,EAAA8gB,KAAKG,MACpB,IAAIgI,EAAiBjpB,EAAKipB,eAC1B,GAAIA,EAAgB,CAClB,IAAIE,EAAcF,EAAeE,YAC7BA,IAAanpB,EAAOmpB,GAE1B,OAAOnpB,EAET,OAAIrB,GAAQ,EAAAwd,YAAY0W,gBACEjwB,EAAS5C,KAE5B,KAIT,iBAAiBA,GACf,GAAIA,EAAKopB,GAAG,KAAsB,CAChC,IAAIH,EAAiBjpB,EAAKipB,eAC1B,OAAIA,GACqB5tB,OAAO2E,EAAKwzC,oBACXyG,iBAAiB1pD,KAAKu9B,SAC3C,GAAI9tB,GAAQ,EAAA8gB,KAAKG,KAAM,CAC5B,IAAInC,EAAiBvuB,KAAKu9B,QAAQhP,eAElC,OADAzjB,OAAOyjB,EAAejhB,IAAImC,IACnB3E,OAAOyjB,EAAertB,IAAIuO,IAEnC,OAAO,KAMT,iBAEEvB,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,KAAOp4C,EAAKE,MAAQ,EAAAP,SAASiG,eAC3B5F,EAAiCA,EAAM+C,WAEzC,OAAQ/C,EAAKE,MACX,KAAK,EAAAP,SAASuD,UACZ,OAAOpR,KAAK4pD,0BACW17C,EACrBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS4D,OACZ,OAAOzR,KAAK6pD,uBACQ37C,EAClBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS+D,KACZ,OAAO5R,KAAK8pD,qBACM57C,EAChBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASqE,MACZ,OAAOlS,KAAK+pD,sBACO77C,EACjBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS0E,cACZ,OAAOvS,KAAKgqD,8BACe97C,EACzBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASiF,SACZ,OAAO9S,KAAKiqD,yBACU/7C,EACpBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS4C,WACd,KAAK,EAAA5C,SAAS6E,MACd,KAAK,EAAA7E,SAAS2F,KACd,KAAK,EAAA3F,SAASqH,KACZ,OAAOlV,KAAKkqD,2BACYh8C,EACtBu6C,EAASA,EAAQE,eAAgBtC,GAGrC,KAAK,EAAAx4C,SAASmH,KACZ,OAAOhV,KAAKmqD,qBACMj8C,EAChBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASiH,MACZ,OAAO9U,KAAKoqD,sBACOl8C,EACjBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASoF,WACZ,OAAOjT,KAAKqqD,2BACYn8C,EACtBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS+C,QACZ,OAAO5Q,KAAKsqD,wBACSp8C,EACnBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASyF,IACZ,OAAOtT,KAAKuqD,oBACKr8C,EACfu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASmG,eACZ,OAAOhU,KAAKwqD,+BACgBt8C,EAC1Bu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS6G,QACZ,OAAO1U,KAAKyqD,wBACSv8C,EACnBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASwH,aACZ,OAAOrV,KAAK0qD,6BACcx8C,EACxBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS0H,YACZ,OAAOvV,KAAK2qD,4BACaz8C,EACvBu6C,EAASkB,EAAStD,GAUxB,OANIA,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeivB,gBACfnsB,EAAKxC,OAGF,KAIT,kBAEEwC,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,KAAOp4C,EAAKE,MAAQ,EAAAP,SAASiG,eAC3B5F,EAAiCA,EAAM+C,WAEzC,OAAQ/C,EAAKE,MACX,KAAK,EAAAP,SAASuD,UACZ,OAAOpR,KAAK4qD,2BACW18C,EACrBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS4D,OACZ,OAAOzR,KAAK6qD,wBACQ38C,EAClBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS+D,KACZ,OAAO5R,KAAK8qD,sBACM58C,EAChBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASqE,MACZ,OAAOlS,KAAK+qD,uBACO78C,EACjBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS0E,cACZ,OAAOvS,KAAKgrD,+BACe98C,EACzBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASiF,SACZ,OAAO9S,KAAKirD,0BACU/8C,EACpBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS4C,WACd,KAAK,EAAA5C,SAAS6E,MACd,KAAK,EAAA7E,SAAS2F,KACd,KAAK,EAAA3F,SAASqH,KACZ,OAAOlV,KAAKkrD,4BACYh9C,EACtBu6C,EAASkB,EAASlB,EAAQE,eAAgBtC,GAG9C,KAAK,EAAAx4C,SAASmH,KACZ,OAAOhV,KAAKmrD,sBACMj9C,EAChBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASiH,MACZ,OAAO9U,KAAKorD,uBACOl9C,EACjBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASoF,WACZ,OAAOjT,KAAKqrD,4BACYn9C,EACtBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS+C,QACZ,OAAO5Q,KAAKsrD,yBACSp9C,EACnBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASyF,IACZ,OAAOtT,KAAKurD,qBACKr9C,EACfu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASmG,eACZ,OAAOhU,KAAKwrD,gCACgBt9C,EAC1Bu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS6G,QACZ,OAAO1U,KAAKyrD,yBACSv9C,EACnBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAASwH,aACZ,OAAOrV,KAAK0rD,8BACcx9C,EACxBu6C,EAASkB,EAAStD,GAGtB,KAAK,EAAAx4C,SAAS0H,YACZ,OAAOvV,KAAK2rD,6BACaz9C,EACvBu6C,EAASkB,EAAStD,GAUxB,OANIA,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeivB,gBACfnsB,EAAKxC,OAGF,KAIT,2BAEEwC,EAEAu6C,EAEAtC,EAAsBsC,EAAQE,eAE9BtC,EAAyBN,EAAWO,QAEpC,OAAQp4C,EAAKE,MACX,KAAK,EAAAP,SAASqH,KACd,KAAK,EAAArH,SAAS6E,MACd,KAAK,EAAA7E,SAAS2F,KAAM,CAClB,IAAI/D,EAAOzP,KAAKkrD,4BAA4Bh9C,EAAMu6C,EAAS,EAAAl4B,KAAK4yB,KAAMgD,EAAYE,GAClF,OAAO52C,EAAOzP,KAAK4rD,iBAAiBn8C,GAAQ,MAGhD,IACI4C,EADAzR,EAAOsN,EAAK1B,KAEhB,OAAI6F,EAAUo2C,EAAQ3pB,OAAOl+B,MAKzByR,EAAU8zC,EAAWrnB,OAAOl+B,MAK5ByR,EAAUrS,KAAKu9B,QAAQ1J,aAAajzB,KATtCZ,KAAKgmD,sBAAwB,KAC7BhmD,KAAKimD,yBAA2B,KACzB5zC,IAYLg0C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeo8C,mBACft5C,EAAKxC,MAAO9K,GAGT,MAID,4BAENsN,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBgD,EAAsBsC,EAAQE,eAE9BtC,EAAyBN,EAAWO,QAEpC,OAAQp4C,EAAKE,MACX,KAAK,EAAAP,SAASqH,KACd,KAAK,EAAArH,SAAS6E,MAAO,OAAO,EAAA6d,KAAK3sB,KACjC,KAAK,EAAAiK,SAAS2F,KAAM,CAClB,IAAIklB,EAAiBixB,EAAQjxB,eAC7B,OAAOixB,EAAQ9wB,GAAG,MAA2C,OAAnBH,EACtCA,EAAejpB,KAAKm3C,aACpB5mD,KAAKu9B,QAAQvP,QAAQyC,WAG7B,IAAIpe,EAAUrS,KAAKkqD,2BAA2Bh8C,EAAMu6C,EAAStC,EAAYE,GACzE,IAAKh0C,EAAS,OAAO,KACrB,GAAIA,EAAQjE,MAAQ,EAAAwd,YAAY8L,mBAAoB,CAClD,IAAI0F,EAAWp9B,KAAK23B,gBAAmCtlB,EAAS,KAAM,EAAA00C,UAAwBV,GAC9F,IAAKjpB,EAAU,OAAO,KACtB/qB,EAAU+qB,EAEZ,IAAI3tB,EAAOzP,KAAK6rD,iBAAiBx5C,GASjC,OARK5C,GACC42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe0gD,2CACf59C,EAAKxC,OAIJ+D,EAID,yBAAyBqpB,EAAgButB,EAAyBN,EAAWO,QACnF,GAAIxtB,EAAOD,GAAG,EAAAx2B,YAAY87B,UAAW,OAAO,EAC5C,IAAI1uB,EACA83C,EAAWzuB,EAAOyuB,SAMtB,SAJE93C,EADE83C,EACKvnD,KAAKsnD,YAAYC,EAAUzuB,EAAO7I,OAAQ,KAAMo2B,GAEhDrmD,KAAKgpD,kBAAkBl+C,OAAOguB,EAAOizB,iBAAkBjzB,EAAO/G,KAAKqM,cAAc0D,KAAM,EAAAvR,KAAK4yB,KAAMkD,MAG3GvtB,EAAON,QAAQ/oB,IACR,GAID,+BAENvB,EAEAu6C,EAEAkB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAI0F,EAAa99C,EAAK+C,WAClBszB,EAASvkC,KAAKisD,iBAAiBD,EAAYvD,EAASkB,EAAStD,GACjE,IAAK9hB,EAAQ,OAAO,KACpB,IAAI2nB,EAAeh+C,EAAKlM,SAASwK,KAGjC,OAAQ+3B,EAAOn2B,MACb,KAAK,EAAAwd,YAAY7O,OAAQ,IAAK/c,KAAKwpD,yBAAiCjlB,EAAQ8hB,GAAa,OAAO,KAChG,KAAK,EAAAz6B,YAAY0T,UACjB,KAAK,EAAA1T,YAAY8T,MACjB,KAAK,EAAA9T,YAAY0M,MAAO,CACtB,IAAI6zB,EAA2C5nB,EAC3C90B,EAAO08C,EAAoB18C,KAC/B3E,OAAO2E,GAAQ,EAAA8gB,KAAKG,MACpB,IAAIgI,EAAiBjpB,EAAKipB,eAC1B,IAAKA,EAAgB,CACnB,IAAInK,EAAiBvuB,KAAKu9B,QAAQhP,eAClC,IAAIA,EAAejhB,IAAImC,GASrB,OANI42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeg9C,oCACfl6C,EAAKlM,SAAS0J,MAAOwgD,EAAcC,EAAoB18C,KAAKxD,YAGzD,KARPysB,EAAiB5tB,OAAOyjB,EAAertB,IAAIuO,IAW/C80B,EAAS7L,EACT,MAEF,KAAK,EAAA9M,YAAYqM,mBAAoB,CACnC,IAAIC,EAAuCqM,EACvC3B,EAAiB5iC,KAAK23B,gBACxB7sB,OAAOotB,EAAkBC,iBACzB,KACA,EAAA4uB,UACAV,GAEF,IAAKzjB,EAAgB,OAAO,KAC5B,IAAInzB,EAAOmzB,EAAeppB,UAAUzK,WAChC2pB,EAAiBjpB,EAAKipB,eAC1B,IAAKA,EAAgB,CACnB,IAAInK,EAAiBvuB,KAAKu9B,QAAQhP,eAClC,IAAIA,EAAejhB,IAAImC,GASrB,OANI42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeg9C,oCACfl6C,EAAKlM,SAAS0J,MAAOwgD,EAAcz8C,EAAKxD,YAGrC,KARPysB,EAAiB5tB,OAAOyjB,EAAertB,IAAIuO,IAW/C80B,EAAS7L,EACT,MAEF,KAAK,EAAA9M,YAAYyM,SAAU,CACzB,IAEI5oB,EADiB3E,OADYy5B,EACY3B,gBACnBppB,UAAUzK,WAChC2pB,EAAiBjpB,EAAKipB,eAC1B,IAAKA,EAAgB,CACnB,IAAInK,EAAiBvuB,KAAKu9B,QAAQhP,eAClC,IAAIA,EAAejhB,IAAImC,GASrB,OANI42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeg9C,oCACfl6C,EAAKlM,SAAS0J,MAAOwgD,EAAcz8C,EAAKxD,YAGrC,KARPysB,EAAiB5tB,OAAOyjB,EAAertB,IAAIuO,IAW/C80B,EAAS7L,EACT,MAEF,KAAK,EAAA9M,YAAYkX,eAAgB,CAC/B,IACI7S,EADiCsU,EACTtU,OAC5BnlB,OAAOmlB,EAAO7hB,MAAQ,EAAAwd,YAAY7Z,OAClC,IAAI8tB,EAAuB5P,EACvBzd,EAAoB1H,OAAO9K,KAAKimD,0BAChCmG,EAAavsB,EAAcmD,eAAe,EAAArX,aAAaK,aAC3D,IAAKogC,EAOH,OANI/F,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe68C,qCACfz1C,EAAkB9G,MAAOukB,EAAOf,cAG7B,KAET,IAAIngB,EAAaq9C,EAAW5yC,UAAUzK,WAClC2pB,EAAiB3pB,EAAW2pB,eAChC,IAAKA,EAAgB,CACnB,IAAInK,EAAiBvuB,KAAKu9B,QAAQhP,eAClC,IAAIA,EAAejhB,IAAIyB,GASrB,OANIs3C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeg9C,oCACfl6C,EAAKlM,SAAS0J,MAAOwgD,EAAcn9C,EAAW9C,YAG3C,KARPysB,EAAiB5tB,OAAOyjB,EAAertB,IAAI6N,IAW/Cw1B,EAAS7L,EACT,MAEF,KAAK,EAAA9M,YAAY8L,mBAAoB,CACnC,IAAI8F,EAAa+G,EAAO/G,WACxB,GAAIA,EAAY,CACd,IAAKA,EAAW3E,GAAG,EAAAx2B,YAAY87B,UAAW,CACxC,IAAIkuB,EAAersD,KAAKsnD,YAAY9pB,EAAW+pB,SAAU/pB,EAAWvN,OAAQ,KAAMo2B,GAC9EgG,GAAc7uB,EAAWhF,QAAQ6zB,GAEvC,IAAI3zB,EAAiB8E,EAAW/tB,KAAKipB,eACjCA,IAAgB6L,EAAS7L,EAAez2B,WAC5C,QAMN,OAAQsiC,EAAOn2B,MACb,KAAK,EAAAwd,YAAYyI,gBACjB,KAAK,EAAAzI,YAAY7Z,MACf,OAAG,CACD,IAAIiE,EAAUuuB,EAAOvuB,QACrB,GAAgB,OAAZA,GAAoBA,EAAQ1I,IAAI4+C,GAGlC,OAFAlsD,KAAKgmD,sBAAwBgG,EAC7BhsD,KAAKimD,yBAA2B,KACzBn7C,OAAOkL,EAAQ9U,IAAIgrD,IAG5B,GAAI3nB,EAAOn2B,MAAQ,EAAAwd,YAAYyI,gBAAiB,CAC9C,IACIe,EADiCmP,EACFnP,cACnC,IAAIA,EAGF,MAFAmP,EAASnP,MAKN,IAAImP,EAAOn2B,MAAQ,EAAAwd,YAAY7Z,MASpC,MAT2C,CAC3C,IACIu6C,EADuB/nB,EACMjB,KACjC,IAAIgpB,EAGF,MAFA/nB,EAAS+nB,IAQf,MAEF,QAAS,CACP,IAAIt2C,EAAUuuB,EAAOvuB,QACrB,GAAgB,OAAZA,GAAoBA,EAAQ1I,IAAI4+C,GAGlC,OAFAlsD,KAAKgmD,sBAAwBgG,EAC7BhsD,KAAKimD,yBAA2B,KACzBn7C,OAAOkL,EAAQ9U,IAAIgrD,IAE5B,OAUJ,OANI7F,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeg9C,oCACfl6C,EAAKlM,SAAS0J,MAAOwgD,EAAc3nB,EAAOrV,cAGvC,KAID,gCAENhhB,EAEAu6C,EAEAkB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAIj0C,EAAUrS,KAAKwqD,+BAA+Bt8C,EAAMu6C,EAASkB,EAAStD,GAC1E,IAAKh0C,EAAS,OAAO,KACrB,IAAI5C,EAAOzP,KAAK6rD,iBAAiBx5C,GASjC,OARK5C,GACC42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe0gD,2CACf59C,EAAKxC,OAIJ+D,EAID,8BAENvB,EAEAu6C,EAEAkB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAIiG,EAAmBr+C,EAAK+C,WACxBwyC,EAAazjD,KAAKgpD,kBAAkBuD,EAAkB9D,EAASkB,EAAStD,GAC5E,IAAK5C,EAAY,OAAO,KACxB,GAAIA,EAAW5qB,GAAG,KAAsB,CACtC,IAAIH,EAAiB+qB,EAAW/qB,eAChC,KAAOA,GAAgB,CACrB,IAAI+K,EAAiB/K,EAAe+K,eACpC,GAAIA,EAGF,OAFAzjC,KAAKgmD,sBAAwBuG,EAC7BvsD,KAAKimD,yBAA2B/3C,EAAKsE,kBAC9BixB,EAET/K,EAAiBA,EAAe4K,MASpC,OANI+iB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe68C,qCACfsE,EAAiB7gD,MAAO+3C,EAAWx3C,YAGhC,KAID,+BAENiC,EAEAu6C,EAEAkB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAIj0C,EAAUrS,KAAKgqD,8BAA8B97C,EAAMu6C,EAASkB,EAAStD,GACzE,IAAKh0C,EAAS,OAAO,KACrB,IAAI5C,EAAOzP,KAAK6rD,iBAAiBx5C,GASjC,OARK5C,GACC42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe0gD,2CACf59C,EAAKxC,OAIJ+D,EAIT,4BAEE+8C,EAEA7C,GAEA,IAAKA,EAAQ9wB,GAAG,KAEd,OAAQ8wB,EAAQv7C,MACd,KAAK,EACH,GAAIq+C,UAAUD,GAAW,OAAO,EAAAj8B,KAAKrtB,GACrC,MAEF,KAAK,EACH,GAAIwpD,UAAUF,GAAW,OAAO,EAAAj8B,KAAKhtB,GACrC,MAEF,KAAK,EACH,GAAIopD,WAAWH,GAAW,OAAO,EAAAj8B,KAAKptB,IACtC,MAEF,KAAK,EACH,GAAIypD,WAAWJ,GAAW,OAAO,EAAAj8B,KAAK/sB,IACtC,MAEF,KAAK,EACH,GAAIqpD,WAAWL,GAAW,OAAO,EAAAj8B,KAAKntB,IACtC,MAEF,KAAK,EACH,GAAI0pD,WAAWN,GAAW,OAAO,EAAAj8B,KAAK9sB,IACtC,MAEF,KAAK,GACH,GAAIspD,YAAYP,GAAW,OAAO,EAAAj8B,KAAK3sB,KACvC,MAEF,KAAK,EACH,IAAK5D,KAAKu9B,QAAQvP,QAAQgD,SAAU,CAClC,GAAI67B,WAAWL,GAAW,OAAO,EAAAj8B,KAAK8yB,QACtC,MAEF,OAAO,EAAA9yB,KAAK6yB,QAEd,KAAK,EACH,IAAKpjD,KAAKu9B,QAAQvP,QAAQgD,SAAU,CAClC,GAAI87B,WAAWN,GAAW,OAAO,EAAAj8B,KAAKgzB,QACtC,MAEF,OAAO,EAAAhzB,KAAK+yB,QAEd,KAAK,EAAc,OAAO,EAAA/yB,KAAKltB,IAC/B,KAAK,EAAc,OAAO,EAAAktB,KAAK7sB,IAC/B,KAAK,GAAc,OAAO,EAAA6sB,KAAK1sB,IAC/B,KAAK,GAAc,OAAO,EAAA0sB,KAAKzsB,IAInC,OAAI+oD,WAAWL,GAAkB,EAAAj8B,KAAKntB,IAClC0pD,WAAWN,GAAkB,EAAAj8B,KAAK9sB,IAC/B,EAAA8sB,KAAKltB,IAIN,0BAEN6K,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,OAAQp4C,EAAK8C,eACX,KAAK,EAAA+M,cAAciC,GACnB,KAAK,EAAAjC,cAAcivC,OAAQ,CACzB,IAAIv9C,EAAOzP,KAAKsnD,YACdx8C,OAAOoD,EAAKgD,QACZu3C,EAAQE,eACRF,EAAQxoB,wBACRomB,GAEF,IAAK52C,EAAM,OAAO,KAClB,IAAI4C,EAAUrS,KAAK4rD,iBAAiBn8C,GACpC,OAAI4C,IACAg0C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe6hD,kCACf/+C,EAAKxC,MAAO+D,EAAKxD,YAGrBjM,KAAKgmD,sBAAwB,KAC7BhmD,KAAKimD,yBAA2B,KACzB,MAET,KAAK,EAAAloC,cAAcmvC,QACjB,OAAOltD,KAAKisD,iBAAiB/9C,EAAK+C,WAAYw3C,EAASkB,EAAStD,GAElE,KAAK,EAAAtoC,cAAcsC,MAYjB,OAJArgB,KAAKymB,MACH,EAAArb,eAAeivB,gBACfnsB,EAAKxC,OAEA,KAET,QAASZ,QAAO,GAElB,OAAO,KAID,2BAENoD,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,OAAQp4C,EAAK8C,eACX,KAAK,EAAA+M,cAAciC,GACnB,KAAK,EAAAjC,cAAcivC,OACjB,OAAOhtD,KAAKsnD,YACVx8C,OAAOoD,EAAKgD,QACZu3C,EAAQE,eACRF,EAAQxoB,wBACRomB,GAGJ,KAAK,EAAAtoC,cAAcmvC,QAAS,CAC1B,IAAIz9C,EAAOzP,KAAKgpD,kBAAkB96C,EAAK+C,WAAYw3C,EAASkB,EAAStD,GACrE,OAAO52C,EAAOA,EAAKyzC,gBAAkB,KAEvC,KAAK,EAAAnlC,cAAcsC,MAAO,CACxB,IAAIhO,EAAUrS,KAAKisD,iBAAiB/9C,EAAMu6C,EAASkB,EAAStD,GAC5D,IAAKh0C,EAAS,OAAO,KACrB,IAAI5C,EAAOzP,KAAK6rD,iBAAiBx5C,GASjC,OARK5C,GACC42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe0gD,2CACf59C,EAAKxC,OAIJ+D,EAET,QAAS3E,QAAO,GAElB,OAAO,KAID,4BAENoD,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,IAAI72C,EAAOzP,KAAK2rD,6BAA6Bz9C,EAAMu6C,EAASkB,EAAStD,GACrE,IAAK52C,EAAM,OAAO,KAClB,IAAI4C,EAAUrS,KAAK4rD,iBAAiBn8C,GASpC,OARK4C,GACCg0C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfj/C,EAAKxC,MAAO,EAAA0hD,sBAAsBl/C,EAAKmD,UAAW5B,EAAKxD,YAItDoG,EAID,6BAENnE,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,IAAInxC,EAAUjH,EAAKiH,QACf9D,EAAWnD,EAAKmD,SACpB,OAAQA,GACN,KAAK,EAAAuO,MAAMsD,MAET,GAAI/N,EAAQqmB,cAAc,EAAAztB,YAAYoF,SACpC,OAAOnT,KAAKqtD,4BAA4BC,QAAQC,SAAqCp4C,EAAS7T,OAAQqoD,GAI1G,KAAK,EAAA/pC,MAAMqD,KACX,KAAK,EAAArD,MAAM2D,UACX,KAAK,EAAA3D,MAAM4D,YAAa,CACtB,IAAI/T,EAAOzP,KAAKgpD,kBAAkB7zC,EAASszC,EAASkB,EAAStD,GAC7D,IAAK52C,EAAM,OAAO,KAClB,GAAIA,EAAKopB,GAAG,KAAsB,CAChC,IAAIH,EAAiBjpB,EAAKipB,eAC1B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAakC,qBAAqBxc,IAC/E,GAAIozB,EAAU,OAAOA,EAASjrB,UAAUzK,WACxC,IAAI6pB,EAAcF,EAAeE,YAC7BA,IAAanpB,EAAOmpB,IAG5B,OAAKnpB,EAAKirB,MAAM,KAAwCjrB,EAAKopB,GAAG,MAC1DwtB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfj/C,EAAKxC,MAAO,EAAA0hD,sBAAsB/7C,GAAW5B,EAAKxD,YAG/C,MAEFwD,EAET,KAAK,EAAAmQ,MAAMmE,YAAa,CACtB,IAAItU,EAAOzP,KAAKgpD,kBAAkB7zC,EAASszC,EAASkB,EAAStD,GAC7D,IAAK52C,EAAM,OAAO,KAClB,GAAIA,EAAKopB,GAAG,KAAsB,CAChC,IAAIH,EAAiBjpB,EAAKipB,eAC1B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAa6B,KAC1D,GAAIiX,EAAU,OAAOA,EAASjrB,UAAUzK,YAG5C,OAAO,EAAAwhB,KAAK3sB,KAEd,KAAK,EAAAgc,MAAMoE,MAAO,CAChB,IAAIvU,EAAOzP,KAAKgpD,kBAAkB7zC,EAASszC,EAASkB,EAAStD,GAC7D,IAAK52C,EAAM,OAAO,KAClB,GAAIA,EAAKopB,GAAG,KAAsB,CAChC,IAAIH,EAAiBjpB,EAAKipB,eAC1B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAa8B,aAC1D,GAAIgX,EAAU,OAAOA,EAASjrB,UAAUzK,YAG5C,OAAKU,EAAKirB,MAAM,KAAyCjrB,EAAKopB,GAAG,KAS1DppB,EAAK+9C,SARNnH,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfj/C,EAAKxC,MAAO,IAAK+D,EAAKxD,YAGnB,MAIX,QAASnB,QAAO,GAElB,OAAO,KAID,6BAENoD,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,IAAI72C,EAAOzP,KAAK0rD,8BAA8Bx9C,EAAMu6C,EAASkB,EAAStD,GACtE,IAAK52C,EAAM,OAAO,KAClB,IAAI4C,EAAUrS,KAAK4rD,iBAAiBn8C,GASpC,OARK4C,GACCg0C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfj/C,EAAKxC,MAAO,EAAA0hD,sBAAsBl/C,EAAKmD,UAAW5B,EAAKxD,YAItDoG,EAID,8BAENnE,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,IAAIj1C,EAAWnD,EAAKmD,SACpB,OAAQA,GACN,KAAK,EAAAuO,MAAM2D,UACX,KAAK,EAAA3D,MAAM4D,YAAa,CACtB,IAAI/T,EAAOzP,KAAKgpD,kBAAkB96C,EAAKiH,QAASszC,EAASkB,EAAStD,GAClE,IAAK52C,EAAM,OAAO,KAClB,GAAIA,EAAKopB,GAAG,KAAsB,CAChC,IAAIH,EAAiBjpB,EAAKipB,eAC1B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAamC,sBAAsBzc,IAChF,GAAIozB,EAAU,OAAOA,EAASjrB,UAAUzK,YAG5C,OAAKU,EAAKirB,MAAM,KAAyCjrB,EAAKopB,GAAG,KAS1DppB,GARD42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfj/C,EAAKxC,MAAO,EAAA0hD,sBAAsB/7C,GAAW5B,EAAKxD,YAG/C,OAWb,OANIo6C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeivB,gBACfnsB,EAAKxC,OAGF,KAID,uBAENwC,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,IAAI72C,EAAOzP,KAAK6qD,wBAAwB38C,EAAMu6C,EAASkB,EAAStD,GAChE,IAAK52C,EAAM,OAAO,KAClB,IAAI4C,EAAUrS,KAAK4rD,iBAAiBn8C,GACpC,OAAI4C,IACAg0C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe6hD,kCACf/+C,EAAKxC,MAAO+D,EAAKxD,YAGd,MAID,wBAENiC,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,IAAIh1C,EAAOpD,EAAKoD,KACZC,EAAQrD,EAAKqD,MACbF,EAAWnD,EAAKmD,SAEpB,OAAQA,GAIN,KAAK,EAAAuO,MAAMuE,OACX,KAAK,EAAAvE,MAAMwE,YACX,KAAK,EAAAxE,MAAMyE,aACX,KAAK,EAAAzE,MAAM0E,gBACX,KAAK,EAAA1E,MAAM2E,yBACX,KAAK,EAAA3E,MAAM4E,aACX,KAAK,EAAA5E,MAAM6E,eACX,KAAK,EAAA7E,MAAM8E,yBACX,KAAK,EAAA9E,MAAM+E,+BACX,KAAK,EAAA/E,MAAMgF,2CACX,KAAK,EAAAhF,MAAMiF,iBACX,KAAK,EAAAjF,MAAMkF,WACX,KAAK,EAAAlF,MAAMmF,aACT,OAAO/kB,KAAKgpD,kBAAkB13C,EAAMm3C,EAASkB,EAAStD,GAKxD,KAAK,EAAAzmC,MAAM6C,SACX,KAAK,EAAA7C,MAAM8C,YACX,KAAK,EAAA9C,MAAM+C,gBACX,KAAK,EAAA/C,MAAMgD,mBAAoB,CAC7B,IAAI6qC,EAAWztD,KAAKgpD,kBAAkB13C,EAAMm3C,EAASkB,EAAStD,GAC9D,IAAKoH,EAAU,OAAO,KACtB,GAAIA,EAAS50B,GAAG,KAAsB,CACpC,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaiC,gBAAgBvc,IAC1E,GAAIozB,EAAU,OAAOA,EAASjrB,UAAUzK,YAG5C,OAAK0+C,EAAS/yB,MAAM,KAAwC+yB,EAAS50B,GAAG,MAClEwtB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfj/C,EAAKxC,MAAO,EAAA0hD,sBAAsB/7C,GAAWo8C,EAASxhD,YAGnD,MAEF,EAAAskB,KAAK3sB,KAKd,KAAK,EAAAgc,MAAMiD,cACX,KAAK,EAAAjD,MAAMkD,mBAAoB,CAC7B,IAAI2qC,EAAWztD,KAAKgpD,kBAAkB13C,EAAMm3C,EAASkB,EAAStD,GAC9D,IAAKoH,EAAU,OAAO,KACtB,GAAIA,EAAS50B,GAAG,KAAsB,CACpC,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaiC,gBAAgBvc,IAC1E,GAAIozB,EAAU,OAAOA,EAASjrB,UAAUzK,YAG5C,OAAO,EAAAwhB,KAAK3sB,KAKd,KAAK,EAAAgc,MAAMmD,qBACX,KAAK,EAAAnD,MAAMoD,0BACT,OAAO,EAAAuN,KAAK3sB,KAKd,KAAK,EAAAgc,MAAMqD,KACX,KAAK,EAAArD,MAAMsD,MACX,KAAK,EAAAtD,MAAMwD,SACX,KAAK,EAAAxD,MAAMyD,MACX,KAAK,EAAAzD,MAAM0D,QAAS,CAClB,IAAImqC,EAAWztD,KAAKgpD,kBAAkB13C,EAAMm3C,EAASkB,EAAStD,GAC9D,IAAKoH,EAAU,OAAO,KACtB,GAAIA,EAAS50B,GAAG,KAAsB,CACpC,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaiC,gBAAgBvc,IAC1E,GAAIozB,EAAU,OAAOA,EAASjrB,UAAUzK,YAG5C,IAAI2+C,EAAY1tD,KAAKgpD,kBAAkBz3C,EAAOk3C,EAASgF,EAAUpH,GACjE,IAAKqH,EAAW,OAAO,KACvB,IAAIC,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,GAS7D,OARKC,GACCtH,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf3/C,EAAKxC,MAAO+hD,EAASxhD,WAAYyhD,EAAUzhD,YAI1C0hD,EAKT,KAAK,EAAA/tC,MAAMuD,kBAAmB,CAC5B,IAAIsqC,EAAWztD,KAAKgpD,kBAAkB13C,EAAMm3C,EAASkB,EAAStD,GAC9D,IAAKoH,EAAU,OAAO,KACtB,GAAIA,EAAS50B,GAAG,KAAsB,CACpC,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaY,KAC1D,GAAIkY,EAAU,OAAOA,EAASjrB,UAAUzK,YAG5C,OAAO0+C,GAAY,EAAAl9B,KAAK1sB,IAAM,EAAA0sB,KAAK1sB,IAAM,EAAA0sB,KAAKzsB,IAKhD,KAAK,EAAA8b,MAAM6D,kBACX,KAAK,EAAA7D,MAAM8D,wBACX,KAAK,EAAA9D,MAAM+D,oCAAqC,CAC9C,IAAI8pC,EAAWztD,KAAKgpD,kBAAkB13C,EAAMm3C,EAASkB,EAAStD,GAC9D,IAAKoH,EAAU,OAAO,KACtB,GAAIA,EAAS50B,GAAG,KAAsB,CACpC,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaiC,gBAAgBvc,IAC1E,GAAIozB,EAAU,OAAOA,EAASjrB,UAAUzK,YAG5C,OAAK0+C,EAAS50B,GAAG,IAAsB40B,EAAS50B,GAAG,MAC7CwtB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfj/C,EAAKxC,MAAO,EAAA0hD,sBAAsB/7C,GAAWo8C,EAASxhD,YAGnD,MAEFwhD,EAKT,KAAK,EAAA7tC,MAAMgE,UACX,KAAK,EAAAhE,MAAMiE,IACX,KAAK,EAAAjE,MAAMkE,MAAO,CAChB,IAAI2pC,EAAWztD,KAAKgpD,kBAAkB13C,EAAMm3C,EAASkB,EAAStD,GAC9D,IAAKoH,EAAU,OAAO,KACtB,GAAIA,EAAS50B,GAAG,KAAsB,CACpC,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaiC,gBAAgBvc,IAC1E,GAAIozB,EAAU,OAAOA,EAASjrB,UAAUzK,YAG5C,IAAI2+C,EAAY1tD,KAAKgpD,kBAAkBz3C,EAAOk3C,EAASkB,EAAStD,GAChE,IAAKqH,EAAW,OAAO,KACvB,IAAIC,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,GAS7D,OARKC,GAAeA,EAAW90B,GAAG,KAAsB80B,EAAW90B,GAAG,MAChEwtB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf3/C,EAAKxC,MAAO,EAAA0hD,sBAAsB/7C,GAAWo8C,EAASxhD,WAAYyhD,EAAUzhD,YAI3E0hD,EAKT,KAAK,EAAA/tC,MAAMqE,oBACX,KAAK,EAAArE,MAAMsE,QACT,OAAOlkB,KAAKgpD,kBAAkB13C,EAAMm3C,EAASkB,EAAStD,GAS1D,OANIA,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeivB,gBACfnsB,EAAKxC,OAGF,KAID,qBAENwC,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,GAAImC,EAAQqF,SAAU,CACpB,IAAIC,EAAYtF,EAAQuF,YAAY,EAAAhrD,YAAYsC,OAChD,GAAIyoD,EAGF,OAFA/tD,KAAKgmD,sBAAwB,KAC7BhmD,KAAKimD,yBAA2B,KACzB8H,EAGX,IAAI99B,EAASw4B,EAAQE,eAAe14B,OACpC,OAAIA,GACFjwB,KAAKgmD,sBAAwB,KAC7BhmD,KAAKimD,yBAA2B,KACzBh2B,IAELo2B,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe6iD,+CACf//C,EAAKxC,OAGF,MAID,sBAENwC,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,IAAIj0C,EAAUrS,KAAKmqD,qBAAqBj8C,EAAMu6C,EAASkB,EAAStD,GAChE,IAAKh0C,EAAS,OAAO,KACrB,IAAI5C,EAAOzP,KAAK6rD,iBAAiBx5C,GASjC,OARK5C,GACC42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe0gD,2CACf59C,EAAKxC,OAIJ+D,EAID,sBAENvB,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,GAAImC,EAAQqF,SAAU,CACpB,IAAII,EAAazF,EAAQuF,YAAY,EAAAhrD,YAAYuC,QACjD,GAAI2oD,EAGF,OAFAluD,KAAKgmD,sBAAwB,KAC7BhmD,KAAKimD,yBAA2B,KACzBiI,EAGX,IAAIj+B,EAAyBw4B,EAAQE,eAAe14B,OACpD,GAAe,OAAXA,GAAmBA,EAAO7hB,MAAQ,EAAAwd,YAAY7Z,MAAO,CACvD,IAAIuxB,EAAerT,EAAQqT,KAC3B,GAAIA,EAGF,OAFAtjC,KAAKgmD,sBAAwB,KAC7BhmD,KAAKimD,yBAA2B,KACzB3iB,EASX,OANI+iB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe+iD,iDACfjgD,EAAKxC,OAGF,KAID,uBAENwC,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,IAAIj0C,EAAUrS,KAAKoqD,sBAAsBl8C,EAAMu6C,EAASkB,EAAStD,GACjE,IAAKh0C,EAAS,OAAO,KACrB,IAAI5C,EAAOzP,KAAK6rD,iBAAiBx5C,GASjC,OARK5C,GACC42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe0gD,2CACf59C,EAAKxC,OAIJ+D,EAID,wBAENvB,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAIpC,OAFAtmD,KAAKgmD,sBAAwB93C,EAC7BlO,KAAKimD,yBAA2B,KACxB/3C,EAAK2C,aACX,KAAK,EAAA9C,YAAYoF,QAAS,CACxB,IAAIq6C,EAAUxtD,KAAKqtD,4BACUn/C,EAAM5M,MACjCqoD,GAEEp7B,EAAiBvuB,KAAKu9B,QAAQhP,eAElC,OADAzjB,OAAOyjB,EAAejhB,IAAIkgD,IACnB1iD,OAAOyjB,EAAertB,IAAIssD,IAEnC,KAAK,EAAAz/C,YAAY6E,MAAO,CACtB,IAAIw7C,EAAUzE,GAAW,EAAAp5B,KAAK1sB,IAAM,EAAA0sB,KAAK1sB,IAAM,EAAA0sB,KAAKzsB,IAChDyqB,EAAiBvuB,KAAKu9B,QAAQhP,eAElC,OADAzjB,OAAOyjB,EAAejhB,IAAI8gD,IACnBtjD,OAAOyjB,EAAertB,IAAIktD,IAEnC,KAAK,EAAArgD,YAAY6G,OACf,OAAO5U,KAAKu9B,QAAQtJ,eAEtB,KAAK,EAAAlmB,YAAY+C,MAAO,CACtB,IAAI4nB,EAAiBixB,EAAQjxB,eAC7B,GAAIixB,EAAQ9wB,GAAG,MAA2C,OAAnBH,GAA2BA,EAAez2B,WAAajC,KAAKu9B,QAAQrH,eACzG,OAAOl2B,KAAK4rD,iBAAiBjC,GAG/B,IAAI33C,EAAuC9D,EAAM6C,mBAC7CrE,EAASsF,EAAYtF,OACrB2hD,EAAc,EAAA99B,KAAK4yB,KACnBmL,EAAkB,EACtB,IAAK,IAAIjuD,EAAI,EAAG8b,EAAIzP,EAAQrM,EAAI8b,IAAK9b,EAAG,CACtC,IAAI4Q,EAAae,EAAY3R,GAC7B,GAAI4Q,EACF,GAAIA,EAAW7C,MAAQ,EAAAP,SAAS2F,MAAQ9G,EAAS,IAC7C4hD,MACG,CACL,IAAI/E,EAAcvpD,KAAKgpD,kBAAkB/3C,EAAYw3C,EAAS4F,GAC9D,IAAK9E,EAAa,OAAO,KACzB,GAAI8E,GAAe,EAAA99B,KAAK4yB,KAAMkL,EAAc9E,OACvC,GAAIA,GAAe8E,EAAa,CACnC,IAAIV,EAAa,EAAAp9B,KAAKq9B,kBAAkBS,EAAa9E,GAAa,GAC9DoE,IAAYU,EAAcV,KAMtC,GAAIU,GAA2B,EAAA99B,KAAK4yB,KAAM,CACxC,GAAImL,GAAmB5hD,EAOrB,OAJA1M,KAAKymB,MACH,EAAArb,eAAemjD,2HACfrgD,EAAKxC,MAAO,KAEP,KANP2iD,EAAcruD,KAAKu9B,QAAQvP,QAAQyC,UAgBvC,OANE69B,EAAkB,GAClBD,EAAYx1B,GAAG,OACdw1B,EAAYx1B,GAAG,QAEhBw1B,EAAcA,EAAYzH,cAErB97C,OAAO9K,KAAKy3B,aAAaz3B,KAAKu9B,QAAQrH,eAAgB,CAAEm4B,MASnE,OANIhI,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeivB,gBACfnsB,EAAKxC,OAGF,KAID,yBAENwC,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,IAAIj0C,EAAUrS,KAAKsqD,wBAAwBp8C,EAAMu6C,EAASkB,EAAStD,GACnE,IAAKh0C,EAAS,OAAO,KACrB,IAAI5C,EAAOzP,KAAK6rD,iBAAiBx5C,GASjC,OARK5C,GACC42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe0gD,2CACf59C,EAAKxC,OAIJ+D,EAID,qBAENvB,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAKG,KAErB21B,EAAyBN,EAAWO,QAEpC,IAAI72C,EAAOzP,KAAK8qD,sBAAsB58C,EAAMu6C,EAASkB,EAAStD,GAC9D,IAAK52C,EAAM,OAAO,KAClB,IAAI4C,EAAUrS,KAAK4rD,iBAAiBn8C,GASpC,OARK4C,GACCg0C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe6hD,kCACf/+C,EAAKxC,MAAO+D,EAAKxD,YAIhBoG,EAID,sBAENnE,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAKG,KAErB21B,EAAyBN,EAAWO,QAEpC,IAAIiG,EAAmBr+C,EAAK+C,WACxBszB,EAASvkC,KAAKisD,iBAChBM,EACA9D,EACAkB,EACAtD,GAEF,IAAK9hB,EAAQ,OAAO,KACpB,OAAQA,EAAOn2B,MACb,KAAK,EAAAwd,YAAY8L,mBAAoB,CACnC,IAAI82B,EAAuCjqB,EAE3C,GACEiqB,EAAkBt/B,cAAgB,EAAA0G,aAAazW,WAC/CjR,EAAK+B,UAAUvD,OAAS,EAExB,OAAO1M,KAAKgpD,kBAAkB96C,EAAK+B,UAAU,GAAIw4C,EAASkB,EAAStD,GAErE,IAAIjpB,EAAWp9B,KAAKyuD,eAAevgD,EAAMsgD,EAAmB/F,EAASpC,GACrE,OAAKjpB,EACEA,EAAS5jB,UAAUzK,WADJ,KAGxB,KAAK,EAAA6c,YAAY0W,gBACf,OAAwBiC,EAAQ/qB,UAAUzK,WAS9C,OANIs3C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAesjD,uGACfnC,EAAiB7gD,MAAO64B,EAAOrV,cAG5B,KAID,sBAENhhB,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,IAAIt0C,EAAc9D,EAAK8D,YACvB,OAAOhS,KAAKisD,iBAAiBj6C,EAAYlH,OAAOkH,EAAYtF,QAAU,GAAI+7C,EAASkB,EAAStD,GAItF,uBAENn4C,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,IAAIt0C,EAAc9D,EAAK8D,YACvB,OAAOhS,KAAKgpD,kBAAkBh3C,EAAYlH,OAAOkH,EAAYtF,QAAU,GAAI+7C,EAASkB,EAAStD,GAIvF,2BAENn4C,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,IAAI/3B,EAAiBvuB,KAAKu9B,QAAQhP,eAElC,OADAzjB,OAAOyjB,EAAejhB,IAAI,EAAAijB,KAAK3sB,OACxBkH,OAAOyjB,EAAertB,IAAI,EAAAqvB,KAAK3sB,OAIhC,4BAENsK,EAEAu6C,EAEAkB,EAAgB,EAAAp5B,KAAK4yB,KAErBkD,EAAyBN,EAAWO,QAEpC,OAAO,EAAA/1B,KAAK3sB,KAIN,wBAENsK,EAEAu6C,EAEAkB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAI72C,EAAOzP,KAAKyrD,yBAAyBv9C,EAAMu6C,EAASkB,EAAStD,GACjE,IAAK52C,EAAM,OAAO,KAClB,IAAI4C,EAAUrS,KAAK4rD,iBAAiBn8C,GASpC,OARK4C,GACCg0C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe6hD,kCACf/+C,EAAKxC,MAAO+D,EAAKxD,YAIhBoG,EAID,yBAENnE,EAEAu6C,EAEAkB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAIqI,EAAW3uD,KAAKgpD,kBAAkB96C,EAAKqG,OAAQk0C,EAASkB,EAAStD,GACrE,IAAKsI,EAAU,OAAO,KACtB,IAAIC,EAAW5uD,KAAKgpD,kBAAkB96C,EAAKsG,OAAQi0C,EAASkG,EAAUtI,GACtE,IAAKuI,EAAU,OAAO,KACtB,IAAIjB,EAAa,EAAAp9B,KAAKq9B,kBAAkBe,EAAUC,GAAU,GAS5D,OARKjB,GACCtH,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf3/C,EAAKxC,MAAO,KAAMijD,EAAS1iD,WAAY2iD,EAAS3iD,YAI/C0hD,EAID,oBAENz/C,EAEAu6C,EAEAkB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAIj0C,EAAUrS,KAAKm1B,gBAAgBjnB,EAAKkF,SAAUq1C,EAAQE,eAAgBtC,GAC1E,OAAKh0C,EACDA,EAAQjE,MAAQ,EAAAwd,YAAYyI,gBACvBr0B,KAAK8mD,8BACMz0C,EAChBnE,EAAKQ,cACL+5C,EAAQE,eACR,EAAA5B,QAAqB0B,EAAQxoB,yBAC7B/xB,EACAm4C,IAGAA,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeyjD,qCACf3gD,EAAKxC,OAGF,MAjBc,KAqBf,qBAENwC,EAEAu6C,EAEAkB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAIj0C,EAAUrS,KAAKuqD,oBAAoBr8C,EAAMu6C,EAASkB,EAAStD,GAC/D,IAAKh0C,EAAS,OAAO,KACrB,IAAI5C,EAAOzP,KAAK6rD,iBAAiBx5C,GASjC,OARK5C,GACC42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe0gD,2CACf59C,EAAKxC,OAIJ+D,EAID,yBAENvB,EAEAu6C,EAEAkB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAI72C,EAAOzP,KAAKirD,0BAA0B/8C,EAAMu6C,EAASkB,EAAStD,GAClE,IAAK52C,EAAM,OAAO,KAClB,IAAI4C,EAAUrS,KAAK4rD,iBAAiBn8C,GASpC,OARK4C,GACCg0C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe6hD,kCACf/+C,EAAKxC,MAAO+D,EAAKxD,YAIhBoG,EAID,0BAENnE,EAEAu6C,EAEAkB,EAEAtD,EAAyBN,EAAWO,QAEpC,OAAOtmD,KAAKwmD,oBAAoBt4C,EAAK2D,YAAY2H,UAAWivC,EAAQE,eAAgBF,EAAQxoB,wBAAyBomB,GAMvH,gBAEEpkD,EAEAyM,EAEA03C,EAA6B,EAAAW,UAE7BV,EAAyBN,EAAWO,QAEpC,IAAIwI,EAAe7sD,EAAUguB,OAAO7hB,MAAQ,EAAAwd,YAAYqM,mBACpDh2B,EAAUguB,OAAOA,OACjBhuB,EAAUguB,OACV4P,EAA8B,KAC9BE,EAAcrxB,EAAgB,EAAAqgD,cAAcrgD,GAAiB,GAGjE,GAAIzM,EAAU42B,GAAG,EAAAx2B,YAAYy6B,UAAW,CACtChyB,OAAOgkD,EAAa1gD,MAAQ,EAAAwd,YAAY7Z,OACxC8tB,EAAuBivB,EAGvB,IAAIE,EAAmB/sD,EAAUgtD,oBAAoBlvB,GACrD,GAAIivB,EAAkB,OAAOA,EAG7B,IAAIE,EAAqBrvB,EAAcnxB,cACvC,GAAIwgD,EAAoB,CACtB,IAAIC,EAAsBrkD,OAAO+0B,EAAc59B,UAAU+Z,oBACrDozC,EAAwBD,EAAoBziD,OAChD5B,OAAOskD,GAAyBD,EAAoBziD,QACpD,IAAK,IAAIrM,EAAI,EAAGA,EAAI+uD,IAAyB/uD,EAAG,CAC9C,IAAIgvD,EAAyBF,EAAoB9uD,GAAGO,KAAK4L,KACpD45C,EAAS94C,IAAI+hD,IAChBjJ,EAAS14C,IACP2hD,EACAH,EAAmB7uD,UAKtB,CACLyK,OAAOgkD,EAAa1gD,MAAQ,EAAAwd,YAAY7Z,OACxC,IAAIi9C,EAAmB/sD,EAAUgtD,oBAAoBlvB,GACrD,GAAIivB,EAAkB,OAAOA,EAI/B,IAEIM,EAFAC,EAAgBttD,EAAUoa,iBAC1BL,EAAqB/Z,EAAU+Z,mBAEnC,GAAsB,OAAlBtN,IAA2B4gD,EAA2B5gD,EAAchC,QAAU,EAAG,CACnF5B,OAA8B,OAAvBkR,GAA+BszC,GAA4BtzC,EAAmBtP,QACrF,IAAK,IAAIrM,EAAI,EAAGA,EAAIivD,IAA4BjvD,EAC9C+lD,EAAS14C,IACesO,EAAoB3b,GAAGO,KAAK4L,KAClDkC,EAAcrO,SAIlByK,QAAQkR,GAAmD,GAA7BA,EAAmBtP,QAInD,IAAI+0B,EAAwB,KACxBzyB,EAAmBugD,EAAcvgD,iBACrC,GAAIA,EAAkB,CAOpB,KANAyyB,EAAWzhC,KAAKsnD,YACdt4C,EACA/M,EAAUguB,OACVm2B,EACAC,IAEa,OAAO,KACtBD,EAAS14C,IAAI,EAAA1K,YAAYsC,MAAOm8B,QACvB5B,IACT4B,EAAW5B,EAAcpwB,KACzB22C,EAAS14C,IAAI,EAAA1K,YAAYsC,MAAOm8B,IAIlC,IAgCI1yB,EAhCAygD,EAAsBD,EAAczgD,WACpC2gD,EAAyBD,EAAoB9iD,OAC7Cg1B,EAAiB,IAAI95B,MAAY6nD,GACjCnL,EAAiB,IAAI18C,MAAc6nD,GACnClL,EAAqB,EACzB,IAAK,IAAIlkD,EAAI,EAAGA,EAAIovD,IAA0BpvD,EAAG,CAC/C,IAAIqvD,EAAuBF,EAAoBnvD,GAC3CqvD,EAAqB7/C,eAAiB,EAAA0M,cAAciE,UACtD+jC,EAAqBlkD,EAAI,GAE3B,IAAIknD,EAAWmI,EAAqBjgD,KACpC,GAAI,EAAAm4C,cAAcL,GAOhB,OANIlB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAey8C,cACfN,EAAS77C,OAGN,KAET,IAAIi2B,EAAgB3hC,KAAKsnD,YACvBC,EACAtlD,EAAUguB,OACVm2B,EACAC,GAEF,IAAK1kB,EAAe,OAAO,KAC3BD,EAAerhC,GAAKshC,EACpB2iB,EAAejkD,GAAKqvD,EAAqB9uD,KAAK4L,KAKhD,GAAIvK,EAAU42B,GAAG,EAAAx2B,YAAYyf,KAC3B/S,EAAa,EAAAwhB,KAAKG,UACb,GAAIzuB,EAAU42B,GAAG,EAAAx2B,YAAY+P,aAClCrD,EAAa8wB,EAAepwB,SACvB,CACL,IAAI83C,EAAWgI,EAAcxgD,WAC7B,GAAI,EAAA64C,cAAcL,GAOhB,OANIlB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAey8C,cACfN,EAAS77C,OAGN,KAET,IAAI+D,EAAOzP,KAAKsnD,YACdC,EACAtlD,EAAUguB,OACVm2B,EACAC,GAEF,IAAK52C,EAAM,OAAO,KAClBV,EAAaU,EAGf,IAAI+J,EAAY,IAAI,EAAA8kB,UAAUt+B,KAAKu9B,QAASmE,EAAgB3yB,EAAY0yB,GACxEjoB,EAAU8qC,eAAiBA,EAC3B9qC,EAAU+qC,mBAAqBA,EAE/B,IAAIvkB,EAAyB/9B,EAAUrB,KACnCm/B,EAAYrzB,SAAQszB,GAA0B,IAAMD,EAAc,KACtE,IAAI3C,EAAW,IAAI,EAAAjN,SACjB6P,EACA/9B,EACAuX,EACA4sC,GAGF,OADAnkD,EAAU0tD,oBAAoB5vB,EAAa3C,GACpCA,EAIT,iCAEEn7B,EAEAia,EAEAiqC,EAEAC,EAEAwJ,EAEAvJ,EAAyBN,EAAWO,QAEpC,IAAIwI,EAAe7sD,EAAUguB,OAAO7hB,MAAQ,EAAAwd,YAAYqM,mBACpDh2B,EAAUguB,OAAOA,OACjBhuB,EAAUguB,OACVk5B,EAAuC,KAG3C,GAAIlnD,EAAU42B,GAAG,EAAAx2B,YAAYyuB,SAAU,CAGrC,GAAI7uB,EAAU42B,GAAG,EAAAx2B,YAAYy6B,UAAW,CACtChyB,OAAOgkD,EAAa1gD,MAAQ,EAAAwd,YAAY7Z,OACxC,IAAI8tB,EAAuBivB,EACvBI,EAAqBrvB,EAAcnxB,cACvC,GAAIwgD,EAAoB,CACtB,IAAIlzC,EAAqBlR,OAAO+0B,EAAc59B,UAAU+Z,oBACpDozC,EAAwBF,EAAmBxiD,OAC/C5B,OAAOskD,GAAyBpzC,EAAmBtP,QACnD,IAAK,IAAIrM,EAAI,EAAGA,EAAI+uD,IAAyB/uD,EAC3C+lD,EAAS14C,IACPsO,EAAmB3b,GAAGO,KAAK4L,KAC3B0iD,EAAmB7uD,KAc3B,KARA8oD,EAAwBnpD,KAAKqnD,qBAC3Bv8C,OAAO7I,EAAU+Z,oBACjBE,EACAiqC,EACAC,EACAwJ,EACAvJ,IAE0B,OAAO,UAInC,GAA0B,OAAtBnqC,GAA8BA,EAAkBxP,OAAS,EAO3D,OANI25C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeu7C,sBACfiJ,EAAWlkD,MAAOzJ,EAAUitB,cAGzB,KAKX,OAAOlvB,KAAK23B,gBACV11B,EACAknD,EACA/C,EACAC,GAQJ,aAEEpkD,EAEAyM,EAEA03C,EAA6B,EAAAW,UAE7BV,EAAyBN,EAAWO,QAEpC,IAAIvmB,EAAcrxB,EAAgB,EAAAqgD,cAAcrgD,GAAiB,GAI7D0uB,EAAWn7B,EAAUgtD,oBAAoBlvB,GAC7C,GAAI3C,EAAU,OAAOA,EAGrB,IAAIyyB,EAAwB5tD,EAAUrB,KAClCm/B,EAAYrzB,SAAQmjD,GAAyB,IAAM9vB,EAAc,KACrE3C,EAAW,IAAI,EAAAiG,MAAMwsB,EAAuB5tD,EAAWyM,GACvDzM,EAAU0tD,oBAAoB5vB,EAAa3C,GAC3C,IAAI0yB,EAAiB9vD,KAAKkmD,oBAK1B,GAJA4J,EAAe9iD,KAAKowB,GAIhB1uB,EAAe,CACjB,IAAIsN,EAAqBlR,OAAO7I,EAAU+Z,oBACtC4sC,EAAoB5sC,EAAmBtP,OACvCsR,EAAmBtP,EAAchC,OACrC5B,OAAOkT,GAAoB4qC,GAC3B,IAAK,IAAIvoD,EAAI,EAAGA,EAAI2d,IAAoB3d,EACtC+lD,EAAS14C,IAAIsO,EAAmB3b,GAAGO,KAAK4L,KAAMkC,EAAcrO,QAEzD,CACL,IAAI2b,EAAqB/Z,EAAU+Z,mBACnClR,SAAgC,OAAvBkR,GAA+BA,EAAmBtP,OAAS,IAEtE0wB,EAAS6C,wBAA0BmmB,EAGnC,IAAIhxB,EAAgBnzB,EAAUmzB,cAC9B,GAAIA,EAAe,CACjB,IAAIsI,EAAiCtI,EACrC,EAAG,CACD,GAAIsI,GAAWz7B,EAMb,OALAjC,KAAKymB,MACH,EAAArb,eAAe2kD,mEACf9tD,EAAUszB,eAAe7pB,MACzBzJ,EAAUitB,cAEL,KAETwO,EAAUA,EAAQtI,oBACXsI,GACT,IAAIzI,EAAcnqB,OAAO7I,EAAUgzB,aAC/BqO,EAAOtjC,KAAK8mD,8BACd1xB,EACAH,EAAYvmB,cACZzM,EAAUguB,OACV,EAAA82B,QAAQX,GACRnxB,EACAoxB,GAEF,IAAK/iB,EAAM,OAAO,KAOlB,GANAlG,EAAS4yB,QAAQ1sB,GAMbwsB,EAAeriD,SAAS61B,GAAO,OAAOlG,EAK5C,OADAp9B,KAAKiwD,mBAAmB7yB,EAAUipB,GAC3BjpB,EAID,mBAENA,EAEAipB,GAEA,IAAItuB,EAAkBqF,EAASpnB,QAC1B+hB,IAAiBqF,EAASpnB,QAAU+hB,EAAkB,IAAIhwB,KAG/D,IAAI+nD,EAAiB9vD,KAAKkmD,oBACtB1jB,EAAoB,EACpBc,EAAOlG,EAASkG,KACpB,GAAIA,EAAM,CACRx4B,QAAQglD,EAAeriD,SAAS61B,IAChC,IAAI4sB,EAAc5sB,EAAKttB,QACvB,GAAIk6C,EAEF,IAAK,IAAIv9B,EAAQC,SAASs9B,GAAc7vD,EAAI,EAAG8b,EAAIwW,EAAMjmB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC3E,IAAI8vD,EAAiBhxC,UAAUwT,EAAMtyB,IACjC+vD,EAAatlD,OAAOolD,EAAYhvD,IAAIivD,IACxCp4B,EAAgBrqB,IAAIyiD,EAAgBC,GAGxC5tB,EAAec,EAAKC,iBAItB,IAAIthC,EAAYm7B,EAASn7B,UACrBouD,EAA2BpuD,EAAU81B,gBACzC,GAAIs4B,EAEF,IAAK,IAAIj5B,EAAUC,WAAWg5B,GAA2BhwD,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC9F,IAAI23B,EAAS7Y,UAAUiY,EAAQ/2B,IAC/B,OAAQ23B,EAAO5pB,MAEb,KAAK,EAAAwd,YAAY2W,gBAAiB,CAChC,IAAI+tB,EAAiCt4B,EACjCu4B,EAAgBD,EAAe/I,SAC/B7hB,EAAyB,KAE7B,GAAK6qB,EAoBH7qB,EAAY1lC,KAAKsnD,YACfiJ,EACAtuD,EAAUguB,OACVmN,EAAS6C,wBACTomB,OAxBgB,CAClB,GAAI/iB,EAAM,CACR,IAAI4sB,EAAc5sB,EAAKttB,QACvB,GAAoB,OAAhBk6C,GAAwBA,EAAY5iD,IAAIgjD,EAAe1vD,MAAO,CAChE,IAAI4vD,EAAY1lD,OAAOolD,EAAYhvD,IAAIovD,EAAe1vD,OACjD4vD,EAAU33B,GAAG,EAAAx2B,YAAYqf,WAC5B5W,OAAO0lD,EAAUpiD,MAAQ,EAAAwd,YAAY0M,OACrCoN,EAAoB8qB,EAAW/gD,OAIhCi2B,GACC2gB,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAey8C,cACfyI,EAAe/6B,eAAe7pB,MAAM49C,OAY5C,IAAK5jB,EAAW,MAChB,IAAIb,EAAgB,IAAI,EAAA4rB,MAAMH,EAAgBlzB,EAAUsI,GACxD56B,OAAO,EAAA4lD,WAAWhrB,EAAUqd,WAC5B,IAAIrU,EAAOhJ,EAAUqd,SAAW,EAC5BvgB,EAAekM,IAAMlM,EAAuC,GAAvBA,EAAekM,IACxD7J,EAAcrC,aAAeA,EAC7BA,GAAgBkD,EAAUqd,SAC1B3lB,EAASzM,IAAIqH,EAAOp3B,KAAMikC,GAC1B,MAEF,KAAK,EAAAjZ,YAAY8L,mBAAoB,CACnC,IAAIi5B,EAAqC34B,EAAQ44B,QAAQxzB,GACzDA,EAASzM,IAAIggC,EAAe/vD,KAAM+vD,GAClC,MAEF,KAAK,EAAA/kC,YAAYqM,mBAAoB,CACnC,IAAIC,EAAuCF,EACvC64B,EAAmB,IAAI,EAAAC,SAAS54B,EAAmBkF,GACnDjF,EAAkBD,EAAkBC,gBACxC,GAAIA,EAAiB,CACnB,IAAIyK,EAAiB5iC,KAAK23B,gBACxBQ,EAAgBy4B,QAAQxzB,GACxB,KACA,EAAA2pB,QAAQ3pB,EAAS6C,yBACjBomB,GAEEzjB,IACFiuB,EAAiBjuB,eAAiBA,EAClCiuB,EAAiBr4B,QAAQoK,EAAeppB,UAAUzK,aAGtD,IAAIqpB,EAAkBF,EAAkBE,gBACxC,GAAIA,EAAiB,CACnB,IAAIyK,EAAiB7iC,KAAK23B,gBACxBS,EAAgBw4B,QAAQxzB,GACxB,KACA,EAAA2pB,QAAQ3pB,EAAS6C,yBACjBomB,GAEExjB,IACFguB,EAAiBhuB,eAAiBA,EAC7BguB,EAAiBh4B,GAAG,EAAAx2B,YAAY87B,YACnCrzB,OAAyD,GAAlD+3B,EAAerpB,UAAUkoB,eAAeh1B,QAC/CmkD,EAAiBr4B,QAAQqK,EAAerpB,UAAUkoB,eAAe,MAIvEtE,EAASzM,IAAIkgC,EAAiBjwD,KAAMiwD,GACpC,MAEF,QAAS/lD,QAAO,IAMtBsyB,EAASmG,iBAAmBf,EAG5B,CACE,IAAIuuB,EAAgB3zB,EAASzJ,aAAa,EAAA3wB,YAAYwC,aACtD,GAAsB,OAAlBurD,GAA0BA,EAAc9gC,SAAWmN,EAAU,CAC/DtyB,OAAOimD,EAAc3iD,MAAQ,EAAAwd,YAAY8L,oBACzC,IAAIs5B,EAAehxD,KAAK23B,gBACHo5B,EACnB,KACAjmD,OAAOsyB,EAAS6C,yBAChBomB,GAEE2K,IAAc5zB,EAASoG,oBAAgCwtB,IAK/D,IAAIr1B,EAAqB15B,EAAU05B,mBAEnC,IAAK,IAAIhJ,EAAQC,SAAS+I,GAAqBt7B,EAAI,EAAG8b,EAAIwW,EAAMjmB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAClF,IAGI4wD,EAHAC,EAAe/xC,UAAUwT,EAAMtyB,IAC/B8wD,EAAoBrmD,OAAO6wB,EAAmBz6B,IAAIgwD,IAGtD,GAFApmD,OAAOomD,GAAgB,EAAAvlC,aAAatJ,SAEhC8uC,EAAkBt4B,GAAG,EAAAx2B,YAAYy6B,UAAW,CAC9C,IAAI6zB,EAAiBQ,EAAkBP,QAAQxzB,GAC/C6zB,EAAmBjxD,KAAK23B,gBACtBg5B,EACA,KACA,EAAA5J,UACAV,QAGF4K,EAAmBjxD,KAAK23B,gBACtBw5B,EACA,KACA,EAAApK,UACAV,GAGJ,IAAK4K,EAAkB,SACvB,IAAIv1B,EAAY0B,EAAS1B,UAKzB,GAJKA,IAAW0B,EAAS1B,UAAYA,EAAY,IAAI3zB,KAIjDkpD,EAAiBp4B,GAAG,EAAAx2B,YAAYy6B,UAClC,OAAQo0B,GACN,KAAK,EAAAvlC,aAAa2B,WAClB,KAAK,EAAA3B,aAAa4B,WAClB,KAAK,EAAA5B,aAAa+B,YAClB,KAAK,EAAA/B,aAAagC,YAAa,CAC7B,IAAI5e,EAAakiD,EAAiBz3C,UAAUzK,WACvCA,EAAWi1C,eAAe5mB,EAAS3tB,OAClC42C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAegmD,mCACfD,EAAkB90C,iBAAiBtN,WAAWrD,MAAOqD,EAAW9C,WAAYmxB,EAAS3tB,KAAKxD,aAOtG,GAAKyvB,EAAUpuB,IAAI4jD,GAUb7K,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAe2uB,oBACfk3B,EAAiBp/C,YAAYnG,YAXjC,GADAgwB,EAAUhuB,IAAIwjD,EAAcD,GACxBC,GAAgB,EAAAvlC,aAAaK,aAAeklC,GAAgB,EAAAvlC,aAAaM,YAAa,CACxF,IAAIwT,EAAQrC,EAASqG,eAChBhE,IAAOrC,EAASqG,eAAiBhE,EAAQ,IAAI,EAAA4xB,eAAej0B,IAC7D8zB,GAAgB,EAAAvlC,aAAaK,aAC/ByT,EAAMjH,QAAQy4B,EAAiBz3C,UAAUzK,aAcjD,IAAIuiD,EAAexB,EAAeyB,QAAQn0B,GAC1CtyB,QAAQwmD,GACRxB,EAAe0B,OAAOF,EAAc,GAMpC,IAAIG,EAAwB,IAAI7pD,MAChC,IAAK,IAAIvH,EAAI,EAAG8b,EAAI2zC,EAAepjD,OAAQrM,EAAI8b,IAAK9b,EAAG,CACrD,IAAIqxD,EAAU5B,EAAezvD,GACzB+8B,GAAYs0B,EAAQpuB,MAAMmuB,EAAsBzkD,KAAK0kD,GAE3D,IAAK,IAAIrxD,EAAI,EAAG8b,EAAIs1C,EAAsB/kD,OAAQrM,EAAI8b,IAAK9b,EACzDL,KAAKiwD,mBAAmBwB,EAAsBpxD,GAAIgmD,GAKtD,8BAEEpkD,EAEAia,EAEAiqC,EAEAC,EAEAwJ,EAEAvJ,EAAyBN,EAAWO,QAEpC,IAAI6C,EAAuC,KAG3C,GAAIlnD,EAAU42B,GAAG,EAAAx2B,YAAYyuB,UAS3B,KARAq4B,EAAwBnpD,KAAKqnD,qBAC3Bv8C,OAAO7I,EAAU+Z,oBACjBE,EACAiqC,EACAC,EACAwJ,EACAvJ,IAE0B,OAAO,UAInC,GAA0B,OAAtBnqC,GAA8BA,EAAkBxP,OAAS,EAO3D,OANI25C,GAAcN,EAAWO,QAC3BtmD,KAAKymB,MACH,EAAArb,eAAeu7C,sBACfiJ,EAAWlkD,MAAOzJ,EAAUitB,cAGzB,KAKX,OAAOlvB,KAAKy3B,aACVx1B,EACAknD,EACA/C,EACAC,IA3hGN,c,8ECrGA,aAMA,OAQA,OAuCA,OAIA,OASA,IAiEYsL,GAjEZ,SAAkBC,GAEhB,mBAKA,yBAEA,yCAEA,yCAEA,uBAEA,wBAEA,8BAEA,8BAEA,mCAEA,iCAKA,uDAEA,sDAEA,sDAEA,4DAEA,4DAKA,iDAKA,2CAWA,6CAzDF,CAAkB,EAAAA,YAAA,EAAAA,UAAS,KAiE3B,SAAYD,GAEV,mBAGA,2BAEA,yBAEA,yBAEA,iCAEA,4BAGA,wDAGA,oCAnBF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAwBtB,SAAkBE,GAEhB,yBAEA,mBAEA,qBANF,CAAkB,EAAAA,gBAAA,EAAAA,cAAa,KAU/B,MAAa9vB,EAmDX,cAlCA,KAAA+vB,aAAyC,KASzC,cAAcC,GACZ,IAAIjwB,EAAO,IAAIC,EAWf,OAVAD,EAAK7R,OAAS,KACd6R,EAAK5tB,MAAQ,EACb4tB,EAAKiwB,eAAiBA,EACtBjwB,EAAKkwB,cAAgB,KACrBlwB,EAAKT,WAAa,KAClBS,EAAK/yB,WAAagjD,EAAev4C,UAAUzK,WAC3C+yB,EAAK7B,wBAA0B8xB,EAAe9xB,wBAC9C6B,EAAKmwB,WAAa,GAClBnwB,EAAKowB,eAAiB,KACtBpwB,EAAKqwB,kBAAoB,KAClBrwB,EAIT,oBAAoBiwB,EAA0BG,GAC5C,IAAIpwB,EAAOC,EAAKpgC,OAAOowD,GAKvB,OAJAjwB,EAAKowB,eAAiBA,EACtBpwB,EAAKqwB,kBAAoBD,EAAehjC,aAAe,aAAegjC,EAAezxB,gBAAgBx0B,WACrG61B,EAAK/yB,WAAamjD,EAAe14C,UAAUzK,WAC3C+yB,EAAK7B,wBAA0BiyB,EAAejyB,wBACvC6B,EAMT,eACE,OAA+B,OAAxB9hC,KAAKkyD,eAId,qBACE,IAAIA,EAAiBlyD,KAAKkyD,eAC1B,OAAIA,GACGlyD,KAAK+xD,eAId,GAAGr1C,GAAyB,OAAQ1c,KAAKkU,MAAQwI,IAASA,EAE1D,MAAMA,GAAyB,OAA8B,IAAtB1c,KAAKkU,MAAQwI,GAEpD,IAAIA,GAAyB1c,KAAKkU,OAASwI,EAE3C,MAAMA,GAAyB1c,KAAKkU,QAAUwI,EAG9C,KAAK01C,GAA0B,GAC7B,IAAIC,EAAS,IAAItwB,EAoBjB,OAnBAswB,EAAOpiC,OAASjwB,KAChBqyD,EAAON,eAAiB/xD,KAAK+xD,eACzBK,EACFC,EAAOn+C,OAAqB,KAAblU,KAAKkU,OAOpBm+C,EAAOn+C,MAAQlU,KAAKkU,MACpBm+C,EAAOL,cAAgBhyD,KAAKgyD,cAC5BK,EAAOhxB,WAAarhC,KAAKqhC,YAE3BgxB,EAAOtjD,WAAa/O,KAAK+O,WACzBsjD,EAAOpyB,wBAA0BjgC,KAAKigC,wBACtCoyB,EAAOJ,WAAajyD,KAAKiyD,WAAWK,QACpCD,EAAOH,eAAiBlyD,KAAKkyD,eAC7BG,EAAOF,kBAAoBnyD,KAAKmyD,kBACzBE,EAIT,aAAa5iD,EAAYg2B,EAA0B,MACjD,IACI8sB,EAWA/wB,EAZAuwB,EAAiB/xD,KAAK+xD,eAE1B,OAAatiD,EAAK20C,gBAChB,KAAU,EAAAhe,WAAWt/B,IAAOyrD,EAAQR,EAAenxB,SAAU,MAC7D,KAAU,EAAAwF,WAAWr/B,IAAOwrD,EAAQR,EAAelxB,SAAU,MAC7D,KAAU,EAAAuF,WAAW7+B,IAAOgrD,EAAQR,EAAejxB,SAAU,MAC7D,KAAU,EAAAsF,WAAW5+B,IAAO+qD,EAAQR,EAAehxB,SAAU,MAC7D,KAAU,EAAAqF,WAAW3+B,KAAQ8qD,EAAQR,EAAe/wB,UAAW,MAC/D,KAAU,EAAAoF,WAAW1+B,OAAU6qD,EAAQR,EAAe9wB,YAAa,MACnE,KAAU,EAAAmF,WAAWQ,OAAU2rB,EAAQR,EAAe7wB,YAAa,MACnE,QAAS,MAAM,IAAIj4B,MAAM,0BAG3B,GAAIw8B,EAAQ,CACV,GAAc,OAAV8sB,GAAkBA,EAAM7lD,OAAS,EACnC,IAAK,IAAIrM,EAAI,EAAG8b,EAAIo2C,EAAM7lD,OAAQrM,EAAI8b,IAAK9b,EACzC,IAAKolC,EAAOn4B,IAAIilD,EAAMlyD,GAAGo/B,OAAQ,CAC/B+B,EAAQ+wB,EAAMlyD,GACd,IAAI8b,EAAIo2C,EAAM7lD,OAAS,EACvB,KAAOrM,EAAI8b,GAAGgD,UAAUozC,EAAMlyD,GAAKkyD,EAAY,EAANlyD,MAKzC,OAJAkyD,EAAM7lD,OAASyP,EACfqlB,EAAM/xB,KAAOA,EACb+xB,EAAMttB,MAAQ,EAAA7R,YAAYoa,KAC1Bzc,KAAKwyD,eAAehxB,EAAM/B,OAAO,GAC1B+B,EAIbA,EAAQuwB,EAAeU,SAAShjD,QAElB,OAAV8iD,GAAkBA,EAAM7lD,OAAS,IACnC80B,EAAQ12B,OAAOynD,EAAMG,QACfjjD,KAAOA,EACb+xB,EAAMttB,MAAQ,EAAA7R,YAAYoa,MAE1B+kB,EAAQuwB,EAAeU,SAAShjD,GAIpC,OADAzP,KAAKwyD,eAAehxB,EAAM/B,OAAO,GAC1B+B,EAIT,oBAAoB/xB,EAAYg2B,EAA0B,MACxD,IAAIjE,EAAQxhC,KAAK2yD,aAAaljD,EAAMg2B,GACpCjE,EAAM9zB,IAAI,EAAArL,YAAYo8B,QACtB,IAAIqzB,EAAe9xD,KAAK8xD,aAIxB,OAHKA,IAAc9xD,KAAK8xD,aAAeA,EAAe,IAAI/pD,KAC1D+pD,EAAapkD,IAAI,SAAW1N,KAAK+xD,eAAepxB,qBAAqB10B,WAAYu1B,GACjFxhC,KAAK4yD,aAAapxB,EAAM/B,MAAOkyB,EAAWkB,UACnCrxB,EAIT,cAAcA,GACZ,IAAIA,EAAM3I,GAAG,EAAAx2B,YAAY+8B,SAAzB,CACAt0B,OAAO02B,EAAM/B,OAAS,GACtB,IACI8yB,EADAR,EAAiB/xD,KAAK+xD,eAG1B,OADAjnD,OAAqB,MAAd02B,EAAM/xB,MACA+xB,EAAM/xB,KAAK20C,gBACtB,KAAU,EAAAhe,WAAWt/B,IAAK,CACxB,IAAI85B,EAAWmxB,EAAenxB,SAC1BA,EAAU2xB,EAAQ3xB,EACjBmxB,EAAenxB,SAAW2xB,EAAQ,GACvC,MAEF,KAAU,EAAAnsB,WAAWr/B,IAAK,CACxB,IAAI85B,EAAWkxB,EAAelxB,SAC1BA,EAAU0xB,EAAQ1xB,EACjBkxB,EAAelxB,SAAW0xB,EAAQ,GACvC,MAEF,KAAU,EAAAnsB,WAAW7+B,IAAK,CACxB,IAAIu5B,EAAWixB,EAAejxB,SAC1BA,EAAUyxB,EAAQzxB,EACjBixB,EAAejxB,SAAWyxB,EAAQ,GACvC,MAEF,KAAU,EAAAnsB,WAAW5+B,IAAK,CACxB,IAAIu5B,EAAWgxB,EAAehxB,SAC1BA,EAAUwxB,EAAQxxB,EACjBgxB,EAAehxB,SAAWwxB,EAAQ,GACvC,MAEF,KAAU,EAAAnsB,WAAW3+B,KAAM,CACzB,IAAIu5B,EAAY+wB,EAAe/wB,UAC3BA,EAAWuxB,EAAQvxB,EAClB+wB,EAAe/wB,UAAYuxB,EAAQ,GACxC,MAEF,KAAU,EAAAnsB,WAAW1+B,OAAQ,CAC3B,IAAIu5B,EAAc8wB,EAAe9wB,YAC7BA,EAAasxB,EAAQtxB,EACpB8wB,EAAe9wB,YAAcsxB,EAAQ,GAC1C,MAEF,KAAU,EAAAnsB,WAAWQ,OAAQ,CAC3B,IAAI1F,EAAc6wB,EAAe7wB,YAC7BA,EAAaqxB,EAAQrxB,EACpB6wB,EAAe7wB,YAAcqxB,EAAQ,GAC1C,MAEF,QAAS,MAAM,IAAItpD,MAAM,0BAE3B6B,OAAO02B,EAAM/B,OAAS,GACtB8yB,EAAMvlD,KAAKw0B,IAIb,eAAe5gC,GACb,IAAIkxD,EAAe9xD,KAAK8xD,aACxB,OAAqB,OAAjBA,GAAyBA,EAAaxkD,IAAI1M,GAAckK,OAAOgnD,EAAa5wD,IAAIN,IAC7E,KAIT,eAAeA,EAAc6O,EAAYg2B,EAA0B,MACjE,IAAIqtB,EAAc9yD,KAAK2yD,aAAaljD,EAAMg2B,GACtCqsB,EAAe9xD,KAAK8xD,aAKxB,OAJKA,EACAhnD,QAAQgnD,EAAaxkD,IAAI1M,IADXZ,KAAK8xD,aAAeA,EAAe,IAAI/pD,IAE1D+qD,EAAYplD,IAAI,EAAArL,YAAYo8B,QAC5BqzB,EAAapkD,IAAI9M,EAAMkyD,GAChBA,EAIT,eAAelyD,EAAc6O,EAAYgwB,EAAYmwB,EAA0B,MAC7E,GAAK5vD,KAAK8xD,aACL,CACH,IAAIiB,EAAgB/yD,KAAK8xD,aAAa5wD,IAAIN,GAC1C,GAAImyD,EAgBF,OAfInD,IACGmD,EAAclhD,YAAYnG,MAAMM,OAAOgnD,SAQ1ChzD,KAAK+xD,eAAex0B,QAAQ9W,MAC1B,EAAArb,eAAemuB,uBACfq2B,EAAWlkD,MAAO9K,GATpBZ,KAAK+xD,eAAex0B,QAAQjE,aAC1B,EAAAluB,eAAemuB,uBACfq2B,EAAWlkD,MACXqnD,EAAclhD,YAAYjR,KAAK8K,MAC/B9K,IASCmyD,OAnBa/yD,KAAK8xD,aAAe,IAAI/pD,IAsBhD+C,OAAO20B,EAAQz/B,KAAK+xD,eAAe5xB,cAAczzB,QACjD,IAAIumD,EAAc,IAAI,EAAAzzB,MAAM5+B,EAAM6+B,EAAOhwB,EAAMzP,KAAK+xD,gBAGpD,OADA/xD,KAAK8xD,aAAapkD,IAAI9M,EAAMqyD,GACrBA,EAIT,sBACE,IAAInB,EAAe9xD,KAAK8xD,aACxB,GAAIA,EAEF,IAAK,IAAI16B,EAAUC,WAAWy6B,GAAezxD,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAElF,GADY8e,UAAUiY,EAAQ/2B,IACpBw4B,GAAG,EAAAx2B,YAAYo8B,QACvB,OAAO,EAIb,OAAO,EAIT,mBACE,IAAIqzB,EAAe9xD,KAAK8xD,aACxB,GAAIA,EAAc,CAEhB,IAAK,IAAI16B,EAAUC,WAAWy6B,GAAezxD,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAClF,IAAImhC,EAAQriB,UAAUiY,EAAQ/2B,IAC1BmhC,EAAM3I,GAAG,EAAAx2B,YAAYo8B,SACvBz+B,KAAKkzD,cAAc1xB,GAGvBxhC,KAAK8xD,aAAe,MAKxB,YAAYlxD,GACV,IAAI88B,EAAuB19B,KAC3B,EAAG,CACD,IAAImzD,EAAQz1B,EAAQo0B,aACpB,GAAc,OAAVqB,GAAkBA,EAAM7lD,IAAI1M,GAAO,OAAOkK,OAAOqoD,EAAMjyD,IAAIN,IAC/D88B,EAAUA,EAAQzN,aACXyN,GACT,IAAIwC,EAAelgC,KAAK+xD,eAAe7xB,aACvC,OAAIA,EAAa5yB,IAAI1M,GAAckK,OAAOo1B,EAAah/B,IAAIN,IACpD,KAIT,OAAOA,GACL,IAAIyR,EAAUrS,KAAKguD,YAAYptD,GAC/B,OAAIyR,GACGrS,KAAK2oD,eAAe7pB,OAAOl+B,GAIpC,YAAY6+B,EAAY/iB,EAAkB02C,GAAyB,GACjE,GAAI3zB,EAAQ,EAAG,OAAO2zB,EACtB,IAAInB,EAAajyD,KAAKiyD,WACtB,OAAOxyB,EAAQwyB,EAAWvlD,SAAWyS,UAAU8yC,EAAWxyB,IAAU/iB,IAASA,EAI/E,eAAe+iB,EAAY/iB,EAAkB02C,GAAyB,GACpE,GAAI3zB,EAAQ,EAAG,OAAO2zB,EACtB,IAAInB,EAAajyD,KAAKiyD,WACtB,OAAOxyB,EAAQwyB,EAAWvlD,QAAmD,IAAxCyS,UAAU8yC,EAAWxyB,IAAU/iB,GAItE,aAAa+iB,EAAY/iB,GACvB,KAAI+iB,EAAQ,GAAZ,CACA,IAAIwyB,EAAajyD,KAAKiyD,WAClB/9C,EAAQurB,EAAQwyB,EAAWvlD,OAASyS,UAAU8yC,EAAWxyB,IAAU,EACvEwyB,EAAWxyB,GAASvrB,EAAQwI,GAI9B,eAAe+iB,EAAY/iB,GACzB,KAAI+iB,EAAQ,GAAZ,CACA,IAAIwyB,EAAajyD,KAAKiyD,WAClB/9C,EAAQurB,EAAQwyB,EAAWvlD,OAASyS,UAAU8yC,EAAWxyB,IAAU,EACvEwyB,EAAWxyB,GAASvrB,GAASwI,GAI/B,iBACE,IAAIq1C,EAAiB/xD,KAAK+xD,eACtBtiC,EAAKsiC,EAAe5wB,cACpBkyB,EAAQtB,EAAe3wB,WACtBiyB,EACAA,EAAMrmD,KAAKyiB,GADJsiC,EAAe3wB,WAAa,CAAE3R,GAE1C,IAAI9Z,EAAQ8Z,EAAGxjB,WAEf,OADA8lD,EAAe1wB,WAAa1rB,EACrBA,EAIT,gBACE,IAAIo8C,EAAiB/xD,KAAK+xD,eACtBsB,EAAQvoD,OAAOinD,EAAe3wB,YAC9B10B,EAAS5B,OAAOuoD,EAAM3mD,QAC1B2mD,EAAMX,MACFhmD,EAAS,EACXqlD,EAAe1wB,WAAagyB,EAAM3mD,EAAS,GAAGT,YAE9C8lD,EAAe1wB,WAAa,KAC5B0wB,EAAe3wB,WAAa,MAKhC,QAAQoE,GACN16B,OAAO06B,EAAMusB,gBAAkB/xD,KAAK+xD,gBACpCjnD,OAAO06B,EAAMvV,QAAUjwB,MACvB,IAAIszD,EAAa9tB,EAAMtxB,MAGnBlU,KAAKqhC,YAAcmE,EAAMnE,aACV,KAAbiyB,IACFA,IAAc,KAEhBA,IAAc,MAEZtzD,KAAKgyD,eAAiBxsB,EAAMwsB,gBAC9BsB,IAAc,MAGhBtzD,KAAKkU,MAAQlU,KAAKkU,MAAQo/C,EAC1BtzD,KAAKiyD,WAAazsB,EAAMysB,WAI1B,cAAczsB,EAAa+tB,EAAA,GAEzB,OADAzoD,OAAO06B,EAAMusB,gBAAkB/xD,KAAK+xD,gBAC5BwB,GACN,KAAK,EAAoBvzD,KAAKwzD,QAAQhuB,GACtC,KAAK,EAAqB,OAQ5B,IAAIiuB,EAAYzzD,KAAKkU,MACjBo/C,EAAa9tB,EAAMtxB,MACnBw/C,EAAW,EAGbA,GADc,EAAZD,EACU,EACU,EAAbH,EACG,IAE2B,KAA1BG,EAAYH,GAI3BI,GAAYD,EAAYH,EAAa,EACrCI,GAAYD,EAAYH,EAAa,EAGnCI,GADc,EAAZD,EACU,EACU,EAAbH,EACG,KAE2B,MAA1BG,EAAYH,GAGX,GAAZG,EACFC,GAAY,GACHluB,EAAMnE,YAAcrhC,KAAKqhC,WAEhCqyB,GADe,GAAbJ,EACU,KAE2B,MAA1BG,EAAYH,GAG3BI,GAAwB,KAAZD,EAGE,GAAZA,EACFC,GAAY,GACHluB,EAAMwsB,gBAAkBhyD,KAAKgyD,cAEpC0B,GADe,GAAbJ,EACU,KAE2B,MAA1BG,EAAYH,GAG3BI,GAAwB,KAAZD,EAGE,GAAZA,EAEAC,GADe,GAAbJ,EACU,GAEA,KAEQ,GAAbA,IACTI,GAAY,MAIdA,GAAYD,EAAYH,EAAa,IAErB,IAAZG,IACFC,GAAY,KAGd1zD,KAAKkU,MAAQw/C,EAAwB,MAAZD,EAEzB,IAAIE,EAAiB3zD,KAAKiyD,WACtB2B,EAAoBD,EAAejnD,OACnCmnD,EAAkBruB,EAAMysB,WACxB6B,EAAqBD,EAAgBnnD,OACrCqnD,EAAgBC,IAAIJ,EAAmBE,GAC3C,IAAK,IAAIzzD,EAAI,EAAGA,EAAI0zD,IAAiB1zD,EAAG,CACtC,IAAIozD,EAAYpzD,EAAIuzD,EAAoBD,EAAetzD,GAAK,EACxDizD,EAAajzD,EAAIyzD,EAAqBD,EAAgBxzD,GAAK,EAC3DqzD,EAAWD,EAAYH,GACzB3B,EAAWsC,SACXtC,EAAWuC,QACXvC,EAAWzE,QACXyE,EAAWwC,aAETV,EAAY9B,EAAWkB,SACrBS,EAAa3B,EAAWkB,SAC1Ba,GAAY/B,EAAWkB,SAEvBa,GAAY/B,EAAWyC,uBAEhBd,EAAa3B,EAAWkB,SACjCa,GAAY/B,EAAWyC,uBAEvBV,IAAaD,EAAYH,GAAc3B,EAAWyC,uBAEpDT,EAAetzD,GAAKqzD,GAKxB,cAAcpiD,EAAYC,GACxBzG,OAAOwG,EAAKygD,gBAAkBxgD,EAAMwgD,gBACpCjnD,OAAOwG,EAAKygD,gBAAkB/xD,KAAK+xD,gBAInC,IAAIsC,EAAY/iD,EAAK4C,MACjBogD,EAAa/iD,EAAM2C,MACnBw/C,EAAW,EAIXA,GAFY,EAAZW,EACe,EAAbC,EACU,EAEA,IAEQ,EAAbA,EACG,IAE2B,KAA1BD,EAAYC,GAGV,EAAZD,GAAwD,EAAbC,IAC9CZ,GAAY,GAGG,EAAZW,GAAwD,EAAbC,IAC9CZ,GAAY,GAKVA,GAFY,EAAZW,EACe,EAAbC,EACU,EAEA,KAEQ,EAAbA,EACG,KAE2B,MAA1BD,EAAYC,GAKvBZ,GAFY,GAAZW,EACe,GAAbC,EACU,GAEA,KAEQ,GAAbA,EACG,KAE2B,MAA1BD,EAAYC,GAKvBZ,GAFY,GAAZW,EACe,GAAbC,EACU,GAEA,KAEQ,GAAbA,EACG,KAE2B,MAA1BD,EAAYC,GAKvBZ,GAFY,GAAZW,EACe,GAAbC,EACU,GAEA,KAEQ,GAAbA,EACG,KAE2B,MAA1BD,EAAYC,GAGV,IAAZD,GAAoD,IAAbC,IAC1CZ,GAAY,KAGG,IAAZW,GAAmD,IAAbC,IACzCZ,GAAY,KAGd1zD,KAAKkU,MAAQw/C,EAAyB,MAAb1zD,KAAKkU,MAE9B,IAAIy/C,EAAiB3zD,KAAKiyD,WAC1B,GAAgB,IAAZoC,GACF,KAAmB,IAAbC,GAAoC,CACxC,IAAIC,EAAkBhjD,EAAM0gD,WAC5B,IAAK,IAAI5xD,EAAI,EAAG8b,EAAIo4C,EAAgB7nD,OAAQrM,EAAI8b,IAAK9b,EACnDszD,EAAetzD,GAAKk0D,EAAgBl0D,SAGnC,GAAiB,IAAbi0D,EAAmC,CAC5C,IAAIE,EAAiBljD,EAAK2gD,WAC1B,IAAK,IAAI5xD,EAAI,EAAG8b,EAAIq4C,EAAe9nD,OAAQrM,EAAI8b,IAAK9b,EAClDszD,EAAetzD,GAAKm0D,EAAen0D,OAEhC,CACL,IAAIm0D,EAAiBljD,EAAK2gD,WACtBwC,EAAoBD,EAAe9nD,OACnC6nD,EAAkBhjD,EAAM0gD,WACxByC,EAAqBH,EAAgB7nD,OACrCqnD,EAAgBC,IAAIS,EAAmBC,GAC3C,IAAK,IAAIr0D,EAAI,EAAGA,EAAI0zD,IAAiB1zD,EAAG,CACtC,IAAIg0D,EAAYh0D,EAAIo0D,EAAoBD,EAAen0D,GAAK,EACxDi0D,EAAaj0D,EAAIq0D,EAAqBH,EAAgBl0D,GAAK,EAC3DqzD,EAAWW,EAAYC,GACzB3C,EAAWsC,SACXtC,EAAWuC,QACXvC,EAAWzE,QACXyE,EAAWwC,aAETE,EAAY1C,EAAWkB,SACrByB,EAAa3C,EAAWkB,SAC1Ba,GAAY/B,EAAWkB,SAEvBa,GAAY/B,EAAWyC,uBAEhBE,EAAa3C,EAAWkB,SACjCa,GAAY/B,EAAWyC,uBAEvBV,IAAaW,EAAYC,GAAc3C,EAAWyC,uBAEpDT,EAAetzD,GAAKqzD,IAM1B,kCAAkCiB,EAAcC,GAC9C,IAAIhB,EAAoBe,EAAO1C,WAAWvlD,OACtConD,EAAqBc,EAAM3C,WAAWvlD,OACtCqlD,EAAiB4C,EAAO5C,eAC5BjnD,OAAOinD,IAAmB6C,EAAM7C,gBAChC,IAAI5xB,EAAgB4xB,EAAe5xB,cACnCr1B,OAAOq1B,IAAkBy0B,EAAM7C,eAAe5xB,eAC9C,IAAK,IAAI9/B,EAAI,EAAG8b,EAAI04C,IAASjB,EAAmBE,GAAqBzzD,EAAI8b,IAAK9b,EAAG,CAC/E,IACIoP,EADQ0wB,EAAc9/B,GACToP,KACjB,GAAIA,EAAKopB,GAAG,KACN87B,EAAOG,YAAYz0D,EAAGsxD,EAAWuC,WAAaU,EAAME,YAAYz0D,EAAGsxD,EAAWuC,SAChF,OAAO,EAGX,GAAIzkD,EAAKopB,GAAG,MACN87B,EAAOG,YAAYz0D,EAAGsxD,EAAWzE,WAAa0H,EAAME,YAAYz0D,EAAGsxD,EAAWzE,SAChF,OAAO,EAIb,OAAO,EAIT,gBAAgB1nB,GACd,IAAIouB,EAAoB5zD,KAAKiyD,WAAWvlD,OACpConD,EAAqBtuB,EAAMysB,WAAWvlD,OAC1C,IAAK,IAAIrM,EAAI,EAAG8b,EAAI04C,IAASjB,EAAmBE,GAAqBzzD,EAAI8b,IAAK9b,EACxEL,KAAK80D,YAAYz0D,EAAGsxD,EAAWuC,UAAY1uB,EAAMsvB,YAAYz0D,EAAGsxD,EAAWuC,UAC7El0D,KAAKwyD,eAAenyD,EAAGsxD,EAAWuC,SAEhCl0D,KAAK80D,YAAYz0D,EAAGsxD,EAAWzE,UAAY1nB,EAAMsvB,YAAYz0D,EAAGsxD,EAAWzE,UAC7EltD,KAAKwyD,eAAenyD,EAAGsxD,EAAWzE,SAEpCpiD,OAGE9K,KAAK+0D,eAAe10D,EAAGsxD,EAAWqD,eAAiBxvB,EAAMuvB,eAAe10D,EAAGsxD,EAAWqD,eAM5F,UAAU7rB,EAAqB15B,GAC7B,IAAKA,EAAKopB,GAAG,KAAqB,OAAO,EAIzC,OAAQ,EAAA2S,gBAAgBrC,IACtB,KAAK,EAAA7C,aAAa8X,SAAU,CAC1B,IAAK,EAAA6W,WAAW9rB,GAAO,MACvB,IAAI3H,EAAQxhC,KAAK+xD,eAAe5xB,cAAc,EAAA+0B,iBAAiB/rB,IAC/D,OAAQ3H,EAAM/xB,KAAKopB,GAAG,MAAuB74B,KAAK80D,YAAYtzB,EAAM/B,MAAOkyB,EAAWzE,SAAS,GAEjG,KAAK,EAAA5mB,aAAagQ,SAAU,CAC1B,IAAI9U,EAAQxhC,KAAK+xD,eAAe5xB,cAAc,EAAAg1B,iBAAiBhsB,IAC/D,OAAQ3H,EAAM/xB,KAAKopB,GAAG,MAAuB74B,KAAK80D,YAAYtzB,EAAM/B,MAAOkyB,EAAWzE,SAAS,IAGnG,OAAO,EAIT,qBAEE/jB,EAEAisB,EAAmB,MAYnB,OAAQ,EAAA5pB,gBAAgBrC,IACtB,KAAK,EAAA7C,aAAa8X,SAAU,CAC1B,IAAK,EAAA6W,WAAW9rB,GAAO,MACvB,IAAI3H,EAAQxhC,KAAK+xD,eAAe5xB,cAAc,EAAA+0B,iBAAiB/rB,IAC1DisB,IAAOA,EAAIN,YAAYtzB,EAAM/B,MAAOkyB,EAAWzE,UAClDltD,KAAK4yD,aAAapxB,EAAM/B,MAAOkyB,EAAWzE,SAE5CltD,KAAKq1D,qBAAqB,EAAAC,iBAAiBnsB,GAAOisB,GAClD,MAEF,KAAK,EAAA9uB,aAAagQ,SAAU,CAC1B,IAAI9U,EAAQxhC,KAAK+xD,eAAe5xB,cAAc,EAAAg1B,iBAAiBhsB,IAC1DisB,IAAOA,EAAIN,YAAYtzB,EAAM/B,MAAOkyB,EAAWzE,UAClDltD,KAAK4yD,aAAapxB,EAAM/B,MAAOkyB,EAAWzE,SAE5C,MAEF,KAAK,EAAA5mB,aAAasX,GAAI,CACpB,IAAI1lC,EAAU,EAAAq9C,WAAWpsB,GACzB,IAAKjxB,EAAS,MACV,EAAAszB,gBAAgBtzB,IAAY,EAAAouB,aAAa0P,QAIxC,EAAApK,kBAAkB1zB,IAAY,EAAAkuB,WAAWt/B,KAAoC,GAA7B,EAAA0uD,iBAAiBt9C,IACjE,EAAA0zB,kBAAkB1zB,IAAY,EAAAkuB,WAAWr/B,KAAuC,GAAhC,EAAA0uD,oBAAoBv9C,IAAkD,GAAjC,EAAAw9C,qBAAqBx9C,MAE3GlY,KAAKq1D,qBAAqB,EAAAM,eAAexsB,GAAOisB,GAChDp1D,KAAKq1D,qBAAqB,EAAAO,UAAUzsB,GAAOisB,IAG/C,MAEF,KAAK,EAAA9uB,aAAa6Q,MAChB,OAAQ,EAAA0e,WAAW1sB,IACjB,KAAK,EAAArC,QAAQgvB,OACb,KAAK,EAAAhvB,QAAQivB,OACX/1D,KAAKg2D,sBAAsB,EAAAC,cAAc9sB,GAAOisB,GAIpD,MAEF,KAAK,EAAA9uB,aAAagR,OAChB,OAAQ,EAAA4e,YAAY/sB,IAClB,KAAK,EAAApC,SAASovB,MAAO,CACnB,IAAI7kD,EAAO,EAAA8kD,cAAcjtB,GACrB53B,EAAQ,EAAA8kD,eAAeltB,GACvB,EAAAqC,gBAAgBl6B,IAAS,EAAAg1B,aAAa0P,OAAmC,GAA1B,EAAAwf,iBAAiBlkD,GAClEtR,KAAKq1D,qBAAqB9jD,EAAO6jD,GACxB,EAAA5pB,gBAAgBj6B,IAAU,EAAA+0B,aAAa0P,OAAoC,GAA3B,EAAAwf,iBAAiBjkD,IAC1EvR,KAAKq1D,qBAAqB/jD,EAAM8jD,GAElC,MAEF,KAAK,EAAAruB,SAASuvB,MAAO,CACnB,IAAIhlD,EAAO,EAAA8kD,cAAcjtB,GACrB53B,EAAQ,EAAA8kD,eAAeltB,GACvB,EAAAqC,gBAAgBl6B,IAAS,EAAAg1B,aAAa0P,OAAuC,GAA7B,EAAAyf,oBAAoBnkD,IAA4C,GAA9B,EAAAokD,qBAAqBpkD,GAEhG,EAAAk6B,gBAAgBj6B,IAAU,EAAA+0B,aAAa0P,OAAwC,GAA9B,EAAAyf,oBAAoBlkD,IAA8C,GAA/B,EAAAmkD,qBAAqBnkD,IAClHvR,KAAKq1D,qBAAqB/jD,EAAM8jD,GAFhCp1D,KAAKq1D,qBAAqB9jD,EAAO6jD,GAInC,MAEF,KAAK,EAAAruB,SAASwvB,MAAO,CACnB,IAAIjlD,EAAO,EAAA8kD,cAAcjtB,GACrB53B,EAAQ,EAAA8kD,eAAeltB,GACvB,EAAAqC,gBAAgBl6B,IAAS,EAAAg1B,aAAa0P,OAAmC,GAA1B,EAAAwf,iBAAiBlkD,GAClEtR,KAAKq1D,qBAAqB9jD,EAAO6jD,GACxB,EAAA5pB,gBAAgBj6B,IAAU,EAAA+0B,aAAa0P,OAAoC,GAA3B,EAAAwf,iBAAiBjkD,IAC1EvR,KAAKq1D,qBAAqB/jD,EAAM8jD,GAElC,MAEF,KAAK,EAAAruB,SAASyvB,MAAO,CACnB,IAAIllD,EAAO,EAAA8kD,cAAcjtB,GACrB53B,EAAQ,EAAA8kD,eAAeltB,GACvB,EAAAqC,gBAAgBl6B,IAAS,EAAAg1B,aAAa0P,OAAsC,GAA7B,EAAAyf,oBAAoBnkD,IAA4C,GAA9B,EAAAokD,qBAAqBpkD,GACxGtR,KAAKq1D,qBAAqB9jD,EAAO6jD,GACxB,EAAA5pB,gBAAgBj6B,IAAU,EAAA+0B,aAAa0P,OAAuC,GAA9B,EAAAyf,oBAAoBlkD,IAA8C,GAA/B,EAAAmkD,qBAAqBnkD,IACjHvR,KAAKq1D,qBAAqB/jD,EAAM8jD,GAElC,OAGJ,MAEF,KAAK,EAAA9uB,aAAa0X,KACL,EAAAyY,cAActtB,IACXnpC,KAAK+xD,eAAex0B,QACd3G,eAAe1H,cAEjClvB,KAAKq1D,qBAAqB,EAAAqB,eAAevtB,EAAM,GAAIisB,GAErD,OAMN,sBAEEjsB,EAEAisB,EAAmB,MAGnB,OAAQ,EAAA5pB,gBAAgBrC,IACtB,KAAK,EAAA7C,aAAa6Q,MAChB,OAAQ,EAAA0e,WAAW1sB,IACjB,KAAK,EAAArC,QAAQgvB,OACb,KAAK,EAAAhvB,QAAQivB,OACX/1D,KAAKq1D,qBAAqB,EAAAY,cAAc9sB,GAAOisB,GAInD,MAEF,KAAK,EAAA9uB,aAAasX,GAAI,CACpB,IAAI3lC,EAAS,EAAA29C,UAAUzsB,GACvB,GAAI,EAAAqC,gBAAgBvzB,IAAW,EAAAquB,aAAa0P,MAAO,CAEjD,IADc,EAAAuf,WAAWpsB,GACX,MAGd,IAAIwtB,EAAW,EAAA/qB,kBAAkB3zB,IAE9B0+C,GAAY,EAAAvwB,WAAWt/B,KAAmC,GAA5B,EAAA0uD,iBAAiBv9C,IAC/C0+C,GAAY,EAAAvwB,WAAWr/B,MAAuC,GAA/B,EAAA0uD,oBAAoBx9C,IAAgD,GAAhC,EAAAy9C,qBAAqBz9C,OAEzFjY,KAAKg2D,sBAAsB,EAAAL,eAAexsB,GAAOisB,GACjDp1D,KAAKg2D,sBAAsB,EAAAT,WAAWpsB,GAAOisB,IAIjD,MAEF,KAAK,EAAA9uB,aAAagR,OAChB,OAAQ,EAAA4e,YAAY/sB,IAElB,KAAK,EAAApC,SAASovB,MAAO,CACnB,IAAI7kD,EAAO,EAAA8kD,cAAcjtB,GACrB53B,EAAQ,EAAA8kD,eAAeltB,GACvB,EAAAqC,gBAAgBl6B,IAAS,EAAAg1B,aAAa0P,OAAmC,GAA1B,EAAAwf,iBAAiBlkD,GAClEtR,KAAKq1D,qBAAqB9jD,EAAO6jD,GACxB,EAAA5pB,gBAAgBj6B,IAAU,EAAA+0B,aAAa0P,OAAoC,GAA3B,EAAAwf,iBAAiBjkD,IAC1EvR,KAAKq1D,qBAAqB/jD,EAAM8jD,GAElC,MAEF,KAAK,EAAAruB,SAASuvB,MAAO,CACnB,IAAIhlD,EAAO,EAAA8kD,cAAcjtB,GACrB53B,EAAQ,EAAA8kD,eAAeltB,GACvB,EAAAqC,gBAAgBl6B,IAAS,EAAAg1B,aAAa0P,OAAsC,GAA7B,EAAAyf,oBAAoBnkD,IAA4C,GAA9B,EAAAokD,qBAAqBpkD,GACxGtR,KAAKq1D,qBAAqB9jD,EAAO6jD,GACxB,EAAA5pB,gBAAgBj6B,IAAU,EAAA+0B,aAAa0P,OAAuC,GAA9B,EAAAyf,oBAAoBlkD,IAA8C,GAA/B,EAAAmkD,qBAAqBnkD,IACjHvR,KAAKq1D,qBAAqB/jD,EAAM8jD,GAElC,MAEF,KAAK,EAAAruB,SAASwvB,MAAO,CACnB,IAAIjlD,EAAO,EAAA8kD,cAAcjtB,GACrB53B,EAAQ,EAAA8kD,eAAeltB,GACvB,EAAAqC,gBAAgBl6B,IAAS,EAAAg1B,aAAa0P,OAAmC,GAA1B,EAAAwf,iBAAiBlkD,GAClEtR,KAAKq1D,qBAAqB9jD,EAAO6jD,GACxB,EAAA5pB,gBAAgBj6B,IAAU,EAAA+0B,aAAa0P,OAAoC,GAA3B,EAAAwf,iBAAiBjkD,IAC1EvR,KAAKq1D,qBAAqB/jD,EAAM8jD,GAElC,MAEF,KAAK,EAAAruB,SAASyvB,MAAO,CACnB,IAAIllD,EAAO,EAAA8kD,cAAcjtB,GACrB53B,EAAQ,EAAA8kD,eAAeltB,GACvB,EAAAqC,gBAAgBl6B,IAAS,EAAAg1B,aAAa0P,OAAuC,GAA7B,EAAAyf,oBAAoBnkD,IAA4C,GAA9B,EAAAokD,qBAAqBpkD,GAEhG,EAAAk6B,gBAAgBj6B,IAAU,EAAA+0B,aAAa0P,OAAwC,GAA9B,EAAAyf,oBAAoBlkD,IAA8C,GAA/B,EAAAmkD,qBAAqBnkD,IAClHvR,KAAKq1D,qBAAqB/jD,EAAM8jD,GAFhCp1D,KAAKq1D,qBAAqB9jD,EAAO6jD,GAInC,SAaV,YAAYjsB,EAAqB15B,GAM/B,GAHA3E,OAAO2E,GAAQ,EAAA8gB,KAAKG,OAGfjhB,EAAKopB,GAAG,IAAsC,OAAO,EAE1D,IAAI1jB,EACJ,OAAQ,EAAAq2B,gBAAgBrC,IAGtB,KAAK,EAAA7C,aAAagQ,SAAU,CAC1B,IAAI9U,EAAQxhC,KAAK+xD,eAAe5xB,cAAc,EAAAg1B,iBAAiBhsB,IAC/D,OAAQnpC,KAAK80D,YAAYtzB,EAAM/B,MAAOkyB,EAAWuC,SAAS,IACnD0C,EAAsBp1B,EAAM/xB,KAAMA,GAI3C,KAAK,EAAA62B,aAAa8X,SAEhB,OADAtzC,OAAO,EAAAmqD,WAAW9rB,IACXnpC,KAAK62D,YAAY,EAAAvB,iBAAiBnsB,GAAO15B,GAIlD,KAAK,EAAA62B,aAAakQ,UAAW,CAE3B,IAAI1d,EAAShuB,OAAO9K,KAAK+xD,eAAex0B,QAAQnP,eAAeltB,IAAI4J,OAAO,EAAAgsD,iBAAiB3tB,MAE3F,OADAr+B,OAAOguB,EAAO1qB,MAAQ,EAAAwd,YAAY7O,QAC3B65C,EAA+B99B,EAAQrpB,KAAMA,GAGtD,KAAK,EAAA62B,aAAagR,OAChB,OAAQ,EAAA4e,YAAY/sB,IAGlB,KAAK,EAAApC,SAASovB,MACd,KAAK,EAAApvB,SAASuvB,MACd,KAAK,EAAAvvB,SAASgwB,MACd,KAAK,EAAAhwB,SAASiwB,MACd,KAAK,EAAAjwB,SAASwvB,MACd,KAAK,EAAAxvB,SAASyvB,MACd,KAAK,EAAAzvB,SAASkwB,MACd,KAAK,EAAAlwB,SAASmwB,MACd,KAAK,EAAAnwB,SAASowB,MACd,KAAK,EAAApwB,SAASqwB,MACd,KAAK,EAAArwB,SAASswB,MACd,KAAK,EAAAtwB,SAASuwB,MACd,KAAK,EAAAvwB,SAASwwB,MACd,KAAK,EAAAxwB,SAASywB,MACd,KAAK,EAAAzwB,SAAS0wB,MACd,KAAK,EAAA1wB,SAAS2wB,MACd,KAAK,EAAA3wB,SAAS4wB,MACd,KAAK,EAAA5wB,SAAS6wB,MACd,KAAK,EAAA7wB,SAAS8wB,MACd,KAAK,EAAA9wB,SAAS+wB,MACd,KAAK,EAAA/wB,SAASgxB,MACd,KAAK,EAAAhxB,SAASixB,MACd,KAAK,EAAAjxB,SAASkxB,MACd,KAAK,EAAAlxB,SAASmxB,MACd,KAAK,EAAAnxB,SAASoxB,MACd,KAAK,EAAApxB,SAASqxB,MACd,KAAK,EAAArxB,SAASsxB,MACd,KAAK,EAAAtxB,SAASuxB,MACd,KAAK,EAAAvxB,SAASwxB,MACd,KAAK,EAAAxxB,SAASyxB,MACd,KAAK,EAAAzxB,SAAS0xB,MACd,KAAK,EAAA1xB,SAAS2xB,MAAO,OAAO,EAG5B,KAAK,EAAA3xB,SAAS4xB,OACZ,QAEI,EAAAntB,gBAAgBr2B,EAAU,EAAAihD,cAAcjtB,KAAU,EAAA7C,aAAa0P,QAEhC,GAA7B,EAAAwf,iBAAiBrgD,IAEc,GAA7B,EAAAqgD,iBAAiBrgD,KAChBnV,KAAK62D,YAAY,EAAAR,eAAeltB,GAAO15B,KAI5C,EAAA+7B,gBAAgBr2B,EAAU,EAAAkhD,eAAeltB,KAAU,EAAA7C,aAAa0P,QAEjC,GAA7B,EAAAwf,iBAAiBrgD,IAEc,GAA7B,EAAAqgD,iBAAiBrgD,KAChBnV,KAAK62D,YAAY,EAAAT,cAAcjtB,GAAO15B,KASjD,KAAK,EAAAs3B,SAAS6xB,OAGZ,QAGM,EAAAptB,gBAAgBr2B,EAAU,EAAAihD,cAAcjtB,KAAU,EAAA7C,aAAa0P,OAC/D,EAAAwf,iBAAiBrgD,IAAY1F,EAAKopD,wBAAwB,EAAAtoC,KAAKntB,OAC3DpD,KAAK62D,YAAY1hD,EAAS1F,IAG9B,EAAA+7B,gBAAgBr2B,EAAU,EAAAkhD,eAAeltB,KAAU,EAAA7C,aAAa0P,OAChE,EAAAwf,iBAAiBrgD,IAAY1F,EAAKopD,wBAAwB,EAAAtoC,KAAKntB,OAC3DpD,KAAK62D,YAAY1hD,EAAS1F,IAMtC,KAAK,EAAAs3B,SAAS+xB,OAAQ,CACpB,IAAIjqB,EAAQ,GAAKp/B,EAAK69B,KACtB,OAAO,EAAA9B,gBAAgBr2B,EAAU,EAAAkhD,eAAeltB,KAAU,EAAA7C,aAAa0P,OAChE,EAAAwf,iBAAiBrgD,GAAW05B,EAIrC,KAAK,EAAA9H,SAASgyB,OAAQ,CACpB,IAAIlqB,EAAQ,GAAKp/B,EAAK69B,KACtB,OAAOttC,KAAK62D,YAAY,EAAAT,cAAcjtB,GAAO15B,KAC3C,EAAA+7B,gBAAgBr2B,EAAU,EAAAkhD,eAAeltB,KAAU,EAAA7C,aAAa0P,OAChE,EAAAwf,iBAAiBrgD,GAAW05B,GAMhC,KAAK,EAAA9H,SAASiyB,OAAQ,CACpB,IAAInqB,EAAQ,GAAKp/B,EAAK69B,KACtB,OAAO79B,EAAKopB,GAAG,KAET,EAAA2S,gBAAgBr2B,EAAU,EAAAkhD,eAAeltB,KAAU,EAAA7C,aAAa0P,OAChE,EAAAwf,iBAAiBrgD,GAAW05B,GAE9B7uC,KAAK62D,YAAY,EAAAT,cAAcjtB,GAAO15B,MACpC,EAAA+7B,gBAAgBr2B,EAAU,EAAAkhD,eAAeltB,KAAU,EAAA7C,aAAa0P,OAChE,EAAAwf,iBAAiBrgD,IAAY05B,GAKrC,KAAK,EAAA9H,SAASkyB,OACd,KAAK,EAAAlyB,SAASmyB,OACd,KAAK,EAAAnyB,SAASoyB,OACZ,OAAOn5D,KAAK62D,YAAY,EAAAT,cAAcjtB,GAAO15B,IACtCzP,KAAK62D,YAAY,EAAAR,eAAeltB,GAAO15B,GAGlD,MAGF,KAAK,EAAA62B,aAAa6Q,MAChB,OAAQ,EAAA0e,WAAW1sB,IAGjB,KAAK,EAAArC,QAAQgvB,OACb,KAAK,EAAAhvB,QAAQivB,OAAQ,OAAO,EAG5B,KAAK,EAAAjvB,QAAQsyB,OACb,KAAK,EAAAtyB,QAAQuyB,OACb,KAAK,EAAAvyB,QAAQwyB,UAAW,OAAO7pD,EAAK69B,KAAO,EAE7C,MAIF,KAAK,EAAAhH,aAAa0P,MAAO,CACvB,IAAI10C,EAAa,EACjB,OAAa,EAAAsqC,kBAAkBzC,IAC7B,KAAU,EAAA/C,WAAWt/B,IAAOxF,EAAQ,EAAAk0D,iBAAiBrsB,GAAO,MAC5D,KAAU,EAAA/C,WAAWr/B,IAAOzF,EAAQ,EAAAm0D,oBAAoBtsB,GAAO,MAC/D,KAAU,EAAA/C,WAAW7+B,IAAOjG,EAAQ8B,IAAI,EAAAm2D,iBAAiBpwB,IAAQ,MACjE,KAAU,EAAA/C,WAAW5+B,IAAOlG,EAAQ8B,IAAI,EAAAo2D,iBAAiBrwB,IAAQ,MACjE,QAASr+B,QAAO,GAElB,OAAQ2E,EAAKrB,MACX,KAAK,EAAa,OAAO9M,EAAa4B,GAAGu2D,WAAan4D,EAAa4B,GAAG2iB,UACtE,KAAK,EAAc,OAAOvkB,EAAa6B,IAAIs2D,WAAan4D,EAAa6B,IAAI0iB,UACzE,KAAK,EAAa,OAAOvkB,EAAQ,GAAKA,EAAaiC,GAAGsiB,UACtD,KAAK,EAAc,OAAOvkB,EAAQ,GAAKA,EAAakC,IAAIqiB,UACxD,KAAK,GAAe,OAAuB,KAAP,EAARvkB,GAE9B,MAIF,KAAK,EAAAglC,aAAaqQ,KAAM,CACtB,IAAI+iB,EACA1vB,EAAS,EAAA2vB,aAAaxwB,GAC1B,OAAQ,EAAAywB,aAAazwB,IACnB,KAAK,EAAMuwB,EAAW1vB,EAAS,EAAAzZ,KAAKrtB,GAAM,EAAAqtB,KAAKhtB,GAAK,MACpD,KAAK,EAAMm2D,EAAW1vB,EAAS,EAAAzZ,KAAKptB,IAAM,EAAAotB,KAAK/sB,IAAK,MACpD,QAAWk2D,EAAW1vB,EAAS,EAAAzZ,KAAKntB,IAAM,EAAAmtB,KAAK9sB,IAEjD,OAAOmzD,EAAsB8C,EAAUjqD,GAMzC,KAAK,EAAA62B,aAAamX,MAChB,IAAK,EAAAoc,aAAa1wB,GAAO,CACvB,IAAImE,EAAOxiC,OAAO,EAAAgvD,mBAAmB3wB,IACjC4wB,EAAO,EAAAC,cAAc7wB,EAAMmE,EAAO,GACtC,OAAOttC,KAAK62D,YAAYkD,EAAMtqD,GAEhC,MAIF,KAAK,EAAA62B,aAAasX,GAChB,OAAO59C,KAAK62D,YAAY,EAAAjB,UAAUzsB,GAAO15B,IAClCzP,KAAK62D,YAAY/rD,OAAO,EAAAyqD,WAAWpsB,IAAQ15B,GAIpD,KAAK,EAAA62B,aAAakY,OAChB,OAAOx+C,KAAK62D,YAAY,EAAAoD,cAAc9wB,GAAO15B,IACtCzP,KAAK62D,YAAY,EAAAqD,cAAc/wB,GAAO15B,GAI/C,KAAK,EAAA62B,aAAa0X,KAAM,CACtB,IACI1vB,EADUtuB,KAAK+xD,eAAex0B,QACJjP,gBAC1B6rC,EAAervD,OAAO,EAAA2rD,cAActtB,IACxC,GAAI7a,EAAgBhhB,IAAI6sD,GAAe,CACrC,IAAI/8B,EAAWtyB,OAAOwjB,EAAgBptB,IAAIi5D,IAC1CrvD,OAAOsyB,EAAShvB,MAAQ,EAAAwd,YAAY9Y,UACpC,IAAIsnD,EAA6Bh9B,EAC7BruB,EAAaqrD,EAAiB5gD,UAAUzK,WAC5C,OAAQqrD,EAAiBt4B,KAAKjJ,GAAG,IAC1B+9B,EAAsB7nD,EAAYU,GAE3C,OAAO,EAIT,KAAK,EAAA62B,aAAaG,YAAa,OAAO,EAExC,OAAO,EAGT,WAGE,IAFA,IAAI4zB,EAAS,EACTpqC,EAASjwB,KAAKiwB,OACXA,GACLA,EAASA,EAAOA,SACdoqC,EAEJ,IAAIvtD,EAAK,IAAIlF,MAeb,OAdI5H,KAAK64B,GAAG,IAAoB/rB,EAAGE,KAAK,WACpChN,KAAK64B,GAAG,IAA4B/rB,EAAGE,KAAK,mBAC5ChN,KAAK64B,GAAG,IAA4B/rB,EAAGE,KAAK,mBAC5ChN,KAAK64B,GAAG,IAAmB/rB,EAAGE,KAAK,UACnChN,KAAK64B,GAAG,KAAmB/rB,EAAGE,KAAK,UACnChN,KAAK64B,GAAG,KAAsB/rB,EAAGE,KAAK,aACtChN,KAAK64B,GAAG,KAAsB/rB,EAAGE,KAAK,aACtChN,KAAK64B,GAAG,MAAwB/rB,EAAGE,KAAK,eACxChN,KAAK64B,GAAG,MAAuB/rB,EAAGE,KAAK,cACvChN,KAAK64B,GAAG,MAAkC/rB,EAAGE,KAAK,yBAClDhN,KAAK64B,GAAG,OAAiC/rB,EAAGE,KAAK,wBACjDhN,KAAK64B,GAAG,OAAiC/rB,EAAGE,KAAK,wBACjDhN,KAAK64B,GAAG,OAAoC/rB,EAAGE,KAAK,2BACpDhN,KAAK64B,GAAG,OAAoC/rB,EAAGE,KAAK,2BACjD,QAAUhN,KAAK2oD,eAAe18C,WAAa,KAAOouD,EAAOpuD,WAAa,KAAOa,EAAGG,KAAK,MAKhG,SAAS2pD,EAAsB8C,EAAgBxoD,GAC7C,OAAQwoD,EAAS7gC,GAAG,IACb6gC,EAASpsB,KAAOp8B,EAAOo8B,MACvBosB,EAAS7gC,GAAG,IAAqB3nB,EAAO2nB,GAAG,GAUpD,SAASyhC,EAAoBnxB,EAAqBoxB,GAChD,OAAQ,EAAA/uB,gBAAgBrC,IACtB,KAAK,EAAA7C,aAAagQ,SAChBikB,EAAK5pC,IAAI,EAAAwkC,iBAAiBhsB,IAC1B,MAEF,KAAK,EAAA7C,aAAa8X,SAChBmc,EAAK5pC,IAAI,EAAAukC,iBAAiB/rB,IAG5B,QAAS,EAAAqxB,SAASrxB,EAAMoxB,EAAMD,IAhrClC,SAgqCA,0BAA+BnxB,EAAqBoxB,EAAiB,IAAIzyD,KAEvE,OADA,EAAA0yD,SAASrxB,EAAMoxB,EAAMD,GACdC,I,8ECzzCT,aAKA,OAUA,OAMA,OA2BA,OAUA,QAKA,OAIA,OAOA,OAUA,IAAiB3kC,GAAjB,SAAiBA,GAGF,EAAAxpB,MAAQ,SACR,EAAAquD,QAAU,WACV,EAAAC,gBAAkB,mBAClB,EAAAC,mBAAqB,sBAGrB,EAAAzxD,MAAQ,sBACR,EAAAC,MAAQ,sBACR,EAAAC,KAAO,qBAEP,EAAAwxD,UAAY,0BACZ,EAAAC,QAAU,wBACV,EAAAC,UAAY,0BACZ,EAAAC,SAAW,yBACX,EAAAC,YAAc,4BACd,EAAAC,SAAW,yBACX,EAAAC,QAAU,wBACV,EAAAC,YAAc,4BACd,EAAAC,WAAa,2BACb,EAAAzsD,WAAa,2BACb,EAAA0sD,UAAY,0BACZ,EAAAC,WAAa,2BACb,EAAAC,UAAY,0BACZ,EAAAC,OAAS,uBAET,EAAAhY,IAAM,oBACN,EAAAiY,IAAM,oBACN,EAAAC,OAAS,uBACT,EAAAC,KAAO,qBACP,EAAAC,KAAO,qBACP,EAAAC,IAAM,oBACN,EAAA7H,IAAM,oBACN,EAAAa,IAAM,oBACN,EAAA7R,KAAO,qBACP,EAAA8Y,MAAQ,sBACR,EAAAC,SAAW,yBACX,EAAAC,QAAU,wBACV,EAAAC,YAAc,4BACd,EAAAC,KAAO,qBACP,EAAAC,MAAQ,sBACR,EAAAC,KAAO,qBACP,EAAAC,MAAQ,sBACR,EAAAC,YAAc,4BACd,EAAAC,aAAe,6BACf,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,UAAY,0BACZ,EAAAC,WAAa,2BACb,EAAAC,YAAc,4BACd,EAAAC,eAAiB,+BACjB,EAAAC,YAAc,4BACd,EAAAC,cAAgB,8BAChB,EAAAC,aAAe,6BAEf,EAAAC,OAAS,uBACT,EAAAC,QAAU,wBACV,EAAAC,SAAW,yBACX,EAAAC,OAAS,uBACT,EAAAC,SAAW,yBACX,EAAAC,OAAS,uBACT,EAAAC,YAAc,4BACd,EAAA1hD,WAAa,2BACb,EAAAhR,OAAS,uBACT,EAAAqU,UAAY,0BACZ,EAAAs+C,YAAc,4BACd,EAAAC,KAAO,qBAEP,EAAAx6D,GAAK,mBACL,EAAAC,IAAM,oBACN,EAAAC,IAAM,oBACN,EAAAC,IAAM,oBACN,EAAAC,MAAQ,sBACR,EAAAC,GAAK,mBACL,EAAAC,IAAM,oBACN,EAAAC,IAAM,oBACN,EAAAC,IAAM,oBACN,EAAAC,MAAQ,sBACR,EAAAC,KAAO,qBACP,EAAAC,IAAM,oBACN,EAAAC,IAAM,oBACN,EAAAC,KAAO,qBAEP,EAAA45D,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBAEX,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,aAAe,6BACf,EAAAC,aAAe,6BACf,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,oBAAsB,oCACtB,EAAAC,oBAAsB,oCACtB,EAAAC,oBAAsB,oCACtB,EAAAC,oBAAsB,oCACtB,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BAEZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,aAAe,6BACf,EAAAC,aAAe,6BACf,EAAAC,SAAW,yBACX,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,aAAe,6BACf,EAAAC,aAAe,6BACf,EAAAC,aAAe,6BACf,EAAAC,aAAe,6BACf,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,WAAa,2BACb,EAAAC,YAAc,4BACd,EAAAC,UAAY,0BACZ,EAAAC,WAAa,2BACb,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BAEZ,EAAAC,mBAAqB,mCACrB,EAAAC,oBAAsB,oCACtB,EAAAC,gBAAkB,gCAClB,EAAAC,mBAAqB,mCACrB,EAAAC,oBAAsB,oCACtB,EAAAC,oBAAsB,oCACtB,EAAAC,gBAAkB,gCAClB,EAAAC,kBAAoB,kCACpB,EAAAC,mBAAqB,mCACrB,EAAAC,iBAAmB,iCACnB,EAAAC,kBAAoB,kCACpB,EAAAC,mBAAqB,mCACrB,EAAAC,mBAAqB,mCACrB,EAAAC,iBAAmB,iCACnB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,qBAAuB,qCACvB,EAAAC,sBAAwB,sCACxB,EAAAC,kBAAoB,kCACpB,EAAAC,qBAAuB,qCACvB,EAAAC,sBAAwB,sCACxB,EAAAC,sBAAwB,sCACxB,EAAAC,kBAAoB,kCACpB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,sBAAwB,sCACxB,EAAAC,uBAAyB,uCACzB,EAAAC,uBAAyB,uCACzB,EAAAC,mBAAqB,mCACrB,EAAAC,uBAAyB,uCACzB,EAAAC,wBAA0B,wCAC1B,EAAAC,oBAAsB,oCACtB,EAAAC,uBAAyB,uCACzB,EAAAC,wBAA0B,wCAC1B,EAAAC,wBAA0B,wCAC1B,EAAAC,oBAAsB,oCACtB,EAAAC,0BAA4B,0CAC5B,EAAAC,2BAA6B,2CAC7B,EAAAC,uBAAyB,uCACzB,EAAAC,0BAA4B,0CAC5B,EAAAC,2BAA6B,2CAC7B,EAAAC,2BAA6B,2CAC7B,EAAAC,uBAAyB,uCACzB,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBAEX,EAAAC,WAAa,2BACb,EAAAC,kBAAoB,kCACpB,EAAAC,kBAAoB,kCACpB,EAAAC,aAAe,6BACf,EAAAC,aAAe,6BACf,EAAAC,gBAAkB,gCAClB,EAAAC,cAAgB,8BAChB,EAAAC,UAAY,0BACZ,EAAAC,WAAa,2BACb,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,kBAAoB,kCACpB,EAAAC,kBAAoB,kCACpB,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,QAAU,wBACV,EAAAC,SAAW,yBACX,EAAAC,YAAc,4BACd,EAAAC,SAAW,yBACX,EAAAC,eAAiB,+BACjB,EAAAC,cAAgB,8BAChB,EAAAC,cAAgB,8BAChB,EAAAC,aAAe,6BACf,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,UAAY,0BACZ,EAAAC,SAAW,yBACX,EAAAC,UAAY,0BACZ,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,QAAU,wBACV,EAAAC,aAAe,6BACf,EAAAC,eAAiB,+BACjB,EAAAC,YAAc,4BACd,EAAAC,eAAiB,+BACjB,EAAAC,gBAAkB,gCAClB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BAEZ,EAAA/jE,MAAQ,sBACR,EAAAE,MAAQ,sBACR,EAAAE,MAAQ,sBACR,EAAAE,MAAQ,sBACR,EAAAE,MAAQ,sBACR,EAAAC,MAAQ,sBAER,EAAAujE,YAAc,4BACd,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,mBAAqB,mCACrB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,aAAe,6BACf,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,eAAiB,+BACjB,EAAAC,eAAiB,+BACjB,EAAAC,cAAgB,8BAChB,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCAEvB,EAAAC,YAAc,4BACd,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,mBAAqB,mCACrB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,aAAe,6BACf,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,eAAiB,+BACjB,EAAAC,eAAiB,+BACjB,EAAAC,cAAgB,8BAChB,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,qBAAuB,qCACvB,EAAAC,qBAAuB,qCACvB,EAAAC,wBAA0B,wCAC1B,EAAAC,wBAA0B,wCAC1B,EAAAC,yBAA2B,yCAC3B,EAAAC,yBAA2B,yCAC3B,EAAAC,gBAAkB,gCAClB,EAAAC,gBAAkB,gCAElB,EAAAC,YAAc,4BACd,EAAAC,mBAAqB,mCACrB,EAAAC,mBAAqB,mCACrB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,kBAAoB,kCACpB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,eAAiB,+BACjB,EAAAC,eAAiB,+BACjB,EAAAC,cAAgB,8BAChB,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BACb,EAAAC,wBAA0B,wCAC1B,EAAAC,wBAA0B,wCAC1B,EAAAC,wBAA0B,wCAC1B,EAAAC,wBAA0B,wCAC1B,EAAAC,yBAA2B,yCAC3B,EAAAC,yBAA2B,yCAC3B,EAAAC,iBAAmB,iCACnB,EAAAC,iBAAmB,iCAEnB,EAAAC,YAAc,4BACd,EAAAC,mBAAqB,mCACrB,EAAAC,mBAAqB,mCACrB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,YAAc,4BACd,EAAAC,YAAc,4BACd,EAAAC,eAAiB,+BACjB,EAAAC,eAAiB,+BACjB,EAAAC,wBAA0B,wCAC1B,EAAAC,wBAA0B,wCAC1B,EAAAC,iBAAmB,iCACnB,EAAAC,iBAAmB,iCAEnB,EAAAC,YAAc,4BACd,EAAAC,mBAAqB,mCACrB,EAAAC,mBAAqB,mCACrB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,WAAa,2BACb,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,sBAAwB,sCACxB,EAAAC,sBAAwB,sCACxB,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BAEb,EAAAC,YAAc,4BACd,EAAAC,mBAAqB,mCACrB,EAAAC,mBAAqB,mCACrB,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,UAAY,0BACZ,EAAAC,WAAa,2BACb,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,SAAW,yBACX,EAAAC,sBAAwB,sCACxB,EAAAC,sBAAwB,sCACxB,EAAAC,WAAa,2BACb,EAAAC,WAAa,2BAEb,EAAAC,cAAgB,8BAChB,EAAAC,cAAgB,8BAChB,EAAAC,iBAAmB,iCACnB,EAAAC,iBAAmB,iCACnB,EAAAC,iBAAmB,iCACnB,EAAAC,iBAAmB,iCAGnB,EAAAC,UAAY,wBACZ,EAAAC,UAAY,sBACZ,EAAAC,cAAgB,0BAChB,EAAAC,cAAgB,0BAGhB,EAAAC,MAAQ,oBACR,EAAAC,SAAW,uBAGX,EAAA7oE,MAAQ,yBACR,EAAAD,QAAU,2BACV,EAAAD,KAAO,wBAGP,EAAAgpE,YAAc,0BACd,EAAAC,YAAc,0BACd,EAAAC,YAAc,0BACd,EAAAC,YAAc,0BACd,EAAAC,YAAc,0BAGd,EAAAzrE,UAAY,4BACZ,EAAAI,WAAa,6BACb,EAAAC,kBAAoB,oCACpB,EAAAJ,WAAa,6BACb,EAAAK,YAAc,8BACd,EAAAJ,WAAa,6BACb,EAAAK,YAAc,8BACd,EAAAJ,WAAa,6BACb,EAAAK,YAAc,8BACd,EAAAC,aAAe,+BACf,EAAAC,aAAe,+BAGf,EAAA6sB,UAAY,wBACZ,EAAAC,UAAY,wBACZ,EAAAC,SAAW,uBAze1B,CAAiBH,EAAA,EAAAA,eAAA,EAAAA,aAAY,KA83B7B,SAASo+C,EAAYC,GACnB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAI9uD,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkBJ,EAAI3qC,SAAS,GAAI56B,EAAc,GAAI,GAC9DwlE,EAASG,kBAAkBJ,EAAI3qC,SAAS,GAAI,EAAA/Y,KAAKntB,IAAK,GACtDqM,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,GACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAAc,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQsyB,OAAQxtD,GACvD,KAAK,EACL,KAAK,EACH,OAAOjM,EAAO20E,MACZJ,EAASlmD,QAAQgD,SACb,EAAA8V,QAAQytC,OACR,EAAAztC,QAAQsyB,OACZxtD,GAGJ,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQytC,OAAQ3oE,GAO3D,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,MAAOhlE,EAAKxD,YAE1CtM,EAAO69D,cAKhB,SAASkX,EAAYT,GACnB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKntB,IAAK,GAClDqM,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,GACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAAc,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQuyB,OAAQztD,GACvD,KAAK,EACL,KAAK,EACH,OAAOjM,EAAO20E,MACZJ,EAASlmD,QAAQgD,SACb,EAAA8V,QAAQ6tC,OACR,EAAA7tC,QAAQuyB,OACZztD,GAGJ,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQ6tC,OAAQ/oE,GAO3D,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,MAAOhlE,EAAKxD,YAE1CtM,EAAO69D,cAKhB,SAASoX,EAAeX,GACtB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKntB,IAAK,GAClDqM,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KACX,OAAQq7C,EAAS3qB,YAAYn7C,MAC3B,KAAK,GACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAAc,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQwyB,UAAW1tD,GAC1D,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQ+tC,UAAWjpE,GAC1D,KAAK,EACL,KAAK,EACH,OAAOjM,EAAO20E,MACZJ,EAASlmD,QAAQgD,SACb,EAAA8V,QAAQ+tC,UACR,EAAA/tC,QAAQwyB,UACZ1tD,GASR,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,SAAUhlE,EAAKxD,YAE7CtM,EAAO69D,cAKhB,SAASsX,EAAab,GACpB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKntB,IAAK,GAClDqM,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KAAsB,CACjC,IAAIhtB,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI75B,EAAM,GACzD,OAAQA,EAAKrB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH,OAAO8lE,EAASa,uBACdp1E,EAAOq1E,OAAO,EAAAjuC,SAASkuC,QAASrpE,EAAMC,GACtC4D,GAGJ,KAAK,EACL,KAAK,EAAc,OAAO9P,EAAOq1E,OAAO,EAAAjuC,SAASkuC,QAASrpE,EAAMC,GAChE,KAAK,EACL,KAAK,EACH,OAAOlM,EAAOq1E,OACZd,EAASlmD,QAAQgD,SACb,EAAA+V,SAASmuC,QACT,EAAAnuC,SAASkuC,QACbrpE,EAAMC,GAGV,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASmuC,QAAStpE,EAAMC,IAOpE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,OAAQhlE,EAAKxD,YAE3CtM,EAAO69D,cAKhB,SAAS2X,EAAalB,GACpB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKntB,IAAK,GAClDqM,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KAAsB,CACjC,IAAIhtB,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI75B,EAAM,GACzD,OAAQA,EAAKrB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH,OAAO8lE,EAASa,uBACdp1E,EAAOq1E,OAAO,EAAAjuC,SAASquC,QAASxpE,EAAMC,GACtC4D,GAGJ,KAAK,EACL,KAAK,EAAc,OAAO9P,EAAOq1E,OAAO,EAAAjuC,SAASquC,QAASxpE,EAAMC,GAChE,KAAK,EACL,KAAK,EACH,OAAOlM,EAAOq1E,OACZd,EAASlmD,QAAQgD,SACb,EAAA+V,SAASsuC,QACT,EAAAtuC,SAASquC,QACbxpE,EAAMC,GAGV,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASsuC,QAASzpE,EAAMC,IAOpE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,OAAQhlE,EAAKxD,YAE3CtM,EAAO69D,cAKhB,SAAS8X,EAAYrB,GACnB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK4yB,KAAM,GACnD1zC,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EAAc,CACjB,IAAI0zB,EAAOoyC,EAASqB,YAGhBC,EAAQ1zC,EAAK6wB,aAAa,EAAApiC,KAAKntB,KAC/BqyE,EAAQ3zC,EAAK6wB,aAAa,EAAApiC,KAAKntB,KAE/BsmC,EAAM/pC,EAAOq1E,OAAO,EAAAjuC,SAAS2uC,OAC/B/1E,EAAOq1E,OAAO,EAAAjuC,SAAS4uC,OACrBh2E,EAAOi2E,UACLH,EAAMh2C,MACN9/B,EAAOq1E,OAAO,EAAAjuC,SAASgyB,OACrBp5D,EAAOi2E,UAAUJ,EAAM/1C,MAAO7zB,GAC9BjM,EAAOyD,IAAI,MAGfzD,EAAOk2E,UAAUL,EAAM/1C,MAAO,EAAA2G,WAAWt/B,MAE3CnH,EAAOk2E,UAAUJ,EAAMh2C,MAAO,EAAA2G,WAAWt/B,MAI3C,OAFAg7B,EAAKoxB,cAAcuiB,GACnB3zC,EAAKoxB,cAAcsiB,GACZ9rC,EAET,KAAK,EAAgB,CACnB,IAAI1b,EAAUkmD,EAASlmD,QACnB8T,EAAOoyC,EAASqB,YAChBvkD,EAAWhD,EAAQgD,SAEnBwkD,EAAQ1zC,EAAK6wB,aAAa3kC,EAAQyC,WAClCglD,EAAQ3zC,EAAK6wB,aAAa3kC,EAAQyC,WAClCiZ,EAAM/pC,EAAOq1E,OAAOhkD,EAAW,EAAA+V,SAAS+uC,OAAS,EAAA/uC,SAAS2uC,OAC5D/1E,EAAOq1E,OAAOhkD,EAAW,EAAA+V,SAASgvC,OAAS,EAAAhvC,SAAS4uC,OAClDh2E,EAAOi2E,UACLH,EAAMh2C,MACN9/B,EAAOq1E,OAAOhkD,EAAW,EAAA+V,SAASivC,OAAS,EAAAjvC,SAASgyB,OAClDp5D,EAAOi2E,UAAUJ,EAAM/1C,MAAO7zB,GAC9BolB,EAAWrxB,EAAO0D,IAAI,IAAM1D,EAAOyD,IAAI,MAG3CzD,EAAOk2E,UAAUL,EAAM/1C,MAAOzR,EAAQioD,iBAExCt2E,EAAOk2E,UAAUJ,EAAMh2C,MAAOzR,EAAQioD,iBAIxC,OAFAn0C,EAAKoxB,cAAcuiB,GACnB3zC,EAAKoxB,cAAcsiB,GACZ9rC,EAET,KAAK,EAAc,CACjB,IAAI5H,EAAOoyC,EAASqB,YAEhBC,EAAQ1zC,EAAK6wB,aAAa,EAAApiC,KAAKltB,KAC/BoyE,EAAQ3zC,EAAK6wB,aAAa,EAAApiC,KAAKltB,KAE/BqmC,EAAM/pC,EAAOq1E,OAAO,EAAAjuC,SAAS+uC,OAC/Bn2E,EAAOq1E,OAAO,EAAAjuC,SAASgvC,OACrBp2E,EAAOi2E,UACLH,EAAMh2C,MACN9/B,EAAOq1E,OAAO,EAAAjuC,SAASivC,OACrBr2E,EAAOi2E,UAAUJ,EAAM/1C,MAAO7zB,GAC9BjM,EAAO0D,IAAI,MAGf1D,EAAOk2E,UAAUL,EAAM/1C,MAAO,EAAA2G,WAAWr/B,MAE3CpH,EAAOk2E,UAAUJ,EAAMh2C,MAAO,EAAA2G,WAAWr/B,MAI3C,OAFA+6B,EAAKoxB,cAAcuiB,GACnB3zC,EAAKoxB,cAAcsiB,GACZ9rC,EAET,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAO99B,EAC3B,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQovC,OAAQtqE,GACvD,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQqvC,OAAQvqE,GAO3D,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,MAAOhlE,EAAKxD,YAE1CtM,EAAO69D,cAKhB,SAAS4Y,EAAYnC,GACnB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB4C,EAAOg4B,EAAS,GAChB19B,EAAO8C,EACPwlE,EAASG,kBAAkB/iE,EAAM5C,EAAc,GAAI,GACnDwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK4yB,KAAM,GACnD1zC,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KAAsB,CACjC,IAAIhtB,GACC6C,GAAiB4C,EAAK+kE,kBACzBxqE,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI75B,EAAM,GACjDykE,EAAS3qB,aAAe95C,IAC1B7D,EAAOsoE,EAASG,kBAAkB/iE,EAAM7B,EAAOykE,EAAS3qB,YAAa,KAGvE19C,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI75B,EAAM,GAEvD,IAAIy5B,GAAgB,EACpB,OAAQz5B,EAAKrB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EAAgB86B,EAAK,EAAAnC,SAASgxB,MAAO,MAC1C,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAiB7uB,EAAK,EAAAnC,SAASixB,MAAO,MAC3C,KAAK,EAAgB9uB,EAAK,EAAAnC,SAASkxB,MAAO,MAC1C,KAAK,EAAgB/uB,EAAK,EAAAnC,SAASmxB,MAAO,MAC1C,KAAK,EACHhvB,EAAKgrC,EAASlmD,QAAQgD,SAClB,EAAA+V,SAASkxB,MACT,EAAAlxB,SAASgxB,MACb,MAEF,KAAK,EACH7uB,EAAKgrC,EAASlmD,QAAQgD,SAClB,EAAA+V,SAASmxB,MACT,EAAAnxB,SAASixB,MACb,MAEF,KAAK,GAAc,OAAOr4D,EAAOq1E,OAAO,EAAAjuC,SAASuvC,OAAQ1qE,EAAMC,GAC/D,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASwvC,OAAQ3qE,EAAMC,GAEjE,IAAW,GAAPq9B,EAAU,CACZ,IAAIpH,EAAOoyC,EAASqB,YAChBiB,EAAa/mE,EAAK20C,eAClBoxB,EAAQ1zC,EAAK6wB,aAAaljD,GAC9BqyB,EAAK8wB,aAAa4iB,EAAM/1C,MAAO,EAAAkyB,WAAWuC,SAC1C,IAAIuhB,EAAQ3zC,EAAK6wB,aAAaljD,GAC9BqyB,EAAK8wB,aAAa6iB,EAAMh2C,MAAO,EAAAkyB,WAAWuC,SAC1C,IAAIxqB,EAAM/pC,EAAO49D,OACf59D,EAAOi2E,UAAUJ,EAAM/1C,MAAO7zB,GAC9BjM,EAAOi2E,UAAUH,EAAMh2C,MAAO5zB,GAC9BlM,EAAOq1E,OAAO9rC,EACZvpC,EAAOk2E,UAAUL,EAAM/1C,MAAO+2C,GAC9B72E,EAAOk2E,UAAUJ,EAAMh2C,MAAO+2C,KAKlC,OAFA10C,EAAKoxB,cAAcuiB,GACnB3zC,EAAKoxB,cAAcsiB,GACZ9rC,GAOX,OAJAwqC,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,MAAOhlE,EAAKxD,YAE1CtM,EAAO69D,cAKhB,SAASiZ,EAAYxC,GACnB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB4C,EAAOg4B,EAAS,GAChB19B,EAAO8C,EACPwlE,EAASG,kBAAkB/iE,EAAM5C,EAAc,GAAI,GACnDwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK4yB,KAAM,GACnD1zC,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KAAsB,CACjC,IAAIhtB,GACC6C,GAAiB4C,EAAK+kE,kBACzBxqE,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI75B,EAAM,GACjDykE,EAAS3qB,aAAe95C,IAC1B7D,EAAOsoE,EAASG,kBAAkB/iE,EAAM7B,EAAOykE,EAAS3qB,YAAa,KAGvE19C,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI75B,EAAM,GAEvD,IAAIy5B,GAAgB,EACpB,OAAQz5B,EAAKrB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EAAgB86B,EAAK,EAAAnC,SAASowB,MAAO,MAC1C,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAiBjuB,EAAK,EAAAnC,SAASqwB,MAAO,MAC3C,KAAK,EAAiBluB,EAAK,EAAAnC,SAASswB,MAAO,MAC3C,KAAK,EAAiBnuB,EAAK,EAAAnC,SAASuwB,MAAO,MAC3C,KAAK,EACHpuB,EAAKgrC,EAASlmD,QAAQgD,SAClB,EAAA+V,SAASswB,MACT,EAAAtwB,SAASowB,MACb,MAEF,KAAK,EACHjuB,EAAKgrC,EAASlmD,QAAQgD,SAClB,EAAA+V,SAASuwB,MACT,EAAAvwB,SAASqwB,MACb,MAEF,KAAK,GAAc,OAAOz3D,EAAOq1E,OAAO,EAAAjuC,SAAS2vC,OAAQ9qE,EAAMC,GAC/D,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS4vC,OAAQ/qE,EAAMC,GAEjE,IAAW,GAAPq9B,EAAU,CACZ,IAAIpH,EAAOoyC,EAASqB,YAChBiB,EAAa/mE,EAAK20C,eAClBoxB,EAAQ1zC,EAAK6wB,aAAaljD,GAC9BqyB,EAAK8wB,aAAa4iB,EAAM/1C,MAAO,EAAAkyB,WAAWuC,SAC1C,IAAIuhB,EAAQ3zC,EAAK6wB,aAAaljD,GAC9BqyB,EAAK8wB,aAAa6iB,EAAMh2C,MAAO,EAAAkyB,WAAWuC,SAC1C,IAAIxqB,EAAM/pC,EAAO49D,OACf59D,EAAOi2E,UAAUJ,EAAM/1C,MAAO7zB,GAC9BjM,EAAOi2E,UAAUH,EAAMh2C,MAAO5zB,GAC9BlM,EAAOq1E,OAAO9rC,EACZvpC,EAAOk2E,UAAUL,EAAM/1C,MAAO+2C,GAC9B72E,EAAOk2E,UAAUJ,EAAMh2C,MAAO+2C,KAKlC,OAFA10C,EAAKoxB,cAAcuiB,GACnB3zC,EAAKoxB,cAAcsiB,GACZ9rC,GAOX,OAJAwqC,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,MAAOhlE,EAAKxD,YAE1CtM,EAAO69D,cAKhB,SAASoZ,EAAa3C,GACpB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK4yB,KAAM,GACnD1zC,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAOxC,EAC3B,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQ+vC,QAASjrE,GACxD,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQgwC,QAASlrE,GAO5D,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,OAAQhlE,EAAKxD,YAE3CtM,EAAO69D,cAKhB,SAASuZ,EAAc9C,GACrB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK4yB,KAAM,GACnD1zC,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAOxC,EAC3B,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQkwC,SAAUprE,GACzD,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQmwC,SAAUrrE,GAO7D,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,QAAShlE,EAAKxD,YAE5CtM,EAAO69D,cAKhB,SAAS0Z,EAAiBjD,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKzsB,IAAK,GAClD2L,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KAAsB,CACjC,IAAIhtB,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI75B,EAAM,GACzD,OAAQA,EAAKrB,MAEX,KAAK,GAAc,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAASowC,YAAavrE,EAAMC,GACpE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASqwC,YAAaxrE,EAAMC,IAOxE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAE/CtM,EAAO69D,cAKhB,SAAS6Z,EAAgBpD,GACvB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK4yB,KAAM,GACnD1zC,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAOxC,EAC3B,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQwwC,WAAY1rE,GAC3D,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQywC,WAAY3rE,GAO/D,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,UAAWhlE,EAAKxD,YAE9CtM,EAAO69D,cAKhB,SAASga,EAAoBvD,GAC3B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACE83E,GAAkBxD,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACE,GAC1B,IAAKe,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EAAc,CACjB,IAAIxC,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK1sB,IAAK,GAE7D,OADAqwE,EAAS3qB,YAAc95C,EAChB9P,EAAO20E,MAAM,EAAAxtC,QAAQ4wC,eAAgB9rE,GAE9C,KAAK,EACL,KAAK,EAAc,CACjB,IAAIA,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKzsB,IAAK,GAE7D,OADAowE,EAAS3qB,YAAc95C,EAChB9P,EAAO20E,MAAM,EAAAxtC,QAAQ6wC,eAAgB/rE,GAE9C,KAAK,EACL,KAAK,EAAgB,CACnB,IAAIA,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAC7C4qC,EAASlmD,QAAQgD,SACb,EAAAT,KAAKzsB,IACL,EAAAysB,KAAK1sB,IAAG,GAId,OADAqwE,EAAS3qB,YAAc95C,EAChB9P,EAAO20E,MACZJ,EAASlmD,QAAQgD,SACb,EAAA8V,QAAQ6wC,eACR,EAAA7wC,QAAQ4wC,eACZ9rE,GAGJ,KAAK,GAAc,CACjB,IAAIA,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKntB,IAAK,GAE7D,OADA8wE,EAAS3qB,YAAc,EAAAh5B,KAAK1sB,IACrBlE,EAAO20E,MAAM,EAAAxtC,QAAQ8wC,eAAgBhsE,GAE9C,KAAK,GAAc,CACjB,IAAIA,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKltB,IAAK,GAE7D,OADA6wE,EAAS3qB,YAAc,EAAAh5B,KAAKzsB,IACrBnE,EAAO20E,MAAM,EAAAxtC,QAAQ+wC,eAAgBjsE,IAQlD,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,cAAehlE,EAAKxD,YAElDtM,EAAO69D,cAKhB,SAASsa,EAAa7D,GACpB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKzsB,IAAK,GAClD2L,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MAEX,KAAK,GAAc,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQixC,QAASnsE,GACxD,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQkxC,QAASpsE,GAO5D,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,OAAQhlE,EAAKxD,YAE3CtM,EAAO69D,cAKhB,SAASya,EAAchE,GACrB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK4yB,KAAM,GACnD1zC,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAOxC,EAC3B,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQoxC,SAAUtsE,GACzD,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQqxC,SAAUvsE,GAO7D,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,QAAShlE,EAAKxD,YAE5CtM,EAAO69D,cA2KhB,SAAS4a,EAAanE,GACpB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACE83E,GAAkBxD,GAAK,GACvBoE,GAAkBpE,EAAK,EAAG,GAC1B,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB4pE,EAAiBrE,EAAIqE,eACrB7oE,EAAOf,EAAe,GACtB6pE,EACFD,GAAkB,EAAA/nD,KAAK4yB,MACvB1zC,EAAKopB,GAAG,IACRy/C,EAAez/C,GAAG,IAClBy/C,EAAehrC,KAAO79B,EAAK69B,KACzBgrC,EAAiB7oE,EACjB7D,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI4qC,EAASlmD,QAAQyC,UAAW,GAC3E+nD,EAAclvC,EAAS58B,OACvB+rE,EAAY,EACZC,EAAWjpE,EAAKszC,SACpB,GAAIy1B,GAAe,EAAG,CAEpB,IADAC,EAAYE,GAAwBrvC,EAAS,GAAI4qC,IACjC,EAEd,OADAA,EAAS3qB,YAAcgvB,EAChB54E,EAAO69D,cAEhB,GAAmB,GAAfgb,IACFE,EAAWE,GAAuBtvC,EAAS,GAAIovC,EAAUxE,IAC1C,EAEb,OADAA,EAAS3qB,YAAcgvB,EAChB54E,EAAO69D,cAKpB,OADA0W,EAAS3qB,YAAcgvB,EAChB54E,EAAOy8D,KACZ3sD,EAAKszC,SACLtzC,EAAKopB,GAAG,GACRjtB,EACA2sE,EAAQn0B,eACRq0B,EACAC,GAMJ,SAASG,EAAc5E,GACrB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAEtB,GADAu0E,EAAS3qB,YAAc,EAAAh5B,KAAKG,KAE1B+mD,GAAkBxD,GAClBoE,GAAkBpE,EAAK,EAAG,GAC1B,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACfkvC,EAAclvC,EAAS58B,OACvBgC,EAAgBulE,EAAIvlE,cACpB4pE,EAAiBrE,EAAIqE,eACrB7oE,EAAOf,EAAe,GACtB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI4qC,EAASlmD,QAAQyC,UAAW,GAC3E5kB,EAAOooE,EAAI6E,eACX5E,EAASG,kBAAkB/qC,EAAS,GAClCgvC,EAAc,GAGhBpE,EAASG,kBACP/qC,EAAS,GACT75B,EACAA,EAAKopB,GAAG,GACJ,EACA,GAENkgD,EAAS7E,EAAS3qB,YAEpB95C,EAAKopB,GAAG,MAELkgD,EAAOlgD,GAAG,IACXkgD,EAAOzrC,KAAO79B,EAAK69B,QAGrBzhC,EAAOqoE,EAAS8E,kBAAkBntE,EAChCktE,EAAQtpE,GACR,GAAO,EACP65B,EAAS,IAEXyvC,EAAStpE,GAEX,IAAIgpE,EAAY,EACZC,EAAWjpE,EAAKszC,SACpB,GAAIy1B,GAAe,EAAG,CAEpB,IADAC,EAAYE,GAAwBrvC,EAAS,GAAI4qC,IACjC,EAEd,OADAA,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACrB/wB,EAAO69D,cAEhB,GAAmB,GAAfgb,IACFE,EAAWE,GAAuBtvC,EAAS,GAAIovC,EAAUxE,IAC1C,EAEb,OADAA,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACrB/wB,EAAO69D,cAKpB,OADA0W,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACrB/wB,EAAO08D,MAAM5sD,EAAKszC,SAAUn3C,EAAMC,EAAMktE,EAAO30B,eAAgBq0B,EAAWC,GAOnF,SAASO,EAAoBhF,GAC3B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAAK,GACvBoE,GAAkBpE,EAAK,EAAG,GAC1B,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB4pE,EAAiBrE,EAAIqE,eACrB7oE,EAAOf,EAAe,GACtB6pE,EACF9oE,EAAKopB,GAAG,IACRy/C,EAAez/C,GAAG,IAClBy/C,EAAehrC,KAAO79B,EAAK69B,KACzBgrC,EAAiB7oE,EACrB,IAAKA,EAAKopB,GAAG,GAMX,OALAq7C,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,cAAehlE,EAAKxD,YAEzDioE,EAAS3qB,YAAcgvB,EAChB54E,EAAO69D,cAEhB,IAAI5xD,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI4qC,EAASlmD,QAAQyC,UAAW,GAC3EgoD,EAA+B,GAAnBnvC,EAAS58B,OAAcisE,GAAwBrvC,EAAS,GAAI4qC,GAAY,EACxF,OAAIuE,EAAY,GACdvE,EAAS3qB,YAAcgvB,EAChB54E,EAAO69D,gBAEhB0W,EAAS3qB,YAAcgvB,EAChB54E,EAAO28D,YACZ7sD,EAAKszC,SACLn3C,EACA2sE,EAAQn0B,eACRq0B,IAMJ,SAASU,EAAqBlF,GAC5B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBoE,GAAkBpE,EAAK,EAAG,GAC1B,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB4pE,EAAiBrE,EAAIqE,eACrB7oE,EAAOf,EAAe,GAC1B,IAAKe,EAAKopB,GAAG,GAMX,OALAq7C,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,eAAgBhlE,EAAKxD,YAE1DioE,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACrB/wB,EAAO69D,cAEhB,IAAI5xD,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI4qC,EAASlmD,QAAQyC,UAAW,GAC3E5kB,EAAOooE,EAAI6E,eACX5E,EAASG,kBACP/qC,EAAS,GACTgvC,EAAc,GAGhBpE,EAASG,kBACP/qC,EAAS,GACT75B,EACAA,EAAKopB,GAAG,GACJ,EACA,GAENkgD,EAAS7E,EAAS3qB,YAEpB95C,EAAKopB,GAAG,MAELkgD,EAAOlgD,GAAG,IACXkgD,EAAOzrC,KAAO79B,EAAK69B,QAGrBzhC,EAAOqoE,EAAS8E,kBAAkBntE,EAChCktE,EAAQtpE,GACR,GAAO,EACP65B,EAAS,IAEXyvC,EAAStpE,GAEX,IAAIgpE,EAA+B,GAAnBnvC,EAAS58B,OAAcisE,GAAwBrvC,EAAS,GAAI4qC,GAAY,EACxF,OAAIuE,EAAY,GACdvE,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACrB/wB,EAAO69D,gBAEhB0W,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACrB/wB,EAAO48D,aAAa9sD,EAAKszC,SAAUn3C,EAAMC,EAAMktE,EAAO30B,eAAgBq0B,IAK/E,SAASW,EAAsBnF,EAAqB/qC,EAAiBmwC,GACnE,IAAInF,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAAK,GACvBoE,GAAkBpE,EAAK,EAAG,GAC1B,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB4pE,EAAiBrE,EAAIqE,eACrB7oE,EAAOf,EAAe,GAC1B,IAAKe,EAAKopB,GAAG,IAAsBppB,EAAK69B,KAAO,EAK7C,OAJA4mC,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB4E,EAAQ5pE,EAAKxD,YAE3CtM,EAAO69D,cAEhB,IAAI5xD,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAC7C4qC,EAASlmD,QAAQyC,UAAS,GAGxB5kB,EAAOooE,EAAI6E,eACX5E,EAASG,kBAAkB/qC,EAAS,GAClCgvC,EAAc,GAGhBpE,EAASG,kBACP/qC,EAAS,GACT75B,EACAA,EAAKopB,GAAG,GACJ,EACA,GAENkgD,EAAS7E,EAAS3qB,YAEpB95C,EAAKopB,GAAG,MAELkgD,EAAOlgD,GAAG,IACXkgD,EAAOzrC,KAAO79B,EAAK69B,QAGrBzhC,EAAOqoE,EAAS8E,kBAAkBntE,EAChCktE,EAAQtpE,GACR,GAAO,EACP65B,EAAS,IAEXyvC,EAAStpE,GAEX,IAAIgpE,EAA+B,GAAnBnvC,EAAS58B,OAAcisE,GAAwBrvC,EAAS,GAAI4qC,GAAY,EACxF,OAAIuE,EAAY,GACdvE,EAAS3qB,YAAcwvB,EAChBp5E,EAAO69D,gBAEhB0W,EAAS3qB,YAAcwvB,EAChBp5E,EAAO25E,WAAWpwC,EAAIz5B,EAAKszC,SAAU01B,EAAW7sE,EAAMC,EAAMktE,EAAO30B,iBAI5E,SAASm1B,EAAmBtF,GAC1B,OAAOmF,EAAsBnF,EAAK,EAAAhtC,YAAYuyC,IAAK,cAKrD,SAASC,EAAmBxF,GAC1B,OAAOmF,EAAsBnF,EAAK,EAAAhtC,YAAYyyC,IAAK,cAKrD,SAASC,EAAmB1F,GAC1B,OAAOmF,EAAsBnF,EAAK,EAAAhtC,YAAY2yC,IAAK,cAKrD,SAASC,EAAkB5F,GACzB,OAAOmF,EAAsBnF,EAAK,EAAAhtC,YAAY6yC,GAAI,aAKpD,SAASC,EAAmB9F,GAC1B,OAAOmF,EAAsBnF,EAAK,EAAAhtC,YAAY+yC,IAAK,cAKrD,SAASC,EAAoBhG,GAC3B,OAAOmF,EAAsBnF,EAAK,EAAAhtC,YAAYizC,KAAM,eAKtD,SAASC,EAAuBlG,GAC9B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAAK,GACvBoE,GAAkBpE,EAAK,EAAG,GAC1B,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB4pE,EAAiBrE,EAAIqE,eACrB7oE,EAAOf,EAAe,GAC1B,IAAKe,EAAKopB,GAAG,IAAsBppB,EAAK69B,KAAO,EAK7C,OAJA4mC,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,iBAAkBhlE,EAAKxD,YAErDtM,EAAO69D,cAEhB,IAAI5xD,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAC7C4qC,EAASlmD,QAAQyC,UAAS,GAGxB5kB,EAAOooE,EAAI6E,eACX5E,EAASG,kBAAkB/qC,EAAS,GAClCgvC,EAAc,GAGhBpE,EAASG,kBACP/qC,EAAS,GACT75B,EACAA,EAAKopB,GAAG,GACJ,EACA,GAENkgD,EAAS7E,EAAS3qB,YAClBz9C,EAAOooE,EAASG,kBAAkB/qC,EAAS,GAC7CyvC,EAAM,GAINtpE,EAAKopB,GAAG,MAELkgD,EAAOlgD,GAAG,IACXkgD,EAAOzrC,KAAO79B,EAAK69B,QAGrBzhC,EAAOqoE,EAAS8E,kBAAkBntE,EAChCktE,EAAQtpE,GACR,GAAO,EACP65B,EAAS,IAEXx9B,EAAOooE,EAAS8E,kBAAkBltE,EAChCitE,EAAQtpE,GACR,GAAO,EACP65B,EAAS,IAEXyvC,EAAStpE,GAEX,IAAIgpE,EAA+B,GAAnBnvC,EAAS58B,OAAcisE,GAAwBrvC,EAAS,GAAI4qC,GAAY,EACxF,OAAIuE,EAAY,GACdvE,EAAS3qB,YAAcwvB,EAChBp5E,EAAO69D,gBAEhB0W,EAAS3qB,YAAcwvB,EAChBp5E,EAAOm9D,eAAertD,EAAKszC,SAAU01B,EAAW7sE,EAAMC,EAAMC,EAAMitE,EAAO30B,iBAKlF,SAASg2B,EAAoBnG,GAC3B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKntB,IACrBzD,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACE,GACtB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI4qC,EAASlmD,QAAQyC,UAAW,GAC3E5kB,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI75B,EAAM,GACrD3D,EAAOooE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKltB,IAAK,GAE7D,OADA6wE,EAAS3qB,YAAc,EAAAh5B,KAAKntB,IACpBqM,EAAKrB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAAgB,OAAOzO,EAAOo9D,YAAYnxD,EAAMC,EAAMC,EAAM2D,EAAK20C,gBAMxE,OAJA8vB,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,cAAehlE,EAAKxD,YAElDtM,EAAO69D,cA4gBhB,SAAS6c,EAAmBpG,EAAqBxpE,GAC/C,IAAIypE,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB26E,GAAgBrG,GAChB,IAAI3qC,EAAW2qC,EAAI3qC,SACfsmB,EAAaqkB,EAAIrkB,WAUrB,OATAskB,EAAStmE,eACP,EAAAxC,eAAemvE,eACf9vE,EACAmlD,EAAWlkD,MACX,KACA49B,EAAS58B,OACL48B,EAAS,GAAG59B,MAAMO,WAClB2jD,EAAWlkD,MAAMO,YAEhBxB,GAAY,EAAAF,mBAAmBM,MAClClL,EAAO69D,cACP79D,EAAO2rC,MAuBb,SAASkvC,EAAmBvG,EAAqB/iE,GAC/C,IAAIgjE,EAAWD,EAAIC,SACnB,OACEoG,GAAgBrG,GAChBG,GAAkBH,EAAK,IAEvBC,EAAS3qB,YAAcr4C,EAChBgjE,EAASv0E,OAAO69D,eAElB0W,EAASG,kBAAkBJ,EAAI3qC,SAAS,GAAIp4B,EAAQ,GA0F7D,SAASupE,EAAcxG,GACrB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBqG,GAAgBrG,GAChBG,GAAkBH,EAAK,IAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACfR,EAAQ,IAAIpgC,WAAW,IAC3B,IAAK,IAAIrI,EAAI,EAAGA,EAAI,KAAMA,EAAG,CAC3B,IAAI8oC,EAAO+qC,EAASG,kBAAkB/qC,EAASjpC,GAAI,EAAAkwB,KAAKrtB,GAAI,GACxD20C,EAAUl4C,EAAO+6E,cAAcvxC,EAAM,EAAA5B,sBAAsBozC,qBAC3D9iC,EACF,EAAA/S,QAAQ,EAAA0wB,iBAAiB3d,GAAU/O,EAAOzoC,GAE1C6zE,EAASztD,MACP,EAAArb,eAAewvE,2CACftxC,EAASjpC,GAAGqL,OAKlB,OADAwoE,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAOoE,KAAK+kC,GAkKrB,SAAS+xC,EAAmB5G,GAC1B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI75B,EAAM,GAEzD,GADAykE,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,MACvB0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EAAa,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQg0C,WAAYlvE,GAC1D,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQi0C,WAAYnvE,GAC3D,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQk0C,WAAYpvE,GAC3D,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQm0C,WAAYrvE,GAC3D,KAAK,EACL,KAAK,EACH,OAAOjM,EAAO20E,MACZJ,EAASlmD,QAAQgD,SACb,EAAA8V,QAAQm0C,WACR,EAAAn0C,QAAQk0C,WACZpvE,GAGJ,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQo0C,WAAYtvE,GAC3D,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQq0C,WAAYvvE,GAO/D,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,aAAchlE,EAAKxD,YAEjDtM,EAAO69D,cAKhB,SAAS4d,EAA0BnH,GACjC,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKhtB,GAAI,GAC5D2wE,EAAS3qB,YAAc95C,EACvB,IAAI4+B,EAAM,EACNwJ,EAAUl4C,EAAO+6E,cAAc7uE,EAAM,EAAA07B,sBAAsBozC,qBAS/D,GARI9iC,EACFxJ,EAAM,EAAAmnB,iBAAiB3d,GAEvBq8B,EAASztD,MACP,EAAArb,eAAewvE,2CACftxC,EAAS,GAAG59B,QAGX+D,EAAKopB,GAAG,KAAsB,CACjC,IAAIwiD,EAAU,GAAKvwE,OAAO2E,EAAKszC,UAAa,EAQ5C,QAPI1U,EAAM,GAAKA,EAAMgtC,KACnBnH,EAASztD,MACP,EAAArb,eAAekwE,6CACfhyC,EAAS,GAAG59B,MAAO,aAAc,IAAK2vE,EAAOpvE,YAE/CoiC,EAAM,GAEA5+B,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAO47E,aAAa,EAAAr0C,cAAcs0C,iBAAkB5vE,EAAUyiC,GACvF,KAAK,EAAa,OAAO1uC,EAAO47E,aAAa,EAAAr0C,cAAcu0C,iBAAkB7vE,EAAUyiC,GACvF,KAAK,EAAc,OAAO1uC,EAAO47E,aAAa,EAAAr0C,cAAcw0C,iBAAkB9vE,EAAUyiC,GACxF,KAAK,EAAc,OAAO1uC,EAAO47E,aAAa,EAAAr0C,cAAcy0C,iBAAkB/vE,EAAUyiC,GACxF,KAAK,EACL,KAAK,EAAc,OAAO1uC,EAAO47E,aAAa,EAAAr0C,cAAc00C,iBAAkBhwE,EAAUyiC,GACxF,KAAK,EACL,KAAK,EAAc,OAAO1uC,EAAO47E,aAAa,EAAAr0C,cAAc20C,iBAAkBjwE,EAAUyiC,GACxF,KAAK,EACL,KAAK,EACH,OAAO1uC,EAAO47E,aACZrH,EAASlmD,QAAQgD,SACb,EAAAkW,cAAc20C,iBACd,EAAA30C,cAAc00C,iBAClBhwE,EAAUyiC,GAGd,KAAK,GAAc,OAAO1uC,EAAO47E,aAAa,EAAAr0C,cAAc40C,iBAAkBlwE,EAAUyiC,GACxF,KAAK,GAAc,OAAO1uC,EAAO47E,aAAa,EAAAr0C,cAAc60C,iBAAkBnwE,EAAUyiC,IAO5F,OAJA6lC,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,oBAAqBhlE,EAAKxD,YAExDtM,EAAO69D,cAKhB,SAASwe,EAA0B/H,GACjC,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKhtB,GAAI,GACxDuI,EAAOooE,EAASG,kBAAkB/qC,EAAS,GAAI75B,EAAM,GACzDykE,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KAC5B,IAAIsqC,EAAM,EACNwJ,EAAUl4C,EAAO+6E,cAAc7uE,EAAM,EAAA07B,sBAAsBozC,qBAS/D,GARI9iC,EACFxJ,EAAM,EAAAmnB,iBAAiB3d,GAEvBq8B,EAASztD,MACP,EAAArb,eAAewvE,2CACftxC,EAAS,GAAG59B,QAGX+D,EAAKopB,GAAG,KAAsB,CACjC,IAAIwiD,EAAU,GAAKvwE,OAAO2E,EAAKszC,UAAa,EAQ5C,QAPI1U,EAAM,GAAKA,EAAMgtC,KACnBnH,EAASztD,MACP,EAAArb,eAAekwE,6CACfhyC,EAAS,GAAG59B,MAAO,aAAc,IAAK2vE,EAAOpvE,YAE/CoiC,EAAM,GAEA5+B,EAAKrB,MACX,KAAK,EACL,KAAK,EAAa,OAAOzO,EAAOs8E,aAAa,EAAA90C,cAAc+0C,iBAAkBtwE,EAAUyiC,EAAKviC,GAC5F,KAAK,EACL,KAAK,EAAc,OAAOnM,EAAOs8E,aAAa,EAAA90C,cAAcg1C,iBAAkBvwE,EAAUyiC,EAAKviC,GAC7F,KAAK,EACL,KAAK,EAAc,OAAOnM,EAAOs8E,aAAa,EAAA90C,cAAci1C,iBAAkBxwE,EAAUyiC,EAAKviC,GAC7F,KAAK,EACL,KAAK,EAAc,OAAOnM,EAAOs8E,aAAa,EAAA90C,cAAck1C,iBAAkBzwE,EAAUyiC,EAAKviC,GAC7F,KAAK,EACL,KAAK,EACH,OAAOnM,EAAOs8E,aACZ/H,EAASlmD,QAAQgD,SACb,EAAAmW,cAAck1C,iBACd,EAAAl1C,cAAci1C,iBAClBxwE,EAAUyiC,EAAKviC,GAGnB,KAAK,GAAc,OAAOnM,EAAOs8E,aAAa,EAAA90C,cAAcm1C,iBAAkB1wE,EAAUyiC,EAAKviC,GAC7F,KAAK,GAAc,OAAOnM,EAAOs8E,aAAa,EAAA90C,cAAco1C,iBAAkB3wE,EAAUyiC,EAAKviC,IAOjG,OAJAooE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,oBAAqBhlE,EAAKxD,YAExDtM,EAAO69D,cAKhB,SAASgf,EAAqBvI,GAC5B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAGlB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACzB,IAAKe,EAAKopB,GAAG,KAAsB,CACjC,IAAI4jD,EAAYhtE,EAAKszC,SACjB25B,EAAY,GAAKD,EAErB,GADA3xE,OAAO8vD,UAAU8hB,IAAc,EAAAhsB,WAAWgsB,IAExCtI,GAAkBH,EAAK,EAAIyI,GAG3B,OADAxI,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAI5xD,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,OAAQ0L,EAAKrB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GAAc,CACjB,IAAIsgC,EAAO,IAAIhmC,WAAW,IACtB2yE,GAAUqB,GAAa,GAAK,EAChC,IAAK,IAAIr8E,EAAI,EAAGA,EAAIq8E,IAAar8E,EAAG,CAClC,IAAI8U,EAAUm0B,EAAS,EAAIjpC,GACvBs8E,EAAOzI,EAASG,kBAAkBl/D,EAAS,EAAAob,KAAKhtB,GAAI,GACpDs0C,EAAUl4C,EAAO+6E,cAAciC,EAAM,EAAAp1C,sBAAsBozC,qBAC3DtsC,EAAM,EAgBV,OAfIwJ,GACFxJ,EAAM,EAAAmnB,iBAAiB3d,IACnBxJ,EAAM,GAAKA,EAAMgtC,KACnBnH,EAASztD,MACP,EAAArb,eAAekwE,6CACfnmE,EAAQzJ,MAAO,aAAc,IAAK2vE,EAAOpvE,YAE3CoiC,EAAM,IAGR6lC,EAASztD,MACP,EAAArb,eAAewvE,2CACfzlE,EAAQzJ,OAGJ+wE,GACN,KAAK,EACH,EAAA33C,QAAQuJ,EAAKK,EAAMruC,GACnB,MAEF,KAAK,EAAG,CACN,IAAIu8E,EAAOv8E,GAAK,EACZw8E,EAAOxuC,GAAO,EAClB,EAAAvJ,QAAQ+3C,EAAUnuC,EAAMkuC,GACxB,EAAA93C,QAAQ+3C,EAAO,EAAGnuC,EAAMkuC,EAAO,GAC/B,MAEF,KAAK,EAAG,CACN,IAAIA,EAAOv8E,GAAK,EACZw8E,EAAOxuC,GAAO,EAClB,EAAAvJ,QAAQ+3C,EAAUnuC,EAAMkuC,GACxB,EAAA93C,QAAQ+3C,EAAO,EAAGnuC,EAAMkuC,EAAO,GAC/B,EAAA93C,QAAQ+3C,EAAO,EAAGnuC,EAAMkuC,EAAO,GAC/B,EAAA93C,QAAQ+3C,EAAO,EAAGnuC,EAAMkuC,EAAO,GAC/B,MAEF,KAAK,EAAG,CACN,IAAIA,EAAOv8E,GAAK,EACZw8E,EAAOxuC,GAAO,EAClB,EAAAvJ,QAAQ+3C,EAAUnuC,EAAMkuC,GACxB,EAAA93C,QAAQ+3C,EAAO,EAAGnuC,EAAMkuC,EAAO,GAC/B,EAAA93C,QAAQ+3C,EAAO,EAAGnuC,EAAMkuC,EAAO,GAC/B,EAAA93C,QAAQ+3C,EAAO,EAAGnuC,EAAMkuC,EAAO,GAC/B,EAAA93C,QAAQ+3C,EAAO,EAAGnuC,EAAMkuC,EAAO,GAC/B,EAAA93C,QAAQ+3C,EAAO,EAAGnuC,EAAMkuC,EAAO,GAC/B,EAAA93C,QAAQ+3C,EAAO,EAAGnuC,EAAMkuC,EAAO,GAC/B,EAAA93C,QAAQ+3C,EAAO,EAAGnuC,EAAMkuC,EAAO,GAC/B,MAEF,QAAS9xE,QAAO,IAIpB,OADAopE,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAOm9E,aAAalxE,EAAMC,EAAM6iC,KAS7C,OALAwlC,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,eAAgBhlE,EAAKxD,YAE1DioE,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAKhB,SAASuf,EAAqB9I,GAC5B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBqG,GAAgBrG,GAChBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf19B,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,OAAOpE,EAAOq1E,OAAO,EAAAjuC,SAASi2C,aAAcpxE,EAAMC,GAKpD,SAASoxE,EAAwBhJ,GAC/B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAAK,GACvBoE,GAAkBpE,EAAK,EAAG,GAC1B,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI4qC,EAASlmD,QAAQyC,UAAW,GAC3E+nD,EAAclvC,EAAS58B,OACvB+rE,EAAY,EACZC,EAAWjpE,EAAKszC,SACpB,GAAIy1B,GAAe,EAAG,CAEpB,IADAC,EAAYE,GAAwBrvC,EAAS,GAAI4qC,IACjC,EAEd,OADAA,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,GAAmB,GAAfgb,IACFE,EAAWE,GAAuBtvC,EAAS,GAAIovC,EAAUxE,IAC1C,EAEb,OADAA,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAKpB,GADA0W,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,MACvB0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EACH,OAAOzO,EAAOu9E,UAAU,EAAA51C,WAAW61C,eAAgBvxE,EAAM6sE,EAAWC,GAEtE,KAAK,EACL,KAAK,EACH,OAAO/4E,EAAOu9E,UAAU,EAAA51C,WAAW81C,eAAgBxxE,EAAM6sE,EAAWC,GAEtE,KAAK,EACL,KAAK,EACL,KAAK,GACH,OAAO/4E,EAAOu9E,UAAU,EAAA51C,WAAW+1C,eAAgBzxE,EAAM6sE,EAAWC,GAEtE,KAAK,EACL,KAAK,EACH,IAAKxE,EAASlmD,QAAQgD,SACpB,OAAOrxB,EAAOu9E,UAAU,EAAA51C,WAAW+1C,eAAgBzxE,EAAM6sE,EAAWC,GAIxE,KAAK,EACL,KAAK,EACL,KAAK,GACH,OAAO/4E,EAAOu9E,UAAU,EAAA51C,WAAWg2C,eAAgB1xE,EAAM6sE,EAAWC,GAQ1E,OAJAxE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,kBAAmBhlE,EAAKxD,YAEtDtM,EAAO69D,cAKhB,SAAS+f,EAAsBtJ,GAC7B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAAK,GACvBoE,GAAkBpE,EAAK,EAAG,GAC1B,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI4qC,EAASlmD,QAAQyC,UAAW,GAC3E+nD,EAAclvC,EAAS58B,OACvB+rE,EAAY,EACZC,EAAWjpE,EAAKszC,SACpB,GAAIy1B,GAAe,EAAG,CAEpB,IADAC,EAAYE,GAAwBrvC,EAAS,GAAI4qC,IACjC,EAEd,OADAA,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,GAAmB,GAAfgb,IACFE,EAAWE,GAAuBtvC,EAAS,GAAIovC,EAAUxE,IAC1C,EAEb,OADAA,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAKpB,GADA0W,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,MACvB0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAOu9E,UAAU,EAAA51C,WAAWk2C,cAAe5xE,EAAM6sE,EAAWC,GACrF,KAAK,EAAa,OAAO/4E,EAAOu9E,UAAU,EAAA51C,WAAWm2C,cAAe7xE,EAAM6sE,EAAWC,GACrF,KAAK,EAAc,OAAO/4E,EAAOu9E,UAAU,EAAA51C,WAAWo2C,eAAgB9xE,EAAM6sE,EAAWC,GACvF,KAAK,EAAc,OAAO/4E,EAAOu9E,UAAU,EAAA51C,WAAWq2C,eAAgB/xE,EAAM6sE,EAAWC,GACvF,KAAK,EACH,GAAIxE,EAASlmD,QAAQgD,SAAU,MAGjC,KAAK,EAAc,OAAOrxB,EAAOu9E,UAAU,EAAA51C,WAAWs2C,eAAgBhyE,EAAM6sE,EAAWC,GACvF,KAAK,EACH,GAAIxE,EAASlmD,QAAQgD,SAAU,MAGjC,KAAK,EAAc,OAAOrxB,EAAOu9E,UAAU,EAAA51C,WAAWu2C,eAAgBjyE,EAAM6sE,EAAWC,GAO3F,OAJAxE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,gBAAiBhlE,EAAKxD,YAEpDtM,EAAO69D,cAKhB,SAASsgB,EAAiB7J,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EAAa,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAASg3C,SAAUnyE,EAAMC,GAChE,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASi3C,SAAUpyE,EAAMC,GACjE,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASk3C,SAAUryE,EAAMC,GACjE,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASm3C,SAAUtyE,EAAMC,GACjE,KAAK,EACL,KAAK,EACH,OAAOlM,EAAOq1E,OACZd,EAASlmD,QAAQgD,SACb,EAAA+V,SAASm3C,SACT,EAAAn3C,SAASk3C,SACbryE,EAAMC,GAGV,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASo3C,SAAUvyE,EAAMC,GACjE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASq3C,SAAUxyE,EAAMC,GAOrE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAE/CtM,EAAO69D,cAKhB,SAAS6gB,EAAiBpK,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EAAa,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAASu3C,SAAU1yE,EAAMC,GAChE,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASw3C,SAAU3yE,EAAMC,GACjE,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASy3C,SAAU5yE,EAAMC,GACjE,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS03C,SAAU7yE,EAAMC,GACjE,KAAK,EACL,KAAK,EACH,OAAOlM,EAAOq1E,OACZd,EAASlmD,QAAQgD,SACb,EAAA+V,SAAS03C,SACT,EAAA13C,SAASy3C,SACb5yE,EAAMC,GAGV,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS23C,SAAU9yE,EAAMC,GACjE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS43C,SAAU/yE,EAAMC,GAOrE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAE/CtM,EAAO69D,cAKhB,SAASohB,EAAiB3K,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EAAa,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAAS83C,SAAUjzE,EAAMC,GAChE,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS+3C,SAAUlzE,EAAMC,GACjE,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASg4C,SAAUnzE,EAAMC,GACjE,KAAK,EACL,KAAK,EACH,IAAKqoE,EAASlmD,QAAQgD,SACpB,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAASg4C,SAAUnzE,EAAMC,GAEhD,MAEF,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASi4C,SAAUpzE,EAAMC,GACjE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASk4C,SAAUrzE,EAAMC,GAOrE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAE/CtM,EAAO69D,cAKhB,SAAS0hB,GAAiBjL,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,GAAc,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAASo4C,SAAUvzE,EAAMC,GACjE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASq4C,SAAUxzE,EAAMC,GAOrE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAE/CtM,EAAO69D,cAKhB,SAAS6hB,GAA0BpL,GACjC,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAASu4C,YAAa1zE,EAAMC,GACnE,KAAK,EAAa,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASw4C,YAAa3zE,EAAMC,GACnE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASy4C,YAAa5zE,EAAMC,GACpE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS04C,YAAa7zE,EAAMC,GAOxE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,oBAAqBhlE,EAAKxD,YAExDtM,EAAO69D,cAKhB,SAASkiB,GAA0BzL,GACjC,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAAS44C,YAAa/zE,EAAMC,GACnE,KAAK,EAAa,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS64C,YAAah0E,EAAMC,GACnE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS84C,YAAaj0E,EAAMC,GACpE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS+4C,YAAal0E,EAAMC,GAOxE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,oBAAqBhlE,EAAKxD,YAExDtM,EAAO69D,cAKhB,SAASuiB,GAAiB9L,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAASi5C,SAAUp0E,EAAMC,GAChE,KAAK,EAAa,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASk5C,SAAUr0E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASm5C,SAAUt0E,EAAMC,GACjE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASo5C,SAAUv0E,EAAMC,GACjE,KAAK,EACH,GAAIqoE,EAASlmD,QAAQgD,SAAU,MAGjC,KAAK,EAAc,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAASq5C,SAAUx0E,EAAMC,GACjE,KAAK,EACH,GAAIqoE,EAASlmD,QAAQgD,SAAU,MAGjC,KAAK,EAAc,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAASs5C,SAAUz0E,EAAMC,GACjE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASu5C,SAAU10E,EAAMC,GACjE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASw5C,SAAU30E,EAAMC,GAOrE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAE/CtM,EAAO69D,cAKhB,SAASgjB,GAAiBvM,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAAS05C,SAAU70E,EAAMC,GAChE,KAAK,EAAa,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS25C,SAAU90E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS45C,SAAU/0E,EAAMC,GACjE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS65C,SAAUh1E,EAAMC,GACjE,KAAK,EACH,GAAIqoE,EAASlmD,QAAQgD,SAAU,MAGjC,KAAK,EAAc,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAAS85C,SAAUj1E,EAAMC,GACjE,KAAK,EACH,GAAIqoE,EAASlmD,QAAQgD,SAAU,MAGjC,KAAK,EAAc,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAAS+5C,SAAUl1E,EAAMC,GACjE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASg6C,SAAUn1E,EAAMC,GACjE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASi6C,SAAUp1E,EAAMC,GAOrE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAE/CtM,EAAO69D,cAKhB,SAASyjB,GAAiBhN,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAc,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAASm6C,SAAUt1E,EAAMC,GAOrE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAE/CtM,EAAO69D,cAKhB,SAAS2jB,GAAkBlN,GACzB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAc,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAASq6C,UAAWx1E,EAAMC,GAClE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASs6C,UAAWz1E,EAAMC,GAOtE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,YAAahlE,EAAKxD,YAEhDtM,EAAO69D,cAKhB,SAAS8jB,GAAgBrN,GACvB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACH,KAAK,EAAa,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAASw6C,QAAS31E,EAAMC,GAC/D,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASy6C,QAAS51E,EAAMC,GAChE,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS06C,QAAS71E,EAAMC,GAChE,KAAK,EACL,KAAK,EACH,IAAKqoE,EAASlmD,QAAQgD,SACpB,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAAS06C,QAAS71E,EAAMC,GAE/C,MAEF,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS26C,QAAS91E,EAAMC,GAChE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS46C,QAAS/1E,EAAMC,GAOtE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,UAAWhlE,EAAKxD,YAE9CtM,EAAO69D,cAKhB,SAASokB,GAAgB3N,GACvB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACH,KAAK,EAAa,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAAS86C,QAASj2E,EAAMC,GAC/D,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS+6C,QAASl2E,EAAMC,GAChE,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASg7C,QAASn2E,EAAMC,GAChE,KAAK,EACL,KAAK,EACH,IAAKqoE,EAASlmD,QAAQgD,SACpB,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAASg7C,QAASn2E,EAAMC,GAE/C,MAEF,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASi7C,QAASp2E,EAAMC,GAChE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASk7C,QAASr2E,EAAMC,GAOtE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,UAAWhlE,EAAKxD,YAE9CtM,EAAO69D,cAKhB,SAAS0kB,GAAgBjO,GACvB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAASo7C,QAASv2E,EAAMC,GAC/D,KAAK,EAAa,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASq7C,QAASx2E,EAAMC,GAC/D,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASs7C,QAASz2E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASu7C,QAAS12E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASw7C,QAAS32E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASy7C,QAAS52E,EAAMC,GAChE,KAAK,EACH,IAAKqoE,EAASlmD,QAAQgD,SACpB,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAASw7C,QAAS32E,EAAMC,GAE/C,MAEF,KAAK,EACH,IAAKqoE,EAASlmD,QAAQgD,SACpB,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAASy7C,QAAS52E,EAAMC,GAE/C,MAEF,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS07C,QAAS72E,EAAMC,GAChE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS27C,QAAS92E,EAAMC,GAOpE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,UAAWhlE,EAAKxD,YAE9CtM,EAAO69D,cAKhB,SAASmlB,GAAgB1O,GACvB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAAS67C,QAASh3E,EAAMC,GAC/D,KAAK,EAAa,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS87C,QAASj3E,EAAMC,GAC/D,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS+7C,QAASl3E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASg8C,QAASn3E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASi8C,QAASp3E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASk8C,QAASr3E,EAAMC,GAChE,KAAK,EACH,IAAKqoE,EAASlmD,QAAQgD,SACpB,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAASi8C,QAASp3E,EAAMC,GAE/C,MAEF,KAAK,EACH,IAAKqoE,EAASlmD,QAAQgD,SACpB,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAASk8C,QAASr3E,EAAMC,GAE/C,MAEF,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASm8C,QAASt3E,EAAMC,GAChE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASo8C,QAASv3E,EAAMC,GAOpE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,UAAWhlE,EAAKxD,YAE9CtM,EAAO69D,cAKhB,SAAS4lB,GAAgBnP,GACvB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAASs8C,QAASz3E,EAAMC,GAC/D,KAAK,EAAa,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASu8C,QAAS13E,EAAMC,GAC/D,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASw8C,QAAS33E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASy8C,QAAS53E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS08C,QAAS73E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS28C,QAAS93E,EAAMC,GAChE,KAAK,EACH,IAAKqoE,EAASlmD,QAAQgD,SACpB,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAAS08C,QAAS73E,EAAMC,GAE/C,MAEF,KAAK,EACH,IAAKqoE,EAASlmD,QAAQgD,SACpB,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAAS28C,QAAS93E,EAAMC,GAE/C,MAEF,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS48C,QAAS/3E,EAAMC,GAChE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS68C,QAASh4E,EAAMC,GAOpE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,UAAWhlE,EAAKxD,YAE9CtM,EAAO69D,cAKhB,SAASqmB,GAAgB5P,GACvB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAAS+8C,QAASl4E,EAAMC,GAC/D,KAAK,EAAa,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASg9C,QAASn4E,EAAMC,GAC/D,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASi9C,QAASp4E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASk9C,QAASr4E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASm9C,QAASt4E,EAAMC,GAChE,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASo9C,QAASv4E,EAAMC,GAChE,KAAK,EACH,IAAKqoE,EAASlmD,QAAQgD,SACpB,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAASm9C,QAASt4E,EAAMC,GAE/C,MAEF,KAAK,EACH,IAAKqoE,EAASlmD,QAAQgD,SACpB,OAAOrxB,EAAOq1E,OAAO,EAAAjuC,SAASo9C,QAASv4E,EAAMC,GAE/C,MAEF,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASq9C,QAASx4E,EAAMC,GAChE,KAAK,GAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASs9C,QAASz4E,EAAMC,GAOpE,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,UAAWhlE,EAAKxD,YAE9CtM,EAAO69D,cAKhB,SAAS8mB,GAAoBrQ,GAC3B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAc,OAAOzO,EAAOq1E,OAAO,EAAAjuC,SAASw9C,mBAAoB34E,EAAMC,GAC3E,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAASy9C,mBAAoB54E,EAAMC,GAC3E,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS09C,mBAAoB74E,EAAMC,GAC3E,KAAK,EAAc,OAAOlM,EAAOq1E,OAAO,EAAAjuC,SAAS29C,mBAAoB94E,EAAMC,GAO/E,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,cAAehlE,EAAKxD,YAElDtM,EAAO69D,cAKhB,SAASmnB,GAAiB1Q,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EAAa,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQ89C,SAAUh5E,GACxD,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQ+9C,SAAUj5E,GACzD,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQg+C,SAAUl5E,GACzD,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQi+C,SAAUn5E,GACzD,KAAK,EACL,KAAK,EACH,OAAOjM,EAAO20E,MACZJ,EAASlmD,QAAQgD,SACb,EAAA8V,QAAQi+C,SACR,EAAAj+C,QAAQg+C,SACZl5E,GAGJ,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQk+C,SAAUp5E,GACzD,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQm+C,SAAUr5E,GAO7D,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAE/CtM,EAAO69D,cAKhB,SAAS0nB,GAAiBjR,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQq+C,SAAUv5E,GACxD,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQs+C,SAAUx5E,GACzD,KAAK,EACH,GAAIsoE,EAASlmD,QAAQgD,SAAU,MAGjC,KAAK,EAAc,OAAOrxB,EAAO20E,MAAM,EAAAxtC,QAAQu+C,SAAUz5E,GACzD,KAAK,EACH,GAAIsoE,EAASlmD,QAAQgD,SAAU,MAGjC,KAAK,EACL,KAAK,EACL,KAAK,EAAc,OAAOplB,EAC1B,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQw+C,SAAU15E,GACzD,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQy+C,SAAU35E,GAO7D,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAE/CtM,EAAO69D,cAKhB,SAASgoB,GAAkBvR,GACzB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,GAAc,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQ2+C,UAAW75E,GAC1D,KAAK,GAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQ4+C,UAAW95E,GAO9D,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,YAAahlE,EAAKxD,YAEhDtM,EAAO69D,cAKhB,SAASmoB,GAAqB1R,GAC5B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAc,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQ8+C,oBAAqBh6E,GACpE,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQ++C,oBAAqBj6E,GACpE,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQg/C,oBAAqBl6E,GACpE,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQi/C,oBAAqBn6E,GAOxE,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,eAAgBhlE,EAAKxD,YAEnDtM,EAAO69D,cAKhB,SAASwoB,GAAuB/R,GAC9B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAc,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQm/C,qBAAsBr6E,GACrE,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQo/C,qBAAsBt6E,GACrE,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQq/C,qBAAsBv6E,GACrE,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQs/C,qBAAsBx6E,GAOzE,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,iBAAkBhlE,EAAKxD,YAErDtM,EAAO69D,cAKhB,SAAS6oB,GAAuBpS,GAC9B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQw/C,qBAAsB16E,GACpE,KAAK,EAAa,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQy/C,qBAAsB36E,GACpE,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQ0/C,qBAAsB56E,GACrE,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQ2/C,qBAAsB76E,GAOzE,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,iBAAkBhlE,EAAKxD,YAErDtM,EAAO69D,cAKhB,SAASkpB,GAAwBzS,GAC/B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf75B,EADgBwkE,EAAIvlE,cACC,GACrB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQ6/C,sBAAuB/6E,GACrE,KAAK,EAAa,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQ8/C,sBAAuBh7E,GACrE,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQ+/C,sBAAuBj7E,GACtE,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQggD,sBAAuBl7E,GAO1E,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,kBAAmBhlE,EAAKxD,YAEtDtM,EAAO69D,cAKhB,SAASupB,GAAiB9S,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf75B,EAAOwkE,EAAIvlE,cAAe,GAC1B9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKntB,IAAK,GAE7D,GADA8wE,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,MACvB0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EAAa,OAAOzO,EAAOqnF,WAAW,EAAA5/C,YAAY6/C,SAAUr7E,EAAMC,GACvE,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOqnF,WAAW,EAAA5/C,YAAY8/C,SAAUt7E,EAAMC,GACxE,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOqnF,WAAW,EAAA5/C,YAAY+/C,SAAUv7E,EAAMC,GACxE,KAAK,EACL,KAAK,EAAc,OAAOlM,EAAOqnF,WAAW,EAAA5/C,YAAYggD,SAAUx7E,EAAMC,GACxE,KAAK,EACL,KAAK,EACH,OAAOlM,EAAOqnF,WACZ9S,EAASlmD,QAAQgD,SACb,EAAAoW,YAAYggD,SACZ,EAAAhgD,YAAY+/C,SAChBv7E,EAAMC,GASd,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAE/CtM,EAAO69D,cAKhB,SAAS6pB,GAAiBpT,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf75B,EAAOwkE,EAAIvlE,cAAe,GAC1B9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKntB,IAAK,GAE7D,GADA8wE,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,MACvB0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EAAa,OAAOzO,EAAOqnF,WAAW,EAAA5/C,YAAYkgD,SAAU17E,EAAMC,GACvE,KAAK,EAAa,OAAOlM,EAAOqnF,WAAW,EAAA5/C,YAAYmgD,SAAU37E,EAAMC,GACvE,KAAK,EAAc,OAAOlM,EAAOqnF,WAAW,EAAA5/C,YAAYogD,SAAU57E,EAAMC,GACxE,KAAK,EAAc,OAAOlM,EAAOqnF,WAAW,EAAA5/C,YAAYqgD,SAAU77E,EAAMC,GACxE,KAAK,EAAc,OAAOlM,EAAOqnF,WAAW,EAAA5/C,YAAYsgD,SAAU97E,EAAMC,GACxE,KAAK,EAAc,OAAOlM,EAAOqnF,WAAW,EAAA5/C,YAAYugD,SAAU/7E,EAAMC,GACxE,KAAK,EAAc,OAAOlM,EAAOqnF,WAAW,EAAA5/C,YAAYwgD,SAAUh8E,EAAMC,GACxE,KAAK,EAAc,OAAOlM,EAAOqnF,WAAW,EAAA5/C,YAAYygD,SAAUj8E,EAAMC,GACxE,KAAK,EACH,OAAOlM,EAAOqnF,WACZ9S,EAASlmD,QAAQgD,SACb,EAAAoW,YAAYwgD,SACZ,EAAAxgD,YAAYsgD,SAChB97E,EAAMC,GAGV,KAAK,EACH,OAAOlM,EAAOqnF,WACZ9S,EAASlmD,QAAQgD,SACb,EAAAoW,YAAYygD,SACZ,EAAAzgD,YAAYugD,SAChB/7E,EAAMC,GASd,OAJAqoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAE/CtM,EAAO69D,cAIhB,SAASsqB,GAA4B7T,EAAqB/qC,GACxD,IAAIgrC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBqG,GAAgBrG,GAChBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf19B,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,OAAOpE,EAAOq1E,OAAO9rC,EAAIt9B,EAAMC,GA0EjC,SAASk8E,GAAsB9T,GAC7B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACrBjE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf75B,EAAOwkE,EAAIvlE,cAAe,GAC1B9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAE9D,GADAmwE,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,MACvB6L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EAAa,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQkhD,aAAcp8E,GAC5D,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQmhD,aAAcr8E,GAC7D,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQohD,aAAct8E,GAC7D,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQqhD,aAAcv8E,GAC7D,KAAK,EACL,KAAK,EACH,OAAOjM,EAAO20E,MACZJ,EAASlmD,QAAQgD,SACb,EAAA8V,QAAQqhD,aACR,EAAArhD,QAAQohD,aACZt8E,GASR,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,gBAAiBhlE,EAAKxD,YAEpDtM,EAAO69D,cAKhB,SAAS4qB,GAAsBnU,GAC7B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACrBjE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf75B,EAAOwkE,EAAIvlE,cAAe,GAC1B9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAE9D,GADAmwE,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,MACvB6L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EAAa,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQuhD,aAAcz8E,GAC5D,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQwhD,aAAc18E,GAC7D,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQyhD,aAAc38E,GAC7D,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQ0hD,aAAc58E,GAC7D,KAAK,EACL,KAAK,EACH,OAAOjM,EAAO20E,MACZJ,EAASlmD,QAAQgD,SACb,EAAA8V,QAAQ0hD,aACR,EAAA1hD,QAAQyhD,aACZ38E,GASR,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,gBAAiBhlE,EAAKxD,YAEpDtM,EAAO69D,cAKhB,SAASirB,GAAqBxU,GAC5B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKntB,IACrBzD,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf75B,EAAOwkE,EAAIvlE,cAAe,GAC1B9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAE9D,GADAmwE,EAAS3qB,YAAc,EAAAh5B,KAAKntB,KACvBqM,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,EACL,KAAK,EAAa,OAAOzO,EAAO20E,MAAM,EAAAxtC,QAAQ4hD,aAAc98E,GAC5D,KAAK,EACL,KAAK,EAAc,OAAOjM,EAAO20E,MAAM,EAAAxtC,QAAQ6hD,aAAc/8E,GAC7D,KAAK,EACL,KAAK,EACH,GAAIsoE,EAASlmD,QAAQgD,SAAU,MAGjC,KAAK,EACL,KAAK,EAAc,OAAOrxB,EAAO20E,MAAM,EAAAxtC,QAAQ8hD,aAAch9E,GAOjE,OAJAsoE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,eAAgBhlE,EAAKxD,YAEnDtM,EAAO69D,cAKhB,SAASqrB,GAAkB5U,GACzB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf75B,EAAOwkE,EAAIvlE,cAAe,GAC1B9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D+H,EAAOooE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,GAAc,OAAOzO,EAAOmpF,aAAa,EAAAzhD,cAAc0hD,UAAWn9E,EAAMC,EAAMC,GACnF,KAAK,GAAc,OAAOnM,EAAOmpF,aAAa,EAAAzhD,cAAc2hD,UAAWp9E,EAAMC,EAAMC,GAOvF,OAJAooE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,YAAahlE,EAAKxD,YAEhDtM,EAAO69D,cAKhB,SAASyrB,GAAkBhV,GACzB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBwD,GAAkBxD,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf75B,EAAOwkE,EAAIvlE,cAAe,GAC1B9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D+H,EAAOooE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,IAAK0L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MACX,KAAK,GAAc,OAAOzO,EAAOmpF,aAAa,EAAAzhD,cAAc6hD,UAAWt9E,EAAMC,EAAMC,GACnF,KAAK,GAAc,OAAOnM,EAAOmpF,aAAa,EAAAzhD,cAAc8hD,UAAWv9E,EAAMC,EAAMC,GAOvF,OAJAooE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,YAAahlE,EAAKxD,YAEhDtM,EAAO69D,cAm9FhB,SAAS4rB,GAAmB35E,GAC1B,IAAIyE,EAAQ,IAA+B,GAAKzE,EAAK45E,WAKrD,OAJI55E,EAAKopB,GAAG,KAAmB3kB,GAAS,MACpCzE,EAAKopB,GAAG,KAAkB3kB,GAAS,MACnCzE,EAAKopB,GAAG,OAAqB3kB,GAAS,MACtCzE,EAAK8rD,YAAWrnD,GAAS,OACtBA,EAAQ,GA4HjB,SAASo1E,GAAqBrV,GAC5B,IAAIC,EAAWD,EAAIC,SACf5qC,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACxB,GAAuB,GAAnB46B,EAAS58B,OACX,OAAKgC,GAAyC,GAAxBA,EAAchC,OAO7BgC,EAAc,IANnBwlE,EAASztD,MACP,EAAArb,eAAe28C,oCACfksB,EAAIrkB,WAAW6kB,mBAAoB,IAAK/lE,EAAgBA,EAAchC,OAAOT,WAAa,KAErF,MAIX,GAAuB,GAAnBq9B,EAAS58B,OAAa,CACxB,GAAsB,OAAlBgC,GAA0BA,EAAchC,OAAS,EAAG,CACtD,GAAIgC,EAAchC,OAAS,EAKzB,OAJAwnE,EAASztD,MACP,EAAArb,eAAe28C,oCACfksB,EAAIrkB,WAAW6kB,mBAAoB,IAAK/lE,EAAchC,OAAOT,YAExD,KAETioE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,QAE1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK4yB,MAE/C,OAAO+wB,EAAS3qB,YAYlB,OAVsB,OAAlB76C,GAA0BA,EAAchC,OAAS,GACnDwnE,EAASztD,MACP,EAAArb,eAAe28C,oCACfksB,EAAIrkB,WAAW6kB,mBAAoB,IAAK/lE,EAAchC,OAAOT,YAGjEioE,EAASztD,MACP,EAAArb,eAAe2wB,+BACfk4C,EAAIrkB,WAAW25B,eAAgB,IAAKjgD,EAAS58B,OAAOT,YAE/C,KAIT,SAAS0sE,GAAwB1nE,EAAwBijE,GACvD,IACI5yE,EADA3B,EAASu0E,EAASv0E,OAEtB,GAAIu0E,EAASlmD,QAAQgD,SAAU,CAC7B,IAAImY,EAAO+qC,EAASG,kBAAkBpjE,EAAY,EAAAsf,KAAK+yB,QAAS,GAC5DzL,EAAUl4C,EAAO+6E,cAAcvxC,EAAM,EAAA5B,sBAAsBozC,qBAC3D9iC,GACF/sC,OAAwC,GAAjC,EAAA4qD,qBAAqB7d,IAC5Bv2C,EAAQ,EAAAm0D,oBAAoB5d,KAE5Bq8B,EAASztD,MACP,EAAArb,eAAewvE,2CACf3pE,EAAWvF,OAEbpK,GAAS,OAEN,CACL,IAAI6nC,EAAO+qC,EAASG,kBAAkBpjE,EAAY,EAAAsf,KAAKgzB,QAAS,GAC5D1L,EAAUl4C,EAAO+6E,cAAcvxC,EAAM,EAAA5B,sBAAsBozC,qBAC3D9iC,EACFv2C,EAAQ,EAAAk0D,iBAAiB3d,IAEzBq8B,EAASztD,MACP,EAAArb,eAAewvE,2CACf3pE,EAAWvF,OAEbpK,GAAS,GAGb,OAAOA,EAIT,SAASs3E,GAAuB3nE,EAAwBu4E,EAAmBtV,GACzE,IAAIhqC,EAAQyuC,GAAwB1nE,EAAYijE,GAChD,OAAIhqC,EAAQ,EAAUA,EAClBA,EAAQ,GAAKs/C,EAAe,IAC9BtV,EAASztD,MACP,EAAArb,eAAekwE,6CACfrqE,EAAWvF,MAAO,YAAa,IAAK89E,EAAav9E,aAE3C,GAEL,EAAAykD,WAAWxmB,GAOTA,GANLgqC,EAASztD,MACP,EAAArb,eAAeq+E,0BACfx4E,EAAWvF,MAAO,cAEZ,GAMZ,SAASwtE,GAAoBjF,EAAqByV,GAChD,IAAIxV,EAAWD,EAAIC,SACnB,OAAKA,EAASlmD,QAAQyD,WAAWi4D,GAO1B,GANLxV,EAASztD,MACP,EAAArb,eAAeu+E,yBACf1V,EAAIrkB,WAAWlkD,MAAO,EAAAvB,gBAAgBu/E,IAEjC,GAMX,SAASjS,GAAkBxD,EAAqB2V,GAA8B,GAC5E,IAAI1V,EAAWD,EAAIC,SACfxlE,EAAgBulE,EAAIvlE,cACxB,GAAIA,EAAe,CACjB,IAAIsP,EAAmBtP,EAAchC,OACrC,GAAwB,GAApBsR,EAAuB,OAAO,EAClClT,OAAOkT,GACH4rE,IAAuB1V,EAAS3qB,YAAc76C,EAAc,IAChEwlE,EAASztD,MACP,EAAArb,eAAe28C,oCACfksB,EAAIrkB,WAAW6kB,mBAAoB,IAAKz2D,EAAiB/R,iBAG3DioE,EAASztD,MACP,EAAArb,eAAe28C,oCACfksB,EAAIrkB,WAAWlkD,MAAO,IAAK,KAG/B,OAAO,EAIT,SAASyoE,GAAkBF,EAAqB2V,GAA8B,GAC5E,IAAIl7E,EAAgBulE,EAAIvlE,cACxB,GAAIA,EAAe,CACjB,IAAIwlE,EAAWD,EAAIC,SACfl2D,EAAmBtP,EAAchC,OACrC,OAAwB,GAApBsR,EAA8B,GAClClT,OAAOkT,GACH4rE,IAAuB1V,EAAS3qB,YAAc76C,EAAc,IAChEwlE,EAASztD,MACP,EAAArb,eAAe28C,oCACfksB,EAAIrkB,WAAW6kB,mBAAoB,IAAKz2D,EAAiB/R,YAEpD,GAET,OAAO,EAIT,SAASquE,GAAgBrG,GAEvB,GADoBA,EAAIvlE,cACL,CACjB,IAAIzM,EAAYgyE,EAAIhyE,UAKpB,OAJAA,EAAUs7B,QAAQ9W,MAChB,EAAArb,eAAeu7C,sBACfstB,EAAIrkB,WAAW6kB,mBAAoBxyE,EAAUitB,cAExC,EAET,OAAO,EAIT,SAASklD,GAAkBH,EAAqBzpC,GAC9C,IAAIlB,EAAW2qC,EAAI3qC,SACnB,OAAIA,EAAS58B,QAAU89B,GACrBypC,EAAIC,SAASztD,MACX,EAAArb,eAAe2wB,+BACfk4C,EAAIrkB,WAAWlkD,MAAO8+B,EAASv+B,WAAYq9B,EAAS58B,OAAOT,YAEtD,GAEF,EAIT,SAASosE,GAAkBpE,EAAqB4V,EAAsBC,GACpE,IACItR,EADWvE,EAAI3qC,SACQ58B,OAC3B,OAAI8rE,EAAcqR,GAChB5V,EAAIC,SAASztD,MACX,EAAArb,eAAe2+E,wCACf9V,EAAIrkB,WAAWlkD,MAAOm+E,EAAgB59E,WAAYusE,EAAYvsE,YAEzD,GACEusE,EAAcsR,GACvB7V,EAAIC,SAASztD,MACX,EAAArb,eAAe2wB,+BACfk4C,EAAIrkB,WAAWlkD,MAAOo+E,EAAgB79E,WAAYusE,EAAYvsE,YAEzD,GAEF,EAIT,SAAS+9E,GAAgB9V,EAAoB5yE,EAAYg3E,GACvD,IAAI34E,EAASu0E,EAASv0E,OAEtB,GAAI24E,GAAkB,EAAA/nD,KAAK4yB,MAAQm1B,EAAez/C,GAAG,KACnD,OAAQy/C,EAAelqE,MACrB,KAAK,EACH,GAAIy+C,WAAWvrD,GAEb,OADA4yE,EAAS3qB,YAAc,EAAAh5B,KAAKntB,IACrBzD,EAAOyD,IAAIynB,QAAQvpB,IAE5B,MAEF,KAAK,EACH,GAAIwrD,WAAWxrD,GAEb,OADA4yE,EAAS3qB,YAAc,EAAAh5B,KAAK9sB,IACrB9D,EAAOyD,IAAIynB,QAAQvpB,IAE5B,MAEF,KAAK,EACL,KAAK,EAEH,OADA4yE,EAAS3qB,YAAc+uB,EAChB34E,EAAO0D,IAAIwnB,QAAQvpB,GAAQypB,SAASzpB,IAOjD,OAAI4yE,EAASlmD,QAAQgD,UACnBkjD,EAAS3qB,YAAc,EAAAh5B,KAAK+yB,QACrB3jD,EAAO0D,IAAIwnB,QAAQvpB,GAAQypB,SAASzpB,MAE3C4yE,EAAS3qB,YAAc,EAAAh5B,KAAKgzB,QAC5Bz4C,QAAQigB,SAASzpB,IACV3B,EAAOyD,IAAIynB,QAAQvpB,KAxkP9B,yBAkBa,EAAA2oF,SAAW,IAAIliF,IAa5B,EAAAkiF,SAASv8E,IAAIkoB,EAAaglC,WAR1B,SAA2BqZ,GACzB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACvB6L,EACE9P,EAAOyD,IAAIqM,EAAKopB,GAAG,KAAuBppB,EAAKopB,GAAG,KAAuB,EAAI,GADlEl5B,EAAO69D,iBAc3B,EAAAysB,SAASv8E,IAAIkoB,EAAailC,SAR1B,SAAyBoZ,GACvB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACvB6L,EACE9P,EAAOyD,IAAIqM,EAAKopB,GAAG,GAAmB,EAAI,GAD/Bl5B,EAAO69D,iBAc3B,EAAAysB,SAASv8E,IAAIkoB,EAAaklC,WAR1B,SAA2BmZ,GACzB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACvB6L,EACE9P,EAAOyD,IAAIqM,GAAQ,EAAA8gB,KAAK3sB,KAAO,EAAI,GADxBjE,EAAO69D,iBAc3B,EAAAysB,SAASv8E,IAAIkoB,EAAamlC,UAR1B,SAA0BkZ,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACvB6L,EACE9P,EAAOyD,IAAIqM,EAAKopB,GAAG,GAAoB,EAAI,GADhCl5B,EAAO69D,iBAc3B,EAAAysB,SAASv8E,IAAIkoB,EAAaolC,aAR1B,SAA6BiZ,GAC3B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACvB6L,EACE9P,EAAOyD,IAAIqM,EAAKopB,GAAG,KAAuB,EAAI,GADnCl5B,EAAO69D,iBAqB3B,EAAAysB,SAASv8E,IAAIkoB,EAAaqlC,UAf1B,SAA0BgZ,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,GADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,MACvB6L,EAAM,OAAO9P,EAAO69D,cACzB,GAAI/tD,EAAKopB,GAAG,KAAsB,CAChC,IAAIH,EAAiBjpB,EAAKipB,eAC1B,GAAIA,EAAgB,CAClB,IAAIzE,EAAiBigD,EAAS32C,QAAQtJ,eACtC,GAAuB,OAAnBA,GAA2ByE,EAAesrB,eAAe/vB,GAAiB,OAAOt0B,EAAOyD,IAAI,IAGpG,OAAOzD,EAAOyD,IAAI,MAmBpB,EAAA6mF,SAASv8E,IAAIkoB,EAAaslC,SAd1B,SAAyB+Y,GACvB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,GADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,MACvB6L,EAAM,OAAO9P,EAAO69D,cACzB,GAAI/tD,EAAKopB,GAAG,KAAsB,CAChC,IAAIH,EAAiBjpB,EAAKipB,eAC1B,GAAIA,EACF,OAAO/4B,EAAOyD,IAAIs1B,EAAez2B,UAAUkhC,QAAQ+wC,EAAS32C,QAAQrH,gBAAkB,EAAI,GAG9F,OAAOv2B,EAAOyD,IAAI,MAmBpB,EAAA6mF,SAASv8E,IAAIkoB,EAAaulC,aAd1B,SAA6B8Y,GAC3B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,GADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,MACvB6L,EAAM,OAAO9P,EAAO69D,cACzB,GAAI/tD,EAAKopB,GAAG,KAAsB,CAChC,IAAIH,EAAiBjpB,EAAKipB,eAC1B,GAAIA,EACF,OAAO/4B,EAAOyD,IAAIs1B,EAAeyiC,YAAc,EAAI,GAGvD,OAAOx7D,EAAOyD,IAAI,MAapB,EAAA6mF,SAASv8E,IAAIkoB,EAAawlC,YAR1B,SAA4B6Y,GAC1B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACvB6L,EACE9P,EAAOyD,IAAIqM,EAAKwzC,mBAAqB,EAAI,GAD9BtjD,EAAO69D,iBAc3B,EAAAysB,SAASv8E,IAAIkoB,EAAajnB,YAR1B,SAA4BslE,GAC1B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACvB6L,EACE9P,EAAOyD,IAAIqM,EAAKopB,GAAG,KAAsB,EAAI,GADlCl5B,EAAO69D,iBAsB3B,EAAAysB,SAASv8E,IAAIkoB,EAAaylC,WAhB1B,SAA2B4Y,GACzB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAEtB,GADAu0E,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KAE1B02E,GAAgBrG,GAChBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAInrD,EAAU6hE,EAAS7kD,SAAS48B,iBAC9BgoB,EAAI3qC,SAAS,GACb4qC,EAASqB,YACT,EAAAhlD,KAAK4yB,KACL,EAAA4C,WAAWkD,SAEb,OAAOtpD,EAAOyD,IAAIiP,EAAU,EAAI,MAiBlC,EAAA43E,SAASv8E,IAAIkoB,EAAa0lC,YAZ1B,SAA4B2Y,GAC1B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAEtB,GADAu0E,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KAE1B02E,GAAgBrG,GAChBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIr0B,EAAO+qC,EAASG,kBAAkBJ,EAAI3qC,SAAS,GAAI,EAAA/Y,KAAK4yB,MAE5D,OADA+wB,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACrBjE,EAAOyD,IAAI,EAAAooC,gBAAgBrC,IAAS,EAAA7C,aAAa0P,MAAQ,EAAI,MAatE,EAAAi0C,SAASv8E,IAAIkoB,EAAa2lC,WAR1B,SAA2B0Y,GACzB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACvB6L,EACE9P,EAAOyD,IAAIqM,EAAK8rD,UAAY,EAAI,GADrB57D,EAAO69D,iBAc3B,EAAAysB,SAASv8E,IAAIkoB,EAAa4lC,QAR1B,SAAwByY,GACtB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACvB6L,EACE9P,EAAOyD,IAAiB,IAAbqM,EAAKrB,KAAwB,EAAI,GADjCzO,EAAO69D,iBAsB3B,EAAAysB,SAASv8E,IAAIkoB,EAAa0nC,UAhB1B,SAA0B2W,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,GADAC,EAAS3qB,YAAc,EAAAh5B,KAAKntB,KACvBqM,EAAM,OAAO9P,EAAO69D,cACzB,IAAIva,EAAqBxzC,EAAKwzC,mBAC9B,OAAKA,EAOEtjD,EAAOyD,IAAI6/C,EAAmBvhB,eAAeh1B,SANlDwnE,EAASztD,MACP,EAAArb,eAAe88C,8BACf+rB,EAAIrkB,WAAWlkD,MAAO+D,EAAKxD,YAEtBtM,EAAO69D,kBA0BlB,EAAAysB,SAASv8E,IAAIkoB,EAAasnC,QAnB1B,SAAwB+W,GACtB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAEtB,GADAu0E,EAAS3qB,YAAc2qB,EAASlmD,QAAQyC,UAEtCgnD,GAAkBxD,GAClBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAI/tD,EAAOwkE,EAAIvlE,cAAe,GAC1Bq0C,EAAWtzC,EAAKszC,SACpB,OAAKA,EAOEinC,GAAgB9V,EAAUxqD,QAAQq5B,GAAWkxB,EAAIqE,iBANtDpE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,SAAUhlE,EAAKxD,YAE7CtM,EAAO69D,kBA0BlB,EAAAysB,SAASv8E,IAAIkoB,EAAaunC,SAnB1B,SAAyB8W,GACvB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAEtB,GADAu0E,EAAS3qB,YAAc2qB,EAASlmD,QAAQyC,UAEtCgnD,GAAkBxD,GAClBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAI/tD,EAAOwkE,EAAIvlE,cAAe,GAC1Bq0C,EAAWtzC,EAAKszC,SACpB,OAAK,EAAA2N,WAAW3N,GAOTinC,GAAgB9V,EAAUxqD,QAAQ+xC,IAAS1Y,IAAYkxB,EAAIqE,iBANhEpE,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,UAAWhlE,EAAKxD,YAE9CtM,EAAO69D,kBA4DlB,EAAAysB,SAASv8E,IAAIkoB,EAAawnC,UArD1B,SAA0B6W,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAEtB,GADAu0E,EAAS3qB,YAAc2qB,EAASlmD,QAAQyC,UAEtCgnD,GAAkBxD,GAClBoE,GAAkBpE,EAAK,EAAG,GAC1B,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACfgvC,EAAiBrE,EAAIqE,eACrB7oE,EAAOwkE,EAAIvlE,cAAe,GAC1Bg1C,EAAYj0C,EAAKipB,eACrB,IAAMjpB,EAAKopB,GAAG,MAAsC,OAAd6qB,EAcpC,OAbAwwB,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAElDioE,EAASlmD,QAAQgD,SACfsnD,EAAez/C,GAAG,IAAsBy/C,EAAehrC,MAAQ,KACjE4mC,EAAS3qB,YAAc,EAAAh5B,KAAK9sB,KAG1B60E,EAAez/C,GAAG,IAA6C,IAAvBy/C,EAAehrC,OACzD4mC,EAAS3qB,YAAc,EAAAh5B,KAAK7sB,KAGzB/D,EAAO69D,cAEhB,GAAIl0B,EAAS58B,OAAQ,CACnB,IAAIw9E,EAAe5gD,EAAS,GAC5B,IAAK4gD,EAAa1uD,cAAc,EAAAztB,YAAY6G,QAK1C,OAJAs/D,EAASztD,MACP,EAAArb,eAAe0wB,wBACfwN,EAAS,GAAG59B,OAEP/L,EAAO69D,cAEhB,IAAI94B,EAAsCwlD,EAAc5oF,MACpD6oF,EAAezmC,EAAU1tC,QAC7B,GAAqB,OAAjBm0E,GAAyBA,EAAa78E,IAAIo3B,GAAY,CACxD,IAAI1M,EAASltB,OAAOq/E,EAAajpF,IAAIwjC,IACrC,GAAI1M,EAAO5pB,MAAQ,EAAAwd,YAAY0M,MAC7B,OAAO0xD,GAAgB9V,EAAUxqD,QAAgBsO,EAAQwK,cAAe81C,GAO5E,OAJApE,EAASztD,MACP,EAAArb,eAAeg/E,yBACfF,EAAax+E,MAAOg4C,EAAUx0B,aAAcwV,GAEvC/kC,EAAO69D,cAEhB,OAAOwsB,GAAgB9V,EAAUxqD,QAAQg6B,EAAUngB,kBAAmB+0C,MAiDxE,EAAA2R,SAASv8E,IAAIkoB,EAAaynC,QA5C1B,SAAwB4W,GACtB,IAOI3yE,EAPA4yE,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB0qF,EAAaf,GAAqBrV,GACtC,IAAKoW,EAEH,OADAnW,EAAS3qB,YAAc2qB,EAAS32C,QAAQtJ,eAAexkB,KAChD9P,EAAO69D,cAGhB,GAAI6sB,EAAWxxD,GAAG,KAAsB,CACtC,IAAIH,EAAiB2xD,EAAW3xD,eAChC,GAAIA,EACFp3B,EAAQo3B,EAAe93B,SAClB,CAGHU,EAFuB+oF,EAAWpnC,mBAE1B,WAEA,eAIZ,OAAQonC,EAAWj8E,MACjB,KAAK,GAAiB9M,EAAQ,OAAQ,MACtC,KAAK,EAAeA,EAAQ,KAAM,MAClC,KAAK,EAAeA,EAAQ,KAAM,MAClC,KAAK,EAAgBA,EAAQ,MAAO,MACpC,KAAK,EAAgBA,EAAQ,MAAO,MACpC,KAAK,EAAgBA,EAAQ,MAAO,MACpC,KAAK,EAAgBA,EAAQ,MAAO,MACpC,KAAK,GAAgBA,EAAQ,MAAO,MACpC,KAAK,EAAgBA,EAAQ,MAAO,MACpC,KAAK,EAAgBA,EAAQ,MAAO,MACpC,KAAK,GAAgBA,EAAQ,MAAO,MACpC,KAAK,EAAkBA,EAAQ,QAAS,MACxC,KAAK,EAAkBA,EAAQ,QAAS,MACxC,KAAK,GAAiBA,EAAQ,OAAQ,MACtC,KAAK,GAAmBA,EAAQ,SAAU,MAC1C,QAASwJ,QAAO,GAChB,KAAK,GAAiBxJ,EAAQ,OAGlC,OAAO4yE,EAASoW,mBAAmBhpF,MA2BrC,EAAA2oF,SAASv8E,IAAIkoB,EAAa8nC,MAtB1B,SAAsBuW,GACpB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB8P,EAAO65E,GAAqBrV,GAEhC,GADAC,EAAS3qB,YAAc,EAAAh5B,KAAK9sB,KACvBgM,EAAM,OAAO9P,EAAO69D,cACzB,GAAI/tD,EAAKopB,GAAG,KAAsB,CAChC,IAAIoqB,EAAqBxzC,EAAKwzC,mBAC9B,GAAIA,EACF,OAAOtjD,EAAOyD,IAAI6/C,EAAmBxzB,IAEvC,IAAIiJ,EAAiBjpB,EAAKipB,eAC1B,GAAuB,OAAnBA,IAA4BA,EAAerD,aAAa,EAAAxJ,eAAezO,WACzE,OAAOzd,EAAOyD,IAAIs1B,EAAejJ,IAOrC,OAJAykD,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,OAAQhlE,EAAKxD,YAE3CtM,EAAO69D,iBA+ChB,EAAAysB,SAASv8E,IAAIkoB,EAAa4tB,IAAKwwB,GA4C/B,EAAAiW,SAASv8E,IAAIkoB,EAAa6lC,IAAKiZ,GA4C/B,EAAAuV,SAASv8E,IAAIkoB,EAAa8lC,OAAQkZ,GAkDlC,EAAAqV,SAASv8E,IAAIkoB,EAAa+lC,KAAMmZ,GAkDhC,EAAAmV,SAASv8E,IAAIkoB,EAAagmC,KAAMuZ,GA2GhC,EAAA8U,SAASv8E,IAAIkoB,EAAaimC,IAAKyZ,GA+E/B,EAAA2U,SAASv8E,IAAIkoB,EAAao+B,IAAKoiB,GA+E/B,EAAA6T,SAASv8E,IAAIkoB,EAAai/B,IAAK4hB,GAuC/B,EAAAwT,SAASv8E,IAAIkoB,EAAaotB,KAAM4zB,GAuChC,EAAAqT,SAASv8E,IAAIkoB,EAAakmC,MAAOib,GA8BjC,EAAAkT,SAASv8E,IAAIkoB,EAAammC,SAAUmb,GAuCpC,EAAA+S,SAASv8E,IAAIkoB,EAAaomC,QAASqb,GA6DnC,EAAA4S,SAASv8E,IAAIkoB,EAAaqmC,YAAaub,GA6BvC,EAAAyS,SAASv8E,IAAIkoB,EAAasmC,KAAM4b,GAuChC,EAAAmS,SAASv8E,IAAIkoB,EAAaumC,MAAO8b,GA4EjC,EAAAgS,SAASv8E,IAAIkoB,EAAa69C,OAzE1B,SAAuBQ,GACrB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACrBjE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK4yB,MAC7C1zC,EAAOykE,EAAS3qB,YAEpB,GADA2qB,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,MACvB6L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MAEX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAOzO,EAAO4qF,mBAAmB3+E,EAAMjM,EAAOyD,IAAI,IAGpD,KAAK,GAAc,CACjB,GAAI,EAAAooC,gBAAgB5/B,IAAS,EAAA06B,aAAagQ,SACxC,OAAO32C,EAAOq1E,OAAO,EAAAjuC,SAASkwB,MAC5BrrD,EACAjM,EAAOk2E,UAAU,EAAA1gB,iBAAiBvpD,GAAO,EAAAw6B,WAAW7+B,MAGxD,IAAIu6B,EAAOoyC,EAASqB,YAChBiV,EAAO1oD,EAAK6wB,aAAa,EAAApiC,KAAK1sB,KAC9B6lC,EAAM/pC,EAAOq1E,OAAO,EAAAjuC,SAASkwB,MAC/Bt3D,EAAOi2E,UAAU4U,EAAK/qD,MAAO7zB,GAC7BjM,EAAOk2E,UAAU2U,EAAK/qD,MAAO,EAAA2G,WAAW7+B,MAG1C,OADAu6B,EAAKoxB,cAAcs3B,GACZ9gD,EAET,KAAK,GAAc,CACjB,GAAI,EAAA8B,gBAAgB5/B,IAAS,EAAA06B,aAAagQ,SACxC,OAAO32C,EAAOq1E,OAAO,EAAAjuC,SAASmwB,MAC5BtrD,EACAjM,EAAOk2E,UAAU,EAAA1gB,iBAAiBvpD,GAAO,EAAAw6B,WAAW5+B,MAGxD,IAAIs6B,EAAOoyC,EAASqB,YAChBiV,EAAO1oD,EAAK6wB,aAAa,EAAApiC,KAAKzsB,KAC9B4lC,EAAM/pC,EAAOq1E,OAAO,EAAAjuC,SAASmwB,MAC/Bv3D,EAAOi2E,UAAU4U,EAAK/qD,MAAO7zB,GAC7BjM,EAAOk2E,UAAU2U,EAAK/qD,MAAO,EAAA2G,WAAW5+B,MAG1C,OADAs6B,EAAKoxB,cAAcs3B,GACZ9gD,GAQb,OAJAwqC,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,QAAShlE,EAAKxD,YAE5CtM,EAAO69D,iBA0FhB,EAAAysB,SAASv8E,IAAIkoB,EAAa89C,UArF1B,SAA0BO,GACxB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAClBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,KACrBjE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK4yB,MAC7C1zC,EAAOykE,EAAS3qB,YAEpB,GADA2qB,EAAS3qB,YAAc,EAAAh5B,KAAK3sB,MACvB6L,EAAKopB,GAAG,KACX,OAAQppB,EAAKrB,MAEX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAOzO,EAAO4qF,mBAAmB3+E,EAAMjM,EAAOyD,IAAI,IAGpD,KAAK,GAAc,CACjB,GAAI,EAAAooC,gBAAgB5/B,IAAS,EAAA06B,aAAagQ,SACxC,OAAO32C,EAAOq1E,OAAO,EAAAjuC,SAASgwB,MAC5Bp3D,EAAOq1E,OAAO,EAAAjuC,SAAS0jD,OACrB7+E,EACAjM,EAAOk2E,UAAU,EAAA1gB,iBAAiBvpD,GAAO,EAAAw6B,WAAW7+B,MAEtD5H,EAAOkE,IAAI,IAGf,IAAIi+B,EAAOoyC,EAASqB,YAChBiV,EAAO1oD,EAAK6wB,aAAa,EAAApiC,KAAK1sB,KAC9B6lC,EAAM/pC,EAAOq1E,OAAO,EAAAjuC,SAASgwB,MAC/Bp3D,EAAOq1E,OAAO,EAAAjuC,SAAS0jD,OACrB9qF,EAAOi2E,UAAU4U,EAAK/qD,MAAO7zB,GAC7BjM,EAAOk2E,UAAU2U,EAAK/qD,MAAO,EAAA2G,WAAW7+B,MAE1C5H,EAAOkE,IAAI,IAGb,OADAi+B,EAAKoxB,cAAcs3B,GACZ9gD,EAET,KAAK,GAAc,CACjB,GAAI,EAAA8B,gBAAgB5/B,IAAS,EAAA06B,aAAagQ,SACxC,OAAO32C,EAAOq1E,OAAO,EAAAjuC,SAASiwB,MAC5Br3D,EAAOq1E,OAAO,EAAAjuC,SAAS2jD,OACrB9+E,EACAjM,EAAOk2E,UAAU,EAAA1gB,iBAAiBvpD,GAAO,EAAAw6B,WAAW5+B,MAEtD7H,EAAOmE,IAAI,IAGf,IAAIg+B,EAAOoyC,EAASqB,YAChBiV,EAAO1oD,EAAK6wB,aAAa,EAAApiC,KAAKzsB,KAC9B4lC,EAAM/pC,EAAOq1E,OAAO,EAAAjuC,SAASiwB,MAC/Br3D,EAAOq1E,OAAO,EAAAjuC,SAAS2jD,OACrB/qF,EAAOi2E,UAAU4U,EAAK/qD,MAAO7zB,GAC7BjM,EAAOk2E,UAAU2U,EAAK/qD,MAAO,EAAA2G,WAAW5+B,MAE1C7H,EAAOmE,IAAI,IAGb,OADAg+B,EAAKoxB,cAAcs3B,GACZ9gD,GAQb,OAJAwqC,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,WAAYhlE,EAAKxD,YAE/CtM,EAAO69D,iBAoDhB,EAAAysB,SAASv8E,IAAIkoB,EAAawmC,KAAMgc,GA+DhC,EAAA6R,SAASv8E,IAAIkoB,EAAaymC,MAAOwc,GA4CjC,EAAAoR,SAASv8E,IAAIkoB,EAAa0mC,YAAa2c,GA4DvC,EAAAgR,SAASv8E,IAAIkoB,EAAa2mC,aAAc4c,GAkExC,EAAA8Q,SAASv8E,IAAIkoB,EAAa4mC,WAAY+c,GAMtC,EAAA0Q,SAASv8E,IAAIkoB,EAAa6mC,WAAYgd,GAMtC,EAAAwQ,SAASv8E,IAAIkoB,EAAa8mC,WAAYid,GAMtC,EAAAsQ,SAASv8E,IAAIkoB,EAAa+mC,UAAWkd,GAMrC,EAAAoQ,SAASv8E,IAAIkoB,EAAagnC,WAAYmd,GAMtC,EAAAkQ,SAASv8E,IAAIkoB,EAAainC,YAAaod,GAsEvC,EAAAgQ,SAASv8E,IAAIkoB,EAAaknC,eAAgBqd,GAmC1C,EAAA8P,SAASv8E,IAAIkoB,EAAamnC,YAAaqd,GAoBvC,EAAA6P,SAASv8E,IAAIkoB,EAAaonC,eAjB1B,SAA+BiX,GAC7B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBqG,GAAgBrG,GAChBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKntB,IACrBzD,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf19B,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI4qC,EAASlmD,QAAQyC,UAAW,GAC3E5kB,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKntB,IAAK,GAE7D,OADA8wE,EAAS3qB,YAAc,EAAAh5B,KAAKntB,IACrBzD,EAAOq9D,cAAcpxD,EAAMC,MAgBpC,EAAAo+E,SAASv8E,IAAIkoB,EAAaqnC,cAX1B,SAA8BgX,GAC5B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAEtB,OADAu0E,EAAS3qB,YAAc,EAAAh5B,KAAKG,KAE1BwoD,GAAoBjF,EAAK,IACzBqG,GAAgBrG,GAChBG,GAAkBH,EAAK,GAChBt0E,EAAO69D,cACT79D,EAAOs9D,kBAmChB,EAAAgtB,SAASv8E,IAAIkoB,EAAa2nC,QA5B1B,SAAwB0W,GACtB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEw0E,GAAkBF,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACf56B,EAAgBulE,EAAIvlE,cACpB9C,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK4yB,MAC7C1zC,EAAOykE,EAAS3qB,YACpB,IAAK95C,EAAKirB,MAAM,KAKd,OAJAw5C,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,SAAUhlE,EAAKxD,YAE7CtM,EAAO69D,cAEhB,IAAI3xD,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI75B,EAAM,GACrD3D,EAAOooE,EAASyW,cAClBzW,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK3sB,MAC7CswE,EAAS3qB,aAGX,OADA2qB,EAAS3qB,YAAc95C,EAChB9P,EAAO49D,OAAO3xD,EAAMC,EAAMC,MAUnC,EAAAm+E,SAASv8E,IAAIkoB,EAAa4nC,aAL1B,SAA6ByW,GAG3B,OAFAqG,GAAgBrG,GAChBG,GAAkBH,EAAK,GAChBA,EAAIC,SAASv0E,OAAO69D,iBAiB7B,EAAAysB,SAASv8E,IAAIkoB,EAAa+9C,aAV1B,SAA6BM,GAC3B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAEtB,OADAu0E,EAAS3qB,YAAc,EAAAh5B,KAAKntB,IAE1Bk3E,GAAgBrG,GAChBG,GAAkBH,EAAK,GAChBt0E,EAAO69D,cACT79D,EAAOirF,KAAK,EAAA5jD,OAAO6jD,eAkB5B,EAAAZ,SAASv8E,IAAIkoB,EAAag+C,aAb1B,SAA6BK,GAC3B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAEtB,GADAu0E,EAAS3qB,YAAc,EAAAh5B,KAAKntB,IAE1Bk3E,GAAgBrG,GAChBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACnB,OAAO3pC,EAAOirF,KAAK,EAAA5jD,OAAO8jD,WAAY,KAAM,CAC1C5W,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKntB,IAAK,QA6BtD,EAAA6mF,SAASv8E,IAAIkoB,EAAai+C,aAvB1B,SAA6BI,GAC3B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAEtB,GADAu0E,EAAS3qB,YAAc,EAAAh5B,KAAKG,KAE1B4pD,GAAgBrG,GAChBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACnB,IAAK4qC,EAASlmD,QAAQyD,WAAW,GAAsB,CAErD,IAAI2L,EAAW82C,EAAS7kD,SAASsI,gBAAgBs8C,EAAIhyE,UAAW,MAEhE,OADAiyE,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACvB0M,GAAa82C,EAAS6W,gBAAgB3tD,GAAU,GAC9C82C,EAAS8W,kBAAkB5tD,EAAUkM,EAAU2qC,EAAIrkB,YADSjwD,EAAO69D,cAG5E,IAAI/sC,EAAYyjD,EAASlmD,QAAQyC,UAC7B7kB,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI7Y,EAAW,GAC1D5kB,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI7Y,EAAW,GAC1D3kB,EAAOooE,EAASG,kBAAkB/qC,EAAS,GAAI7Y,EAAW,GAE9D,OADAyjD,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACrB/wB,EAAOk0E,YAAYjoE,EAAMC,EAAMC,MA4BxC,EAAAm+E,SAASv8E,IAAIkoB,EAAak+C,aAvB1B,SAA6BG,GAC3B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAEtB,GADAu0E,EAAS3qB,YAAc,EAAAh5B,KAAKG,KAE1B4pD,GAAgBrG,GAChBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SACnB,IAAK4qC,EAASlmD,QAAQyD,WAAW,GAAsB,CAErD,IAAI2L,EAAW82C,EAAS7kD,SAASsI,gBAAgBs8C,EAAIhyE,UAAW,MAEhE,OADAiyE,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACvB0M,GAAa82C,EAAS6W,gBAAgB3tD,GAAU,GAC9C82C,EAAS8W,kBAAkB5tD,EAAUkM,EAAU2qC,EAAIrkB,YADSjwD,EAAO69D,cAG5E,IAAI/sC,EAAYyjD,EAASlmD,QAAQyC,UAC7B7kB,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI7Y,EAAW,GAC1D5kB,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKhtB,GAAI,GACxDuI,EAAOooE,EAASG,kBAAkB/qC,EAAS,GAAI7Y,EAAW,GAE9D,OADAyjD,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACrB/wB,EAAOm0E,YAAYloE,EAAMC,EAAMC,MAsHxC,EAAAm+E,SAASv8E,IAAIkoB,EAAam+C,aAhH1B,SAA6BE,GAC3B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAEtB,GADAu0E,EAAS3qB,YAAc,EAAAh5B,KAAKntB,IAE1B+wE,GAAkBF,GAClBoE,GAAkBpE,EAAK,EAAG,GAC1B,OAAOt0E,EAAO69D,cAChB,IAIIhuC,EAJA9gB,EAAgBulE,EAAIvlE,cACpB46B,EAAW2qC,EAAI3qC,SACfkvC,EAAclvC,EAAS58B,OACvB+jB,EAAYyjD,EAASlmD,QAAQyC,UAEjC,GAAsB,OAAlB/hB,GAA0BA,EAAchC,OAAS,EAAG,CACtD,IAAI2hD,EAAc3/C,EAAc,GAChC,IAAK2/C,EAAYx1B,GAAG,KAMlB,OALAq7C,EAASztD,MACP,EAAArb,eAAeopE,wCACfP,EAAIrkB,WAAW6kB,mBAAoB,cAAepmB,EAAYpiD,YAEhEioE,EAAS3qB,YAAc94B,EAChB9wB,EAAO69D,cAEQnP,EAAYjK,eAApC,IACI6mC,EAAgB3hD,EAAS,GAC7B,GAAI2hD,EAAc78E,MAAQ,EAAAP,SAAS+C,SAA+Bq6E,EAAep6E,aAAe,EAAA9C,YAAY+C,MAM1G,OALAojE,EAASztD,MACP,EAAArb,eAAe8/E,uBACf5hD,EAAS,GAAG59B,OAEdwoE,EAAS3qB,YAAc94B,EAChB9wB,EAAO69D,cAEhB,IAAIxrD,EAAuCi5E,EAAel6E,mBACtDo6E,EAAcn5E,EAAYtF,OAC1B0+E,EAAQ,IAAIxjF,MAAqBujF,GACjChwD,GAAW,EACf,IAAK,IAAI96B,EAAI,EAAGA,EAAI8qF,IAAe9qF,EAAG,CACpC,IAAI4Q,EAAae,EAAY3R,GAC7B,GAAI4Q,EAAY,CACd,IAAIk4B,EAAO+qC,EAASG,kBAAkBpjE,EAAYo9C,EAChD,IAEExW,EAAUl4C,EAAO+6E,cAAcvxC,EAAM,EAAA5B,sBAAsBozC,qBAC3D9iC,EACF1O,EAAO0O,EAEP1c,GAAW,EAEbiwD,EAAM/qF,GAAK8oC,OAEXiiD,EAAM/qF,GAAK6zE,EAASmX,SAASh9B,GAGjC,IAAKlzB,EAMH,OALA+4C,EAASztD,MACP,EAAArb,eAAewvE,2CACfqQ,EAAcv/E,OAEhBwoE,EAAS3qB,YAAc94B,EAChB9wB,EAAO69D,cAEhB,IAAItzB,EAAQmkB,EAAYtL,SACxB,GAAmB,GAAfy1B,IACFtuC,EAAQ0uC,GAAuBtvC,EAAS,GAAIY,EAAOgqC,GAC/ChqC,EAAQ,GAEV,OADAgqC,EAAS3qB,YAAc94B,EAChB9wB,EAAO69D,cAGlB,IAAI8tB,EAAM,IAAI5iF,WAAWyiF,EAAc98B,EAAYtL,UACnDj4C,OAAOopE,EAASqX,kBAAkBD,EAAK,EAAGj9B,EAAa+8B,IAAUE,EAAIE,YACrEh8D,EAAS0kD,EAASuX,iBAAiBH,EAAKphD,GAAO1a,WAC1C,CACL,IAAI5jB,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKntB,IAAK,GACzDy0C,EAAUl4C,EAAO+6E,cAAc9uE,EAAM,EAAA27B,sBAAsBozC,qBAC/D,IAAK9iC,EAMH,OALAq8B,EAASztD,MACP,EAAArb,eAAewvE,2CACftxC,EAAS,GAAG59B,OAEdwoE,EAAS3qB,YAAc94B,EAChB9wB,EAAO69D,cAEhB,IAAIlwB,EAAO,EAAAkoB,iBAAiB3d,GAC5B,GAAIvK,EAAO,EAMT,OALA4mC,EAASztD,MACP,EAAArb,eAAekwE,6CACfhyC,EAAS,GAAG59B,MAAO,IAAKtI,IAAIyiB,UAAU5Z,YAExCioE,EAAS3qB,YAAc94B,EAChB9wB,EAAO69D,cAEhB,IAAItzB,EAAQ,GACZ,GAAmB,GAAfsuC,IACFtuC,EAAQ0uC,GAAuBtvC,EAAS,GAAIY,EAAOgqC,GAC/ChqC,EAAQ,GAEV,OADAgqC,EAAS3qB,YAAc94B,EAChB9wB,EAAO69D,cAGlBhuC,EAAS0kD,EAASuX,iBAAiB,IAAI/iF,WAAW4kC,GAAOpD,GAAO1a,OAIlE,OADA0kD,EAAS3qB,YAAc94B,EACnBA,GAAa,EAAAF,KAAKgzB,SACpBz4C,QAAQigB,SAASyE,IACV7vB,EAAOyD,IAAIynB,QAAQ2E,KAEnB7vB,EAAO0D,IAAIwnB,QAAQ2E,GAASzE,SAASyE,OA8BhD,EAAAy6D,SAASv8E,IAAIkoB,EAAa9Z,YAtB1B,SAA4Bm4D,GAC1B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACE83E,GAAkBxD,GAAK,GACvBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SAEfp4B,EADgB+iE,EAAIvlE,cACG,GACvB9C,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK4yB,MACpDuW,EAAWwa,EAAS3qB,YAExB,OADA2qB,EAAS3qB,YAAcr4C,EAClBwoD,EAASgyB,eAAex6E,GAOtBtF,GANLsoE,EAASztD,MACP,EAAArb,eAAeugF,mCACf1X,EAAIrkB,WAAWlkD,MAAOguD,EAASztD,WAAYiF,EAAOjF,YAE7CtM,EAAO69D,kBAoLlB,EAAAysB,SAASv8E,IAAIkoB,EAAa9qB,QA7K1B,SAAwBmpE,GACtB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OAClB+O,EAAgBulE,EAAIvlE,cACxB,GACEylE,GAAkBF,GAAK,GACvBoE,GAAkBpE,EAAK,EAAG,GAM1B,OAJIvlE,IACF5D,OAAO4D,EAAchC,QACrBwnE,EAAS3qB,YAAc76C,EAAc,GAAGw0C,iBAEnCvjD,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACfgvC,EAAiBrE,EAAIqE,eACrB1sE,EAAO8C,EACPwlE,EAASG,kBAAkB/qC,EAAS,GAAI56B,EAAc,GAAI,GAC1DwlE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK3sB,KAAM,GACnD6L,EAAOykE,EAAS3qB,YAIpB,GAHA2qB,EAAS3qB,YAAc95C,EAAKyzC,gBAGxBgxB,EAASlmD,QAAQmD,SACnB,OAAOvlB,EAIT,IAAIggF,EAASjsF,EAAO+6E,cAAc9uE,EAAM,EAAA27B,sBAAsBskD,SAC9D,GAAID,EACF,OAAa,EAAAhgD,kBAAkBggD,IAC7B,KAAU,EAAAxlD,WAAWt/B,IACnB,GAAI,EAAA0uD,iBAAiBo2B,GACnB,OAAOhgF,EAET,MAEF,KAAU,EAAAw6B,WAAWr/B,IACnB,GAAI,EAAA0uD,oBAAoBm2B,GAAU,EAAAl2B,qBAAqBk2B,GACrD,OAAOhgF,EAET,MAEF,KAAU,EAAAw6B,WAAW7+B,IACnB,GAAI,EAAAgyD,iBAAiBqyB,GACnB,OAAOhgF,EAET,MAEF,KAAU,EAAAw6B,WAAW5+B,IACnB,GAAI,EAAAgyD,iBAAiBoyB,GACnB,OAAOhgF,EAQf,IAAI1C,EAAQgrE,EAAS4X,UAA6B,GAAnBxiD,EAAS58B,OAAc48B,EAAS,GAAK,KAAM2qC,EAAIrkB,YAE9E,GADAskB,EAAS3qB,YAAc95C,EAAKyzC,gBACxBo1B,GAAkB,EAAA/nD,KAAKG,KAEzB,OADAwjD,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACpBjhB,EAAKrB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAOzO,EAAOosF,GAAGpsF,EAAO20E,MAAM,EAAAxtC,QAAQgvB,OAAQlqD,GAAO1C,GACzE,KAAK,EACL,KAAK,EAAc,OAAOvJ,EAAOosF,GAAGpsF,EAAO20E,MAAM,EAAAxtC,QAAQivB,OAAQnqD,GAAO1C,GACxE,KAAK,EACL,KAAK,EACH,OAAOvJ,EAAOosF,GACZpsF,EAAO20E,MACLJ,EAASlmD,QAAQgD,SACb,EAAA8V,QAAQivB,OACR,EAAAjvB,QAAQgvB,OACZlqD,GAEF1C,GAIJ,KAAK,GAAc,OAAOvJ,EAAOosF,GAAGpsF,EAAOq1E,OAAO,EAAAjuC,SAASgwB,MAAOnrD,EAAMjM,EAAOkE,IAAI,IAAKqF,GACxF,KAAK,GAAc,OAAOvJ,EAAOosF,GAAGpsF,EAAOq1E,OAAO,EAAAjuC,SAASiwB,MAAOprD,EAAMjM,EAAOmE,IAAI,IAAKoF,OAErF,CACLgrE,EAAS3qB,YAAc95C,EAAKyzC,gBAC5B,IAAIphB,EAAOoyC,EAASqB,YACpB,OAAQrB,EAAS3qB,YAAYn7C,MAC3B,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,CAClB,IAAIo8E,EAAO1oD,EAAK6wB,aAAaljD,GAC7BqyB,EAAK8wB,aAAa43B,EAAK/qD,MAAO,EAAAkyB,WAAWuC,SACzC,IAAIxqB,EAAM/pC,EAAOosF,GACfpsF,EAAOi2E,UAAU4U,EAAK/qD,MAAO7zB,GAC7BjM,EAAOk2E,UAAU2U,EAAK/qD,MAAO,EAAA2G,WAAWt/B,KACxCoC,GAGF,OADA44B,EAAKoxB,cAAcs3B,GACZ9gD,EAET,KAAK,EACL,KAAK,EAAc,CACjB,IAAI8gD,EAAO1oD,EAAK6wB,aAAa,EAAApiC,KAAKltB,KAC9BqmC,EAAM/pC,EAAOosF,GACfpsF,EAAO20E,MAAM,EAAAxtC,QAAQivB,OACnBp2D,EAAOi2E,UAAU4U,EAAK/qD,MAAO7zB,IAE/B1C,EACAvJ,EAAOk2E,UAAU2U,EAAK/qD,MAAO,EAAA2G,WAAWr/B,MAG1C,OADA+6B,EAAKoxB,cAAcs3B,GACZ9gD,EAET,KAAK,EACL,KAAK,EAAgB,CACnB,IAAI8gD,EAAO1oD,EAAK6wB,aAAauhB,EAASlmD,QAAQyC,WAC1CiZ,EAAM/pC,EAAOosF,GACfpsF,EAAO20E,MACLJ,EAASlmD,QAAQgD,SACb,EAAA8V,QAAQivB,OACR,EAAAjvB,QAAQgvB,OACZn2D,EAAOi2E,UAAU4U,EAAK/qD,MAAO7zB,IAE/B1C,EACAvJ,EAAOk2E,UAAU2U,EAAK/qD,MAAOy0C,EAASlmD,QAAQioD,iBAGhD,OADAn0C,EAAKoxB,cAAcs3B,GACZ9gD,EAET,KAAK,GAAc,CACjB,IAAI8gD,EAAO1oD,EAAK6wB,aAAa,EAAApiC,KAAK1sB,KAC9B6lC,EAAM/pC,EAAOosF,GACfpsF,EAAOq1E,OAAO,EAAAjuC,SAASgwB,MACrBp3D,EAAOi2E,UAAU4U,EAAK/qD,MAAO7zB,GAC7BjM,EAAOkE,IAAI,IAEbqF,EACAvJ,EAAOk2E,UAAU2U,EAAK/qD,MAAO,EAAA2G,WAAW7+B,MAG1C,OADAu6B,EAAKoxB,cAAcs3B,GACZ9gD,EAET,KAAK,GAAc,CACjB,IAAI8gD,EAAO1oD,EAAK6wB,aAAa,EAAApiC,KAAKzsB,KAC9B4lC,EAAM/pC,EAAOosF,GACfpsF,EAAOq1E,OAAO,EAAAjuC,SAASiwB,MACrBr3D,EAAOi2E,UAAU4U,EAAK/qD,MAAO7zB,GAC7BjM,EAAOmE,IAAI,IAEboF,EACAvJ,EAAOk2E,UAAU2U,EAAK/qD,MAAO,EAAA2G,WAAW5+B,MAG1C,OADAs6B,EAAKoxB,cAAcs3B,GACZ9gD,IAQb,OAJAwqC,EAASztD,MACP,EAAArb,eAAeivB,gBACf45C,EAAIrkB,WAAW6kB,oBAEVvrE,KAoBT,EAAA+gF,SAASv8E,IAAIkoB,EAAazW,WAf1B,SAA2B80D,GACzB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACE26E,GAAgBrG,GAChBG,GAAkBH,EAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAI17B,EAAOoyC,EAASqB,YAChByW,EAAmBlqD,EAAKjJ,GAAG,OAC/BiJ,EAAKp0B,IAAI,OAET,IAAIy7B,EAAO+qC,EAASG,kBAAkBJ,EAAI3qC,SAAS,GAAI2qC,EAAIqE,gBAE3D,OADK0T,GAAkBlqD,EAAKmqD,MAAM,OAC3B9iD,KAyBT,EAAA8gD,SAASv8E,IAAIkoB,EAAa6nC,aApB1B,SAA6BwW,GAC3B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACE83E,GAAkBxD,GAAK,GACvB,OAAOt0E,EAAO69D,cAChB,IAAIl0B,EAAW2qC,EAAI3qC,SAEf0e,EADgBisB,EAAIvlE,cACS,GAC7BmxB,EAAgBmoB,EAAatvB,eACjC,OAAMsvB,EAAanvB,GAAG,MAA0C,OAAlBgH,GAO9Cq0C,EAAS3qB,YAAc1pB,EAAcpwB,KAC9BykE,EAASgY,mBAAmBrsD,EAAeyJ,EAAU,EAAkB2qC,EAAIrkB,cAPhFskB,EAASztD,MACP,EAAArb,eAAeyjD,qCACfolB,EAAIrkB,WAAW3+C,WAAWvF,OAErB/L,EAAO69D,kBAiClB,EAAAysB,SAASv8E,IAAIkoB,EAAa/qB,OAH1B,SAAuBopE,GACrB,OAAOoG,EAAmBpG,EAAK,EAAA1pE,mBAAmBM,UAQpD,EAAAo/E,SAASv8E,IAAIkoB,EAAahrB,SAH1B,SAAyBqpE,GACvB,OAAOoG,EAAmBpG,EAAK,EAAA1pE,mBAAmBK,YAQpD,EAAAq/E,SAASv8E,IAAIkoB,EAAajrB,MAH1B,SAAsBspE,GACpB,OAAOoG,EAAmBpG,EAAK,EAAA1pE,mBAAmBI,SAsBpD,EAAAs/E,SAASv8E,IAAIkoB,EAAa1yB,IAH1B,SAAoB+wE,GAClB,OAAOuG,EAAmBvG,EAAK,EAAA1jD,KAAKrtB,OAQtC,EAAA+mF,SAASv8E,IAAIkoB,EAAazyB,KAH1B,SAAqB8wE,GACnB,OAAOuG,EAAmBvG,EAAK,EAAA1jD,KAAKptB,QAQtC,EAAA8mF,SAASv8E,IAAIkoB,EAAaxyB,KAH1B,SAAqB6wE,GACnB,OAAOuG,EAAmBvG,EAAK,EAAA1jD,KAAKntB,QAQtC,EAAA6mF,SAASv8E,IAAIkoB,EAAavyB,KAH1B,SAAqB4wE,GACnB,OAAOuG,EAAmBvG,EAAK,EAAA1jD,KAAKltB,QAQtC,EAAA4mF,SAASv8E,IAAIkoB,EAAatyB,OAH1B,SAAuB2wE,GACrB,OAAOuG,EAAmBvG,EAAKA,EAAIC,SAASlmD,QAAQwC,cAQtD,EAAAy5D,SAASv8E,IAAIkoB,EAAaryB,IAH1B,SAAoB0wE,GAClB,OAAOuG,EAAmBvG,EAAK,EAAA1jD,KAAKhtB,OAQtC,EAAA0mF,SAASv8E,IAAIkoB,EAAapyB,KAH1B,SAAqBywE,GACnB,OAAOuG,EAAmBvG,EAAK,EAAA1jD,KAAK/sB,QAQtC,EAAAymF,SAASv8E,IAAIkoB,EAAanyB,KAH1B,SAAqBwwE,GACnB,OAAOuG,EAAmBvG,EAAK,EAAA1jD,KAAK9sB,QAQtC,EAAAwmF,SAASv8E,IAAIkoB,EAAalyB,KAH1B,SAAqBuwE,GACnB,OAAOuG,EAAmBvG,EAAK,EAAA1jD,KAAK7sB,QAQtC,EAAAumF,SAASv8E,IAAIkoB,EAAajyB,OAH1B,SAAuBswE,GACrB,OAAOuG,EAAmBvG,EAAKA,EAAIC,SAASlmD,QAAQyC,cAQtD,EAAAw5D,SAASv8E,IAAIkoB,EAAahyB,MAH1B,SAAsBqwE,GACpB,OAAOuG,EAAmBvG,EAAK,EAAA1jD,KAAK3sB,SAQtC,EAAAqmF,SAASv8E,IAAIkoB,EAAa/xB,KAH1B,SAAqBowE,GACnB,OAAOuG,EAAmBvG,EAAK,EAAA1jD,KAAK1sB,QAQtC,EAAAomF,SAASv8E,IAAIkoB,EAAa9xB,KAH1B,SAAqBmwE,GACnB,OAAOuG,EAAmBvG,EAAK,EAAA1jD,KAAKzsB,QAQtC,EAAAmmF,SAASv8E,IAAIkoB,EAAa7xB,MAH1B,SAAsBkwE,GACpB,OAAOwG,EAAcxG,MAmCvB,EAAAgW,SAASv8E,IAAIkoB,EAAa3xB,MAAOw2E,GA+BjC,EAAAwP,SAASv8E,IAAIkoB,EAAazxB,OA5B1B,SAAuB8vE,GACrB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBqG,GAAgBrG,GAChBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACfR,EAAQ,IAAIpgC,WAAW,IAC3B,IAAK,IAAIrI,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,IAAI8oC,EAAO+qC,EAASG,kBAAkB/qC,EAASjpC,GAAI,EAAAkwB,KAAKptB,IAAK,GACzD00C,EAAUl4C,EAAO+6E,cAAcvxC,EAAM,EAAA5B,sBAAsBozC,qBAC3D9iC,EACF,EAAA9S,SAAS,EAAAywB,iBAAiB3d,GAAU/O,EAAOzoC,GAAK,GAEhD6zE,EAASztD,MACP,EAAArb,eAAewvE,2CACftxC,EAASjpC,GAAGqL,OAKlB,OADAwoE,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAOoE,KAAK+kC,MAiCrB,EAAAmhD,SAASv8E,IAAIkoB,EAAavxB,OA5B1B,SAAuB4vE,GACrB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBqG,GAAgBrG,GAChBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACfR,EAAQ,IAAIpgC,WAAW,IAC3B,IAAK,IAAIrI,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,IAAI8oC,EAAO+qC,EAASG,kBAAkB/qC,EAASjpC,GAAI,EAAAkwB,KAAKntB,IAAK,GACzDy0C,EAAUl4C,EAAO+6E,cAAcvxC,EAAM,EAAA5B,sBAAsBozC,qBAC3D9iC,EACF,EAAAloB,SAAS,EAAA6lC,iBAAiB3d,GAAU/O,EAAOzoC,GAAK,GAEhD6zE,EAASztD,MACP,EAAArb,eAAewvE,2CACftxC,EAASjpC,GAAGqL,OAKlB,OADAwoE,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAOoE,KAAK+kC,MAmCrB,EAAAmhD,SAASv8E,IAAIkoB,EAAarxB,OA9B1B,SAAuB0vE,GACrB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBqG,GAAgBrG,GAChBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACfR,EAAQ,IAAIpgC,WAAW,IAC3B,IAAK,IAAIrI,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,IAAI8oC,EAAO+qC,EAASG,kBAAkB/qC,EAASjpC,GAAI,EAAAkwB,KAAKltB,IAAK,GACzDw0C,EAAUl4C,EAAO+6E,cAAcvxC,EAAM,EAAA5B,sBAAsBozC,qBAC/D,GAAI9iC,EAAS,CACX,IAAI34B,EAAM7e,GAAK,EACf,EAAAsvB,SAAS,EAAA8lC,oBAAoB5d,GAAU/O,EAAO5pB,GAC9C,EAAAyQ,SAAS,EAAA+lC,qBAAqB7d,GAAU/O,EAAO5pB,EAAM,QAErDg1D,EAASztD,MACP,EAAArb,eAAewvE,2CACftxC,EAASjpC,GAAGqL,OAKlB,OADAwoE,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAOoE,KAAK+kC,MAiCrB,EAAAmhD,SAASv8E,IAAIkoB,EAAanxB,OA5B1B,SAAuBwvE,GACrB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBqG,GAAgBrG,GAChBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACfR,EAAQ,IAAIpgC,WAAW,IAC3B,IAAK,IAAIrI,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,IAAI8oC,EAAO+qC,EAASG,kBAAkB/qC,EAASjpC,GAAI,EAAAkwB,KAAK1sB,IAAK,GACzDg0C,EAAUl4C,EAAO+6E,cAAcvxC,EAAM,EAAA5B,sBAAsBozC,qBAC3D9iC,EACF,EAAA7S,SAAS,EAAAu0B,iBAAiB1hB,GAAU/O,EAAOzoC,GAAK,GAEhD6zE,EAASztD,MACP,EAAArb,eAAewvE,2CACftxC,EAASjpC,GAAGqL,OAKlB,OADAwoE,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAOoE,KAAK+kC,MAiCrB,EAAAmhD,SAASv8E,IAAIkoB,EAAalxB,OA5B1B,SAAuBuvE,GACrB,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBqG,GAAgBrG,GAChBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACfR,EAAQ,IAAIpgC,WAAW,IAC3B,IAAK,IAAIrI,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,IAAI8oC,EAAO+qC,EAASG,kBAAkB/qC,EAASjpC,GAAI,EAAAkwB,KAAKzsB,IAAK,GACzD+zC,EAAUl4C,EAAO+6E,cAAcvxC,EAAM,EAAA5B,sBAAsBozC,qBAC3D9iC,EACF,EAAA5S,SAAS,EAAAu0B,iBAAiB3hB,GAAU/O,EAAOzoC,GAAK,GAEhD6zE,EAASztD,MACP,EAAArb,eAAewvE,2CACftxC,EAASjpC,GAAGqL,OAKlB,OADAwoE,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAOoE,KAAK+kC,MAkDrB,EAAAmhD,SAASv8E,IAAIkoB,EAAauvC,WAAY0V,GAgEtC,EAAAoP,SAASv8E,IAAIkoB,EAAawvC,kBAAmBgW,GAoE7C,EAAA6O,SAASv8E,IAAIkoB,EAAayvC,kBAAmB2W,GAgH7C,EAAAiO,SAASv8E,IAAIkoB,EAAa0vC,aAAckX,GAmBxC,EAAAyN,SAASv8E,IAAIkoB,EAAa2vC,aAAcwX,GAoExC,EAAAkN,SAASv8E,IAAIkoB,EAAa4vC,gBAAiByX,GAyD3C,EAAAgN,SAASv8E,IAAIkoB,EAAa6vC,cAAe8X,GAgDzC,EAAA0M,SAASv8E,IAAIkoB,EAAagwC,SAAUkY,GAgDpC,EAAAmM,SAASv8E,IAAIkoB,EAAaiwC,SAAUwY,GA4CpC,EAAA4L,SAASv8E,IAAIkoB,EAAakwC,SAAU8Y,GA+BpC,EAAAqL,SAASv8E,IAAIkoB,EAAamwC,SAAUmZ,IAiCpC,EAAA+K,SAASv8E,IAAIkoB,EAAaqwC,kBAAmBoZ,IAiC7C,EAAA4K,SAASv8E,IAAIkoB,EAAaswC,kBAAmBwZ,IA6C7C,EAAAuK,SAASv8E,IAAIkoB,EAAakxC,SAAUiZ,IA6CpC,EAAAkK,SAASv8E,IAAIkoB,EAAamxC,SAAUyZ,IA8BpC,EAAAyJ,SAASv8E,IAAIkoB,EAAaoxC,SAAUia,IA+BpC,EAAAgJ,SAASv8E,IAAIkoB,EAAaqxC,UAAWka,IA4CrC,EAAA8I,SAASv8E,IAAIkoB,EAAawxC,QAASka,IA4CnC,EAAA2I,SAASv8E,IAAIkoB,EAAayxC,QAASua,IAiDnC,EAAAqI,SAASv8E,IAAIkoB,EAAa0xC,QAAS4a,IAiDnC,EAAA+H,SAASv8E,IAAIkoB,EAAa2xC,QAASob,IAiDnC,EAAAsH,SAASv8E,IAAIkoB,EAAa4xC,QAAS4b,IAiDnC,EAAA6G,SAASv8E,IAAIkoB,EAAa6xC,QAASoc,IAiCnC,EAAAoG,SAASv8E,IAAIkoB,EAAagyC,YAAa0c,IA+CvC,EAAA2F,SAASv8E,IAAIkoB,EAAaowC,SAAU2e,IA4CpC,EAAAsF,SAASv8E,IAAIkoB,EAAasxC,SAAUge,IA8BpC,EAAA+E,SAASv8E,IAAIkoB,EAAauxC,UAAWqe,IAgCrC,EAAAyE,SAASv8E,IAAIkoB,EAAa8xC,aAAcie,IAgCxC,EAAAsE,SAASv8E,IAAIkoB,EAAa+xC,eAAgBqe,IAgC1C,EAAAiE,SAASv8E,IAAIkoB,EAAaiyC,eAAgBwe,IAgC1C,EAAA4D,SAASv8E,IAAIkoB,EAAakyC,gBAAiB4e,IA8C3C,EAAAuD,SAASv8E,IAAIkoB,EAAauwC,SAAU4gB,IAqDpC,EAAAkD,SAASv8E,IAAIkoB,EAAawwC,SAAUihB,IAuBpC,EAAA4C,SAASv8E,IAAIkoB,EAAaywC,UAH1B,SAA0B4N,GACxB,OAAO6T,GAA4B7T,EAAK,EAAAltC,SAASolD,YAQnD,EAAAlC,SAASv8E,IAAIkoB,EAAa0wC,SAH1B,SAAyB2N,GACvB,OAAO6T,GAA4B7T,EAAK,EAAAltC,SAASqlD,WAQnD,EAAAnC,SAASv8E,IAAIkoB,EAAa2wC,UAH1B,SAA0B0N,GACxB,OAAO6T,GAA4B7T,EAAK,EAAAltC,SAASslD,YAQnD,EAAApC,SAASv8E,IAAIkoB,EAAa4wC,aAH1B,SAA6ByN,GAC3B,OAAO6T,GAA4B7T,EAAK,EAAAltC,SAASulD,eAwBnD,EAAArC,SAASv8E,IAAIkoB,EAAa6wC,UAH1B,SAA0BwN,GACxB,OAlBF,SAAoCA,EAAqB/qC,GACvD,IAAIgrC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBqG,GAAgBrG,GAChBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf19B,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,OAAOpE,EAAO20E,MAAMprC,EAAIt9B,GAKjB2gF,CAA2BtY,EAAK,EAAAntC,QAAQ0lD,YA0BjD,EAAAvC,SAASv8E,IAAIkoB,EAAa8wC,gBAH1B,SAAgCuN,GAC9B,OApBF,SAAsCA,EAAqB/qC,GACzD,IAAIgrC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACEu5E,GAAoBjF,EAAK,IACzBqG,GAAgBrG,GAChBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKxsB,KACrBpE,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf19B,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D8H,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC1D+H,EAAOooE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAKxsB,KAAM,GAC9D,OAAOpE,EAAOmpF,aAAa5/C,EAAIt9B,EAAMC,EAAMC,GAKpC2gF,CAA6BxY,EAAK,EAAA5sC,cAAcqlD,cA+CzD,EAAAzC,SAASv8E,IAAIkoB,EAAa+wC,cAAeohB,IA6CzC,EAAAkC,SAASv8E,IAAIkoB,EAAagxC,cAAewhB,IAuCzC,EAAA6B,SAASv8E,IAAIkoB,EAAaixC,aAAc4hB,IA+BxC,EAAAwB,SAASv8E,IAAIkoB,EAAamyC,UAAW8gB,IA+BrC,EAAAoB,SAASv8E,IAAIkoB,EAAaoyC,UAAWihB,IAqBrC,EAAAgB,SAASv8E,IAAIkoB,EAAa29C,eAhB1B,SAA+BU,GAC7B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACE26E,GAAgBrG,GAChBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACrB/wB,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf19B,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK9sB,IAAK,GAG7D,OAFAywE,EAASyY,iBAAmB,EAC5BzY,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACrB/wB,EAAOa,KAAKo1B,EAAa29C,cAAe,CAAE3nE,GAAQ,EAAAw6B,WAAWI,SAsBtE,EAAAyjD,SAASv8E,IAAIkoB,EAAa49C,eAjB1B,SAA+BS,GAC7B,IAAIC,EAAWD,EAAIC,SACfv0E,EAASu0E,EAASv0E,OACtB,GACE26E,GAAgBrG,GAChBG,GAAkBH,EAAK,GAGvB,OADAC,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACrB/wB,EAAO69D,cAEhB,IAAIl0B,EAAW2qC,EAAI3qC,SACf19B,EAAOsoE,EAASG,kBAAkB/qC,EAAS,GAAI4qC,EAASlmD,QAAQyC,UAAW,GAC3E5kB,EAAOqoE,EAASG,kBAAkB/qC,EAAS,GAAI,EAAA/Y,KAAK9sB,IAAK,GAG7D,OAFAywE,EAASyY,iBAAmB,EAC5BzY,EAAS3qB,YAAc,EAAAh5B,KAAKG,KACrB/wB,EAAOa,KAAKo1B,EAAa49C,cAAe,CAAE5nE,EAAMC,GAAQ,EAAAu6B,WAAWI,SAkB5E,EAAAyjD,SAASv8E,IAAIkoB,EAAa+nC,SAN1B,SAAyBsW,GAIvB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnB4wE,EAAYC,MAWrB,EAAAgW,SAASv8E,IAAIkoB,EAAagoC,SAN1B,SAAyBqW,GAIvB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB2wE,EAAYC,MAWrB,EAAAgW,SAASv8E,IAAIkoB,EAAaioC,SAN1B,SAAyBoW,GAIvB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBsxE,EAAYT,MAWrB,EAAAgW,SAASv8E,IAAIkoB,EAAakoC,SAN1B,SAAyBmW,GAIvB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnBqxE,EAAYT,MAWrB,EAAAgW,SAASv8E,IAAIkoB,EAAamoC,YAN1B,SAA4BkW,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBwxE,EAAeX,MAWxB,EAAAgW,SAASv8E,IAAIkoB,EAAaooC,YAN1B,SAA4BiW,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnBuxE,EAAeX,MAWxB,EAAAgW,SAASv8E,IAAIkoB,EAAaqoC,UAN1B,SAA0BgW,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnB0xE,EAAab,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAasoC,UAN1B,SAA0B+V,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnByxE,EAAab,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAauoC,UAN1B,SAA0B8V,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnB+xE,EAAalB,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAawoC,UAN1B,SAA0B6V,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB8xE,EAAalB,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAayoC,SAN1B,SAAyB4V,GAIvB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAK1sB,IACnByxE,EAAYrB,MAWrB,EAAAgW,SAASv8E,IAAIkoB,EAAa0oC,SAN1B,SAAyB2V,GAIvB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKzsB,IACnBwxE,EAAYrB,MAWrB,EAAAgW,SAASv8E,IAAIkoB,EAAa2oC,SAN1B,SAAyB0V,GAIvB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAK1sB,IACnBuyE,EAAYnC,MAWrB,EAAAgW,SAASv8E,IAAIkoB,EAAa4oC,SAN1B,SAAyByV,GAIvB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKzsB,IACnBsyE,EAAYnC,MAWrB,EAAAgW,SAASv8E,IAAIkoB,EAAa6oC,SAN1B,SAAyBwV,GAIvB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAK1sB,IACnB4yE,EAAYxC,MAWrB,EAAAgW,SAASv8E,IAAIkoB,EAAa8oC,SAN1B,SAAyBuV,GAIvB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKzsB,IACnB2yE,EAAYxC,MAWrB,EAAAgW,SAASv8E,IAAIkoB,EAAa+oC,UAN1B,SAA0BsV,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAK1sB,IACnB+yE,EAAa3C,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAagpC,UAN1B,SAA0BqV,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKzsB,IACnB8yE,EAAa3C,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAaipC,WAN1B,SAA2BoV,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAK1sB,IACnBkzE,EAAc9C,MAWvB,EAAAgW,SAASv8E,IAAIkoB,EAAakpC,WAN1B,SAA2BmV,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKzsB,IACnBizE,EAAc9C,MAWvB,EAAAgW,SAASv8E,IAAIkoB,EAAampC,cAN1B,SAA8BkV,GAI5B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAK1sB,IACnBqzE,EAAiBjD,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAaopC,cAN1B,SAA8BiV,GAI5B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKzsB,IACnBozE,EAAiBjD,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAaqpC,aAN1B,SAA6BgV,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAK1sB,IACnBwzE,EAAgBpD,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAaspC,aAN1B,SAA6B+U,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKzsB,IACnBuzE,EAAgBpD,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAaupC,qBAN1B,SAAqC8U,GAInC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAK1sB,IACnB2zE,EAAoBvD,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAawpC,qBAN1B,SAAqC6U,GAInC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKzsB,IACnB0zE,EAAoBvD,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAaypC,qBAN1B,SAAqC4U,GAInC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBo0E,EAAoBvD,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAa0pC,qBAN1B,SAAqC2U,GAInC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnBm0E,EAAoBvD,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAa2pC,UAN1B,SAA0B0U,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAK1sB,IACnBi0E,EAAa7D,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAa4pC,UAN1B,SAA0ByU,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKzsB,IACnBg0E,EAAa7D,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAa6pC,WAN1B,SAA2BwU,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAK1sB,IACnBo0E,EAAchE,MAWvB,EAAAgW,SAASv8E,IAAIkoB,EAAa8pC,WAN1B,SAA2BuU,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKzsB,IACnBm0E,EAAchE,MAWvB,EAAAgW,SAASv8E,IAAIkoB,EAAa+pC,aAN1B,SAA6BsU,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBg1E,EAAanE,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAagqC,aAN1B,SAA6BqU,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBg1E,EAAanE,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAaiqC,cAN1B,SAA8BoU,GAI5B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBg1E,EAAanE,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAakqC,cAN1B,SAA8BmU,GAI5B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBg1E,EAAanE,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAamqC,UAN1B,SAA0BkU,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBg1E,EAAanE,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAaoqC,aAN1B,SAA6BiU,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB+0E,EAAanE,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAaqqC,aAN1B,SAA6BgU,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB+0E,EAAanE,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAasqC,cAN1B,SAA8B+T,GAI5B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB+0E,EAAanE,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAauqC,cAN1B,SAA8B8T,GAI5B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB+0E,EAAanE,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAawqC,cAN1B,SAA8B6T,GAI5B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB+0E,EAAanE,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAayqC,cAN1B,SAA8B4T,GAI5B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB+0E,EAAanE,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAa0qC,UAN1B,SAA0B2T,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB+0E,EAAanE,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAa2qC,UAN1B,SAA0B0T,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAK1sB,IACnBu0E,EAAanE,MAWtB,EAAAgW,SAASv8E,IAAIkoB,EAAa4qC,UAN1B,SAA0ByT,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKzsB,IACnBs0E,EAAanE,MAYtB,EAAAgW,SAASv8E,IAAIkoB,EAAa6qC,YAP1B,SAA4BwT,GAK1B,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdD,EAAc5E,MAYvB,EAAAgW,SAASv8E,IAAIkoB,EAAa8qC,aAP1B,SAA6BuT,GAK3B,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdD,EAAc5E,MAYvB,EAAAgW,SAASv8E,IAAIkoB,EAAa+qC,WAP1B,SAA2BsT,GAKzB,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdD,EAAc5E,MAYvB,EAAAgW,SAASv8E,IAAIkoB,EAAagrC,YAP1B,SAA4BqT,GAK1B,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdD,EAAc5E,MAYvB,EAAAgW,SAASv8E,IAAIkoB,EAAairC,aAP1B,SAA6BoT,GAK3B,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdD,EAAc5E,MAYvB,EAAAgW,SAASv8E,IAAIkoB,EAAakrC,aAP1B,SAA6BmT,GAK3B,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdD,EAAc5E,MAYvB,EAAAgW,SAASv8E,IAAIkoB,EAAamrC,WAP1B,SAA2BkT,GAKzB,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdD,EAAc5E,MAYvB,EAAAgW,SAASv8E,IAAIkoB,EAAaorC,WAP1B,SAA2BiT,GAKzB,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAK1sB,IAC1BowE,EAAI6E,gBAAiB,EACdD,EAAc5E,MAYvB,EAAAgW,SAASv8E,IAAIkoB,EAAaqrC,WAP1B,SAA2BgT,GAKzB,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKzsB,IAC1BmwE,EAAI6E,gBAAiB,EACdD,EAAc5E,MAWvB,EAAAgW,SAASv8E,IAAIkoB,EAAasrC,oBAN1B,SAAoC+S,GAIlC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnB61E,EAAoBhF,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAaurC,qBAN1B,SAAqC8S,GAInC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnB61E,EAAoBhF,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAawrC,iBAN1B,SAAiC6S,GAI/B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnB61E,EAAoBhF,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAayrC,oBAN1B,SAAoC4S,GAIlC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB41E,EAAoBhF,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAa0rC,qBAN1B,SAAqC2S,GAInC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB41E,EAAoBhF,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAa2rC,qBAN1B,SAAqC0S,GAInC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB41E,EAAoBhF,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAa4rC,iBAN1B,SAAiCyS,GAI/B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB41E,EAAoBhF,MAY7B,EAAAgW,SAASv8E,IAAIkoB,EAAa6rC,mBAP1B,SAAmCwS,GAKjC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdK,EAAqBlF,MAY9B,EAAAgW,SAASv8E,IAAIkoB,EAAa8rC,oBAP1B,SAAoCuS,GAKlC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdK,EAAqBlF,MAY9B,EAAAgW,SAASv8E,IAAIkoB,EAAa+rC,kBAP1B,SAAkCsS,GAKhC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdK,EAAqBlF,MAY9B,EAAAgW,SAASv8E,IAAIkoB,EAAagsC,mBAP1B,SAAmCqS,GAKjC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdK,EAAqBlF,MAY9B,EAAAgW,SAASv8E,IAAIkoB,EAAaisC,oBAP1B,SAAoCoS,GAKlC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdK,EAAqBlF,MAY9B,EAAAgW,SAASv8E,IAAIkoB,EAAaksC,oBAP1B,SAAoCmS,GAKlC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdK,EAAqBlF,MAY9B,EAAAgW,SAASv8E,IAAIkoB,EAAamsC,kBAP1B,SAAkCkS,GAKhC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdK,EAAqBlF,MAY9B,EAAAgW,SAASv8E,IAAIkoB,EAAaosC,uBAP1B,SAAuCiS,GAKrC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdS,EAAmBtF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAaqsC,wBAP1B,SAAwCgS,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdS,EAAmBtF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAassC,oBAP1B,SAAoC+R,GAKlC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdS,EAAmBtF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAausC,uBAP1B,SAAuC8R,GAKrC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdS,EAAmBtF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAawsC,wBAP1B,SAAwC6R,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdS,EAAmBtF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAaysC,wBAP1B,SAAwC4R,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdS,EAAmBtF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAa0sC,oBAP1B,SAAoC2R,GAKlC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdS,EAAmBtF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAa2sC,uBAP1B,SAAuC0R,GAKrC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdW,EAAmBxF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAa4sC,wBAP1B,SAAwCyR,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdW,EAAmBxF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAa6sC,oBAP1B,SAAoCwR,GAKlC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdW,EAAmBxF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAa8sC,uBAP1B,SAAuCuR,GAKrC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdW,EAAmBxF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAa+sC,wBAP1B,SAAwCsR,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdW,EAAmBxF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAagtC,wBAP1B,SAAwCqR,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdW,EAAmBxF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAaitC,oBAP1B,SAAoCoR,GAKlC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdW,EAAmBxF,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAaktC,uBAP1B,SAAuCmR,GAKrC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACda,EAAmB1F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAamtC,wBAP1B,SAAwCkR,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACda,EAAmB1F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAaotC,oBAP1B,SAAoCiR,GAKlC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACda,EAAmB1F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAaqtC,uBAP1B,SAAuCgR,GAKrC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACda,EAAmB1F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAastC,wBAP1B,SAAwC+Q,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACda,EAAmB1F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAautC,wBAP1B,SAAwC8Q,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACda,EAAmB1F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAawtC,oBAP1B,SAAoC6Q,GAKlC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACda,EAAmB1F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAaytC,sBAP1B,SAAsC4Q,GAKpC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACde,EAAkB5F,MAY3B,EAAAgW,SAASv8E,IAAIkoB,EAAa0tC,uBAP1B,SAAuC2Q,GAKrC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACde,EAAkB5F,MAY3B,EAAAgW,SAASv8E,IAAIkoB,EAAa2tC,mBAP1B,SAAmC0Q,GAKjC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACde,EAAkB5F,MAY3B,EAAAgW,SAASv8E,IAAIkoB,EAAa4tC,sBAP1B,SAAsCyQ,GAKpC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACde,EAAkB5F,MAY3B,EAAAgW,SAASv8E,IAAIkoB,EAAa6tC,uBAP1B,SAAuCwQ,GAKrC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACde,EAAkB5F,MAY3B,EAAAgW,SAASv8E,IAAIkoB,EAAa8tC,uBAP1B,SAAuCuQ,GAKrC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACde,EAAkB5F,MAY3B,EAAAgW,SAASv8E,IAAIkoB,EAAa+tC,mBAP1B,SAAmCsQ,GAKjC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACde,EAAkB5F,MAY3B,EAAAgW,SAASv8E,IAAIkoB,EAAaguC,uBAP1B,SAAuCqQ,GAKrC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdiB,EAAmB9F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAaiuC,wBAP1B,SAAwCoQ,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdiB,EAAmB9F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAakuC,oBAP1B,SAAoCmQ,GAKlC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdiB,EAAmB9F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAamuC,uBAP1B,SAAuCkQ,GAKrC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdiB,EAAmB9F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAaouC,wBAP1B,SAAwCiQ,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdiB,EAAmB9F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAaquC,wBAP1B,SAAwCgQ,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdiB,EAAmB9F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAasuC,oBAP1B,SAAoC+P,GAKlC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdiB,EAAmB9F,MAY5B,EAAAgW,SAASv8E,IAAIkoB,EAAauuC,wBAP1B,SAAwC8P,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdmB,EAAoBhG,MAY7B,EAAAgW,SAASv8E,IAAIkoB,EAAawuC,yBAP1B,SAAyC6P,GAKvC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdmB,EAAoBhG,MAY7B,EAAAgW,SAASv8E,IAAIkoB,EAAayuC,qBAP1B,SAAqC4P,GAKnC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdmB,EAAoBhG,MAY7B,EAAAgW,SAASv8E,IAAIkoB,EAAa0uC,wBAP1B,SAAwC2P,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdmB,EAAoBhG,MAY7B,EAAAgW,SAASv8E,IAAIkoB,EAAa2uC,yBAP1B,SAAyC0P,GAKvC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdmB,EAAoBhG,MAY7B,EAAAgW,SAASv8E,IAAIkoB,EAAa4uC,yBAP1B,SAAyCyP,GAKvC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdmB,EAAoBhG,MAY7B,EAAAgW,SAASv8E,IAAIkoB,EAAa6uC,qBAP1B,SAAqCwP,GAKnC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdmB,EAAoBhG,MAY7B,EAAAgW,SAASv8E,IAAIkoB,EAAa8uC,2BAP1B,SAA2CuP,GAKzC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdqB,EAAuBlG,MAYhC,EAAAgW,SAASv8E,IAAIkoB,EAAa+uC,4BAP1B,SAA4CsP,GAK1C,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdqB,EAAuBlG,MAYhC,EAAAgW,SAASv8E,IAAIkoB,EAAagvC,wBAP1B,SAAwCqP,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IAC1B6wE,EAAI6E,gBAAiB,EACdqB,EAAuBlG,MAYhC,EAAAgW,SAASv8E,IAAIkoB,EAAaivC,2BAP1B,SAA2CoP,GAKzC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdqB,EAAuBlG,MAYhC,EAAAgW,SAASv8E,IAAIkoB,EAAakvC,4BAP1B,SAA4CmP,GAK1C,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdqB,EAAuBlG,MAYhC,EAAAgW,SAASv8E,IAAIkoB,EAAamvC,4BAP1B,SAA4CkP,GAK1C,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdqB,EAAuBlG,MAYhC,EAAAgW,SAASv8E,IAAIkoB,EAAaovC,wBAP1B,SAAwCiP,GAKtC,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IAC1B4wE,EAAI6E,gBAAiB,EACdqB,EAAuBlG,MAUhC,EAAAgW,SAASv8E,IAAIkoB,EAAaqvC,UAL1B,SAA0BgP,GAGxB,OAFAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KACpBg3E,EAAoBnG,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAasvC,UAN1B,SAA0B+O,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBg3E,EAAoBnG,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAa8vC,WAN1B,SAA2BuO,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKxsB,MAC3BkwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBq0E,EAAanE,MAYtB,EAAAgW,SAASv8E,IAAIkoB,EAAa+vC,YAP1B,SAA4BsO,GAK1B,OAJAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKxsB,MAC3BkwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KAC1BkwE,EAAI6E,gBAAiB,EACdD,EAAc5E,MAWvB,EAAAgW,SAASv8E,IAAIkoB,EAAaqyC,aAN1B,SAA6BgM,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB82E,EAAmB5G,MAW5B,EAAAgW,SAASv8E,IAAIkoB,EAAasyC,sBAN1B,SAAsC+L,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBg4E,EAA0BnH,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAauyC,sBAN1B,SAAsC8L,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBg4E,EAA0BnH,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAawyC,oBAN1B,SAAoC6L,GAIlC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBi4E,EAA0B/H,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAayyC,WAN1B,SAA2B4L,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB+5E,EAAiB7J,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa0yC,WAN1B,SAA2B2L,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBs6E,EAAiBpK,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa2yC,WAN1B,SAA2B0L,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB66E,EAAiB3K,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa4yC,aAN1B,SAA6ByL,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBg8E,GAAiB9L,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa6yC,aAN1B,SAA6BwL,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBg8E,GAAiB9L,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa8yC,aAN1B,SAA6BuL,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBy8E,GAAiBvM,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa+yC,aAN1B,SAA6BsL,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBy8E,GAAiBvM,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAagzC,cAN1B,SAA8BqL,GAI5B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBo9E,GAAkBlN,MAW3B,EAAAgW,SAASv8E,IAAIkoB,EAAaizC,WAN1B,SAA2BoL,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBmhF,GAAiBjR,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAakzC,WAN1B,SAA2BmL,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4gF,GAAiB1Q,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAamzC,sBAN1B,SAAsCkL,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBs7E,GAA0BpL,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAaozC,sBAN1B,SAAsCiL,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBs7E,GAA0BpL,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAaqzC,sBAN1B,SAAsCgL,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB27E,GAA0BzL,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAaszC,sBAN1B,SAAsC+K,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB27E,GAA0BzL,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAauzC,WAN1B,SAA2B8K,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBgjF,GAAiB9S,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAawzC,aAN1B,SAA6B6K,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBsjF,GAAiBpT,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAayzC,aAN1B,SAA6B4K,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBsjF,GAAiBpT,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa0zC,gBAN1B,SAAgC2K,GAI9B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnB2kF,GAAsB9T,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAa2zC,gBAN1B,SAAgC0K,GAI9B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBglF,GAAsBnU,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAa4zC,eAN1B,SAA+ByK,GAI7B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBqlF,GAAqBxU,MAW9B,EAAAgW,SAASv8E,IAAIkoB,EAAa6zC,UAN1B,SAA0BwK,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBu9E,GAAgBrN,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa8zC,UAN1B,SAA0BuK,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB69E,GAAgB3N,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa+zC,YAN1B,SAA4BsK,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBm+E,GAAgBjO,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAag0C,YAN1B,SAA4BqK,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBm+E,GAAgBjO,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAai0C,YAN1B,SAA4BoK,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4+E,GAAgB1O,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAak0C,YAN1B,SAA4BmK,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4+E,GAAgB1O,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAam0C,YAN1B,SAA4BkK,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBq/E,GAAgBnP,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAao0C,YAN1B,SAA4BiK,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBq/E,GAAgBnP,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAaq0C,YAN1B,SAA4BgK,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB8/E,GAAgB5P,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAas0C,YAN1B,SAA4B+J,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB8/E,GAAgB5P,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAau0C,sBAN1B,SAAsC8J,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBugF,GAAoBrQ,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAaw0C,sBAN1B,SAAsC6J,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBugF,GAAoBrQ,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAay0C,aAN1B,SAA6B4J,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB82E,EAAmB5G,MAW5B,EAAAgW,SAASv8E,IAAIkoB,EAAa00C,sBAN1B,SAAsC2J,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBg4E,EAA0BnH,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAa20C,sBAN1B,SAAsC0J,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBg4E,EAA0BnH,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAa40C,oBAN1B,SAAoCyJ,GAIlC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBi4E,EAA0B/H,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAa60C,WAN1B,SAA2BwJ,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB+5E,EAAiB7J,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa80C,WAN1B,SAA2BuJ,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBs6E,EAAiBpK,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa+0C,WAN1B,SAA2BsJ,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB66E,EAAiB3K,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAag1C,aAN1B,SAA6BqJ,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBg8E,GAAiB9L,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAai1C,aAN1B,SAA6BoJ,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBg8E,GAAiB9L,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAak1C,aAN1B,SAA6BmJ,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBy8E,GAAiBvM,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAam1C,aAN1B,SAA6BkJ,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBy8E,GAAiBvM,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAao1C,cAN1B,SAA8BiJ,GAI5B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBo9E,GAAkBlN,MAW3B,EAAAgW,SAASv8E,IAAIkoB,EAAaq1C,WAN1B,SAA2BgJ,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBmhF,GAAiBjR,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAas1C,WAN1B,SAA2B+I,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4gF,GAAiB1Q,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAau1C,sBAN1B,SAAsC8I,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBs7E,GAA0BpL,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAaw1C,sBAN1B,SAAsC6I,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBs7E,GAA0BpL,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAay1C,sBAN1B,SAAsC4I,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB27E,GAA0BzL,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAa01C,sBAN1B,SAAsC2I,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB27E,GAA0BzL,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAa21C,WAN1B,SAA2B0I,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBgjF,GAAiB9S,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa41C,aAN1B,SAA6ByI,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBsjF,GAAiBpT,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa61C,aAN1B,SAA6BwI,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBsjF,GAAiBpT,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa81C,gBAN1B,SAAgCuI,GAI9B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnB2kF,GAAsB9T,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAa+1C,gBAN1B,SAAgCsI,GAI9B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBglF,GAAsBnU,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAag2C,eAN1B,SAA+BqI,GAI7B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBqlF,GAAqBxU,MAW9B,EAAAgW,SAASv8E,IAAIkoB,EAAai2C,UAN1B,SAA0BoI,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBu9E,GAAgBrN,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAak2C,UAN1B,SAA0BmI,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB69E,GAAgB3N,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAam2C,YAN1B,SAA4BkI,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBm+E,GAAgBjO,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAao2C,YAN1B,SAA4BiI,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBm+E,GAAgBjO,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAaq2C,YAN1B,SAA4BgI,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4+E,GAAgB1O,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAas2C,YAN1B,SAA4B+H,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4+E,GAAgB1O,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAau2C,YAN1B,SAA4B8H,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBq/E,GAAgBnP,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAaw2C,YAN1B,SAA4B6H,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBq/E,GAAgBnP,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAay2C,YAN1B,SAA4B4H,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB8/E,GAAgB5P,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa02C,YAN1B,SAA4B2H,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB8/E,GAAgB5P,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa22C,sBAN1B,SAAsC0H,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBugF,GAAoBrQ,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAa42C,sBAN1B,SAAsCyH,GAIpC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBugF,GAAoBrQ,MAW7B,EAAAgW,SAASv8E,IAAIkoB,EAAa62C,yBAN1B,SAAyCwH,GAIvC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBsiF,GAAuBpS,MAWhC,EAAAgW,SAASv8E,IAAIkoB,EAAa82C,yBAN1B,SAAyCuH,GAIvC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBsiF,GAAuBpS,MAWhC,EAAAgW,SAASv8E,IAAIkoB,EAAa+2C,0BAN1B,SAA0CsH,GAIxC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB2iF,GAAwBzS,MAWjC,EAAAgW,SAASv8E,IAAIkoB,EAAag3C,0BAN1B,SAA0CqH,GAIxC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB2iF,GAAwBzS,MAWjC,EAAAgW,SAASv8E,IAAIkoB,EAAai3C,iBAN1B,SAAiCoH,GAI/B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBw5E,EAAsBtJ,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAak3C,iBAN1B,SAAiCmH,GAI/B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBw5E,EAAsBtJ,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAam3C,aAN1B,SAA6BkH,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB82E,EAAmB5G,MAW5B,EAAAgW,SAASv8E,IAAIkoB,EAAao3C,oBAN1B,SAAoCiH,GAIlC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBg4E,EAA0BnH,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAaq3C,oBAN1B,SAAoCgH,GAIlC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBi4E,EAA0B/H,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAas3C,WAN1B,SAA2B+G,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB+5E,EAAiB7J,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAau3C,WAN1B,SAA2B8G,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBs6E,EAAiBpK,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAaw3C,WAN1B,SAA2B6G,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB66E,EAAiB3K,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAay3C,aAN1B,SAA6B4G,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBg8E,GAAiB9L,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa03C,aAN1B,SAA6B2G,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBg8E,GAAiB9L,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa23C,aAN1B,SAA6B0G,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBy8E,GAAiBvM,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa43C,aAN1B,SAA6ByG,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBy8E,GAAiBvM,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa63C,mBAN1B,SAAmCwG,GAIjC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBk9E,GAAiBhN,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa83C,WAN1B,SAA2BuG,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBmhF,GAAiBjR,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa+3C,WAN1B,SAA2BsG,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4gF,GAAiB1Q,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAag4C,WAN1B,SAA2BqG,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBgjF,GAAiB9S,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAai4C,aAN1B,SAA6BoG,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBsjF,GAAiBpT,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAak4C,aAN1B,SAA6BmG,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBsjF,GAAiBpT,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAam4C,gBAN1B,SAAgCkG,GAI9B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnB2kF,GAAsB9T,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAao4C,gBAN1B,SAAgCiG,GAI9B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBglF,GAAsBnU,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAaq4C,eAN1B,SAA+BgG,GAI7B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBqlF,GAAqBxU,MAW9B,EAAAgW,SAASv8E,IAAIkoB,EAAas4C,UAN1B,SAA0B+F,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBu9E,GAAgBrN,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAau4C,UAN1B,SAA0B8F,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB69E,GAAgB3N,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAaw4C,YAN1B,SAA4B6F,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBm+E,GAAgBjO,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAay4C,YAN1B,SAA4B4F,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBm+E,GAAgBjO,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa04C,YAN1B,SAA4B2F,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4+E,GAAgB1O,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa24C,YAN1B,SAA4B0F,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4+E,GAAgB1O,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa44C,YAN1B,SAA4ByF,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBq/E,GAAgBnP,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa64C,YAN1B,SAA4BwF,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBq/E,GAAgBnP,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa84C,YAN1B,SAA4BuF,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB8/E,GAAgB5P,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa+4C,YAN1B,SAA4BsF,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB8/E,GAAgB5P,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAag5C,yBAN1B,SAAyCqF,GAIvC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBiiF,GAAuB/R,MAWhC,EAAAgW,SAASv8E,IAAIkoB,EAAai5C,yBAN1B,SAAyCoF,GAIvC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBiiF,GAAuB/R,MAWhC,EAAAgW,SAASv8E,IAAIkoB,EAAak5C,yBAN1B,SAAyCmF,GAIvC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBsiF,GAAuBpS,MAWhC,EAAAgW,SAASv8E,IAAIkoB,EAAam5C,yBAN1B,SAAyCkF,GAIvC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBsiF,GAAuBpS,MAWhC,EAAAgW,SAASv8E,IAAIkoB,EAAao5C,0BAN1B,SAA0CiF,GAIxC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB2iF,GAAwBzS,MAWjC,EAAAgW,SAASv8E,IAAIkoB,EAAaq5C,0BAN1B,SAA0CgF,GAIxC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB2iF,GAAwBzS,MAWjC,EAAAgW,SAASv8E,IAAIkoB,EAAas5C,kBAN1B,SAAkC+E,GAIhC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKptB,KAC3B8wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBw5E,EAAsBtJ,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAau5C,kBAN1B,SAAkC8E,GAIhC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBw5E,EAAsBtJ,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAaw5C,aAN1B,SAA6B6E,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB82E,EAAmB5G,MAW5B,EAAAgW,SAASv8E,IAAIkoB,EAAay5C,oBAN1B,SAAoC4E,GAIlC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKltB,IACnB+3E,EAA0BnH,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAa05C,oBAN1B,SAAoC2E,GAIlC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBi4E,EAA0B/H,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAa25C,WAN1B,SAA2B0E,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB+5E,EAAiB7J,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa45C,WAN1B,SAA2ByE,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBs6E,EAAiBpK,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa65C,WAN1B,SAA2BwE,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4gF,GAAiB1Q,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa85C,WAN1B,SAA2BuE,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBgjF,GAAiB9S,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa+5C,aAN1B,SAA6BsE,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBsjF,GAAiBpT,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAag6C,aAN1B,SAA6BqE,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK7sB,KAC3BuwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBsjF,GAAiBpT,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAai6C,gBAN1B,SAAgCoE,GAI9B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnB2kF,GAAsB9T,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAak6C,gBAN1B,SAAgCmE,GAI9B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKntB,IACnBglF,GAAsBnU,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAam6C,yBAN1B,SAAyCkE,GAIvC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBiiF,GAAuB/R,MAWhC,EAAAgW,SAASv8E,IAAIkoB,EAAao6C,yBAN1B,SAAyCiE,GAIvC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK7sB,KAC3BuwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBiiF,GAAuB/R,MAWhC,EAAAgW,SAASv8E,IAAIkoB,EAAaq6C,kBAN1B,SAAkCgE,GAIhC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBw5E,EAAsBtJ,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAas6C,kBAN1B,SAAkC+D,GAIhC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBw5E,EAAsBtJ,MAW/B,EAAAgW,SAASv8E,IAAIkoB,EAAau6C,aAN1B,SAA6B8D,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB82E,EAAmB5G,MAW5B,EAAAgW,SAASv8E,IAAIkoB,EAAaw6C,oBAN1B,SAAoC6D,GAIlC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAK1sB,IACnBu3E,EAA0BnH,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAay6C,oBAN1B,SAAoC4D,GAIlC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBi4E,EAA0B/H,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAa06C,WAN1B,SAA2B2D,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB+5E,EAAiB7J,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa26C,WAN1B,SAA2B0D,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBs6E,EAAiBpK,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa46C,WAN1B,SAA2ByD,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB66E,EAAiB3K,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa66C,WAN1B,SAA2BwD,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBm7E,GAAiBjL,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa86C,WAN1B,SAA2BuD,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4gF,GAAiB1Q,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAa+6C,WAN1B,SAA2BsD,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBg8E,GAAiB9L,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAag7C,WAN1B,SAA2BqD,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBy8E,GAAiBvM,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAai7C,WAN1B,SAA2BoD,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBmhF,GAAiBjR,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAak7C,YAN1B,SAA4BmD,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnByhF,GAAkBvR,MAW3B,EAAAgW,SAASv8E,IAAIkoB,EAAam7C,UAN1B,SAA0BkD,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBu9E,GAAgBrN,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAao7C,UAN1B,SAA0BiD,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB69E,GAAgB3N,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAaq7C,UAN1B,SAA0BgD,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBm+E,GAAgBjO,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAas7C,UAN1B,SAA0B+C,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4+E,GAAgB1O,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAau7C,UAN1B,SAA0B8C,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBq/E,GAAgBnP,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAaw7C,UAN1B,SAA0B6C,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB8/E,GAAgB5P,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAay7C,uBAN1B,SAAuC4C,GAIrC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKntB,KAC3B6wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4hF,GAAqB1R,MAW9B,EAAAgW,SAASv8E,IAAIkoB,EAAa07C,uBAN1B,SAAuC2C,GAIrC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4hF,GAAqB1R,MAW9B,EAAAgW,SAASv8E,IAAIkoB,EAAa27C,YAN1B,SAA4B0C,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB8kF,GAAkB5U,MAW3B,EAAAgW,SAASv8E,IAAIkoB,EAAa47C,YAN1B,SAA4ByC,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK1sB,KAC3BowE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBklF,GAAkBhV,MAW3B,EAAAgW,SAASv8E,IAAIkoB,EAAa67C,aAN1B,SAA6BwC,GAI3B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB82E,EAAmB5G,MAW5B,EAAAgW,SAASv8E,IAAIkoB,EAAa87C,oBAN1B,SAAoCuC,GAIlC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKzsB,IACnBs3E,EAA0BnH,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAa+7C,oBAN1B,SAAoCsC,GAIlC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBi4E,EAA0B/H,MAWnC,EAAAgW,SAASv8E,IAAIkoB,EAAag8C,WAN1B,SAA2BqC,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB+5E,EAAiB7J,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAai8C,WAN1B,SAA2BoC,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBs6E,EAAiBpK,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAak8C,WAN1B,SAA2BmC,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB66E,EAAiB3K,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAam8C,WAN1B,SAA2BkC,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBm7E,GAAiBjL,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAao8C,WAN1B,SAA2BiC,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4gF,GAAiB1Q,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAaq8C,WAN1B,SAA2BgC,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBg8E,GAAiB9L,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAas8C,WAN1B,SAA2B+B,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBy8E,GAAiBvM,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAau8C,WAN1B,SAA2B8B,GAIzB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBmhF,GAAiBjR,MAW1B,EAAAgW,SAASv8E,IAAIkoB,EAAaw8C,YAN1B,SAA4B6B,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnByhF,GAAkBvR,MAW3B,EAAAgW,SAASv8E,IAAIkoB,EAAay8C,UAN1B,SAA0B4B,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBu9E,GAAgBrN,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa08C,UAN1B,SAA0B2B,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB69E,GAAgB3N,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa28C,UAN1B,SAA0B0B,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBm+E,GAAgBjO,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa48C,UAN1B,SAA0ByB,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4+E,GAAgB1O,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa68C,UAN1B,SAA0BwB,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBq/E,GAAgBnP,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa88C,UAN1B,SAA0BuB,GAIxB,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB8/E,GAAgB5P,MAWzB,EAAAgW,SAASv8E,IAAIkoB,EAAa+8C,uBAN1B,SAAuCsB,GAIrC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKltB,KAC3B4wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4hF,GAAqB1R,MAW9B,EAAAgW,SAASv8E,IAAIkoB,EAAag9C,uBAN1B,SAAuCqB,GAIrC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK7sB,KAC3BuwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB4hF,GAAqB1R,MAW9B,EAAAgW,SAASv8E,IAAIkoB,EAAai9C,YAN1B,SAA4BoB,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnB8kF,GAAkB5U,MAW3B,EAAAgW,SAASv8E,IAAIkoB,EAAak9C,YAN1B,SAA4BmB,GAI1B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKzsB,KAC3BmwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBklF,GAAkBhV,MAW3B,EAAAgW,SAASv8E,IAAIkoB,EAAam9C,eAN1B,SAA+BkB,GAI7B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKrtB,IAC3B+wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBy4E,EAAqBvI,MAW9B,EAAAgW,SAASv8E,IAAIkoB,EAAao9C,eAN1B,SAA+BiB,GAI7B,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,KACpBulE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBg5E,EAAqB9I,MAW9B,EAAAgW,SAASv8E,IAAIkoB,EAAaq9C,kBAN1B,SAAkCgB,GAIhC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAKhtB,IAC3B0wE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBk5E,EAAwBhJ,MAWjC,EAAAgW,SAASv8E,IAAIkoB,EAAas9C,kBAN1B,SAAkCe,GAIhC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK/sB,KAC3BywE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBk5E,EAAwBhJ,MAWjC,EAAAgW,SAASv8E,IAAIkoB,EAAau9C,kBAN1B,SAAkCc,GAIhC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK9sB,KAC3BwwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBk5E,EAAwBhJ,MAWjC,EAAAgW,SAASv8E,IAAIkoB,EAAaw9C,kBAN1B,SAAkCa,GAIhC,OAHAqG,GAAgBrG,GAChBA,EAAIvlE,cAAgB,CAAE,EAAA6hB,KAAK7sB,KAC3BuwE,EAAIqE,eAAiB,EAAA/nD,KAAKxsB,KACnBk5E,EAAwBhJ,MAOjC,+BAAoCC,GAClC,IAAIv0E,EAASu0E,EAASv0E,OAClByrF,EAAQ,IAAIxjF,MACZquE,EAAiB/B,EAASlmD,QAAQioD,eAClCh/C,EAAgBnsB,OAAOopE,EAAS32C,QAAQtG,eAG5Ci9C,EAAS6W,gBAAgB9zD,GAAe,GAGxC,IAAK,IAAIG,EAAUC,WAAW68C,EAAS32C,QAAQnP,gBAAiB/tB,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CACrG,IAAIgS,EAAU8M,UAAUiY,EAAQ/2B,IAChC,GAAIgS,EAAQjE,MAAQ,EAAAwd,YAAY7O,OAAQ,SACxC,IAAI+b,EAAiBzmB,EACjB8+B,EAAarY,EAAOrpB,KACpBi0C,EAAYvS,EAAWzY,eAC3B,GACEyY,EAAWtY,GAAG,MACA,OAAd6qB,IACCA,EAAUruB,aAAa,EAAAxJ,eAAezO,YACvC0b,EAAOD,GAAG,EAAAx2B,YAAYuqF,UAEtB,GAAI9zD,EAAOD,GAAG,EAAAx2B,YAAY+8B,SAAU,CAClC,IAAI99B,EAAQw3B,EAAOqG,sBACftU,QAAQvpB,IAAUypB,SAASzpB,KAC7B8pF,EAAMp+E,KACJrN,EAAOa,KAAKy2B,EAAc/H,aAAc,CACtCglD,EAASlmD,QAAQgD,SACbrxB,EAAO0D,IAAIwnB,QAAQvpB,GAAQypB,SAASzpB,IACpC3B,EAAOyD,IAAIynB,QAAQvpB,KACtB,EAAA8kC,WAAWI,YAIlB4kD,EAAMp+E,KACJrN,EAAOosF,GACLpsF,EAAOi2E,UAAU,EACfj2E,EAAOktF,WAAW/zD,EAAO5J,aAAc+mD,IAEzCt2E,EAAOa,KAAKy2B,EAAc/H,aAAc,CACtCvvB,EAAOk2E,UAAU,EAAGI,GACpBt2E,EAAOk2E,UAAU,EAAG,EAAAzvC,WAAWt/B,MAC9B,EAAAs/B,WAAWI,QAMxB7mC,EAAOmtF,YAAYl3D,EAAa29C,cAC9B,EAAAntC,WAAWt/B,IACX,EAAAs/B,WAAWI,KACX,CAAEyvC,GACFmV,EAAM1+E,OACF/M,EAAOksC,MAAM,KAAMu/C,GACnBzrF,EAAO2rC,QAKf,+BAAoC4oC,GAClC,IAAI32C,EAAU22C,EAAS32C,QACnB59B,EAASu0E,EAASv0E,OAClB8wB,EAAY8M,EAAQvP,QAAQyC,UAC5BwlD,EAAiBxlD,EAAU2zB,eAC3B2oC,EAAiBt8D,EAAUsyB,SAC3Bv0B,EAAiB+O,EAAQ/O,eACzByI,EAAgBnsB,OAAOyyB,EAAQtG,eAC/B+1D,EAAS,IAAIplF,MACb6zC,EAAW,EAAA/F,SAAS/zC,OAAOhC,GAG/Bu0E,EAAS6W,gBAAgB9zD,GAAe,GAExC,IAAIg2D,EAAQxxC,EAASyxC,mBACnBvtF,EAAO2rC,MACP3rC,EAAOy8D,KAAK2wB,GAAgB,EAC1B9W,GAAkB,EAAA7vC,WAAWr/B,IACzBpH,EAAOq1E,OAAO,EAAAjuC,SAASomD,OACrBxtF,EAAOk2E,UAAU,EAAGI,GACpBt2E,EAAO0D,IAAI,IAEb1D,EAAOq1E,OAAO,EAAAjuC,SAASqmD,OACrBztF,EAAOk2E,UAAU,EAAGI,GACpBt2E,EAAOyD,IAAI,IAEjB,EAAAgjC,WAAWt/B,IACX,IAIAumF,EAAS,EAEb,IAAK,IAAI16D,EAAQC,SAASpE,GAAiBnuB,EAAI,EAAG8b,EAAIwW,EAAMjmB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC9E,IAKIitF,EALAC,EAAa56D,EAAMtyB,GACnB+8B,EAAWtyB,OAAO0jB,EAAettB,IAAIqsF,IACzCziF,OAAOsyB,EAAS3tB,KAAK8rD,WACrBzwD,OAAOyiF,GAAcF,KAGrB,IAAI7hF,EAAO,IAAI5D,MAGf,GAAIw1B,EAASowD,qBAA+E,QAAvDF,EAAYlwD,EAASzJ,aAAa,iBAA2B,CAChG7oB,OAAOwiF,EAAUl/E,MAAQ,EAAAwd,YAAY8L,oBACrC,IAAI+1D,EAAYlwD,EAAQlO,SAASsI,gBAAmC21D,EAAW,MAC/E,GAAKG,GAAcvZ,EAAS6W,gBAAgB0C,GAIrC,CACL,IAAIC,EAAWD,EAAUj0E,UACrBm0E,EAAgB7iF,OAAO4iF,EAASjsD,UACpC32B,OACoC,GAAlC4iF,EAAShsD,eAAeh1B,QACxBghF,EAAShsD,eAAe,IAAM,EAAAnR,KAAK9sB,KACnCiqF,EAAS3+E,YAAc,EAAAwhB,KAAKG,MAC5B0M,EAAS3tB,KAAKm+E,uBAAuBD,IAEvCniF,EAAKwB,KACHrN,EAAOa,KAAKitF,EAAUv+D,aAAc,CAClCvvB,EAAOk2E,UAAU,EAAGI,GACpBt2E,EAAOk2E,UAAU,EAAG,EAAAzvC,WAAWt/B,MAC9B,EAAAs/B,WAAWI,YAhBhBh7B,EAAKwB,KACHrN,EAAO69D,mBAoBN,CACL,IAAIxnD,EAAUonB,EAASpnB,QACvB,GAAIA,EAEF,IAAK,IAAIohB,EAAUC,WAAWrhB,GAAUgc,EAAI,EAAG1xB,EAAI82B,EAAQ1qB,OAAQslB,EAAI1xB,IAAK0xB,EAAG,CAC7E,IAAIgG,EAAS7Y,UAAUiY,EAAQpF,IAC/B,GAAIgG,EAAO5pB,MAAQ,EAAAwd,YAAY0M,OACjBN,EAAQ/H,SAAWmN,EAAU,CAEvC,GADwBpF,EAAQvoB,KAClB8rD,UAAW,CACvB,IAAIsyB,EAAsB71D,EAAQwK,aAClC13B,OAAO+iF,GAAe,GACtBriF,EAAKwB,KAEHrN,EAAOosF,GACLpsF,EAAOi2E,UAAU,EACfj2E,EAAOy8D,KAAK2wB,GAAgB,EAC1BptF,EAAOk2E,UAAU,EAAGI,GACpBA,EAAgB4X,IAGpBluF,EAAOa,KAAKy2B,EAAc/H,aAAc,CACtCvvB,EAAOk2E,UAAU,EAAGI,GACpBt2E,EAAOk2E,UAAU,EAAG,EAAAzvC,WAAWt/B,MAC9B,EAAAs/B,WAAWI,WASzBpJ,EAASkG,MAAM93B,EAAKwB,KAAKrN,EAAOmuF,UACrC,IAAIjiD,EAAQ4P,EAASsyC,SACnBpuF,EAAOquF,QAAQxiF,IAEjBiwC,EAASwyC,mBAAmBhB,EAAOphD,EAAO,CAAE0hD,IAC5CP,EAAOhgF,KAAK6+B,GAGd,IAAK,IAAIlZ,EAAQC,SAASpE,GAAiBnuB,EAAI,EAAG8b,EAAIwW,EAAMjmB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC9E,IAAIktF,EAAapuE,UAAUwT,EAAMtyB,IAE7BijC,EADWx4B,OAAO0jB,EAAettB,IAAIqsF,IACrBjqD,KAChBA,GAAMmY,EAASyyC,UAAUlB,EAAOO,GAAaP,EAAO1pD,EAAK7T,KAE/Du9D,EAAOhgF,KACLyuC,EAASsyC,SACPpuF,EAAO69D,gBAGX/hB,EAASwyC,mBAAmBhB,EAAOD,EAAOA,EAAOtgF,OAAS,GAAI,IAC9DwnE,EAAS6W,gBAAgB9zD,GACzBt3B,EAAOmtF,YAAYl3D,EAAa49C,cAC9B,EAAArjC,WAAW,CAAE1f,EAAU2zB,eAAgB,EAAAhe,WAAWt/B,MAClD,EAAAs/B,WAAWI,KACX,CAAEyvC,GACFx6B,EAAS0yC,iBAAiBlB,EAAO,KAcrC,uBAA4B/Y,GAC1B,IAAI32C,EAAU22C,EAAS32C,QACnB59B,EAASu0E,EAASv0E,OAClB6uB,EAAiB+O,EAAQ/O,eACzBqsB,EAAQrsB,EAAe8e,KACvBA,EAAO,EAAI,EAAIuN,EACf8C,EAAO,IAAIj1C,WAAW4kC,GAC1B,EAAA3d,SAASkrB,EAAO8C,EAAM,GACtB,IAAIz+B,EAAM,EACNkmB,EAAc7H,EAAQrJ,wBACtBk6D,EAAehpD,EAAYnjC,UAC3Bi0B,EAAiBqH,EAAQrH,eACzBE,EAAemH,EAAQnH,aACvBC,EAAekH,EAAQlH,aACvBF,EAAuBoH,EAAQpH,qBAC/Bk3D,EAAS,EAEb,IAAK,IAAI16D,EAAQC,SAASpE,GAAiBnuB,EAAI,EAAG8b,EAAIwW,EAAMjmB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC9E,IAAIktF,EAAapuE,UAAUwT,EAAMtyB,IAC7B+8B,EAAWtyB,OAAO0jB,EAAettB,IAAIqsF,IACzCziF,OAAOyiF,GAAcF,KACrB,IAAIn5E,EAAuB,EAE3B,GADIkpB,EAASC,YAAWnpB,GAAS,IAC7BkpB,IAAagI,GAAehI,EAAS+F,QAAQirD,GAAe,CAC9D,IAAIt0E,EAAYsjB,EAASixD,oBACzBn6E,GAAS,EACTA,GAAS,GAA8Bk1E,GAAmBtvE,QACrD,GAAIsjB,EAAS+F,QAAQjN,GAAiB,CAC3C,IAAIpc,EAAYsjB,EAASixD,oBACzBn6E,GAAS,EACTA,GAAS,GAA8Bk1E,GAAmBtvE,QACrD,GAAIsjB,EAAS+F,QAAQ/M,GAAe,CACzC,IAAI1nB,EAAgB5D,OAAOsyB,EAAS+H,mBAAmB/O,IACvDtrB,OAA+B,GAAxB4D,EAAchC,QACrBwH,GAAS,EACTA,GAAS,GAA8Bk1E,GAAmB16E,EAAc,SACnE,GAAI0uB,EAAS+F,QAAQ9M,GAAe,CACzC,IAAI3nB,EAAgB5D,OAAOsyB,EAAS+H,mBAAmB9O,IACvDvrB,OAA+B,GAAxB4D,EAAchC,QACrBwH,GAAS,GACTA,GAAS,MAA4Bk1E,GAAmB16E,EAAc,IACtEwF,GAAS,GAA8Bk1E,GAAmB16E,EAAc,SACnE,GAAI0uB,EAAS+F,QAAQhN,GAAuB,CACjD,IAAIrc,EAAYsjB,EAASixD,oBACzBn6E,GAAS,EACTA,GAAS,GAA8Bk1E,GAAmBtvE,GAE5D,EAAA6V,SAASzb,EAAOypC,EAAMz+B,GAAMA,GAAO,EACnCke,EAASwG,UAAY1vB,EACrB,IAAIovB,EAAOlG,EAASkG,KACpB,EAAA3T,SAAS2T,EAAOA,EAAK7T,GAAK,EAAGkuB,EAAMz+B,GAAMA,GAAO,EAElDpU,OAAOoU,GAAOouB,GACd,IAAI7c,EAAY8M,EAAQvP,QAAQyC,UAC5BgX,EAAUysC,EAASuX,iBAAiB9tC,GACxC,GAAsB,GAAlBltB,EAAU6c,KAAW,CACvB,IAAI9d,EAASiY,EAAQjY,OACrB7vB,EAAO2uF,UAAU14D,EAAa09C,UAAW,EAAAltC,WAAWr/B,KAAK,EAAOpH,EAAO0D,IAAIwnB,QAAQ2E,GAASzE,SAASyE,UAErG7vB,EAAO2uF,UAAU14D,EAAa09C,UAAW,EAAAltC,WAAWt/B,KAAK,EAAOnH,EAAOyD,IAAIynB,QAAQ4c,EAAQjY,WAK/F,kCAAuC0kD,EAAoBjyE,GACzD,IAAItC,EAASu0E,EAASv0E,OAClBs2E,EAAiB/B,EAASlmD,QAAQioD,eAClCj/C,EAAqBlsB,OAAO7I,EAAUs7B,QAAQvG,oBAClDk9C,EAAS6W,gBAAgB/zD,GAEzB,IAAIqU,EAAQ,IAAIzjC,MAGhByjC,EAAMr+B,KACJrN,EAAOosF,GACLpsF,EAAO20E,MACL2B,GAAkB,EAAA7vC,WAAWr/B,IACzB,EAAA+/B,QAAQivB,OACR,EAAAjvB,QAAQgvB,OACZn2D,EAAOk2E,UAAU,EAAGI,IAEtBt2E,EAAOmuF,OACLnuF,EAAOyD,IAAI,MAMjB,IAAIu8B,EAAY19B,EAAU09B,UAC1B,GAAkB,OAAdA,GAAsBA,EAAU2N,KAAO,EAEzC,IAAK,IAAIlW,EAAUC,WAAWsI,GAAYt/B,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC/E,IAAI+8B,EAAWje,UAAUiY,EAAQ/2B,IACjCgrC,EAAMr+B,KACJrN,EAAOosF,GACLpsF,EAAOa,KAAKw2B,EAAmB9H,aAAc,CAC3CvvB,EAAOk2E,UAAU,EAAGI,GACpBt2E,EAAOyD,IAAIg6B,EAAS3N,KACnB,EAAA2W,WAAWt/B,KACdnH,EAAOmuF,OACLnuF,EAAOyD,IAAI,MAQrBioC,EAAMr+B,KACJrN,EAAOmuF,OACLnuF,EAAOyD,IAAI,KAIfzD,EAAOmtF,YAAY7qF,EAAUitB,aAAe,cAAe+mD,EAAgB,EAAA7vC,WAAWt/B,IAAK,KAAMnH,EAAOquF,QAAQ3iD,M,iBC17PlH,YAKA,MAAMxD,EAAW/O,EAAO+O,WAAa/O,EAAO+O,SAAW,EAAQ,KAE/DloC,EAAOD,QAAUmoC,EAEjB,MAAM,OAAEH,GAAW,EAAQ,GAE3BA,EAAOzlC,UAAUssF,OAAS,WAKxB,OAAO1mD,EAAS2mD,WAAWxuF,KAAKsgC,KAAKmuD,aAAoC,IAG3E/mD,EAAOzlC,UAAUysF,QAAU,WACzB,OAAO7mD,EAAS2mD,WAAWxuF,KAAKsgC,KAAKquD,e,+FCfvC,cAUA,OAKA,OAiCA,OAaA,OA0BA,QAQA,OAKA,OAMA,OAgEA,OAQA,OAkFA,IAgCiBC,EAtGjB,8BAGE,KAAArqD,OAAiB,EAAAn6B,OAAO8mB,OAExB,KAAAC,UAAiB,EAEjB,KAAA09D,cAAqB,EAErB,KAAAC,aAAoB,EAEpB,KAAAC,aAAoB,EAEpB,KAAAC,aAAoB,EAEpB,KAAA9sD,WAAkB,EAElB,KAAA+sD,eAAsB,EAEtB,KAAA79D,WAAkB,EAElB,KAAAC,UAAiB,EAEjB,KAAAqE,cAA2C,KAE3C,KAAA6mB,SAAQ,EAER,KAAA2yC,UAAiB,EAEjB,KAAAC,UAAiB,EAEjB,KAAA39D,eAAsB,EAGtB,KAAAF,kBAAyB,EAEzB,KAAAC,gBAAuB,EAGvB,eACE,OAAOvxB,KAAKukC,QAAU,EAAAn6B,OAAO6mB,OAI/B,gBACE,OAAOjxB,KAAKukC,QAAU,EAAAn6B,OAAO6mB,OAAS,EAAAV,KAAK+yB,QAAU,EAAA/yB,KAAKgzB,QAI5D,gBACE,OAAOvjD,KAAKukC,QAAU,EAAAn6B,OAAO6mB,OAAS,EAAAV,KAAK6yB,QAAU,EAAA7yB,KAAK8yB,QAI5D,qBACE,OAAOrjD,KAAKukC,QAAU,EAAAn6B,OAAO6mB,OAAS,EAAAmV,WAAWr/B,IAAM,EAAAq/B,WAAWt/B,IAIpE,mBACE,OAAO9G,KAAKsxB,kBAAoB,GAAKtxB,KAAKuxB,gBAAkB,EAI9D,WAAWm4D,GACT,OAAoC,IAA5B1pF,KAAKu8C,SAAWmtC,KAK5B,SAAkB0F,GAChB,mBAGA,qCAEA,qCAEA,6BAGA,6BAEA,kCAEA,sCAfF,CAAkB,EAAAA,cAAA,EAAAA,YAAW,KAmB7B,SAAkBC,GAChB,mBAEA,mBAEA,mBAEA,mCAEA,mCATF,CAAkB,EAAAA,kBAAA,EAAAA,gBAAe,KAajC,SAAiBT,GAEF,EAAAxiF,MAAQ,SAER,EAAAsuD,gBAAkB,oBAElB,EAAAC,mBAAqB,uBAErB,EAAA20B,OAAS,SAET,EAAAC,MAAQ,QAVvB,CAAiBX,EAAA,EAAAA,cAAA,EAAAA,YAAW,KAc5B,MAAaY,UAAiB,EAAApqE,kBAgD5B,YAAYmY,GACVlf,MAAMkf,EAAQnwB,aAnChB,KAAAqiF,cAAgC,KAEhC,KAAAlmC,YAAoB,EAAAh5B,KAAKG,KAMzB,KAAAg/D,eAAkC,GAElC,KAAAC,eAA4C,IAAI5nF,IAEhD,KAAA6nF,cAA0B,GAE1B,KAAAC,uBAAoC,EAEpC,KAAAlD,gBAAe,EAEf,KAAAmD,oBAA0C,IAAIhoF,IAE9C,KAAAioF,YAA0B,GAE1B,KAAAC,qBAAsC,IAAIloF,IAE1C,KAAAmoF,uBAA8C,IAAInoF,IAElD,KAAAooF,aAA8B,IAAIpoF,IAoyG1B,KAAAqoF,eAAkC,KAClC,KAAAC,eAAkC,KAClC,KAAAC,eAAkC,KAClC,KAAAC,eAAkC,KA7xGxCtwF,KAAKu9B,QAAUA,EACf,IAAIvP,EAAUuP,EAAQvP,QAClBruB,EAAS,EAAA+nC,OAAO/lC,SACpB3B,KAAKL,OAASA,EACVquB,EAAQoD,YACVpxB,KAAKwiC,aAAe9Y,QAAQsE,EAAQoD,YACpCzxB,EAAO4wF,oBAAmB,KAErBviE,EAAQwD,gBAAkBxD,EAAQsD,mBAAqB,GAC1DtxB,KAAKwiC,aAAe9Y,QAAQ,MAC5B/pB,EAAO4wF,oBAAmB,KAE1BvwF,KAAKwiC,aAAe9Y,QAAQ,GAC5B/pB,EAAO4wF,oBAAmB,IAG9B,IAAIx8C,EAA6B,EAC7B/lB,EAAQyD,WAAW,KAAyBsiB,GAAgB,EAAA1N,aAAamqD,SACzExiE,EAAQyD,WAAW,KAA0BsiB,GAAgB,EAAA1N,aAAaoqD,gBAC1EziE,EAAQyD,WAAW,KAA0BsiB,GAAgB,EAAA1N,aAAaqqD,oBAC1E1iE,EAAQyD,WAAW,KAAsBsiB,GAAgB,EAAA1N,aAAasqD,YACtE3iE,EAAQyD,WAAW,MAAesiB,GAAgB,EAAA1N,aAAauqD,SAC/D5iE,EAAQyD,WAAW,MAAkBsiB,GAAgB,EAAA1N,aAAawqD,SAClE7iE,EAAQyD,WAAW,MAA6BsiB,GAAgB,EAAA1N,aAAayqD,mBAC7E9iE,EAAQyD,WAAW,OAAqBsiB,GAAgB,EAAA1N,aAAa0qD,UACrE/iE,EAAQyD,WAAW,OAA0BsiB,GAAgB,EAAA1N,aAAa2qD,gBAC1EhjE,EAAQyD,WAAW,OAAsBsiB,GAAgB,EAAA1N,aAAa4qD,YAC1EtxF,EAAOuxF,YAAYn9C,GAxErB,eAA2B,OAAO/zC,KAAKu9B,QAAQlO,SAE/C,cAAyB,OAAOrvB,KAAKu9B,QAAQvP,QAoC7C,eAAeuP,GACb,OAAO,IAAIiyD,EAASjyD,GAAS4zD,UAoC/B,oBAEEnxF,KAAKu9B,QAAQ6zD,WAAWpxF,KAAKguB,SAI/B,UACE,IAAIA,EAAUhuB,KAAKguB,QACfruB,EAASK,KAAKL,OACd49B,EAAUv9B,KAAKu9B,QAGnBv9B,KAAKqxF,oBAGL,IAAIC,EAAwB/zD,EAAQc,mBAAmB,EAAAzI,aAAaxpB,MAAO,IAAI,EAAAkyB,UAAUf,EAAS,GAAI,EAAAhN,KAAKG,OAC3G4gE,EAAsBpiE,aAAe,EAAA0G,aAAaxpB,MAClD,IAAImlF,EAAoB,IAAI3pF,MAC5B5H,KAAKu1E,YAAc+b,EAAsBxvD,KACzC9hC,KAAKwxF,YAAcD,EAGfvjE,EAAQgD,UACVrxB,EAAO2uF,UAAU,EAAA14D,aAAay9C,UAAW,EAAAjtC,WAAWr/B,KAAK,EAAMpH,EAAO0D,IAAI,IAC1E1D,EAAO2uF,UAAU,EAAA14D,aAAa09C,UAAW,EAAAltC,WAAWr/B,KAAK,EAAMpH,EAAO0D,IAAI,MAE1E1D,EAAO2uF,UAAU,EAAA14D,aAAay9C,UAAW,EAAAjtC,WAAWt/B,KAAK,EAAMnH,EAAOyD,IAAI,IAC1EzD,EAAO2uF,UAAU,EAAA14D,aAAa09C,UAAW,EAAAltC,WAAWt/B,KAAK,EAAMnH,EAAOyD,IAAI,KAI5E,IAAIquF,EAAQl0D,EAAQpP,YAEpB,IAAK,IAAIiJ,EAAUC,WAAWo6D,GAAQpxF,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC3E,IAAI0xB,EAAO5S,UAAUiY,EAAQ/2B,IACzB0xB,EAAK/lB,OAAO2S,YAAc,EAAA3Q,WAAWspB,aACvCt3B,KAAK0xF,YAAY3/D,GACjB/xB,KAAK2xF,eAAe5/D,IAKxB,IAAI6/D,GAAgBL,EAAkB7kF,OAClCuiF,EAAgB1xD,EAAQ5H,QAAU3H,EAAQihE,cAC9C,IAAK2C,GAAgB3C,EAAe,CAClC,IAAIz1E,EAAY83E,EAAsB93E,WACjCo4E,GAAgB3C,IACnBtvF,EAAO2uF,UAAU,EAAA14D,aAAa6kC,QAAS,EAAAr0B,WAAWt/B,KAAK,EAAMnH,EAAOyD,IAAI,IACxEmuF,EAAkBM,QAChBlyF,EAAOosF,GACLpsF,EAAOktF,WAAW,EAAAj3D,aAAa6kC,QAAS,EAAAr0B,WAAWt/B,KACnDnH,EAAOmuF,SACPnuF,EAAOmyF,WAAW,EAAAl8D,aAAa6kC,QAAS96D,EAAOyD,IAAI,OAIzD,IAAI2uF,EAAUpyF,EAAOmtF,YACnBwE,EAAsBpiE,aACtB1V,EAAUw4E,aACVx4E,EAAUy4E,cACV,EAAA/tC,mBAAmBotC,EAAsBlxD,kBACzCzgC,EAAOquF,QAAQuD,IAEjBD,EAAsBY,SAASvyF,EAAQoyF,GAClC9C,EACAtvF,EAAOwyF,kBAAkBb,EAAsBpiE,aAAc0/D,EAAYxiF,OAD1DzM,EAAOyyF,SAASL,GAKtC,IAAIM,EAAgB90D,EAAQ+0D,oBAC5B,GAAID,EAAc/kD,MAChB,GAAItf,EAAQmhE,SAEV,IAAK,IAAI/3D,EAAUm7D,WAAWF,GAAgBhyF,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CACnF,IAAIw/B,EAAgB1gB,UAAUiY,EAAQ/2B,IACtCL,KAAKmvF,SACH,EAAA/jF,eAAeonF,iEACf3yD,EAActK,eAAe7pB,MAAOm0B,EAAc3Q,oBAKxDqO,EAAQxM,wBAAwB,mBAAoB,EAAAR,KAAK3sB,KAAM8lB,QAAQ,EAAG,IAI5E,IAAIsmE,EAAuBhwF,KAAKgwF,qBAChC,EAAG,CACD,IAAIyC,EAAqB,IAAI7qF,MAE7B,IAAK,IAAIwvB,EAAUm7D,WAAWvC,GAAuB3vF,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC1F,IAAI+8B,EAAWje,UAAUiY,EAAQ/2B,IACjCoyF,EAAmBzlF,KAAKowB,GAE1B4yD,EAAqB0C,QACrB,IAAK,IAAIryF,EAAI,EAAG8b,EAAIs2E,EAAmB/lF,OAAQrM,EAAI8b,IAAK9b,EACtDL,KAAK+qF,gBAAgB5rE,UAAUszE,EAAmBpyF,KAAK,SAElD2vF,EAAqB1iD,MAI9B,IAAK,IAAIlW,EAAUm7D,WAAWvyF,KAAKiwF,wBAAyB5vF,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CACjG,IAAI4B,EAAYkd,UAAUiY,EAAQ/2B,IAClC,EAAAsyF,uBAAuB3yF,KAAMiC,GAI/BjC,KAAK4yF,2BAGLjzF,EAAOkzF,aAAa,EAAAj9D,aAAa09C,WACN,EAAvBtzE,KAAK2sF,iBAAwC,EAAAmG,YAAY9yF,MAClC,EAAvBA,KAAK2sF,iBAAgD,EAAAoG,oBAAoB/yF,MAClD,EAAvBA,KAAK2sF,iBAAgD,EAAAqG,oBAAoBhzF,MAG7E,IAAIwiC,EAAexiC,KAAKwiC,aACxBA,EAAeywD,UAAUzwD,EAAcxU,EAAQyC,UAAUsyB,UACzD,IAAImwC,EAAmBlzF,KAAKguB,QAAQwD,eACpC,GAAI0hE,EAAkB,CACpB,IAAI1hE,EAAiB9H,SAA2B,GAAnBwpE,GACzBC,OAAO3wD,EAAchR,IACvBxxB,KAAKymB,MACH,EAAArb,eAAegoF,6CACf,KAAMC,cAAc7wD,GAAe6wD,cAAc7hE,IAIvDxxB,KAAKwiC,aAAeA,EACpB7iC,EAAOkzF,aAAa,EAAAj9D,aAAay9C,WACN,EAAvBrzE,KAAK2sF,kBACH3+D,EAAQgD,SACVrxB,EAAO2uF,UACL,EAAA14D,aAAay9C,UACb,EAAAjtC,WAAWr/B,KACX,EACApH,EAAO0D,IAAIwnB,QAAQ2X,GAAezX,SAASyX,KAG7C7iC,EAAO2uF,UACL,EAAA14D,aAAay9C,UACb,EAAAjtC,WAAWt/B,KACX,EACAnH,EAAOyD,IAAIynB,QAAQ2X,MAMzB,IAAI8wD,EAAiBtlE,EAAQyD,WAAW,KAAoBzD,EAAQ8gE,aAAe,EACnFnvF,EAAO4zF,UACLvzF,KAAKguB,QAAQoD,YAAiCpxB,KAAK0vF,eAAehjF,OAC9Dme,QAAQ2oE,UAAUP,UAAUzwD,EAAc,OAAU9Y,QAAQ,MAC5D,EACJ4pE,EAAiBtlE,EAAQ8gE,aAAe,EAAApnD,OAAO6Q,iBAC/Cv4C,KAAK0vF,eACL1hE,EAAQuW,OACRqqD,EAAYU,OACZgE,GAIEtlE,EAAQ6gE,cAAclvF,EAAO8zF,gBAAgB,IAAK,MAAO,SAAUH,GAGvE,IAAI1D,EAAgB5vF,KAAK4vF,cACrBv+D,EAAYrxB,KAAKguB,QAAQqD,UACxBA,IAAWA,EAAY,GAC5B1xB,EAAO+zF,iBAAiBriE,EAAYu+D,EAAcljF,OAAQ,EAAAg7B,OAAO8Q,gBAAiBo3C,EAAejwF,EAAOyD,IAAIiuB,IAGxGrD,EAAQ+gE,cACVpvF,EAAOg0F,eAAe,IAAK,MAAO,SAC9B3lE,EAAQmhE,UAAYnhE,EAAQ4lE,cAC9B5zF,KAAKmvF,SACH,EAAA/jF,eAAeyoF,8DACf,OAIF7lE,EAAQghE,cACVrvF,EAAOm0F,eAAe,IAAKlF,EAAYW,OACnCvhE,EAAQmhE,UAAYnhE,EAAQ4lE,cAC9B5zF,KAAKmvF,SACH,EAAA/jF,eAAe2oF,8DACf,OAON,IAAK,IAAI38D,EAAUC,WAAWr3B,KAAKu9B,QAAQpP,aAAc9tB,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC9F,IAAI0xB,EAAO5S,UAAUiY,EAAQ/2B,IACzB0xB,EAAK/lB,OAAO2S,YAAc,EAAA3Q,WAAWspB,YAAYt3B,KAAKg0F,oBAAoBjiE,GAEhF,OAAOpyB,EAGD,2BAEN,IAAI49B,EAAUv9B,KAAKu9B,QACf2yD,EAAelwF,KAAKkwF,aAGpBN,EAAgB5vF,KAAK4vF,cACrBxhE,EAAiBmP,EAAQnP,eAC7B,IAAK,IAAI/tB,EAAI,EAAG8b,EAAIyzE,EAAcljF,OAAQrM,EAAI8b,IAAK9b,EAAG,CACpD,IAAI85D,EAAeh7C,UAAUywE,EAAcvvF,IAC3C,GAAI+tB,EAAe9gB,IAAI6sD,GAAe,CACpC,IAAI/8B,EAAWtyB,OAAOsjB,EAAeltB,IAAIi5D,IACrC/8B,EAASvE,GAAG,EAAAx2B,YAAYy6B,SAAW,EAAAz6B,YAAY6hC,WACjDp5B,OAAOsyB,EAAShvB,MAAQ,EAAAwd,YAAY9Y,UACpCo9E,EAAav/D,IAAcyM,KAOjC,IAAK,IAAIhG,EAAUm7D,WAAWrC,GAAe7vF,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAClF,IAAI+8B,EAAWje,UAAUiY,EAAQ/2B,IACjCL,KAAKo6B,QACH,EAAAhvB,eAAe6oF,mEACf72D,EAAS7H,eAAe7pB,MAAO0xB,EAASlO,eAQtC,oBAAoB6C,GAC1B,IAAIryB,EAAUqyB,EAAKryB,QACnB,GAAIA,EAEF,IAAK,IAAIizB,EAAQC,SAASlzB,GAAUW,EAAI,EAAG8b,EAAIwW,EAAMjmB,OAAQrM,EAAI8b,IAAK9b,EAAG,CACvE,IAAI6zF,EAAc/0E,UAAUwT,EAAMtyB,IAC9BgS,EAAUvH,OAAOpL,EAAQwB,IAAIgzF,IACjCl0F,KAAKm0F,mBAAmBD,EAAa7hF,GAGzC,IAAIwlB,EAAc9F,EAAK8F,YACvB,GAAIA,EACF,IAAK,IAAIx3B,EAAI,EAAG8b,EAAI0b,EAAYnrB,OAAQrM,EAAI8b,IAAK9b,EAC/CL,KAAKg0F,oBAAoBn8D,EAAYx3B,IAMnC,mBAAmBO,EAAcyR,EAAkB+hF,EAAiB,IAC1E,OAAQ/hF,EAAQjE,MAGd,KAAK,EAAAwd,YAAY8L,mBAAoB,CACnC,IAAI28D,EAAwChiF,EAASstB,UACrD,GAAI00D,EAEF,IAAK,IAAIj9D,EAAUC,WAAWg9D,GAAoBh0F,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CACvF,IAAI+8B,EAAWje,UAAUiY,EAAQ/2B,IAC7B85D,EAAev5D,EACnB,GAAIw8B,EAASvE,GAAG,EAAAx2B,YAAYyuB,SAAU,CACpC,IAAIwjE,EAAWl3D,EAASlO,aACxBirC,GAAgBm6B,EAASvnF,UAAUunF,EAASx1E,YAAY,MAE1D9e,KAAKm0F,mBAAmBh6B,EAAc/8B,EAAUg3D,GAGpD,MAEF,KAAK,EAAAxoE,YAAYyI,gBAAiB,CAChC,IAAIkgE,EAAkCliF,EAASstB,UAC/C,GAAI40D,EAEF,IAAK,IAAIn9D,EAAUC,WAAWk9D,GAAiBl0F,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CACpF,IAAI+8B,EAAWje,UAAUiY,EAAQ/2B,IAC7B85D,EAAev5D,EACnB,GAAIw8B,EAASvE,GAAG,EAAAx2B,YAAYyuB,SAAU,CACpC,IAAIwjE,EAAWl3D,EAASlO,aACxBirC,GAAgBm6B,EAASvnF,UAAUunF,EAASx1E,YAAY,MAE1D9e,KAAKm0F,mBAAmBh6B,EAAc/8B,EAAUg3D,GAGpD,MAEF,KAAK,EAAAxoE,YAAYqM,mBAAoB,CACnC,IAAIC,EAAuC7lB,EACvC8lB,EAAkBD,EAAkBC,gBACpCA,GAAiBn4B,KAAKm0F,mBAAmB,EAAA3xF,cAAgB5B,EAAMu3B,EAAiBi8D,GACpF,IAAIh8D,EAAkBF,EAAkBE,gBACpCA,GAAiBp4B,KAAKm0F,mBAAmB,EAAA1xF,cAAgB7B,EAAMw3B,EAAiBg8D,GACpF,MAIF,KAAK,EAAAxoE,YAAY7O,OAAQ,CACvB,IAAI+b,EAAiBzmB,EACPymB,EAAOD,GAAG,EAAAx2B,YAAYge,QAAUyY,EAAOD,GAAG,EAAAx2B,YAAY0f,OAAS,EAAA1f,YAAYwf,WACxE7hB,KAAKguB,QAAQyD,WAAW,GAMvCzxB,KAAKL,OAAO60F,gBAAgBniF,EAAQ6c,aAAcklE,EAASxzF,GAL3DZ,KAAKymB,MACH,EAAArb,eAAeqpF,+BACf37D,EAAOvD,eAAe7pB,OAK1B,MAEF,KAAK,EAAAkgB,YAAY0T,UAAW,CAC1B,IAAIo1D,EAAuBriF,EACtBqiF,EAAUn1D,aAAgBv/B,KAAKguB,QAAQyD,WAAW,GAMrDzxB,KAAKL,OAAO60F,gBAAgBniF,EAAQ6c,aAAcklE,EAASxzF,GAL3DZ,KAAKymB,MACH,EAAArb,eAAeqpF,+BACfC,EAAUn/D,eAAe7pB,OAK7B,MAEF,KAAK,EAAAkgB,YAAY9Y,SAAU,CACzB,IAAIsnD,EAA6B/nD,EACjC,IAAK+nD,EAAiB/kC,aAAa,EAAAxJ,eAAehP,SAAU,CAC1D,IAAIrD,EAAY4gD,EAAiB5gD,UAC7BA,EAAU+qC,mBAAqB/qC,EAAUkoB,eAAeh1B,SAE1D0tD,EAAmBp6D,KAAK20F,iBAAiBv6B,GACzCp6D,KAAK40F,gCAEHx6B,EAAiBvhC,GAAG,EAAAx2B,YAAYuqF,WAAW5sF,KAAKL,OAAOwyF,kBAAkB/3B,EAAiBlrC,aAAcklE,EAASxzF,GAEvH,MAEF,KAAK,EAAAgrB,YAAYyM,SAAU,CACzB,IAAIw4B,EAA6Bx+C,EAC7BxR,EAASgwD,EAAiBjuB,eAC1B/hC,GAAQb,KAAKm0F,mBAAmB,EAAA3xF,cAAgB5B,EAAMC,EAAQuzF,GAClE,IAAIS,EAAShkC,EAAiBhuB,eAC1BgyD,GAAQ70F,KAAKm0F,mBAAmB,EAAA1xF,cAAgB7B,EAAMi0F,EAAQT,GAClE,MAEF,KAAK,EAAAxoE,YAAY0M,MAAO,CACtB,IAAIuM,EAAuBxyB,EAC3B,GAAIA,EAAQwmB,GAAG,EAAAx2B,YAAYuqF,UAAW,CACpC,IAAIjtF,EAASK,KAAKL,OAClBA,EAAOwyF,kBAAkBttD,EAAciwD,mBAAoBV,EAAS,EAAA5xF,cAAgB5B,GAC/EyR,EAAQwmB,GAAG,EAAAx2B,YAAYwf,WAC1BliB,EAAOwyF,kBAAkBttD,EAAckwD,mBAAoBX,EAAS,EAAA3xF,cAAgB7B,GAGxF,MAEF,KAAK,EAAAgrB,YAAY7Z,MAAO,CACtB,IAAI8tB,EAAuBxtB,EAE3B,IAAKwtB,EAAcpwB,KAAKulF,YAAa,CACnC,IAAIr1F,EAASK,KAAKL,OACduvB,EAAe2Q,EAAc3Q,aACjCvvB,EAAO2uF,UAAUp/D,EAAc,EAAAkX,WAAWt/B,KAAK,EAAOnH,EAAOyD,IAAIy8B,EAAcpQ,KAC/E9vB,EAAO60F,gBAAgBtlE,EAAcklE,EAASxzF,GAEhD,MAIF,KAAK,EAAAgrB,YAAYjL,KACjB,KAAK,EAAAiL,YAAYrK,UACjB,KAAK,EAAAqK,YAAYgT,eACjB,KAAK,EAAAhT,YAAYkX,eAAgB,MAEjC,QAASh4B,QAAO,GAIlB,IAAIkL,EAAU3D,EAAQ2D,QACtB,GAAIA,EAAS,CACX,IAAIi/E,EAAYb,EAASxzF,GAAQyR,EAAQjE,MAAQ,EAAAwd,YAAY7Z,MACzD,EAAArP,mBACA,EAAAC,kBAEJ,GAAI0P,EAAQjE,MAAQ,EAAAwd,YAAYrK,UAAW,CACzC,IAAI2zE,EAAiB7iF,EAAQwmB,GAAG,EAAAx2B,YAAYo8B,QAE5C,IAAK,IAAI9L,EAAQC,SAAS5c,GAAU3V,EAAI,EAAG8b,EAAIwW,EAAMjmB,OAAQrM,EAAI8b,IAAK9b,EAAG,CACvE,IAAIs+B,EAAaxf,UAAUwT,EAAMtyB,IAC7B23B,EAASltB,OAAOkL,EAAQ9U,IAAIy9B,KAC5Bu2D,GAAkBl9D,EAAOa,GAAG,EAAAx2B,YAAY4U,UAC1CjX,KAAKm0F,mBAAmBx1D,EAAY3G,EAAQi9D,SAKhD,IAAK,IAAItiE,EAAQC,SAAS5c,GAAU3V,EAAI,EAAG8b,EAAIwW,EAAMjmB,OAAQrM,EAAI8b,IAAK9b,EAAG,CACvE,IAAIs+B,EAAaxf,UAAUwT,EAAMtyB,IAC7B23B,EAASltB,OAAOkL,EAAQ9U,IAAIy9B,IAC3B3G,EAAOa,GAAG,EAAAx2B,YAAYqf,UACzB1hB,KAAKm0F,mBAAmBx1D,EAAY3G,EAAQi9D,KAUtD,eAAe5iF,EAAkB8iF,GAAuB,GACtD,OAAQ9iF,EAAQjE,MACd,KAAK,EAAAwd,YAAY7O,OACf/c,KAAKo1F,cAAsB/iF,GAC3B,MAEF,KAAK,EAAAuZ,YAAYjL,KACf3gB,KAAKq1F,YAAkBhjF,GACvB,MAEF,KAAK,EAAAuZ,YAAY8L,mBACf,IAAKrlB,EAAQwmB,GAAG,EAAAx2B,YAAYyuB,SAAU,CACpC,IAAIsM,EAAWp9B,KAAKqvB,SAASsI,gBAAmCtlB,EAAS,MACrE+qB,GAAUp9B,KAAK+qF,gBAAgB3tD,GAErC,MAEF,KAAK,EAAAxR,YAAYyI,gBACf,IAAKhiB,EAAQwmB,GAAG,EAAAx2B,YAAYyuB,SAAU,CACpC,IAAIsM,EAAWp9B,KAAKqvB,SAASoI,aAA6BplB,EAAS,MAC/D+qB,GAAUp9B,KAAKs1F,aAAal4D,GAElC,MAEF,KAAK,EAAAxR,YAAYqM,mBAAoB,CACnC,IAAIC,EAAuC7lB,EACvC8lB,EAAkBD,EAAkBC,gBACxC,GAAIA,EAAiB,CACnBrtB,QAAQqtB,EAAgBU,GAAG,EAAAx2B,YAAYyuB,UACvC,IAAIsM,EAAWp9B,KAAKqvB,SAASsI,gBAAgBQ,EAAiB,MAC1DiF,GAAUp9B,KAAK+qF,gBAAgB3tD,GAErC,IAAIhF,EAAkBF,EAAkBE,gBACxC,GAAIA,EAAiB,CACnBttB,QAAQstB,EAAgBS,GAAG,EAAAx2B,YAAYyuB,UACvC,IAAIsM,EAAWp9B,KAAKqvB,SAASsI,gBAAgBS,EAAiB,MAC1DgF,GAAUp9B,KAAK+qF,gBAAgB3tD,GAErC,MAEF,KAAK,EAAAxR,YAAYrK,UACjB,KAAK,EAAAqK,YAAYgT,eACjB,KAAK,EAAAhT,YAAY0T,UACjB,KAAK,EAAA1T,YAAYkX,eAAgB,MACjC,QAASh4B,QAAO,GAElB,GAAIqqF,EAAgB,CAClB,IAAIn/E,EAAU3D,EAAQ2D,QACtB,GAAIA,EAEF,IAAK,IAAIohB,EAAUC,WAAWrhB,GAAU3V,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC7E,IAAIgS,EAAU8M,UAAUiY,EAAQ/2B,IAChCL,KAAKu1F,eAAeljF,KAO5B,eAAe0f,GACb,IAAIryB,EAAUqyB,EAAKryB,QACnB,GAAIA,EAEF,IAAK,IAAI03B,EAAUC,WAAW33B,GAAUW,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC7E,IAAIgS,EAAU8M,UAAUiY,EAAQ/2B,IAChCL,KAAKu1F,eAAeljF,GAGxB,IAAIwlB,EAAc9F,EAAK8F,YACvB,GAAIA,EACF,IAAK,IAAIx3B,EAAI,EAAG8b,EAAI0b,EAAYnrB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAClD,IAAIyyB,EAAa3T,UAAU0Y,EAAYx3B,IACvCL,KAAK0xF,YAAY5+D,GACjB9yB,KAAK2xF,eAAe7+D,IAQ1B,kBAAkB0iE,EAAwC5lC,GACxD,IAAI79B,EAEA0jE,EADAtnE,EAAcnuB,KAAKu9B,QAAQpP,YAE/B,GAAIA,EAAY7gB,IAAIkoF,GAClBzjE,EAAOjnB,OAAOqjB,EAAYjtB,IAAIs0F,QACzB,KAAIrnE,EAAY7gB,IAAImoF,EAAgBD,EAAiC,EAAAzyF,cAO1E,YAJA/C,KAAKymB,MACH,EAAArb,eAAe8nB,iBACf08B,EAAWlkD,MAAO8pF,GAJpBzjE,EAAOjnB,OAAOqjB,EAAYjtB,IAAIu0F,IAQhCz1F,KAAK0xF,YAAY3/D,GAInB,YAAYA,GACV,IAAIA,EAAK8G,GAAG,EAAAx2B,YAAYuqF,UAAxB,CACA76D,EAAKrkB,IAAI,EAAArL,YAAYuqF,UAGrB,IAAIxuD,EAAgBrM,EAAKqM,cACrBs3D,EAAiBt3D,EAAc5kB,UAC/Bm8E,EAAe31F,KAAKwxF,YACpBD,EAAoB,IAAI3pF,MAC5B5H,KAAKwxF,YAAcD,EAGnB,IAAIqE,EAAe51F,KAAKu1E,YACpBzzC,EAAO1D,EAAc0D,KACzB9hC,KAAKu1E,YAAczzC,EACnB,IAAK,IAAItsB,EAAauc,EAAK/lB,OAAOwJ,WAAYnV,EAAI,EAAG8b,EAAI3G,EAAW9I,OAAQrM,EAAI8b,IAAK9b,EACnFL,KAAK61F,yBAAyBrgF,EAAWnV,GAAIkxF,GAQ/C,GANAvxF,KAAK81F,mBAAmBh0D,EAAMyvD,GAE9BvxF,KAAKu1E,YAAcqgB,EACnB51F,KAAKwxF,YAAcmE,EAGfpE,EAAkB7kF,OAAQ,CAC5B,IAAI/M,EAASK,KAAKL,OACdsiC,EAAS7D,EAAc+B,cACvB41D,EAAY9zD,EAAOv1B,OACnBmjC,EAAW,IAAIjoC,MAAkBmuF,GACrC,IAAK,IAAI11F,EAAI,EAAGA,EAAI01F,IAAa11F,EAAGwvC,EAASxvC,GAAK4hC,EAAO5hC,GAAGoP,KAAK20C,eACjEzkD,EAAOmtF,YACL1uD,EAAclP,aACdwmE,EAAe1D,aACf0D,EAAezD,cACfpiD,EACAlwC,EAAOquF,QAAQuD,IAEjBoE,EAAa3oF,KACXrN,EAAOa,KAAK49B,EAAclP,aAAc,KAAM,EAAAkX,WAAWI,SAQ/D,cAAc1N,GACZ,GAAIA,EAAOD,GAAG,EAAAx2B,YAAYuqF,UAAW,OAAO,EAC5C9zD,EAAOprB,IAAI,EAAArL,YAAYuqF,UAEvB,IAAIjtF,EAASK,KAAKL,OACdq2F,EAA0B,EAC1BzuC,EAAWzuB,EAAOyuB,SAClBwE,EAAkBjzB,EAAOizB,gBAE7B,IAAKjzB,EAAOD,GAAG,EAAAx2B,YAAY87B,UAGzB,GAAIopB,EAAU,CACZ,IAAI8E,EAAersD,KAAKqvB,SAASi4B,YAAYC,EAAUzuB,EAAO7I,QAC9D,IAAKo8B,EAAc,OAAO,EAC1B,GAAIA,GAAgB,EAAA97B,KAAKG,KAKvB,OAJA1wB,KAAKymB,MACH,EAAArb,eAAey8C,cACfN,EAAS77C,QAEJ,EAETotB,EAAON,QAAQ6zB,GACfrsD,KAAKi2F,mBAAmBn9D,EAAOrpB,KAAM83C,OAGhC,KAAIwE,EAwBT,OAJA/rD,KAAKymB,MACH,EAAArb,eAAey8C,cACf/uB,EAAOvD,eAAe7pB,MAAM49C,QAEvB,EAxBmB,CAC1B,IAAIssC,EAAe51F,KAAKu1E,YAQxB,GAPIz8C,EAAOzD,aAAa,EAAAxJ,eAAe5O,QACrCjd,KAAKu1E,YAAcz8C,EAAO/G,KAAKqM,cAAc0D,MAE/Ck0D,EAAWh2F,KAAKq0E,kBAAkBtoB,EAAiB,EAAAx7B,KAAK4yB,KACtD,IAEFnjD,KAAKu1E,YAAcqgB,EACf51F,KAAKupD,aAAe,EAAAh5B,KAAKG,KAK3B,OAJA1wB,KAAKymB,MACH,EAAArb,eAAegmD,mCACfrF,EAAgBrgD,MAAO1L,KAAKupD,YAAYt9C,WAAY,WAE/C,EAET6sB,EAAON,QAAQx4B,KAAKupD,cAaxB,GAAIzwB,EAAOD,GAAG,EAAAx2B,YAAY04B,UAAYjC,EAAOzD,aAAa,EAAAxJ,eAAehP,SAGvE,OAFIic,EAAO5J,cAAgB,EAAA0G,aAAay9C,UAAWrzE,KAAK2sF,iBAAmB,EAClE7zD,EAAO5J,cAAgB,EAAA0G,aAAa09C,YAAWtzE,KAAK2sF,iBAAmB,IACzE,EAGT,IAAIl9E,EAAOqpB,EAAOrpB,KACd+mE,EAAa/mE,EAAK20C,eAClB8xC,EAAqBp9D,EAAOD,GAAG,EAAAx2B,YAAYge,QAAUyY,EAAOD,GAAG,EAAAx2B,YAAY0f,OAAS,EAAA1f,YAAYwf,UAChGs0E,EAAmBr9D,EAAOzD,aAAa,EAAAxJ,eAAe7O,QAG1D,GAAI8b,EAAOD,GAAG,EAAAx2B,YAAY04B,SAGxB,OAAIm7D,GAAsBl2F,KAAKguB,QAAQyD,WAAW,IAChDqH,EAAOprB,IAAI,EAAArL,YAAY+zF,eACvBC,EAAiBv9D,EAAQA,EAAOjnB,aAChClS,EAAO22F,gBACLx9D,EAAO5J,aACPqnE,EACAC,EACAhgB,GACC0f,GAEHp9D,EAAOprB,IAAI,EAAArL,YAAYuqF,WAChB,IAIP5sF,KAAKymB,MACH,EAAArb,eAAeu+E,yBACf7wD,EAAOjnB,YAAYnG,MAAO,oBAGvB,GAKT,IAAI+qF,GAAoB,EAGxB,GAAI1qC,EAAiB,CACnB,IAAKiqC,EAAU,CACb,IAAIJ,EAAe51F,KAAKu1E,YACpBz8C,EAAOzD,aAAa,EAAAxJ,eAAe5O,QACrCjd,KAAKu1E,YAAcz8C,EAAO/G,KAAKqM,cAAc0D,MAE/Ck0D,EAAWh2F,KAAKq0E,kBAAkBtoB,EAAiBt8C,EACjD,IAEFzP,KAAKu1E,YAAcqgB,EAIrB,GAAI,EAAApqD,gBAAgBwqD,IAAa,EAAA1vD,aAAa0P,MAC5C,GAAIkgD,EAAoB,CACtB,GAAI,EAAA1qD,gBAAgBwqD,IAAa,EAAA1vD,aAAa0P,MAAO,CACnD,IAAI6B,EAAUl4C,EAAO+6E,cAAcsb,EAAU,EAAAzuD,sBAAsBozC,qBAC/D9iC,EACFm+C,EAAWn+C,EAEX4+C,GAAoB,EAGpBz2F,KAAK8vF,oBAAoBxiF,IAAI0oF,IAAWh2F,KAAK8vF,oBAAoBn/D,IAAIqlE,QAEzES,GAAoB,EAKxB,GAAIA,GAAqB,EAAAjrD,gBAAgBwqD,IAAa,EAAA1vD,aAAakQ,UAAW,CAC5E,IAAIkgD,EAAW5rF,OAAO,EAAAgsD,iBAAiBk/B,IACvC,IAAK,EAAAW,gBAAgBh3F,EAAOi3F,UAAUF,IAAY,CAChD,IAAItoE,EAAiBpuB,KAAKu9B,QAAQnP,eAClC,GAAIA,EAAe9gB,IAAIopF,GAAW,CACnB5rF,OAAOsjB,EAAeltB,IAAIw1F,IAC5B79D,GAAG,EAAAx2B,YAAY04B,WAAU07D,GAAoB,KAM9D,GAAIN,EACF,GAAIM,EACFz2F,KAAKo6B,QACH,EAAAhvB,eAAeyrF,gCACf9qC,EAAgBrgD,WAEb,CAGL,OAFAZ,OAAO,EAAA0gC,gBAAgBwqD,IAAa,EAAA1vD,aAAa0P,OAClC,EAAApK,kBAAkBoqD,IAE/B,KAAU,EAAA5vD,WAAWt/B,IACnBgyB,EAAOoG,kBAAoB,EAC3BpG,EAAOqG,qBAAuBzV,QAAQ,EAAA8rC,iBAAiBwgC,GAAW,GAClE,MAEF,KAAU,EAAA5vD,WAAWr/B,IACnB+xB,EAAOoG,kBAAoB,EAC3BpG,EAAOqG,qBAAuBzV,QAC5B,EAAA+rC,oBAAoBugC,GACpB,EAAAtgC,qBAAqBsgC,IAEvB,MAEF,KAAU,EAAA5vD,WAAW7+B,IACnBuxB,EAAOoG,kBAAoB,EAC3BpG,EAAOuG,mBAAqB,EAAAk6B,iBAAiBy8B,GAC7C,MAEF,KAAU,EAAA5vD,WAAW5+B,IACnBsxB,EAAOoG,kBAAoB,EAC3BpG,EAAOuG,mBAAqB,EAAAm6B,iBAAiBw8B,GAC7C,MAEF,QAEE,OADAlrF,QAAO,IACA,EAGXguB,EAAOprB,IAAI,EAAArL,YAAY+8B,eAOzB42D,EADEl9D,EAAOD,GAAG,EAAAx2B,YAAY+8B,SACbp/B,KAAK82F,sBAAsBh+D,EAAQA,EAAOrpB,KAAM,IAEhDzP,KAAKqrF,SAAS57E,GAI7B,IAAIyf,EAAe4J,EAAO5J,aAiB1B,OAfIunE,GACEN,GACFn2F,KAAKymB,MACH,EAAArb,eAAe0uB,8BACf,EAAAi9D,cAAc,EAAAjpF,cAAckP,OAAQ8b,EAAOk+D,gBAAiBtrF,MAAO,UAGvE/L,EAAO2uF,UAAUp/D,EAAcsnD,GAAY,EAAMx2E,KAAKqrF,SAAS57E,IAC3DA,EAAK8rD,YAAcv7D,KAAK8vF,oBAAoBxiF,IAAI0oF,KAAWA,EAAWh2F,KAAKi3F,WAAWjB,IAC1Fh2F,KAAKwxF,YAAYxkF,KACfrN,EAAOmyF,WAAW5iE,EAAc8mE,KAExBG,GACVx2F,EAAO2uF,UAAUp/D,EAAcsnD,GAAa0f,EAAoBF,IAE3D,EAMT,YAAY3jF,GACV,GAAIA,EAAQwmB,GAAG,EAAAx2B,YAAYuqF,UAAW,OAAO,EAC7Cv6E,EAAQ3E,IAAI,EAAArL,YAAYuqF,UAExB,IAAIjtF,EAASK,KAAKL,OACdu3F,EAAiBl3F,KAAKyvF,cAC1BzvF,KAAKyvF,cAAgBp9E,EACrB,IAAI8kF,EAAkC,KAClCC,GAAqB,EACrBtpC,EAAWz7C,EAAQwmB,GAAG,EAAAx2B,YAAYge,QAAUhO,EAAQgjB,aAAa,EAAAxJ,eAAe7O,QAEhFhH,EAAU3D,EAAQ2D,QACtB,GAAIA,EAEF,IAAK,IAAIohB,EAAUC,WAAWrhB,GAAU3V,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC7E,IAAI23B,EAAS7Y,UAAUiY,EAAQ/2B,IAC/B,GAAI23B,EAAO5pB,MAAQ,EAAAwd,YAAY0T,UAAW,SAC1C,IAAI+3D,GAAc,EACd3C,EAAuB18D,EACvBs/D,EAAY5C,EAAU4C,UAC1B5C,EAAUhnF,IAAI,EAAArL,YAAYuqF,UAC1B,IAIIoJ,EAJAJ,EAAe51F,KAAKu1E,YAKxB,GAJIljE,EAAQgjB,aAAa,EAAAxJ,eAAe5O,QACtCjd,KAAKu1E,YAAcljE,EAAQ0f,KAAKqM,cAAc0D,MAG5Cw1D,GAIF,GAHAtB,EAAWh2F,KAAKq0E,kBAAkBijB,EAAW,EAAA/mE,KAAKntB,IAAG,GAGjD,EAAAooC,gBAAgBwqD,IAAa,EAAA1vD,aAAa0P,MAAO,CACnD,IAAI6B,EAAUl4C,EAAO+6E,cAAcsb,EAAU,EAAAzuD,sBAAsBozC,qBAC/D9iC,EACFm+C,EAAWn+C,GAEPxlC,EAAQwmB,GAAG,EAAAx2B,YAAYge,QACzBrgB,KAAKymB,MACH,EAAArb,eAAemsF,0EACfD,EAAU5rF,OAGd2rF,GAAc,SAGb,GAAqB,MAAjBF,EACTnB,EAAWr2F,EAAOyD,IAAI,QAQtB,GANIg0F,GACFp3F,KAAKymB,MACH,EAAArb,eAAeosF,kCACf9C,EAAUn/D,eAAe7pB,MAAM49C,OAG/BwE,EAAU,CACZ,IAAIxsD,EAAQuoB,QAAQstE,EAAch4D,qBAAsBzV,QAAQ,IAChE5e,QAAQigB,SAASzpB,IACjB00F,EAAWr2F,EAAOyD,IAAIynB,QAAQvpB,QACzB,CACL00F,EAAWr2F,EAAOq1E,OAAO,EAAAjuC,SAAS4uC,OAChCh2E,EAAOktF,WAAWsK,EAAcjoE,aAAc,EAAAkX,WAAWt/B,KACzDnH,EAAOyD,IAAI,IAEb,IAAIy0C,EAAUl4C,EAAO+6E,cAAcsb,EAAU,EAAAzuD,sBAAsBozC,qBAC/D9iC,EACFm+C,EAAWn+C,GAEPxlC,EAAQwmB,GAAG,EAAAx2B,YAAYge,QACzBrgB,KAAKymB,MACH,EAAArb,eAAemsF,0EACfv/D,EAAOnmB,YAAYnG,OAGvB2rF,GAAc,GAIpBr3F,KAAKu1E,YAAcqgB,EACfyB,GACF13F,EAAO2uF,UAAUoG,EAAUxlE,aAAc,EAAAkX,WAAWt/B,KAAK,EAAMnH,EAAOyD,IAAI,IAC1EpD,KAAKwxF,YAAYxkF,KACfhN,KAAKy3F,qBAAqB/C,EAAWsB,GAAU,IAEjDoB,GAAqB,IAEjBtpC,GACF4mC,EAAUz7D,wBAAwBvP,QAAQ,EAAA8rC,iBAAiBwgC,IAAY,EAAAzlE,KAAKntB,KACxEsxF,EAAU77D,GAAG,EAAAx2B,YAAYy1B,gBAC3Bn4B,EAAO2uF,UAAUoG,EAAUxlE,aAAc,EAAAkX,WAAWt/B,KAAK,EAAOkvF,IAGlEr2F,EAAO2uF,UAAUoG,EAAUxlE,aAAc,EAAAkX,WAAWt/B,KAAK,EAAOkvF,GAElEtB,EAAUn1D,aAAc,EACxB63D,GAAqB,GAEvBD,EAAgBzC,EAIpB,OADA10F,KAAKyvF,cAAgByH,GACd,EAMT,gBAEE95D,EAEAs6D,GAA4B,GAE5B,GAAIt6D,EAASvE,GAAG,EAAAx2B,YAAYuqF,UAAW,OAAO,EAC9C,IAAK8K,EAAqB,CACxB,GAAIt6D,EAAS/H,aAAa,EAAAxJ,eAAehP,SAAU,OAAO,EAC1D,GAAIugB,EAAS/H,aAAa,EAAAxJ,eAAe5O,MAEvC,OADAjd,KAAKgwF,qBAAqBr/D,IAAIyM,IACvB,EAIX,IAAIu6D,EAAe33F,KAAKupD,YACxBnsB,EAAS1vB,IAAI,EAAArL,YAAYuqF,UAEzB,IAOImF,EAPApyF,EAASK,KAAKL,OACd6Z,EAAY4jB,EAAS5jB,UACrBo+E,EAAWx6D,EAASn7B,UAAU21F,SAC9BC,EAAkBz6D,EAASvrB,YAO/B,GANA/G,OAAO+sF,EAAgBzpF,MAAQ,EAAAP,SAAS+L,qBAAuBi+E,EAAgBzpF,MAAQ,EAAAP,SAASqM,mBAChGla,KAAK83F,wBAAwB16D,EAAS5jB,UAAiCq+E,EAAiBr+E,WAKpFo+E,EAAU,CAWZ,GARIx6D,EAASvE,GAAG,EAAAx2B,YAAY04B,UAC1B/6B,KAAKymB,MACH,EAAArb,eAAe2sF,yDACf36D,EAAS7H,eAAe7pB,OAKxB0xB,EAAS/H,aAAa,EAAAxJ,eAAe/O,UAAW,CAClD,IAAIk6E,EAAiB55D,EAAS45D,eAC1Br3E,EAAY7U,OAAO,EAAAisF,cAAc,EAAAjpF,cAAcgP,SAAUk6E,IAC7Dh3F,KAAKymB,MACH,EAAArb,eAAe0uB,8BACfna,EAAUjU,MAAO,YAKrB,IAAIkqF,EAAe51F,KAAKu1E,YACpBzzC,EAAO1E,EAAS0E,KACpB9hC,KAAKu1E,YAAczzC,EACnB,IAAIuJ,EAAQ,IAAIzjC,MAGZ63B,EAAQ,EACGjmB,EAAUioB,YAGrBhC,EAEJ,IAAIiC,EAAiBloB,EAAUkoB,eAC/B,IAAK,IAAIrhC,EAAI,EAAG8b,EAAIulB,EAAeh1B,OAAQrM,EAAI8b,IAAK9b,IAAKo/B,EAAO,CAC9D,IAAIhwB,EAAOiyB,EAAerhC,GACtBoP,EAAK8rD,YACPlwB,EAAMr+B,KACJrN,EAAOq4F,UAAUv4D,EACfz/B,KAAKi3F,WACHt3F,EAAOk2E,UAAUp2C,EAAOhwB,EAAK20C,mBAInCtiB,EAAK8wB,aAAanzB,EAAO,EAAAkyB,WAAWkB,WAIxC7yD,KAAKi4F,oBAAoB76D,EAAUiO,GAC9BvJ,EAAKjJ,GAAG,OACX74B,KAAKk4F,oBAAoBp2D,EAAMuJ,GAC/BrrC,KAAK81F,mBAAmBh0D,EAAMuJ,IAEhCrrC,KAAKu1E,YAAcqgB,EAGnB,IAAIn8E,EAAO9Z,EAAOquF,QAAQ3iD,EAAOjO,EAAS5jB,UAAUzK,WAAWq1C,gBAC3DhnB,EAASvE,GAAG,EAAAx2B,YAAY6hC,WAC1BzqB,EAAO9Z,EAAOksC,MAAM,SAAU,CAAEpyB,GAAQ,EAAAmyB,kBAAkBnyB,KAE5Ds4E,EAAUpyF,EAAOmtF,YACf1vD,EAASlO,aACT1V,EAAUw4E,aACVx4E,EAAUy4E,cACV,EAAA/tC,mBAAmB9mB,EAASgD,kBAC5B3mB,QAIO2jB,EAASvE,GAAG,EAAAx2B,YAAY04B,UACjCqC,EAAS1vB,IAAI,EAAArL,YAAY+zF,eACzBC,EAAiBj5D,EAAUy6D,GAC3Bl4F,EAAOw4F,kBACL/6D,EAASlO,aACTqnE,EACAC,EACAh9E,EAAUw4E,aACVx4E,EAAUy4E,eAEZF,EAAUpyF,EAAOy4F,YAAYh7D,EAASlO,eAG7BkO,EAASvE,GAAG,EAAAx2B,YAAY0d,WACjCgyE,EAAUpyF,EAAOmtF,YACf1vD,EAASlO,aACT1V,EAAUw4E,aACVx4E,EAAUy4E,cACV,KACAtyF,EAAO69D,eAETx9D,KAAKkwF,aAAav/D,IAAIyM,KAEtBp9B,KAAKymB,MACH,EAAArb,eAAeitF,gFACfj7D,EAAS7H,eAAe7pB,OAE1BqmF,EAAU,GAKZ,OAFA30D,EAAS80D,SAASvyF,EAAQoyF,GAC1B/xF,KAAKupD,YAAcouC,GACZ,EAID,oBAENv6D,EAEAiO,EAAgC,MAEhC,IAAI1rC,EAASK,KAAKL,OACdi4F,EAAW9sF,OAAOsyB,EAASn7B,UAAU21F,UACrC7oF,EAAaquB,EAAS5jB,UAAUzK,WAChC+yB,EAAO9hC,KAAKu1E,YAGhB,GAAIqiB,EAASxpF,MAAQ,EAAAP,SAAS6H,MAC5B21B,EAAQrrC,KAAKs4F,kBAAmCV,EAAUpiF,YAAY,EAAM61B,OACvE,CAELvgC,OAAO8sF,EAASxpF,MAAQ,EAAAP,SAASmK,YAGjClN,OAAOsyB,EAASn7B,UAAUyX,WAG1B5O,QAAQsyB,EAAS1C,MAAM,EAAAr4B,YAAY+P,YAAc,EAAA/P,YAAY0e,IAAM,EAAA1e,YAAYyf,MAG/E,IAAIqnB,EAAOnpC,KAAKu4F,0BAAgDX,EAAU3mF,WAAYlC,EAAY,GAKlG,GAHKs8B,EACAA,EAAMr+B,KAAKm8B,GADJkC,EAAQ,CAAElC,IAGjBrH,EAAKjJ,GAAG,KAAuB,CAClC,IAAI2/D,EAAcntD,EAAM3+B,OACxB1M,KAAKk4F,oBAAoBp2D,EAAMuJ,GAC/BrrC,KAAK81F,mBAAmBh0D,EAAMuJ,GAC9B,IAAIwrB,EAAc/0B,EAAK+0B,YAAY1tB,EAAMp6B,GACrC0pF,EAAU32D,EAAK42D,UAAUvvD,EAAMp6B,GACnC,GAAIs8B,EAAM3+B,OAAS8rF,EAAa,CAC9B,IAAIhO,EAAO1oD,EAAK6wB,aAAa5jD,GACxB8nD,GAAa/0B,EAAK8wB,aAAa43B,EAAK/qD,MAAO,EAAAkyB,WAAWuC,SACvDukC,GAAS32D,EAAK8wB,aAAa43B,EAAK/qD,MAAO,EAAAkyB,WAAWzE,SACtD7hB,EAAMmtD,EAAc,GAAK74F,EAAOq4F,UAAUxN,EAAK/qD,MAAO0J,GACtDkC,EAAMr+B,KAAKrN,EAAOk2E,UAAU2U,EAAK/qD,MAAO1wB,EAAWq1C,iBACnDtiB,EAAKoxB,cAAcs3B,GAEhB3zB,GAAa/0B,EAAKp0B,IAAI,GACvB+qF,GAAS32D,EAAKp0B,IAAI,GACtBo0B,EAAKp0B,IAAI,MAKb,GAAI0vB,EAASvE,GAAG,EAAAx2B,YAAY+P,aAAc,CACxC,IAAI6jE,EAAiBj2E,KAAKguB,QAAQioD,eAClCnrE,OAAOsyB,EAASvE,GAAG,EAAAx2B,YAAYy6B,WAC/B,IAAI7M,EAASnlB,OAAOsyB,EAASnN,QAC7BnlB,OAAOmlB,EAAO7hB,MAAQ,EAAAwd,YAAY7Z,OAClC,IAAI8tB,EAAuB5P,EAE3B,IAAK6R,EAAKjJ,GAAG,KAAuB,CAClC,IAAIk1B,EAAYjjD,OAAOg3B,EAAKksB,YAAY,EAAAhrD,YAAYsC,QAG/Cw8B,EAAKjJ,GAAG,MAMXwS,EAAMr+B,KACJrN,EAAOosF,GACLpsF,EAAO20E,MAAM2B,GAAkB,EAAA7vC,WAAWr/B,IAAM,EAAA+/B,QAAQivB,OAAS,EAAAjvB,QAAQgvB,OACvEn2D,EAAOk2E,UAAU9nB,EAAUtuB,MAAOw2C,IAEpCt2E,EAAOq4F,UAAUjqC,EAAUtuB,MACzBz/B,KAAKi3F,WACHj3F,KAAK24F,eAAe94D,OAK5B7/B,KAAK44F,qCAAqC/4D,EAAewL,IAE3DrrC,KAAKk4F,oBAAoBp2D,EAAMuJ,GAC/BrrC,KAAK81F,mBAAmBh0D,EAAMuJ,GAC9BA,EAAMr+B,KAAKrN,EAAOk2E,UAAU9nB,EAAUtuB,MAAOz/B,KAAKguB,QAAQioD,iBAC1Dn0C,EAAKp0B,IAAI,KAIgB,OAAvBmyB,EAAcyD,MAAkBxB,EAAKjJ,GAAG,MAC1C74B,KAAKymB,MACH,EAAArb,eAAeytF,2DACfz7D,EAASn7B,UAAU4P,YAAYnG,YAK1BqD,GAAc,EAAAwhB,KAAKG,MAASoR,EAAKjJ,GAAG,MAC7C74B,KAAKymB,MACH,EAAArb,eAAe0tF,+DACf17D,EAASn7B,UAAUoa,iBAAiBtN,WAAWrD,OAInD,OAAO2/B,EAMT,aAAajO,GACX,GAAIA,EAASvE,GAAG,EAAAx2B,YAAYuqF,UAAW,OAAO,EAC9CxvD,EAAS1vB,IAAI,EAAArL,YAAYuqF,UACzB,IACIr0D,EADY6E,EAASn7B,UACuB+T,QAChD,GAAIuiB,EAEF,IAAK,IAAInB,EAAUC,WAAWkB,GAAgBl4B,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CACnF,IAAIgS,EAAU8M,UAAUiY,EAAQ/2B,IAChC,OAAQgS,EAAQjE,MACd,KAAK,EAAAwd,YAAY7O,OACf/c,KAAKo1F,cAAsB/iF,GAC3B,MAEF,KAAK,EAAAuZ,YAAY8L,mBACf,IAAKrlB,EAAQwmB,GAAG,EAAAx2B,YAAYyuB,SAAU,CACpC,IAAIspC,EAAmBp6D,KAAKqvB,SAASsI,gBAAmCtlB,EAAS,MAC7E+nD,GAAkBp6D,KAAK+qF,gBAAgB3wB,GAE7C,MAEF,KAAK,EAAAxuC,YAAYqM,mBAAoB,CACnC,IAAIC,EAAuC7lB,EACvC8lB,EAAkBD,EAAkBC,gBACxC,GAAIA,EAAiB,CACnBrtB,QAAQqtB,EAAgBU,GAAG,EAAAx2B,YAAYyuB,UACvC,IAAIsM,EAAWp9B,KAAKqvB,SAASsI,gBAAgBQ,EAAiB,MAC1DiF,GAAUp9B,KAAK+qF,gBAAgB3tD,GAErC,IAAIhF,EAAkBF,EAAkBE,gBACxC,GAAIA,EAAiB,CACnBttB,QAAQstB,EAAgBS,GAAG,EAAAx2B,YAAYyuB,UACvC,IAAIsM,EAAWp9B,KAAKqvB,SAASsI,gBAAgBS,EAAiB,MAC1DgF,GAAUp9B,KAAK+qF,gBAAgB3tD,GAErC,QAKRp9B,KAAK+4F,kBAAkB37D,EAAUA,EAAS7H,gBAC1C,IAAIwC,EAAkBqF,EAASpnB,QAC/B,GAAI+hB,EAEF,IAAK,IAAIX,EAAUC,WAAWU,GAAkB13B,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CACrF,IAAIgS,EAAU8M,UAAUiY,EAAQ/2B,IAChC,OAAQgS,EAAQjE,MACd,KAAK,EAAAwd,YAAY8L,mBACf,IAAKrlB,EAAQwmB,GAAG,EAAAx2B,YAAYyuB,SAAU,CACpC,IAAIspC,EAAmBp6D,KAAKqvB,SAASsI,gBAAmCtlB,EAAS,MAC7E+nD,GAAkBp6D,KAAK+qF,gBAAgB3wB,GAE7C,MAEF,KAAK,EAAAxuC,YAAY0M,MACft4B,KAAKg5F,aAAoB3mF,GACzB,MAEF,KAAK,EAAAuZ,YAAYyM,SACfr4B,KAAKi5F,gBAA0B5mF,IAMvC,OAAO,EAIT,aAAa+qB,GAGX,OAFAp9B,KAAKk5F,mBAAmB97D,GACxBp9B,KAAKm5F,mBAAmB/7D,GACjBA,EAASvE,GAAG,EAAAx2B,YAAYuqF,UAIjC,mBAAmBxvD,GAEjB,GAAIA,EAASqF,UAAW,OAAO,EAC/B,IAAIhzB,EAAO2tB,EAAS3tB,KAChB2pF,EAAiBp5F,KAAKguB,QAAQioD,eAC9BojB,EAAkB5pF,EAAK20C,eACvBzkD,EAASK,KAAKL,OACd25F,EAAY35F,EAAOy8D,KAAK3sD,EAAKszC,SAAUtzC,EAAKopB,GAAG,GACjDl5B,EAAOk2E,UAAU,EAAGujB,GACpBC,EAAiBj8D,EAASoF,cAI5B,GAFI/yB,EAAK8rD,YAAW+9B,EAAYt5F,KAAKi3F,WAAWqC,IAChDl8D,EAASqF,UAAY9iC,EAAOmtF,YAAY1vD,EAAS03D,mBAAoBsE,EAAgBC,EAAiB,KAAMC,GACxGl8D,EAASsF,UACXtF,EAAS1vB,IAAI,EAAArL,YAAYuqF,cACpB,CACL,IAAIrlC,EAAWnqB,EAASmqB,SACpBA,GAAUvnD,KAAKi2F,mBAAmB74D,EAAS3tB,KAAM83C,GAEvD,OAAO,EAIT,mBAAmBnqB,GACjB,GAAIA,EAASsF,UAAW,OAAO,EAC/B,IAII42D,EAJA7pF,EAAO2tB,EAAS3tB,KAChB2pF,EAAiBp5F,KAAKguB,QAAQioD,eAC9BojB,EAAkB5pF,EAAK20C,eACvBzkD,EAASK,KAAKL,OAEdkwC,EAAgC,KAoCpC,GAnCIpgC,EAAK8rD,WAGP+9B,EAAY35F,EAAOksC,MAAM,KAAM,CAC7BlsC,EAAOosF,GACLpsF,EAAOq1E,OAAOqkB,GAAmB,EAAAjzD,WAAWr/B,IAAM,EAAAggC,SAASyvB,MAAQ,EAAAzvB,SAASwvB,MAE1E52D,EAAOk2E,UAAU,EAAGwjB,GACpB15F,EAAOi2E,UAAU,EACfj2E,EAAOy8D,KAAK3sD,EAAKszC,UAAU,EACzBpjD,EAAOk2E,UAAU,EAAGujB,GACpBC,EAAiBj8D,EAASoF,gBAIhC7iC,EAAOksC,MAAM,KAAM,CACjBlsC,EAAOwsC,KACLnsC,KAAKi3F,WAAWt3F,EAAOk2E,UAAU,EAAGwjB,KAEtCr5F,KAAKu5F,YAAY55F,EAAOk2E,UAAU,EAAGwjB,OAGzC15F,EAAOk2E,UAAU,EAAGwjB,IACnBA,GACHxpD,EAAW,CAAEwpD,IAEbC,EAAY35F,EAAOk2E,UAAU,EAAGwjB,GAElCj8D,EAASsF,UAAY/iC,EAAOmtF,YAAY1vD,EAAS23D,mBAAoB,EAAA5kD,WAAW,CAAEipD,EAAgBC,IAAoB,EAAAjzD,WAAWI,KAAMqJ,EACrIlwC,EAAO08D,MAAM5sD,EAAKszC,SAChBpjD,EAAOk2E,UAAU,EAAGujB,GACpBE,EACAD,EAAiBj8D,EAASoF,eAG1BpF,EAASqF,UACXrF,EAAS1vB,IAAI,EAAArL,YAAYuqF,cACpB,CACL,IAAIrlC,EAAWnqB,EAASmqB,SACpBA,GAAUvnD,KAAKi2F,mBAAmB74D,EAAS3tB,KAAM83C,GAEvD,OAAO,EAIT,gBAAgBnqB,GAGd,OAFAp9B,KAAKw5F,sBAAsBp8D,GAC3Bp9B,KAAKy5F,sBAAsBr8D,GACpBA,EAASvE,GAAG,EAAAx2B,YAAYuqF,UAIjC,sBAAsBxvD,GACpB,IAAIwF,EAAiBxF,EAASwF,eAC9B,GAAIA,EAAgB,CAClB,IAAI8G,EAAM1pC,KAAK+qF,gBAAgBnoD,GAC3BC,EAAiBzF,EAASyF,eAI9B,OAHID,EAAe/J,GAAG,EAAAx2B,YAAYuqF,WAAe/pD,IAAkBA,EAAehK,GAAG,EAAAx2B,YAAYuqF,WAC/FxvD,EAAS1vB,IAAI,EAAArL,YAAYuqF,UAEpBljD,EAET,OAAO,EAIT,sBAAsBtM,GACpB,IAAIyF,EAAiBzF,EAASyF,eAC9B,GAAIA,EAAgB,CAClB,IAAI6G,EAAM1pC,KAAK+qF,gBAAgBloD,GAC3BD,EAAiBxF,EAASwF,eAI9B,OAHuB,OAAnBA,GAA2BA,EAAe/J,GAAG,EAAAx2B,YAAYuqF,WAAa/pD,EAAehK,GAAG,EAAAx2B,YAAYuqF,WACtGxvD,EAAS1vB,IAAI,EAAArL,YAAYuqF,UAEpBljD,EAET,OAAO,EAMT,iBAAiBna,EAAoBmqE,EAAiB,IACpD5uF,OAAO,EAAA4lD,WAAWgpC,IAClB,IAAIl3D,EAAeywD,UAAUjzF,KAAKwiC,aAAck3D,GAC5CjyD,EAAU,EAAAD,cAAc7lC,OAAO4tB,EAAQiT,GAG3C,OAFAxiC,KAAK0vF,eAAe1iF,KAAKy6B,GACzBznC,KAAKwiC,aAAe3Y,QAAQ2Y,EAAc9Y,QAAQ6F,EAAO7iB,OAAQ,IAC1D+6B,EAIT,mBAAmBkyD,GACjB,IAGIC,EAHAr8D,EAAUv9B,KAAKu9B,QACfs8D,EAAet8D,EAAQu8D,kBACvB7lE,EAAiBnpB,OAAOyyB,EAAQtJ,gBAEhCud,EAAWxxC,KAAK2vF,eACpB,GAAIn+C,EAASlkC,IAAIqsF,GACfC,EAAgB9uF,OAAO0mC,EAAStwC,IAAIy4F,QAC/B,CACL,IAAIjtF,EAASitF,EAAYjtF,OACrB6iB,EAAS,IAAI7mB,WAAWmxF,GAAgBntF,GAAU,IACtD6wB,EAAQw8D,mBAAmBxqE,EAAQ,EAAG0E,EAAexE,GAAI/iB,GAAU,GACnE,IAAK,IAAIrM,EAAI,EAAGA,EAAIqM,IAAUrM,EAC5B,EAAA0kC,SAAS40D,EAAY9sF,WAAWxM,GAAIkvB,EAAQsqE,GAAgBx5F,GAAK,IAEnEu5F,EAAgB55F,KAAKyrF,iBAAiBl8D,GACtCiiB,EAAS9jC,IAAIisF,EAAaC,GAE5B,IAAIt5D,EAAMzW,QAAQ+vE,EAAcpqE,OAAQ9F,QAAQmwE,IAEhD,OADA75F,KAAKupD,YAAct1B,EAAexkB,KAC9BzP,KAAKguB,QAAQgD,SACRhxB,KAAKL,OAAO0D,IAAIwnB,QAAQyV,GAAMvV,SAASuV,KAE9Cx1B,OAAOgiD,WAAWxsB,IACXtgC,KAAKL,OAAOyD,IAAIynB,QAAQyV,KAKnC,kBAAkBgrD,EAAiBzsE,EAAUwvC,EAAmB36C,GAC9D,IAAIhH,EAASgH,EAAOhH,OAChBq2C,EAAWsL,EAAYtL,SACvByzB,EAAanoB,EAAYjK,eAC7B,OAAaoyB,GACX,KAAU,EAAApwC,WAAWt/B,IACnB,OAAQi8C,GACN,KAAK,EACH,IAAK,IAAI1iD,EAAI,EAAGA,EAAIqM,IAAUrM,EAAG,CAC/B,IAAIiB,EAAQoS,EAAOrT,GACnByK,OAAO,EAAA8gC,kBAAkBtqC,IAAUk1E,GACnC1rE,OAAO,EAAA0gC,gBAAgBlqC,IAAU,EAAAglC,aAAa0P,OAC9C,EAAAlR,QAAQ,EAAA0wB,iBAAiBl0D,GAAQgqF,EAAKzsE,GACtCA,GAAO,EAET,MAEF,KAAK,EACH,IAAK,IAAIxe,EAAI,EAAGA,EAAIqM,IAAUrM,EAAG,CAC/B,IAAIiB,EAAQoS,EAAOrT,GACnByK,OAAO,EAAA8gC,kBAAkBtqC,IAAUk1E,GACnC1rE,OAAO,EAAA0gC,gBAAgBlqC,IAAU,EAAAglC,aAAa0P,OAC9C,EAAAjR,SAAS,EAAAywB,iBAAiBl0D,GAAQgqF,EAAKzsE,GACvCA,GAAO,EAET,MAEF,KAAK,EACH,IAAK,IAAIxe,EAAI,EAAGA,EAAIqM,IAAUrM,EAAG,CAC/B,IAAIiB,EAAQoS,EAAOrT,GACnByK,OAAO,EAAA8gC,kBAAkBtqC,IAAUk1E,GACnC1rE,OAAO,EAAA0gC,gBAAgBlqC,IAAU,EAAAglC,aAAa0P,OAC9C,EAAArmB,SAAS,EAAA6lC,iBAAiBl0D,GAAQgqF,EAAKzsE,GACvCA,GAAO,EAET,MAEF,QAAS/T,QAAO,GAElB,MAEF,KAAU,EAAAs7B,WAAWr/B,IACnB,IAAK,IAAI1G,EAAI,EAAGA,EAAIqM,IAAUrM,EAAG,CAC/B,IAAIiB,EAAQoS,EAAOrT,GACnByK,OAAO,EAAA8gC,kBAAkBtqC,IAAUk1E,GACnC1rE,OAAO,EAAA0gC,gBAAgBlqC,IAAU,EAAAglC,aAAa0P,OAC9C,EAAAgkD,SAAStwE,QAAQ,EAAA+rC,oBAAoBn0D,GAAQ,EAAAo0D,qBAAqBp0D,IAASgqF,EAAKzsE,GAChFA,GAAO,EAET,MAEF,KAAU,EAAAunB,WAAW7+B,IACnB,IAAK,IAAIlH,EAAI,EAAGA,EAAIqM,IAAUrM,EAAG,CAC/B,IAAIiB,EAAQoS,EAAOrT,GACnByK,OAAO,EAAA8gC,kBAAkBtqC,IAAUk1E,GACnC1rE,OAAO,EAAA0gC,gBAAgBlqC,IAAU,EAAAglC,aAAa0P,OAC9C,EAAAhR,SAAS,EAAAu0B,iBAAiBj4D,GAAQgqF,EAAKzsE,GACvCA,GAAO,EAET,MAEF,KAAU,EAAAunB,WAAW5+B,IACnB,IAAK,IAAInH,EAAI,EAAGA,EAAIqM,IAAUrM,EAAG,CAC/B,IAAIiB,EAAQoS,EAAOrT,GACnByK,OAAO,EAAA8gC,kBAAkBtqC,IAAUk1E,GACnC1rE,OAAO,EAAA0gC,gBAAgBlqC,IAAU,EAAAglC,aAAa0P,OAC9C,EAAA/Q,SAAS,EAAAu0B,iBAAiBl4D,GAAQgqF,EAAKzsE,GACvCA,GAAO,EAET,MAEF,QAAS/T,QAAO,GAElB,OAAO+T,EAIT,gBAAgBwvC,EAAmB36C,EAAyB+b,EAAUzvB,KAAKu9B,QAAQxJ,oBAAoBtE,IACrG,IAAI8N,EAAUv9B,KAAKu9B,QAGfiuD,EAFS93E,EAAOhH,OACL2hD,EAAYtL,SAEvB+2C,EAAoBv8D,EAAQu8D,kBAC5BxO,EAAM,IAAI5iF,WAAWoxF,EAAoBtO,GAG7C,OAFAjuD,EAAQw8D,mBAAmBzO,EAAK,EAAG77D,EAAI+7D,GACvC1gF,OAAO9K,KAAKurF,kBAAkBD,EAAKwO,EAAmBzrC,EAAa36C,IAAW43E,EAAI5+E,QAC3E1M,KAAKyrF,iBAAiBH,GAIvB,qBAAqBj9B,EAAmB4rC,GAC9C,IAAI18D,EAAUv9B,KAAKu9B,QACfu8D,EAAoBv8D,EAAQu8D,kBAC5B5jE,EAAiBprB,OAAOyyB,EAAQrH,gBAChCgkE,EAAgBpvF,OAAO9K,KAAKqvB,SAASoI,aAAavB,EAAgB,CAAEm4B,KACpE8rC,EAAoBD,EAAc32D,iBAClC62D,EAAeH,EAAc1qE,OAAO7iB,OAASotF,EAC7CO,EAAcj3F,IAAIg3F,EAAe/rC,EAAYtL,UAE7CuoC,EAAM,IAAI5iF,WAAWoxF,EAAoBK,GAC7C58D,EAAQw8D,mBAAmBzO,EAAK,EAAG4O,EAAczqE,GAAI0qE,GAErD,IAAIG,EAAkBzvE,QAAQovE,EAAczqE,QAAUsqE,EAOtD,OANAhvF,QAAQyyB,EAAQvP,QAAQgD,UACxBlmB,OAAOovF,EAAcK,WAAW,SAAUD,EAAiBhP,EAAKwO,IAChEhvF,OAAOovF,EAAcK,WAAW,YAAaD,EAAiBhP,EAAKwO,IACnEhvF,OAAOovF,EAAcK,WAAW,aAAcH,EAAc9O,EAAKwO,IACjEhvF,OAAOovF,EAAcK,WAAW,UAAWF,EAAa/O,EAAKwO,IAEtD95F,KAAKyrF,iBAAiBH,GAM/B,yBAAyBluD,GACvBtyB,OAAOsyB,EAASvE,GAAG,EAAAx2B,YAAYuqF,WAC/B,IAAIntD,EAAQrC,EAASmD,mBACrB,GAAId,GAAS,EAAG,OAAOA,EACvB,IAAImwD,EAAgB5vF,KAAK4vF,cACrBv+D,EAAYrxB,KAAKguB,QAAQqD,UAS7B,OARKA,IAAWA,EAAY,GAC5BoO,EAAQpO,EAAYu+D,EAAcljF,QAC7B0wB,EAASvE,GAAG,EAAAx2B,YAAYm4F,aAAep9D,EAAS5jB,UAAU+qC,mBAAqBnnB,EAAS5jB,UAAUkoB,eAAeh1B,SAEpH0wB,EAAWp9B,KAAK20F,iBAAiBv3D,IAEnCwyD,EAAc5iF,KAAKowB,EAASlO,cAC5BkO,EAASmD,mBAAqBd,EACvBA,EAMT,yBAAyBnpB,EAAsBmD,GAC7C,OAAQnD,EAAUlI,MAChB,KAAK,EAAAP,SAASsI,iBAAkB,CAC9B,IAAIskF,EAAsCnkF,EAAWN,QACrD,IAAK,IAAI3V,EAAI,EAAG8b,EAAIs+E,EAAiB/tF,OAAQrM,EAAI8b,IAAK9b,EACpDL,KAAK61F,yBAAyB4E,EAAiBp6F,GAAIoZ,GAErD,MAEF,KAAK,EAAA5L,SAAS8I,gBAAiB,CAC7B,IAAItE,EAAUrS,KAAKu9B,QAAQm9D,wBAAyCpkF,GAChEjE,IACFvH,OAAOuH,EAAQjE,MAAQ,EAAAwd,YAAYjL,MAC9BtO,EAAQgjB,aAAa,EAAAxJ,eAAe5O,OAAOjd,KAAKq1F,YAAkBhjF,IAEzE,MAEF,KAAK,EAAAxE,SAASuM,qBAAsB,CAClC,IAAIvI,EAAoCyE,EACpCjE,EAAUrS,KAAKu9B,QAAQm9D,wBAAwB7oF,GACnD,GAAIQ,EAAS,CAEX,IAAI6kF,EAAiBl3F,KAAKyvF,cAC1BzvF,KAAKyvF,cAAgBp9E,EACrB,IAAIooF,EAAmB5oF,EAAYmE,QACnC,IAAK,IAAI3V,EAAI,EAAG8b,EAAIs+E,EAAiB/tF,OAAQrM,EAAI8b,IAAK9b,EACpDL,KAAK61F,yBAAyB4E,EAAiBp6F,GAAIoZ,GAErDzZ,KAAKyvF,cAAgByH,EAEvB,MAEF,KAAK,EAAArpF,SAAS0N,SAAU,CACtB,IAAI/C,EAAmClC,EAAWkC,aAClD,IAAK,IAAInY,EAAI,EAAG8b,EAAI3D,EAAa9L,OAAQrM,EAAI8b,IAAK9b,EAAG,CACnD,IAAIgS,EAAUrS,KAAKu9B,QAAQm9D,wBAAwBliF,EAAanY,IAC5DgS,IACFvH,OAAOuH,EAAQjE,MAAQ,EAAAwd,YAAY7O,QAEhC1K,EAAQwmB,GAAG,EAAAx2B,YAAY04B,UACvB1oB,EAAQgjB,aAAa,EAAAxJ,eAAe5O,OACrCjd,KAAKo1F,cAAsB/iF,IAGjC,MAEF,KAAK,EAAAxE,SAASmL,iBAAkB,CAC9B,IAAI3G,EAAUrS,KAAKu9B,QAAQm9D,wBAA0CpkF,GACrD,OAAZjE,GAAoBA,EAAQjE,MAAQ,EAAAwd,YAAY7O,SAC7C1K,EAAQgjB,aAAa,EAAAxJ,eAAe5O,OAAOjd,KAAKo1F,cAAsB/iF,IAE7E,MAEF,KAAK,EAAAxE,SAASoJ,OAAQ,CACpB,IAAI0jF,EAAmCrkF,EACnCe,EAAesjF,EAAgBtjF,aACd,OAAjBA,GACFrX,KAAK46F,kBAAkBvjF,EAAcvM,OAAO6vF,EAAgB7jF,OAE9D,MAEF,KAAK,EAAAjJ,SAAS0J,cACZvX,KAAK61F,yBAAkDv/E,EAAWzE,YAAa4H,GAC/E,MAEF,KAAK,EAAA5L,SAAS0K,OAAQ,CACpB,IAAIsiF,EAAmCvkF,EACvCtW,KAAK46F,kBAAkBC,EAAgBxjF,aAAcwjF,EAAgB/jF,MACrE,MAEF,KAAK,EAAAjJ,SAAS+L,oBACd,KAAK,EAAA/L,SAASqM,kBACd,KAAK,EAAArM,SAASiL,qBACd,KAAK,EAAAjL,SAASmM,0BACd,KAAK,EAAAnM,SAASwN,gBAAiB,MAC/B,QAAS,CACP,IAAIy/E,EAAO96F,KAAK+6F,iBAAiBzkF,GAC7B,EAAAk1B,gBAAgBsvD,IAAS,EAAAx0D,aAAaqY,KAAKllC,EAAKzM,KAAK8tF,GACzD,QAMN,iBAEExkF,EAEA0kF,GAAqB,GAErB,IACIF,EADAn7F,EAASK,KAAKL,OAElB,OAAQ2W,EAAUlI,MAChB,KAAK,EAAAP,SAAS6H,MACZolF,EAAO96F,KAAKi7F,sBAAsC3kF,GAClD,MAEF,KAAK,EAAAzI,SAASgI,MACZilF,EAAO96F,KAAKk7F,sBAAsC5kF,GAClD,MAEF,KAAK,EAAAzI,SAASwI,SACZykF,EAAO96F,KAAKm7F,yBAA4C7kF,GACxD,MAEF,KAAK,EAAAzI,SAAS2I,GACZskF,EAAO96F,KAAKo7F,mBAAgC9kF,GAC5C,MAEF,KAAK,EAAAzI,SAAS5K,MACZ63F,EAAO96F,KAAKq7F,sBAAsC/kF,GAClD,MAEF,KAAK,EAAAzI,SAASmK,WACZ8iF,EAAO96F,KAAKs7F,2BAAgDhlF,GAC5D,MAEF,KAAK,EAAAzI,SAASsL,IACZ2hF,EAAO96F,KAAKu7F,oBAAkCjlF,GAC9C,MAEF,KAAK,EAAAzI,SAAS0L,MACZuhF,EAAO96F,KAAKw7F,sBAAsCllF,GAClD,MAEF,KAAK,EAAAzI,SAASuK,GACZ0iF,EAAO96F,KAAKy7F,mBAAgCnlF,GAC5C,MAEF,KAAK,EAAAzI,SAASyM,OACZwgF,EAAO96F,KAAK07F,uBAAwCplF,EAAW0kF,GAC/D,MAEF,KAAK,EAAAntF,SAAS4M,OACZqgF,EAAO96F,KAAK27F,uBAAwCrlF,GACpD,MAEF,KAAK,EAAAzI,SAASgN,MACZigF,EAAO96F,KAAK47F,sBAAsCtlF,GAClD,MAEF,KAAK,EAAAzI,SAASqN,IACZ4/E,EAAO96F,KAAK67F,oBAAkCvlF,GAC9C,MAEF,KAAK,EAAAzI,SAAS0N,UACZu/E,EAAO96F,KAAK87F,yBAA4CxlF,MAC7CwkF,EAAOn7F,EAAO2rC,OACzB,MAEF,KAAK,EAAAz9B,SAAS8N,KACZm/E,EAAO96F,KAAK+7F,qBAAoCzlF,GAChD,MAEF,KAAK,EAAAzI,SAASgO,MACZi/E,EAAO96F,KAAKg8F,sBAAsC1lF,GAClD,MAEF,KAAK,EAAAzI,SAASwN,gBAEZrb,KAAKymB,MACH,EAAArb,eAAeivB,gBACf/jB,EAAU5K,OAEZovF,EAAOn7F,EAAO69D,cACd,MAEF,QACE1yD,QAAO,GACPgwF,EAAOn7F,EAAO69D,cAIlB,OADIx9D,KAAKguB,QAAQkU,WAAWliC,KAAKi8F,iBAAiBnB,EAAMxkF,EAAU5K,OAC3DovF,EAIT,kBAEEtlF,EAEA0mF,GAAe,EAEf7wD,EAAgC,MAEhC,IAAI8wD,EAAgB3mF,EAAW9I,OAC1B2+B,KACHA,EAAQ,IAAIzjC,MAAqBu0F,IAC3BzvF,OAAS,GAEjB,IAAI/M,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YAChB,IAAK,IAAIl1E,EAAI,EAAGA,EAAI87F,IAAiB97F,EAAG,CACtC,IAAIy6F,EAAO96F,KAAK+6F,iBAAiBvlF,EAAWnV,GAAI67F,GAAU77F,GAAK87F,EAAgB,GAC/E,OAAQ,EAAA3wD,gBAAgBsvD,IACtB,KAAK,EAAAx0D,aAAamX,MAChB,IAAK,EAAAoc,aAAaihC,GAAO,CACvB,IAAK,IAAI9oE,EAAW,EAAG7V,EAAI,EAAA29C,mBAAmBghC,GAAO9oE,EAAI7V,IAAK6V,EAAGqZ,EAAMr+B,KAAK,EAAAgtD,cAAc8gC,EAAM9oE,IAChG,MAIJ,QAASqZ,EAAMr+B,KAAK8tF,GACpB,KAAK,EAAAx0D,aAAaqY,KAEpB,GAAI7c,EAAKpH,MAAM,KAA0C,CACnD,EAAA6iB,yBAAyBu9C,IAAOzvD,EAAMr+B,KAAKrN,EAAO69D,eACtD,OAGJ,OAAOnyB,EAGD,sBACN/0B,GAEA,IAAId,EAAac,EAAUd,WACvB4mF,EAAYp8F,KAAKu1E,YACjB8mB,EAAYD,EAAUE,OAC1Bt8F,KAAKu1E,YAAc8mB,EAEnB,IAAIhxD,EAAQrrC,KAAKs4F,kBAAkB9iF,GAKnC,OAJK6mF,EAAU3hE,MAAM,MAA0C16B,KAAKk4F,oBAAoBmE,EAAWhxD,GACnGgxD,EAAUE,mBACVH,EAAU5oC,QAAQ6oC,GAClBr8F,KAAKu1E,YAAc6mB,EACZp8F,KAAKL,OAAOquF,QAAQ3iD,GAGrB,sBACN/0B,GAEA,IAAI3W,EAASK,KAAKL,OACd68F,EAAYlmF,EAAUX,MAC1B,GAAI6mF,EAKF,OAJAx8F,KAAKymB,MACH,EAAArb,eAAeivB,gBACfmiE,EAAU9wF,OAEL/L,EAAO69D,cAEhB,IAAI17B,EAAO9hC,KAAKu1E,YACZl0C,EAAaS,EAAKT,WACtB,GAAkB,MAAdA,EAKF,OAJArhC,KAAKymB,MACH,EAAArb,eAAeqxF,qFACfnmF,EAAU5K,OAEL/L,EAAO69D,cAEhB,IAAInyB,EAAQ,IAAIzjC,MAChB5H,KAAKk4F,oBAAoBp2D,EAAMuJ,GAE/B,IADA,IAAIpb,EAAS6R,EAAK7R,OACA,OAAXA,GAAmBA,EAAOoR,YAAcA,GAC7CrhC,KAAKk4F,oBAAoBjoE,EAAQob,GAAsB,GACvDpb,EAASA,EAAOA,OAKlB,OAHA6R,EAAKy6D,mBACLlxD,EAAMr+B,KAAKrN,EAAO+8F,GAAGr7D,IACrBS,EAAKp0B,IAAI,IACF/N,EAAOquF,QAAQ3iD,GAGhB,yBACN/0B,GAEA,IAAI3W,EAASK,KAAKL,OACdgW,EAAQW,EAAUX,MACtB,GAAIA,EAKF,OAJA3V,KAAKymB,MACH,EAAArb,eAAeivB,gBACf1kB,EAAMjK,OAED/L,EAAO69D,cAGhB,IAAI17B,EAAO9hC,KAAKu1E,YACZvjB,EAAgBlwB,EAAKkwB,cACzB,GAAqB,MAAjBA,EAKF,OAJAhyD,KAAKymB,MACH,EAAArb,eAAeuxF,8EACfrmF,EAAU5K,OAEL/L,EAAO69D,cAEhB17B,EAAKp0B,IAAI,KACT,IAAI29B,EAAQ,IAAIzjC,MAChB5H,KAAKk4F,oBAAoBp2D,EAAMuJ,GAE/B,IADA,IAAI3N,EAAuBoE,EAAK7R,OACb,OAAZyN,GAAoBA,EAAQs0B,gBAAkBA,GACnDhyD,KAAKk4F,oBAAoBx6D,EAAS2N,GAAsB,GACxD3N,EAAUA,EAAQzN,OAIpB,OAFA6R,EAAKy6D,mBACLlxD,EAAMr+B,KAAKrN,EAAO+8F,GAAG1qC,IACdryD,EAAOquF,QAAQ3iD,GAGhB,mBAEN/0B,GAEA,OAAOtW,KAAK48F,qBAAqBtmF,EAAW,MAGtC,qBAENA,EAEAumF,GAEA,IAAIl9F,EAASK,KAAKL,OACdy8F,EAAYp8F,KAAKu1E,YAajB5/D,EAAQymF,EAAUU,iBAClBh7D,EAAOs6D,EAAUE,MAA6B,GAC9CO,GAAW/6D,EAAKi7D,gBAAgBF,GACpC,IAAIG,EAAal7D,EAAKw6D,OACtBt8F,KAAKu1E,YAAczzC,EAEnB,IAAIT,EAAa,YAAc1rB,EAC/BmsB,EAAKT,WAAaA,EAClB,IAAI2wB,EAAgB,eAAiBr8C,EACrCmsB,EAAKkwB,cAAgBA,EAGrB,IAAIirC,EAAWn7D,EAAKw6D,OACpBt8F,KAAKu1E,YAAc0nB,EACnB,IAAIC,EAAY,IAAIt1F,MAChB6R,EAAOnD,EAAUA,UAQrB,GAPImD,EAAKrL,MAAQ,EAAAP,SAAS6H,MACxB1V,KAAKs4F,kBAAmC7+E,EAAMjE,YAAY,EAAO0nF,GAEjEA,EAAUlwF,KAAKhN,KAAK+6F,iBAAiBthF,IAInCwjF,EAASviE,MAAM,KACjBwiE,EAAUlwF,KACRrN,EAAO69D,eAET17B,EAAK0xB,QAAQypC,OAGR,CACLj9F,KAAKk4F,oBAAoB+E,EAAUC,GAEnC,IAAIC,EAAWr7D,EAAKw6D,OACpBt8F,KAAKu1E,YAAc4nB,EACnB,IAAIC,EAAWp9F,KAAK2qF,cAClB3qF,KAAKq0E,kBAAkB/9D,EAAUhC,UAAW,EAAAic,KAAKntB,KACjDpD,KAAKupD,aAEH8zC,EAAWr9F,KAAKs9F,kBAAkBF,GAGtC,GAAgB,GAAZC,EACFH,EAAUlwF,KACRrN,EAAOwsC,KAAKixD,IAEdp9F,KAAKk4F,oBAAoBiF,EAAUD,GACnCp7D,EAAK0xB,QAAQypC,QAGR,GAAgB,GAAZI,GAAmCJ,EAASviE,MAAM,MAUtD,CACL,IAAI6iE,EAAQJ,EAASxqC,aAAa,EAAApiC,KAAK3sB,MAevC,GAdAs5F,EAAUlwF,KACRrN,EAAOq4F,UAAUuF,EAAM99D,MAAO29D,IAEhCp9F,KAAKk4F,oBAAoBiF,EAAUD,GACnCA,EAAUlwF,KACRrN,EAAO+8F,GAAG1qC,EACRryD,EAAOk2E,UAAU0nB,EAAM99D,MAAO,EAAA2G,WAAWt/B,OAG7Cq2F,EAASjqC,cAAcqqC,GACvBz7D,EAAK0xB,QAAQ2pC,GAIT,EAAAp7D,KAAKy7D,2BAA2BR,EAAYl7D,GAI9C,OAHAh3B,QAAQ+xF,GACRT,EAAUqB,gBACVz9F,KAAKu1E,YAAc6mB,EACZp8F,KAAK48F,qBAAqBtmF,EAAWwrB,QA7B9Co7D,EAAUlwF,KACRrN,EAAOwsC,KAAKixD,IAEdp9F,KAAKk4F,oBAAoBiF,EAAUD,GACnCA,EAAUlwF,KACRrN,EAAO+8F,GAAG1qC,IAEZlwB,EAAKp0B,IAAI,KA4Bb5C,QAAQg3B,EAAK47D,iBACbtB,EAAU5oC,QAAQ1xB,GAClBs6D,EAAUqB,gBACVz9F,KAAKu1E,YAAc6mB,EACnB,IAAIjzD,EAAOxpC,EAAOksC,MAAMxK,EAAY,CAClC1hC,EAAOg+F,KAAK3rC,EACVryD,EAAOquF,QAAQkP,MAMnB,OAHId,EAAUvjE,GAAG,OACfsQ,EAAOxpC,EAAOksC,MAAM,KAAM,CAAE1C,EAAMxpC,EAAO69D,iBAEpCr0B,EAGD,sBACN7yB,GAEA,OAAOtW,KAAKL,OAAO2rC,MAGb,2BACNh1B,GAEA,OAAOtW,KAAKq0E,kBAAkB/9D,EAAUrF,WAAY,EAAAsf,KAAKG,KAAM,GAGzD,oBAENpa,GAEA,OAAOtW,KAAK49F,sBAAsBtnF,EAAW,MAGvC,sBAENA,EAEAumF,GAEA,IAAIl9F,EAASK,KAAKL,OACdy8F,EAAYp8F,KAAKu1E,YAqBjB5/D,EAAQymF,EAAUU,iBAClBzxD,EAAQ,IAAIzjC,MACZk6B,EAAOs6D,EAAUE,MAA6B,GAClDt8F,KAAKu1E,YAAczzC,EAEnB,IAAIT,EAAa,YAAc1rB,EAC/BmsB,EAAKT,WAAaA,EAClB,IAAI2wB,EAAgB,gBAAkBr8C,EACtCmsB,EAAKkwB,cAAgBA,EACrB,IAAI6rC,EAAY,YAAcloF,EAG1BjG,EAAc4G,EAAU5G,YACxBA,IACF5E,OACE4E,EAAYtB,MAAQ,EAAAP,SAASmK,YAC7BtI,EAAYtB,MAAQ,EAAAP,SAAS0N,UAE/B8vB,EAAMr+B,KAAKhN,KAAK+6F,iBAAiBrrF,KAG/BmtF,GAAW/6D,EAAKi7D,gBAAgBF,GACpC,IAKIO,EACAC,EANAL,EAAal7D,EAAKw6D,OAGlBa,EAAWr7D,EAAKw6D,OACpBt8F,KAAKu1E,YAAc4nB,EAGnB,IAAI7oF,EAAYgC,EAAUhC,UAC1B,GAAIA,GAQF,GAPA8oF,EAAWp9F,KAAK2qF,cACd3qF,KAAKq0E,kBAAkB//D,EAAW,EAAAic,KAAK3sB,MACvC5D,KAAKupD,aAKS,IAHhB8zC,EAAWr9F,KAAKs9F,kBAAkBF,IAehC,OAXA/xD,EAAMr+B,KACJrN,EAAOwsC,KAAKixD,IAEdp9F,KAAKk4F,oBAAoBiF,EAAU9xD,GACnC8xD,EAASZ,mBACTz6D,EAAK0xB,QAAQ2pC,GACbn9F,KAAKk4F,oBAAoBp2D,EAAMuJ,GAC/BvJ,EAAKy6D,mBACLH,EAAU5oC,QAAQ1xB,GAClBs6D,EAAUqB,gBACVz9F,KAAKu1E,YAAc6mB,EACZz8F,EAAOquF,QAAQ3iD,QAGxB+xD,EAAWz9F,EAAOyD,IAAI,GACtBi6F,EAAW,EAMb,IAAIE,EAAQz7D,EAAK6wB,aAAa,EAAApiC,KAAK3sB,MAC/Bk6F,EAAY,IAAIl2F,MACpBk2F,EAAU9wF,KACRrN,EAAOq4F,UAAUuF,EAAM99D,MAAO29D,IAEhCp9F,KAAKk4F,oBAAoBiF,EAAUW,GACnCX,EAASZ,mBAETz6D,EAAK0xB,QAAQ2pC,GACbn9F,KAAKu1E,YAAczzC,EAGnB,IAAIm7D,EAAWn7D,EAAKw6D,OACpBW,EAAS5nC,qBAAqB+nC,GAC9Bp9F,KAAKu1E,YAAc0nB,EACnB,IAAIC,EAAY,IAAIt1F,MAChB6R,EAAOnD,EAAUA,UACjBmD,EAAKrL,MAAQ,EAAAP,SAAS6H,MACxB1V,KAAKs4F,kBAAmC7+E,EAAMjE,YAAY,EAAO0nF,GAEjEA,EAAUlwF,KAAKhN,KAAK+6F,iBAAiBthF,IAInCwjF,EAASviE,MAAM,KACjBwiE,EAAUlwF,KAAKrN,EAAO69D,eAEtBx9D,KAAKk4F,oBAAoB+E,EAAUC,GAErB,GAAZG,EAAgCv7D,EAAK0xB,QAAQypC,GAC5Cn7D,EAAKi8D,cAAcd,GACxBA,EAASV,mBAET,IAAIyB,EAAU,IAAIp2F,MAOlB,GANAo2F,EAAQhxF,KACNrN,EAAOksC,MAAMmmB,EAAekrC,KAKzBD,EAASpkE,GAAG,MAAyBokE,EAASviE,MAAM,MAA0D,CACjH,IAAIzhB,EAAc3C,EAAU2C,YAC5B,GAAIA,EAAa,CACf,IAAIglF,EAAWn8D,EAAKw6D,OACpBt8F,KAAKu1E,YAAc0oB,EACnBD,EAAQhxF,KACNhN,KAAKq0E,kBAAkBp7D,EAAa,EAAAsX,KAAKG,KAAM,IAEjD1wB,KAAKk4F,oBAAoB+F,EAAUD,GACnCC,EAAS1B,mBACTz6D,EAAK0xB,QAAQyqC,GACbj+F,KAAKu1E,YAAczzC,EASrB,GANAk8D,EAAQhxF,KACNrN,EAAO+8F,GAAGmB,IAKR,EAAA97D,KAAKy7D,2BAA2BR,EAAYl7D,GAM9C,OALAh3B,QAAQ+xF,GACR/xF,QAAQmyF,EAASS,iBACjB57D,EAAKy6D,mBACLH,EAAUqB,gBACVz9F,KAAKu1E,YAAc6mB,EACZp8F,KAAK49F,sBAAsBtnF,EAAWwrB,GA6BjD,OA1BAg8D,EAAU9wF,KACRrN,EAAOosF,GAAGpsF,EAAOk2E,UAAU0nB,EAAM99D,MAAO,EAAA2G,WAAWt/B,KACjDnH,EAAOquF,QAAQgQ,KAInB3yD,EAAMr+B,KACJrN,EAAOksC,MAAMxK,EAAY,CACvB1hC,EAAOg+F,KAAKE,EACVl+F,EAAOquF,QAAQ8P,OAIrBh8D,EAAKoxB,cAAcqqC,GACnBv9F,KAAKu1E,YAAczzC,EAGnBA,EAAKy6D,mBACLH,EAAU5oC,QAAQ1xB,GAClBs6D,EAAUqB,gBACNrB,EAAUvjE,GAAG,KACfwS,EAAMr+B,KAAKrN,EAAO69D,eAElBx9D,KAAKk4F,oBAAoBp2D,EAAMuJ,GAEjCrrC,KAAKu1E,YAAc6mB,EACZz8F,EAAOquF,QAAQ3iD,GAGhB,sBACN/0B,GAMA,OAJAtW,KAAKymB,MACH,EAAArb,eAAeivB,gBACf/jB,EAAU5K,OAEL1L,KAAKL,OAAO69D,cAGb,mBACNlnD,GAEA,IAAI3W,EAASK,KAAKL,OACdsY,EAAS3B,EAAU2B,OACnBC,EAAU5B,EAAU4B,QAiBpBklF,EAAWp9F,KAAK2qF,cAClB3qF,KAAKq0E,kBAAkB/9D,EAAUhC,UAAW,EAAAic,KAAK3sB,MACjD5D,KAAKupD,aAKP,OAHevpD,KAAKs9F,kBAAkBF,IAIpC,KAAK,EACH,OAAOz9F,EAAOksC,MAAM,KAAM,CACxBlsC,EAAOwsC,KAAKixD,GACZp9F,KAAK+6F,iBAAiB9iF,KAG1B,KAAK,EACH,OAAOC,EACHvY,EAAOksC,MAAM,KAAM,CACjBlsC,EAAOwsC,KAAKixD,GACZp9F,KAAK+6F,iBAAiB7iF,KAExBvY,EAAOwsC,KAAKixD,GAMpB,IAAIt7D,EAAO9hC,KAAKu1E,YAGZ2oB,EAAY,IAAIt2F,MAChBu2F,EAAWr8D,EAAKw6D,OACpBt8F,KAAKu1E,YAAc4oB,EACnBA,EAAS9oC,qBAAqB+nC,GAC1BnlF,EAAO7J,MAAQ,EAAAP,SAAS6H,MAC1B1V,KAAKs4F,kBAAmCrgF,EAAQzC,YAAY,EAAO0oF,GAEnEA,EAAUlxF,KAAKhN,KAAK+6F,iBAAiB9iF,IAEvC,IAAImmF,EAAiBD,EAASzjE,MAAM,KAUpC,GATI0jE,EACFF,EAAUlxF,KAAKrN,EAAO69D,eAEtBx9D,KAAKk4F,oBAAoBiG,EAAUD,GAErCC,EAAS5B,mBACTv8F,KAAKu1E,YAAczzC,EAGf5pB,EAAS,CACX,IAAImmF,EAAY,IAAIz2F,MAChB02F,EAAWx8D,EAAKw6D,OACpBt8F,KAAKu1E,YAAc+oB,EACnBA,EAAStoC,sBAAsBonC,GAC3BllF,EAAQ9J,MAAQ,EAAAP,SAAS6H,MAC3B1V,KAAKs4F,kBAAmCpgF,EAAS1C,YAAY,EAAO6oF,GAEpEA,EAAUrxF,KAAKhN,KAAK+6F,iBAAiB7iF,IAEvC,IAAIqmF,EAAiBD,EAAS5jE,MAAM,KAapC,OAZI6jE,EACFF,EAAUrxF,KAAKrN,EAAO69D,eAEtBx9D,KAAKk4F,oBAAoBoG,EAAUD,GAErCC,EAAS/B,mBACTv8F,KAAKu1E,YAAczzC,EACfy8D,IAAmBH,EACrBt8D,EAAK0xB,QAAQ2qC,GAEbr8D,EAAK08D,cAAcL,EAAUG,GAExB3+F,EAAOosF,GAAGqR,EACfz9F,EAAOquF,QAAQkQ,GACfv+F,EAAOquF,QAAQqQ,IASjB,OANAv8D,EAAKi8D,cAAcI,GACnBr8D,EAAKk0B,sBAAsBonC,EACzBe,EAASzjE,MAAM,KACX,KACAyjE,GAECx+F,EAAOosF,GAAGqR,EACfz9F,EAAOquF,QAAQkQ,IAKb,uBACN5nF,EACA0kF,GAEA,IAAIr7F,EAASK,KAAKL,OACdwpC,EAAsB,EACtBrH,EAAO9hC,KAAKu1E,YACZxmE,EAAa+yB,EAAK/yB,WAElB0vF,EAAkBnoF,EAAUhV,MAChC,GAAIm9F,EAAiB,CACnB,GAAI1vF,GAAc,EAAAwhB,KAAKG,KAMrB,OALA1wB,KAAKymB,MACH,EAAArb,eAAegmD,mCACfqtC,EAAgB/yF,MAAO1L,KAAKupD,YAAYt9C,WAAY8C,EAAW9C,YAEjEjM,KAAKupD,YAAc,EAAAh5B,KAAKG,KACjB/wB,EAAO69D,cAEhB,IAAIkhC,EAAc,EACd58D,EAAK6mB,eAAe9vB,GAAG,EAAAx2B,YAAYy1B,iBAAgB4mE,GAAe,GAGtEv1D,EAAOnpC,KAAKu4F,0BAA0BkG,EAAiB1vF,EAAY2vF,QAC1D3vF,GAAc,EAAAwhB,KAAKG,OAC5B1wB,KAAKymB,MACH,EAAArb,eAAegmD,mCACf96C,EAAU5K,MAAO,OAAQqD,EAAW9C,YAEtCk9B,EAAOxpC,EAAO69D,eAGhB,IAAInyB,EAAQ,IAAIzjC,MAIhB,GAHA5H,KAAKk4F,oBAAoBp2D,EAAMuJ,GAC/BrrC,KAAK81F,mBAAmBh0D,EAAMuJ,GAE1Bt8B,GAAc,EAAAwhB,KAAKG,MAAQ2a,EAAM3+B,OAAS,EAAG,CAC/C,IAAI89E,EAAO1oD,EAAK6wB,aAAa5jD,GACzB+yB,EAAK42D,UAAUvvD,EAAMp6B,IAAa+yB,EAAK8wB,aAAa43B,EAAK/qD,MAAO,EAAAkyB,WAAWzE,SAC/E7hB,EAAMwmD,QACJlyF,EAAOq4F,UAAUxN,EAAK/qD,MAAO0J,IAE/BA,EAAOxpC,EAAOk2E,UAAU2U,EAAK/qD,MAAO1wB,EAAWq1C,gBAC/CtiB,EAAKoxB,cAAcs3B,GAQrB,OANA1oD,EAAKy6D,mBAGLz6D,EAAKp0B,IAAI,KAGLstF,GAAwB,GAAR7xD,GAAap6B,GAAc,EAAAwhB,KAAKG,KAC7C2a,EAAM3+B,QACX2+B,EAAMr+B,KAAKm8B,GACJxpC,EAAOquF,QAAQ3iD,EAAOt8B,EAAWq1C,iBAFdjb,EAMxBrH,EAAKgsB,SACFziB,EAAM3+B,QACX2+B,EAAMr+B,KAAKrN,EAAO+8F,GAAG5xF,OAAOg3B,EAAKqwB,mBAAoB,EAAGhpB,IAEjDxpC,EAAOquF,QAAQ3iD,IAHI1rC,EAAO+8F,GAAG5xF,OAAOg3B,EAAKqwB,mBAAoB,EAAGhpB,GAOpEkC,EAAM3+B,QACX2+B,EAAMr+B,KAAKrN,EAAOmuF,OAAO3kD,IAClBxpC,EAAOquF,QAAQ3iD,IAFI1rC,EAAOmuF,OAAO3kD,GAKlC,uBACN7yB,GAEA,IAAI3W,EAASK,KAAKL,OAEd4a,EAAQjE,EAAUiE,MAClBokF,EAAWpkF,EAAM7N,OACrB,IAAKiyF,EACH,OAAO3+F,KAAKq0E,kBAAkB/9D,EAAUhC,UAAW,EAAAic,KAAKG,KAAI,GAM9D,IAAI0rE,EAAYp8F,KAAKu1E,YACjBqpB,EAAUxC,EAAUU,iBAGpB+B,EAAYzC,EAAUzpC,aAAa,EAAApiC,KAAK9sB,KACxCq7F,EAAiBD,EAAUp/D,MAG3Bs/D,EAAS,IAAIn3F,MAAqB,EAAI+2F,GAC1CI,EAAO,GAAKp/F,EAAOq4F,UACjB8G,EACA9+F,KAAKq0E,kBAAkB/9D,EAAUhC,UAAW,EAAAic,KAAK9sB,IAAG,IAMtD,IAAIu7F,EAAa,EACbC,GAAgB,EACpB,IAAK,IAAI5+F,EAAI,EAAGA,EAAIs+F,IAAYt+F,EAAG,CACjC,IACIsV,EADQ4E,EAAMla,GACAsV,MACdA,EACFopF,EAAOC,KAAgBr/F,EAAO+8F,GAAG,OAASr8F,EAAE4L,WAAa,IAAM2yF,EAC7Dj/F,EAAOq1E,OAAO,EAAAjuC,SAASovB,MACrBx2D,EAAOk2E,UAAUipB,EAAgB,EAAA14D,WAAWt/B,KAC5C9G,KAAKq0E,kBAAkB1+D,EAAO,EAAA4a,KAAK9sB,IAAG,KAM1Cw7F,EAAe5+F,EAInB+7F,EAAUlpC,cAAc2rC,GAGxBE,EAAOC,GAAcr/F,EAAO+8F,IAAIuC,GAAgB,EAC1C,OAASA,EAAahzF,WACtB,SACA,IAAM2yF,GAGZ,IAAIM,EAAev/F,EAAOksC,MAAM,SAAW+yD,EAASG,EAAQ,EAAA34D,WAAWI,MACnE24D,EAAoB,IACpBC,EAAoB,EACxB,IAAK,IAAI/+F,EAAI,EAAGA,EAAIs+F,IAAYt+F,EAAG,CACjC,IACImV,EADQ+E,EAAMla,GACKmV,WACnB2mF,EAAgB3mF,EAAW9I,OAG3B2vF,EAAYD,EAAUE,OAC1Bt8F,KAAKu1E,YAAc8mB,EACnB,IAAIh7D,EAAa,SAAWu9D,EAC5BvC,EAAUh7D,WAAaA,EAEvB,IAAIg+D,EAASh/F,GAAKs+F,EAAW,EACzBW,EAAYD,EAASh+D,EAAa,QAAUhhC,EAAI,GAAG4L,WAAa,IAAM2yF,EACtEvzD,EAAQ,IAAIzjC,MAAqB,EAAIu0F,GACzC9wD,EAAM,GAAK6zD,EACX,IAAIrkD,EAAQ,EACR0kD,GAAa,EACjB,IAAK,IAAIvtE,EAAI,EAAGA,EAAImqE,IAAiBnqE,EAAG,CACtC,IAAI8oE,EAAO96F,KAAK+6F,iBAAiBvlF,EAAWwc,IAI5C,GAHI,EAAAwZ,gBAAgBsvD,IAAS,EAAAx0D,aAAaqY,MACxCtT,EAAMwP,KAAWigD,GAEfuB,EAAU3hE,MAAM,KAA0C,CACxD2hE,EAAUxjE,GAAG,OAAuB0mE,GAAa,GACrD,OAGJl0D,EAAM3+B,OAASmuC,GACX0kD,GAAcF,GAAUhD,EAAU3hE,MAAM,SAC1CykE,GAAqB9C,EAAUnoF,OAEjCkrF,GAAuC,MAAlB/C,EAAUnoF,MAG1BqrF,GAAYv/F,KAAKk4F,oBAAoBmE,EAAWhxD,GACrDgxD,EAAUpQ,MACR,MAGFoQ,EAAUE,mBACVv8F,KAAKu1E,YAAc6mB,EACnB8C,EAAev/F,EAAOksC,MAAMyzD,EAAWj0D,EAAO,EAAAjF,WAAWI,MAQ3D,OANA41D,EAAUqB,gBAGNwB,GAAgB,IAAG7C,EAAUloF,QAA6B,GAApBirF,GAC1C/C,EAAUloF,QAA6B,KAApBkrF,EAEZF,EAGD,sBACN5oF,GAEA,IAAIwrB,EAAO9hC,KAAKu1E,YAGhBzzC,EAAKp0B,IAAI,KAET,IAAI29B,EAAQ,IAAIzjC,MAChB5H,KAAK81F,mBAAmBh0D,EAAMuJ,GAG9B,IAAI/pC,EAAQgV,EAAUhV,MAClBmK,EAA6B,KACjC,GAAInK,EAAM8M,MAAQ,EAAAP,SAASyF,IAAK,CAC9B,IAAIksF,EAA0Bl+F,EAAO2O,UACjCuvF,EAAQ9yF,SAAQjB,EAAU+zF,EAAQ,IAMxC,OAJAn0D,EAAMr+B,KACJhN,KAAK8rF,UAAUrgF,EAAS6K,IAGnBtW,KAAKL,OAAOquF,QAAQ3iD,GAGrB,oBACN/0B,GAQA,OAJAtW,KAAKymB,MACH,EAAArb,eAAeivB,gBACf/jB,EAAU5K,OAEL1L,KAAKL,OAAO69D,cAIb,yBACNlnD,GAEA,IAAI3W,EAASK,KAAKL,OACd6Y,EAAelC,EAAUkC,aACzBinF,EAAkBjnF,EAAa9L,OAC/Bo1B,EAAO9hC,KAAKu1E,YACZmqB,EAAe,IAAI93F,MACnBynB,EAAWrvB,KAAKqvB,SAEpB,IAAK,IAAIhvB,EAAI,EAAGA,EAAIo/F,IAAmBp/F,EAAG,CACxC,IAAIwR,EAAc2G,EAAanY,GAC3BO,EAAOiR,EAAYjR,KAAK4L,KACxBiD,EAAoB,KACpBumF,EAA0B,EAC1B2J,GAAyB,EAGzBp4C,EAAW11C,EAAYpC,KACvBs8C,EAAkBl6C,EAAYnC,YAClC,GAAI63C,EAAU,CAMZ,GALA93C,EAAO4f,EAASi4B,YACdC,EACAzlB,EAAK6mB,eACL,EAAA5B,QAAQjlB,EAAK7B,2BAEVxwB,EAAM,SACXzP,KAAKi2F,mBAAmBxmF,EAAM83C,GAE1BwE,IACFiqC,EAAWh2F,KAAKq0E,kBAAkBtoB,EAAiBt8C,EACjD,IAEFkwF,EAAyB3/F,KAAK8vF,oBAAoBxiF,IAAI0oF,QAInD,KAAIjqC,EAeJ,CACL/rD,KAAKymB,MACH,EAAArb,eAAey8C,cACfh2C,EAAYjR,KAAK8K,MAAM49C,OAEzB,SAfA,GAJA0sC,EAAWh2F,KAAKq0E,kBAAkBtoB,EAAiB,EAAAx7B,KAAK4yB,KAAI,IAG5Dw8C,EAAyB3/F,KAAK8vF,oBAAoBxiF,IAAI0oF,GAClDh2F,KAAKupD,aAAe,EAAAh5B,KAAKG,KAAM,CACjC1wB,KAAKymB,MACH,EAAArb,eAAegmD,mCACfv/C,EAAYnG,MAAO1L,KAAKupD,YAAYt9C,WAAY,UAElD,SAEFwD,EAAOzP,KAAKupD,YAYd,IAAIq2C,EAAU/tF,EAAYgnB,GAAG,EAAAx2B,YAAYge,OACrC8a,GAAW,EACf,GAAIykE,EACF,GAAI5J,EAAU,CACZ,IAAIn+C,EAAUl4C,EAAO+6E,cAAcsb,EAAU,EAAAzuD,sBAAsBozC,qBACnE,GAAI9iC,EAAS,CACXm+C,EAAWn+C,EACX,IAAIrW,EAAQ,IAAI,EAAAhC,MAAM5+B,GAAO,EAAG6O,EAAMqyB,EAAKiwB,gBAC3C,OAAa,EAAAnmB,kBAAkBoqD,IAC7B,KAAU,EAAA5vD,WAAWt/B,IACnB06B,EAAMvI,wBACJvP,QACE,EAAA8rC,iBAAiBwgC,GACjB,GAEFvmF,GAEF,MAEF,KAAU,EAAA22B,WAAWr/B,IACnBy6B,EAAMvI,wBACJvP,QACE,EAAA+rC,oBAAoBugC,GACpB,EAAAtgC,qBAAqBsgC,IAEvBvmF,GAEF,MAEF,KAAU,EAAA22B,WAAW7+B,IACnBi6B,EAAMtI,sBAA2B,EAAAqgC,iBAAiBy8B,GAAWvmF,GAC7D,MAEF,KAAU,EAAA22B,WAAW5+B,IACnBg6B,EAAMtI,sBAAsB,EAAAsgC,iBAAiBw8B,GAAWvmF,GACxD,MAEF,QAEE,OADA3E,QAAO,GACAnL,EAAO69D,cAIlB,IAAI1L,EAAehwB,EAAKgwB,aACxB,GAAKA,GACA,GAAIA,EAAaxkD,IAAI1M,GAAO,CAC/B,IAAIu4B,EAAWruB,OAAOgnD,EAAa5wD,IAAIN,IAOvC,OANAZ,KAAKs5B,aACH,EAAAluB,eAAemuB,uBACf1nB,EAAYjR,KAAK8K,MACjBytB,EAAStnB,YAAYjR,KAAK8K,MAC1B9K,GAEKZ,KAAKL,OAAO69D,oBATF17B,EAAKgwB,aAAeA,EAAe,IAAI/pD,IAW1D+pD,EAAapkD,IAAI9M,EAAM4gC,GACvBrG,GAAW,QAGbn7B,KAAKymB,MACH,EAAArb,eAAey0F,wCACfhuF,EAAYnG,OAMlB,IAAKyvB,EAAU,CACb,IAAIqG,EACJ,GACE3vB,EAAY6oB,MAAM,EAAAr4B,YAAYgf,IAAM,EAAAhf,YAAYge,QAChDyhB,EAAKgsB,SACL,CACA,IAAIiF,EAAgBjxB,EAAKg+D,eAAel/F,GACpCmyD,GACGA,EAAclhD,YAAYnG,MAAMM,OAAOgnD,SAQ1ChzD,KAAKymB,MACH,EAAArb,eAAemuB,uBACf1nB,EAAYjR,KAAK8K,MAAO9K,GAT1BZ,KAAKs5B,aACH,EAAAluB,eAAemuB,uBACf1nB,EAAYjR,KAAK8K,MACjBqnD,EAAclhD,YAAYjR,KAAK8K,MAC/B9K,GAQJ4gC,EAAQuxB,GAERvxB,EAAQM,EAAKi+D,eAAen/F,EAAM6O,GAEhCmwF,GAAS99D,EAAK8wB,aAAapxB,EAAM/B,MAAO,EAAAkyB,WAAWsC,cAClD,CACL,IAAI96B,EAAW2I,EAAKksB,YAAYptD,GAChC,GAAIu4B,EAAU,CACZn5B,KAAKs5B,aACH,EAAAluB,eAAemuB,uBACf1nB,EAAYjR,KAAK8K,MACjBytB,EAAStnB,YAAYjR,KAAK8K,MAC1B9K,GAEF,SAEF4gC,EAAQM,EAAKiwB,eAAeU,SAAShjD,EAAM7O,EAAMiR,GAC7C+tF,GAAS99D,EAAK8wB,aAAapxB,EAAM/B,MAAO,EAAAkyB,WAAWsC,UAEzD,IAAIsH,EAAY9rD,EAAK8rD,UACjBy6B,GACEl0D,EAAK42D,UAAU1C,EAAUvmF,IAAOqyB,EAAK8wB,aAAapxB,EAAM/B,MAAO,EAAAkyB,WAAWzE,SAC1EqO,GACFz5B,EAAK8wB,aAAapxB,EAAM/B,MAAO,EAAAkyB,WAAWkB,UAC1C6sC,EAAa1yF,KACXrN,EAAOq4F,UAAUx2D,EAAM/B,MACrBkgE,EACI3J,EACAh2F,KAAKi3F,WAAWjB,OAIxB0J,EAAa1yF,KACXrN,EAAOq4F,UAAUx2D,EAAM/B,MAAOu2D,IAE5Bx0D,EAAM/xB,KAAKopB,GAAG,MACXiJ,EAAK+0B,YAAYm/B,EAAUvmF,GAC3BqyB,EAAK0wB,eAAehxB,EAAM/B,MAAO,EAAAkyB,WAAWuC,SADVpyB,EAAK8wB,aAAapxB,EAAM/B,MAAO,EAAAkyB,WAAWuC,YAKjFqH,GAMFmkC,EAAa1yF,KACXrN,EAAOq4F,UAAUx2D,EAAM/B,MACrBz/B,KAAKqrF,SAAS57E,KAGlBqyB,EAAK8wB,aAAapxB,EAAM/B,MAAO,EAAAkyB,WAAWyC,yBACjC5yB,EAAM/xB,KAAKopB,GAAG,KACvBiJ,EAAK8wB,aAAapxB,EAAM/B,MAAO,EAAAkyB,WAAWuC,UAKlD,OAA8B,GAAvBwrC,EAAahzF,OAChB,EACA/M,EAAOquF,QAAQ0R,GAGb,qBACNppF,GAEA,OAAOtW,KAAKq0E,kBAAkB/9D,EAAUrF,WAAY,EAAAsf,KAAKG,KACvD,IAII,sBAENpa,GAEA,OAAOtW,KAAKggG,wBAAwB1pF,EAAW,MAGzC,wBAENA,EAEAumF,GAEA,IAAIl9F,EAASK,KAAKL,OACdy8F,EAAYp8F,KAAKu1E,YAejB5/D,EAAQymF,EAAUU,iBAClBzxD,EAAQ,IAAIzjC,MACZk6B,EAAOs6D,EAAUE,MAA6B,GAC9CO,GAAW/6D,EAAKi7D,gBAAgBF,GACpC,IAAIG,EAAal7D,EAAKw6D,OACtBt8F,KAAKu1E,YAAczzC,EAEnB,IAAIT,EAAa,eAAiB1rB,EAClCmsB,EAAKT,WAAaA,EAClB,IAAI2wB,EAAgB,kBAAoBr8C,EACxCmsB,EAAKkwB,cAAgBA,EAGrB,IAAImrC,EAAWr7D,EAAKw6D,OACpBt8F,KAAKu1E,YAAc4nB,EACnB,IAAIC,EAAWp9F,KAAK2qF,cAClB3qF,KAAKq0E,kBAAkB/9D,EAAUhC,UAAW,EAAAic,KAAK3sB,MACjD5D,KAAKupD,aAEH8zC,EAAWr9F,KAAKs9F,kBAAkBF,GAGtC,GAAgB,GAAZC,EAQF,OAPAhyD,EAAMr+B,KACJrN,EAAOwsC,KAAKixD,IAEdp9F,KAAKk4F,oBAAoBiF,EAAU9xD,GACnCvgC,QAAQg3B,EAAK47D,iBACbtB,EAAUqB,gBACVz9F,KAAKu1E,YAAc6mB,EACZz8F,EAAOquF,QAAQ3iD,GAMxB,IAAIkyD,EAAQz7D,EAAK6wB,aAAa,EAAApiC,KAAK3sB,MACnCynC,EAAMr+B,KACJrN,EAAOq4F,UAAUuF,EAAM99D,MAAO29D,IAEhCp9F,KAAKk4F,oBAAoBiF,EAAU9xD,GACnC8xD,EAASZ,mBAETz6D,EAAK0xB,QAAQ2pC,GACbn9F,KAAKu1E,YAAczzC,EAGnB,IAAIm7D,EAAWn7D,EAAKw6D,OACpBW,EAAS5nC,qBAAqB+nC,GAC9Bp9F,KAAKu1E,YAAc0nB,EACnB,IAAIC,EAAY,IAAIt1F,MAChB6R,EAAOnD,EAAUA,UAQrB,GAPImD,EAAKrL,MAAQ,EAAAP,SAAS6H,MACxB1V,KAAKs4F,kBAAmC7+E,EAAMjE,YAAY,EAAO0nF,GAEjEA,EAAUlwF,KAAKhN,KAAK+6F,iBAAiBthF,IAInCwjF,EAASpkE,GAAG,KACdqkE,EAAUlwF,KACRrN,EAAO69D,eAEO,GAAZ6/B,EAAgCv7D,EAAK0xB,QAAQypC,GAC5Cn7D,EAAKi8D,cAAcd,QAGnB,GAAgB,GAAZI,GAAmCJ,EAASviE,MAAM,MAOtD,CACL,IAAIqkE,EAAS9B,EAASpkE,GAAG,IAiBzB,GAhBIkmE,EACF7B,EAAUlwF,KACRrN,EAAO69D,gBAGTx9D,KAAKk4F,oBAAoB+E,EAAUC,GACnCA,EAAUlwF,KACRrN,EAAO+8F,GAAG1qC,KAGE,GAAZqrC,EAAgCv7D,EAAK0xB,QAAQypC,GAC5Cn7D,EAAKi8D,cAAcd,IAKnB8B,GAAU,EAAAh9D,KAAKy7D,2BAA2BR,EAAYl7D,GAKzD,OAJAh3B,QAAQ+xF,GACR/6D,EAAKoxB,cAAcqqC,GACnBnB,EAAUqB,gBACVz9F,KAAKu1E,YAAc6mB,EACZp8F,KAAKggG,wBAAwB1pF,EAAWwrB,QA7BjD9hC,KAAKk4F,oBAAoB+E,EAAUC,GACnCA,EAAUlwF,KACRrN,EAAO+8F,GAAG1qC,IAEZlwB,EAAKp0B,IAAI,KA4BX29B,EAAMr+B,KACJrN,EAAOosF,GAAGpsF,EAAOk2E,UAAU0nB,EAAM99D,MAAO,EAAA2G,WAAWt/B,KACjDnH,EAAOquF,QAAQkP,KAGnBp7D,EAAKoxB,cAAcqqC,GACnBv9F,KAAKu1E,YAAczzC,EAGnBh3B,QAAQg3B,EAAK47D,iBACbtB,EAAU5oC,QAAQ1xB,GAClBs6D,EAAUqB,gBACVz9F,KAAKu1E,YAAc6mB,EACnB,IAAIjzD,EAAOxpC,EAAOksC,MAAMxK,EAAY,CAClC1hC,EAAOg+F,KAAK3rC,EACVryD,EAAOquF,QAAQ3iD,MAMnB,OAHgB,GAAZgyD,GAAkCjB,EAAUvjE,GAAG,OACjDsQ,EAAOxpC,EAAOksC,MAAM,KAAM,CAAE1C,EAAMxpC,EAAO69D,iBAEpCr0B,EAMT,sBACE92B,EACAimE,EACAomB,GAEA5zF,OAAOuH,EAAQwmB,GAAG,EAAAx2B,YAAY+8B,QAAU,EAAA/8B,YAAY87B,WACpD,IAAI1uB,EAAO4C,EAAQ5C,KACnB,SACkB,EAAdivF,IACFjvF,EAAKopB,GAAG,IACRy/C,EAAez/C,GAAG,IAClBppB,EAAK69B,KAAOgrC,EAAehrC,MACtBttC,KAAKupD,YAAc+uB,GAAgBlqE,MACnCpO,KAAKupD,YAAc95C,GAAMrB,MAE9B,KAAK,EACL,KAAK,EAAc,CACjB,IAAIygC,EAAQp/B,EAAKwwF,yBAAyB,EAAA1vE,KAAKntB,KAC/C,OAAOpD,KAAKL,OAAOyD,IACY,GAA7BiP,EAAQ6sB,kBACJrU,QAAQxY,EAAQ8sB,uBAAyB0P,GAASA,EAClD,GAGR,KAAK,EACL,KAAK,EACL,KAAK,GAAe,CAClB,IAAIH,EAAOr8B,EAAQ5C,KAAKopD,wBAAwB,EAAAtoC,KAAKntB,KACrD,OAAOpD,KAAKL,OAAOyD,IACY,GAA7BiP,EAAQ6sB,kBACJrU,QAAQxY,EAAQ8sB,sBAAwBuP,EACxC,GAGR,KAAK,EACL,KAAK,EACH,OAAO1uC,KAAKL,OAAOyD,IACY,GAA7BiP,EAAQ6sB,kBACJrU,QAAQxY,EAAQ8sB,sBAChB,GAGR,KAAK,EACL,KAAK,EACH,IAAK9sB,EAAQkrB,QAAQvP,QAAQgD,SAC3B,OAAOhxB,KAAKL,OAAOyD,IACY,GAA7BiP,EAAQ6sB,kBACJrU,QAAQxY,EAAQ8sB,sBAChB,GAKV,KAAK,EACL,KAAK,EACH,OAAoC,GAA7B9sB,EAAQ6sB,kBACXl/B,KAAKL,OAAO0D,IACVwnB,QAAQxY,EAAQ8sB,sBAChBpU,SAAS1Y,EAAQ8sB,uBAEnBn/B,KAAKL,OAAO0D,IAAI,GAEtB,KAAK,GAEH,IAAMgP,EAAQgjB,aAAa,EAAAxJ,eAAehP,UAAYy7D,GAAkB,EAAA/nD,KAAK1sB,IAC3E,OAAO7D,KAAKL,OAAOmE,IAAIuO,EAAQgtB,oBAGjCr/B,KAAKupD,YAAc,EAAAh5B,KAAK1sB,IAE1B,KAAK,GACH,OAAO7D,KAAKL,OAAOkE,IAASwO,EAAQgtB,oBAEtC,QAEE,OADAv0B,QAAO,GACA9K,KAAKL,OAAO69D,eAKzB,kBACEvsD,EACAqnE,EACAomB,EAAA,GAEA,KAAOztF,EAAW7C,MAAQ,EAAAP,SAASiG,eACjC7C,EAAuCA,EAAYA,WAIrD,IAAIk4B,EACJ,OAHAnpC,KAAKupD,YAAc+uB,EACfA,GAAkB,EAAA/nD,KAAKG,OAAMguE,GAAe,GAExCztF,EAAW7C,MACjB,KAAK,EAAAP,SAASuD,UACZ+3B,EAAOnpC,KAAKkgG,2BAAgDjvF,EAAYqnE,EAAgBomB,GACxF,MAEF,KAAK,EAAA7wF,SAAS4D,OACZ03B,EAAOnpC,KAAKmgG,wBAA0ClvF,EAAYqnE,EAAgBomB,GAClF,MAEF,KAAK,EAAA7wF,SAAS+D,KACZu3B,EAAOnpC,KAAKogG,sBAAsCnvF,EAAYqnE,EAAgBomB,GAC9E,MAEF,KAAK,EAAA7wF,SAASqE,MACZi3B,EAAOnpC,KAAKqgG,uBAAwCpvF,EAAYqnE,EAAgBomB,GAChF,MAEF,KAAK,EAAA7wF,SAAS0E,cACZ42B,EAAOnpC,KAAKsgG,+BAAwDrvF,EAAYqnE,EAAgBomB,GAChG,MAEF,KAAK,EAAA7wF,SAASiF,SACZq2B,EAAOnpC,KAAKugG,0BAA8CtvF,EAAYqnE,EAAer1B,mBAAoBy7C,GACzG,MAEF,KAAK,EAAA7wF,SAAS4C,WACd,KAAK,EAAA5C,SAAS6E,MACd,KAAK,EAAA7E,SAAS2F,KACd,KAAK,EAAA3F,SAASmH,KACd,KAAK,EAAAnH,SAASiH,MACd,KAAK,EAAAjH,SAASqH,KACZi0B,EAAOnpC,KAAKwgG,4BAAkDvvF,EAAYqnE,EAAgBomB,GAC1F,MAEF,KAAK,EAAA7wF,SAASoF,WACZk2B,EAAOnpC,KAAKygG,4BAAkDxvF,EAAYqnE,EAAgBomB,GAC1F,MAEF,KAAK,EAAA7wF,SAAS+C,QACZu4B,EAAOnpC,KAAK0gG,yBAA4CzvF,EAAYqnE,EAAgBomB,GACpF,MAEF,KAAK,EAAA7wF,SAASyF,IACZ61B,EAAOnpC,KAAK2gG,qBAAoC1vF,EAAYqnE,EAAgBomB,GAC5E,MAEF,KAAK,EAAA7wF,SAASmG,eACZm1B,EAAOnpC,KAAK4gG,gCAA0D3vF,EAAYqnE,EAAgBomB,GAClG,MAEF,KAAK,EAAA7wF,SAAS6G,QACZy0B,EAAOnpC,KAAK6gG,yBAA4C5vF,EAAYqnE,EAAgBomB,GACpF,MAEF,KAAK,EAAA7wF,SAASwH,aACZ8zB,EAAOnpC,KAAK8gG,8BAAsD7vF,EAAYqnE,EAAgBomB,GAC9F,MAEF,KAAK,EAAA7wF,SAAS0H,YACZ4zB,EAAOnpC,KAAK+gG,6BAAoD9vF,EAAYqnE,EAAgBomB,GAC5F,MAEF,QACE1+F,KAAKymB,MACH,EAAArb,eAAeivB,gBACfppB,EAAWvF,OAEby9B,EAAOnpC,KAAKL,OAAO69D,cAIvB,IAAIjU,EAAcvpD,KAAKupD,YACnBy3C,EAAgD,IAA1B,EAAdtC,GAgBZ,OAfIn1C,GAAe+uB,EAAep1B,kBACd,EAAdw7C,GACFv1D,EAAOnpC,KAAKg5E,kBAAkB7vC,EAAMogB,EAAa+uB,GAAgB,EAAM0oB,EAAM/vF,GAC7E+vF,GAAO,EACPhhG,KAAKupD,YAAc+uB,GACI,EAAdomB,IACTv1D,EAAOnpC,KAAKg5E,kBAAkB7vC,EAAMogB,EAAa+uB,GAAgB,EAAO0oB,EAAM/vF,GAC9E+vF,GAAO,EACPhhG,KAAKupD,YAAc+uB,IAGnB0oB,IAAM73D,EAAOnpC,KAAK+0E,uBAAuB5rC,EAAMogB,IAG/CvpD,KAAKguB,QAAQkU,WAAWliC,KAAKi8F,iBAAiB9yD,EAAMl4B,EAAWvF,OAC5Dy9B,EAID,0BAENl4B,EAEAlC,EAEA2vF,EAAA,GAGA,IAAIv1D,EAAOnpC,KAAKq0E,kBAAkBpjE,EAAYlC,EAA0B,GAAd2vF,GACtD58D,EAAO9hC,KAAKu1E,YAChB,GAAIxmE,EAAWwsD,YAERv7D,KAAK8vF,oBAAoBxiF,IAAI67B,GAAO,EAEzB,GADFnpC,KAAKihG,mBAAmB93D,EAAMrH,KACzBqH,EAAOnpC,KAAKi3F,WAAW9tD,IACxCnpC,KAAK8vF,oBAAoBn/D,IAAIwY,GAMjC,OAFKrH,EAAK+0B,YAAY1tB,EAAMp6B,IAAa+yB,EAAKp0B,IAAI,GAC9Co0B,EAAK42D,UAAUvvD,EAAMp6B,IAAa+yB,EAAKp0B,IAAI,GACxCy7B,EAGT,kBACEA,EAEAuwB,EAEAxoD,EAEAgwF,EAEAF,EACApxC,GAEA,IAAIjwD,EAASK,KAAKL,OAGlB,OAAqB,IAAjB+5D,EAAStrD,MACXtD,OAAsB,IAAfoG,EAAO9C,MACdpO,KAAKymB,MACH,EAAArb,eAAegmD,mCACfxB,EAAWlkD,MAAOguD,EAASztD,WAAYiF,EAAOjF,YAEzCtM,EAAO69D,eAIG,IAAftsD,EAAO9C,KAA8BzO,EAAOwsC,KAAKhD,GAGjDuwB,EAAS7gC,GAAG,MAAwB3nB,EAAO2nB,GAAG,MAC5C74B,KAAKu1E,YAAYmjB,UAAUvvD,EAAMuwB,GACnCA,EAAWA,EAASxW,gBACXg+C,GAAYxnC,EAAS7gC,GAAG,OAAwB3nB,EAAO2nB,GAAG,OAG9D74B,KAAKguB,QAAQmD,WAChBgY,EAAOnpC,KAAKmhG,wBAAwBh4D,EAAMuwB,EAAU9J,IAEtD8J,EAAWA,EAASxW,iBAElBwW,EAAS1V,eAAe9yC,IAC1BpG,OAAO4uD,EAAStrD,MAAQ8C,EAAO9C,MAC/BpO,KAAKupD,YAAcr4C,EACZi4B,GAEL+3D,GAAYhwF,EAAOgyC,gBAAgBc,eAAe0V,IAEpD5uD,OAAO4uD,EAAStrD,MAAQ8C,EAAO9C,MAC1BpO,KAAKguB,QAAQmD,WAChBgY,EAAOnpC,KAAKohG,uBAAuBj4D,EAAMuwB,EAAUxoD,EAAQ0+C,IAE7D5vD,KAAKupD,YAAcr4C,EACZi4B,IAETnpC,KAAKymB,MACH,EAAArb,eAAegmD,mCACfxB,EAAWlkD,MAAOguD,EAASztD,WAAYiF,EAAOjF,YAEhDjM,KAAKupD,YAAcr4C,EACZvR,EAAO69D,iBAKX9D,EAAS1V,eAAe9yC,IACtBgwF,GACHlhG,KAAKymB,MACH,EAAArb,eAAei2F,sDACfzxC,EAAWlkD,MAAOguD,EAASztD,WAAYiF,EAAOjF,YAKhDytD,EAAS7gC,GAAG,GAGV3nB,EAAO2nB,GAAG,GACS,IAAjB6gC,EAAStrD,KAGQ,IAAf8C,EAAO9C,OACT+6B,EAAOxpC,EAAO20E,MAAM,EAAAxtC,QAAQw6D,WAAYn4D,IAMlB,IAAfj4B,EAAO9C,OAChB+6B,EAAOxpC,EAAO20E,MAAM,EAAAxtC,QAAQy6D,UAAWp4D,IAMhCj4B,EAAO2nB,GAAG,GAGE,IAAjB6gC,EAAStrD,KACP8C,GAAU,EAAAqf,KAAK3sB,MACjBulC,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASkwB,MAAO9tB,EAAMxpC,EAAOkE,IAAI,IACtDm9F,GAAO,GAGL73D,EAFOj4B,EAAO2nB,GAAG,GACf3nB,EAAO2nB,GAAG,IACLl5B,EAAO20E,MAAM,EAAAxtC,QAAQ06D,cAAer4D,GAEpCxpC,EAAO20E,MAAM,EAAAxtC,QAAQ26D,cAAet4D,GAGzCj4B,EAAO2nB,GAAG,IACLl5B,EAAO20E,MAAM,EAAAxtC,QAAQ46D,cAAev4D,GAEpCxpC,EAAO20E,MAAM,EAAAxtC,QAAQ66D,cAAex4D,GAM3Cj4B,GAAU,EAAAqf,KAAK3sB,MACjBulC,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASmwB,MAAO/tB,EAAMxpC,EAAOmE,IAAI,IACtDk9F,GAAO,GAGL73D,EAFOj4B,EAAO2nB,GAAG,GACf3nB,EAAO2nB,GAAG,IACLl5B,EAAO20E,MAAM,EAAAxtC,QAAQ86D,cAAez4D,GAEpCxpC,EAAO20E,MAAM,EAAAxtC,QAAQ+6D,cAAe14D,GAGzCj4B,EAAO2nB,GAAG,IACLl5B,EAAO20E,MAAM,EAAAxtC,QAAQg7D,cAAe34D,GAEpCxpC,EAAO20E,MAAM,EAAAxtC,QAAQi7D,cAAe54D,IAOjDr+B,OAAuB,GAAhBoG,EAAOgD,MAAyB,sBACvCi1B,EAAOxpC,EAAOwsC,KAAKhD,IAIZuwB,EAAS7gC,GAAG,IAAsB3nB,EAAO2nB,GAAG,GAKjDsQ,EAFe,IAAfj4B,EAAO9C,KACLsrD,EAAS7gC,GAAG,IACPl5B,EAAO20E,MACZ5a,EAAS7gC,GAAG,GACR,EAAAiO,QAAQk7D,gBACR,EAAAl7D,QAAQm7D,gBACZ94D,GAGKxpC,EAAO20E,MACZ5a,EAAS7gC,GAAG,GACR,EAAAiO,QAAQo7D,gBACR,EAAAp7D,QAAQq7D,gBACZh5D,GAMAuwB,EAAS7gC,GAAG,IACPl5B,EAAO20E,MACZ5a,EAAS7gC,GAAG,GACR,EAAAiO,QAAQs7D,gBACR,EAAAt7D,QAAQu7D,gBACZl5D,GAGKxpC,EAAO20E,MACZ5a,EAAS7gC,GAAG,GACR,EAAAiO,QAAQw7D,gBACR,EAAAx7D,QAAQy7D,gBACZp5D,GAQFuwB,EAAS7gC,GAAG,IAGV3nB,GAAU,EAAAqf,KAAK3sB,MACjBulC,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASyvB,MAAOrtB,EAAMxpC,EAAO0D,IAAI,IACtD29F,GAAO,GACG9vF,EAAO2nB,GAAG,MACpBsQ,EAAOxpC,EAAO20E,MAAM,EAAAxtC,QAAQ07D,QAASr5D,IAI9Bj4B,EAAO2nB,GAAG,KACnBsQ,EAAOxpC,EAAO20E,MACZ5a,EAAS7gC,GAAG,GAAoB,EAAAiO,QAAQ27D,UAAY,EAAA37D,QAAQ47D,UAC5D1iG,KAAK+0E,uBAAuB5rC,EAAMuwB,IAEpCsnC,GAAO,GAKHtnC,EAAS7gC,GAAG,IAEV6gC,EAASpsB,KAAOp8B,EAAOo8B,OACzBnE,EAAOnpC,KAAK+0E,uBAAuB5rC,EAAMuwB,GACzCsnC,GAAO,GAIJE,GAAalhG,KAAKguB,QAAQgD,WAAY0oC,EAAS7gC,GAAG,KAAuB3nB,EAAO2nB,GAAG,KACtF74B,KAAKo6B,QACH,EAAAhvB,eAAeu3F,2FACf/yC,EAAWlkD,MAAOguD,EAASztD,WAAYiF,EAAOjF,YAOxDjM,KAAKupD,YAAcr4C,EACZ8vF,EACHhhG,KAAK+0E,uBAAuB5rC,EAAMj4B,GAClCi4B,GAGE,2BACNl4B,EACAqnE,EACAomB,GAEA,IAAIkE,GAAqC,EAAdlE,EAC3B,OAAQztF,EAAWD,eACjB,KAAK,EAAA+M,cAAcivC,OACnB,KAAK,EAAAjvC,cAAciC,GAAI,CACrB,IAAI8hB,EAAO9hC,KAAKu1E,YACZrkE,EAASlR,KAAKqvB,SAASi4B,YACzBx8C,OAAOmG,EAAWC,QAClB4wB,EAAK6mB,eACL,EAAA5B,QAAQjlB,EAAK7B,0BAEf,OAAK/uB,EACElR,KAAKq0E,kBAAkBpjE,EAAWA,WAAYC,EAA+B,EAAvB0xF,GADzC5iG,KAAKL,OAAO69D,cAGlC,KAAK,EAAAz/C,cAAcmvC,QAAS,CAC1BpiD,QAAQmG,EAAWC,QACnB,IAAIi4B,EAAOnpC,KAAKq0E,kBAAkBpjE,EAAWA,WAAYqnE,EAAeuqB,WAAYD,GAChFnzF,EAAOzP,KAAKupD,YAUhB,OATIvpD,KAAKu1E,YAAYmjB,UAAUvvD,EAAM15B,GACnCzP,KAAK8iG,KACH,EAAA13F,eAAe23F,yBACf9xF,EAAWA,WAAWvF,OAEd1L,KAAKguB,QAAQmD,WACvBgY,EAAOnpC,KAAKmhG,wBAAwBh4D,EAAM15B,EAAMwB,IAElDjR,KAAKupD,YAAc95C,EAAKyzC,gBACjB/Z,EAET,KAAK,EAAAprB,cAAcsC,MAiBjB,OAJArgB,KAAKymB,MACH,EAAArb,eAAeivB,gBACfppB,EAAWvF,OAEN1L,KAAKL,OAAO69D,cAErB,QAAS1yD,QAAO,GAElB,OAAO9K,KAAKL,OAAO69D,cAQb,wBACNvsD,EACAqnE,EACAomB,GAEA,IAIIsE,EACAv1C,EACAw1C,EACAv1C,EACAC,EAEAxkB,EAVAxpC,EAASK,KAAKL,OACd2R,EAAOL,EAAWK,KAClBC,EAAQN,EAAWM,MASnB2xF,GAAW,EAEX7xF,EAAWJ,EAAWI,SAC1B,OAAQA,GACN,KAAK,EAAAuO,MAAM6C,SAKT,GAJAugF,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,GACxC7qB,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAawB,IAC1D,GAAIsX,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK+hD,EAASxhD,YAE3BjM,KAAKL,OAAO69D,cAMrB,GAHAylC,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACjBoE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAOvD,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,IAAK+hD,EAASxhD,WAAYyhD,EAAUzhD,YAExDjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAYhB,OAVAwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUA,EAAWE,GACrB,GAAO,EACPr8C,GAEF2xF,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWA,EAAYC,GACvB,GAAO,EACPp8C,GAEMo8C,EAAWv/C,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASowB,MAAO6rC,EAAUC,GAC/C,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASswB,MAAO2rC,EAAUC,GAC/C,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASswB,MACT,EAAAtwB,SAASowB,MACb6rC,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASqwB,MAAO4rC,EAAUC,GAC/C,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASuwB,MACT,EAAAvwB,SAASqwB,MACb4rC,EACAC,GAEF,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASuwB,MAAO0rC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASwwB,MAAOyrC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASywB,MAAOwrC,EAAUC,GAC/C,MAEF,QACEn4F,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlBx9D,KAAKupD,YAAc,EAAAh5B,KAAK3sB,KACxB,MAEF,KAAK,EAAAgc,MAAM8C,YAKT,GAJAsgF,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,GACxC7qB,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaoB,IAC1D,GAAI0X,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK+hD,EAASxhD,YAE3BjM,KAAKL,OAAO69D,cAMrB,GAHAylC,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACjBoE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAoBvD,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,IAAK+hD,EAASxhD,WAAYyhD,EAAUzhD,YAExDjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAEhB,OApBEwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUE,GACV,GAAO,EACPr8C,GAEFm8C,EAAWE,EACXs1C,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWC,GACX,GAAO,EACPp8C,GAEFm8C,EAAYC,EASNA,EAAWv/C,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASgxB,MAAOirC,EAAUC,GAC/C,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASkxB,MACT,EAAAlxB,SAASgxB,MACbirC,EACAC,GAEF,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASkxB,MAAO+qC,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASixB,MAAOgrC,EAAUC,GAC/C,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASmxB,MACT,EAAAnxB,SAASixB,MACbgrC,EACAC,GAEF,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASmxB,MAAO8qC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASoxB,MAAO6qC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASqxB,MAAO4qC,EAAUC,GAC/C,MAEF,QACEn4F,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlBx9D,KAAKupD,YAAc,EAAAh5B,KAAK3sB,KACxB,MAEF,KAAK,EAAAgc,MAAM+C,gBAKT,GAJAqgF,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,GACxC7qB,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAayB,IAC1D,GAAIqX,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM+hD,EAASxhD,YAE5BjM,KAAKL,OAAO69D,cAKrB,GAFAylC,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACboE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAiB3D,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,KAAM+hD,EAASxhD,WAAYyhD,EAAUzhD,YAEzDjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAEhB,OAlBEwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUA,EAAWE,GACrB,GAAO,EACPr8C,GAEF2xF,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWA,EAAYC,GACvB,GAAO,EACPp8C,GAUIo8C,EAAWv/C,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS0wB,MAAOurC,EAAUC,GAC/C,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAAS4wB,MACT,EAAA5wB,SAAS0wB,MACburC,EACAC,GAEF,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS4wB,MAAOqrC,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS2wB,MAAOsrC,EAAUC,GAC/C,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAAS6wB,MACT,EAAA7wB,SAAS2wB,MACbsrC,EACAC,GAEF,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS6wB,MAAOorC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS8wB,MAAOmrC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS+wB,MAAOkrC,EAAUC,GAC/C,MAEF,QACEn4F,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlBx9D,KAAKupD,YAAc,EAAAh5B,KAAK3sB,KACxB,MAEF,KAAK,EAAAgc,MAAMgD,mBAKT,GAJAogF,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,GACxC7qB,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaqB,IAC1D,GAAIyX,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM+hD,EAASxhD,YAE5BjM,KAAKL,OAAO69D,cAKrB,GAFAylC,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACboE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAiB3D,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,KAAM+hD,EAASxhD,WAAYyhD,EAAUzhD,YAEzDjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAEhB,OAlBEwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUA,EAAWE,GACrB,GAAO,EACPr8C,GAEF2xF,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWA,EAAYC,GACvB,GAAO,EACPp8C,GAUIo8C,EAAWv/C,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASsxB,MAAO2qC,EAAUC,GAC/C,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASwxB,MACT,EAAAxxB,SAASsxB,MACb2qC,EACAC,GAEF,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASwxB,MAAOyqC,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASuxB,MAAO0qC,EAAUC,GAC/C,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASyxB,MACT,EAAAzxB,SAASuxB,MACb0qC,EACAC,GAEF,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASyxB,MAAOwqC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS0xB,MAAOuqC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS2xB,MAAOsqC,EAAUC,GAC/C,MAEF,QACEn4F,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlBx9D,KAAKupD,YAAc,EAAAh5B,KAAK3sB,KACxB,MAGF,KAAK,EAAAgc,MAAMmD,qBACX,KAAK,EAAAnD,MAAMiD,cAUT,GAJAmgF,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,GACxC7qB,EAAWztD,KAAKupD,YAGZl4C,GAAY,EAAAuO,MAAMiD,eAAiB7iB,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC/E,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAakB,IAC1D,GAAI4X,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,QASN,GAHAgyF,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACjBoE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAoBvD,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,EAAA0hD,sBAAsBn8C,EAAWI,UAAWo8C,EAASxhD,WAAYyhD,EAAUzhD,YAE/FjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAEhB,OApBEwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUE,GACV,GAAO,EACPr8C,GAEFm8C,EAAWE,EACXs1C,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWC,GACX,GAAO,EACPp8C,GAEFm8C,EAAYC,EASNA,EAAWv/C,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASovB,MAAO6sC,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASuvB,MACT,EAAAvvB,SAASovB,MACb6sC,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASuvB,MAAO0sC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASgwB,MAAOisC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASiwB,MAAOgsC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAO20E,MAAM,EAAAxtC,QAAQuhD,aAC1B1oF,EAAOq1E,OAAO,EAAAjuC,SAASw6C,QAASyhB,EAAUC,IAE5C,MAEF,KAAK,GAEHjjG,KAAKymB,MACH,EAAArb,eAAeivB,gBACfppB,EAAWvF,OAEby9B,EAAOxpC,EAAO69D,cACd,MAEF,QACE1yD,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlBx9D,KAAKupD,YAAc,EAAAh5B,KAAK3sB,KACxB,MAEF,KAAK,EAAAgc,MAAMoD,0BACX,KAAK,EAAApD,MAAMkD,mBAKT,GAJAkgF,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,GACxC7qB,EAAWztD,KAAKupD,YAGZl4C,GAAY,EAAAuO,MAAMkD,oBAAsB9iB,KAAKupD,YAAY1wB,GAAG,KAAsB,CACpF,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAamB,IAC1D,GAAI2X,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,QASN,GAHAgyF,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACjBoE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAoBvD,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,EAAA0hD,sBAAsBn8C,EAAWI,UAAWo8C,EAASxhD,WAAYyhD,EAAUzhD,YAE/FjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAEhB,OApBEwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUE,GACV,GAAO,EACPr8C,GAEFm8C,EAAWE,EACXs1C,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWC,GACX,GAAO,EACPp8C,GAEFm8C,EAAYC,EASNA,EAAWv/C,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASwvB,MAAOysC,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASyvB,MACT,EAAAzvB,SAASwvB,MACbysC,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASyvB,MAAOwsC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASkwB,MAAO+rC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASmwB,MAAO8rC,EAAUC,GAC/C,MAEF,KAAK,GACH95D,EAAOxpC,EAAO20E,MAAM,EAAAxtC,QAAQkhD,aAC1BroF,EAAOq1E,OAAO,EAAAjuC,SAAS86C,QAASmhB,EAAUC,IAE5C,MAEF,KAAK,GAEHjjG,KAAKymB,MACH,EAAArb,eAAeivB,gBACfppB,EAAWvF,OAEby9B,EAAOxpC,EAAO69D,cACd,MAEF,QACE1yD,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlBx9D,KAAKupD,YAAc,EAAAh5B,KAAK3sB,KACxB,MAEF,KAAK,EAAAgc,MAAMuE,OACT,OAAOnkB,KAAKojG,kBAAkB9xF,EAAMC,EAAO+mE,GAE7C,KAAK,EAAA14D,MAAMwE,YAAa8+E,GAAW,EACnC,KAAK,EAAAtjF,MAAMqD,KAKT,GAJA+/E,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,GACxC7qB,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaS,KAC1D,GAAIqY,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK+hD,EAASxhD,YAE3BjM,KAAKL,OAAO69D,cAGrB,GAAI0lC,EACFD,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,EAAU,OAC/C,CAGL,GAFAw1C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACboE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAiB3D,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,IAAK+hD,EAASxhD,WAAYyhD,EAAUzhD,YAExDjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAhBdwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUA,EAAWE,GACrB,GAAO,EACPr8C,GAEF2xF,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWA,EAAYC,GACvB,GAAO,EACPp8C,GAWN,OAAQvR,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACL,KAAK,EACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS4uC,OAAQqtB,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASgvC,OACT,EAAAhvC,SAAS4uC,OACbqtB,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASgvC,OAAQitB,EAAUC,GAChD,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASs8D,OAAQL,EAAUC,GAChD,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASu8D,OAAQN,EAAUC,GAChD,MAEF,QACEn4F,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAMyE,aAAc6+E,GAAW,EACpC,KAAK,EAAAtjF,MAAMsD,MAKT,GAJA8/E,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,GACxC7qB,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaU,KAC1D,GAAIoY,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK+hD,EAASxhD,YAE3BjM,KAAKL,OAAO69D,cAGrB,GAAI0lC,EACFD,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,EAAU,GACpDC,EAAY1tD,KAAKupD,gBACZ,CAIL,GAHA05C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACjBoE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAoBvD,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,IAAK+hD,EAASxhD,WAAYyhD,EAAUzhD,YAExDjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAlBdwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUE,GACV,GAAO,EACPr8C,GAEFm8C,EAAWE,EACXs1C,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWC,GACX,GAAO,EACPp8C,GAEFm8C,EAAYC,EAUhB,OAAQ3tD,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACL,KAAK,EACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASqmD,OAAQ4V,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASomD,OACT,EAAApmD,SAASqmD,OACb4V,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASomD,OAAQ6V,EAAUC,GAChD,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS0jD,OAAQuY,EAAUC,GAChD,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS2jD,OAAQsY,EAAUC,GAChD,MAEF,QACEn4F,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAM0E,gBAAiB4+E,GAAW,EACvC,KAAK,EAAAtjF,MAAMwD,SAKT,GAJA4/E,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,GACxC7qB,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaW,KAC1D,GAAImY,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK+hD,EAASxhD,YAE3BjM,KAAKL,OAAO69D,cAGrB,GAAI0lC,EACFF,EAAWhjG,KAAK+0E,uBAAuBiuB,EAAUv1C,GACjDw1C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,EAAU,OAC/C,CAIL,GAHAw1C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACjBoE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAoBvD,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,IAAK+hD,EAASxhD,WAAYyhD,EAAUzhD,YAExDjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAlBdwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUE,GACV,GAAO,EACPr8C,GAEFm8C,EAAWE,EACXs1C,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWC,GACX,GAAO,EACPp8C,GAEFm8C,EAAYC,EAUhB,OAAQ3tD,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACL,KAAK,EACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS4xB,OAAQqqC,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASw8D,OACT,EAAAx8D,SAAS4xB,OACbqqC,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASw8D,OAAQP,EAAUC,GAChD,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASy8D,OAAQR,EAAUC,GAChD,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS08D,OAAQT,EAAUC,GAChD,MAEF,QACEn4F,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAM2E,yBAA0B2+E,GAAW,EAChD,KAAK,EAAAtjF,MAAMuD,kBAAmB,CAK5B,GAJA6/E,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,GACxC7qB,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaY,KAC1D,GAAIkY,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM+hD,EAASxhD,YAE5BjM,KAAKL,OAAO69D,cAGrB,IACIpgC,EADAqmB,EAAagK,EAIjB,GAA6B,IAAzBztD,KAAKupD,YAAYn7C,MAInB,GAHA60F,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAO,EAAAgf,KAAK1sB,IAAK,GACpD6pD,EAAY1tD,KAAKupD,YACjBnsB,EAAWp9B,KAAKqwF,gBACXjzD,EAAU,CACb,IAAIsmE,EAAY1jG,KAAKu9B,QAAQ1J,aAAa,EAAA7wB,YAAYmF,OACtD,IAAKu7F,EAAW,CACd1jG,KAAKymB,MACH,EAAArb,eAAeo8C,mBACfv2C,EAAWvF,MAAO,SAEpBy9B,EAAOxpC,EAAO69D,cACd,MAEF,IAAIv7D,EAAYyhG,EAAU1tF,QAAU0tF,EAAU1tF,QAAQ9U,IAAI,EAAA8B,YAAYqG,KAAO,KAC7E,IAAKpH,EAAW,CACdjC,KAAKymB,MACH,EAAArb,eAAeo8C,mBACfv2C,EAAWvF,MAAO,aAEpBy9B,EAAOxpC,EAAO69D,cACd,MAEF1yD,OAAO7I,EAAUmM,MAAQ,EAAAwd,YAAY8L,oBACrC13B,KAAKqwF,eAAiBjzD,EAAWp9B,KAAKqvB,SAASsI,gBAAmC11B,EAAW,YAe/F,GATA+gG,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChChjG,KAAKupD,YAAa,EAAAh5B,KAAKzsB,KACvB,GAAO,EACPwN,GAEFm8C,EAAWztD,KAAKupD,YAChB05C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAO,EAAAgf,KAAKzsB,IAAK,GACpD4pD,EAAY1tD,KAAKupD,YACjBnsB,EAAWp9B,KAAKswF,gBACXlzD,EAAU,CACb,IAAIsmE,EAAY1jG,KAAKu9B,QAAQ1J,aAAa,EAAA7wB,YAAYkF,MACtD,IAAKw7F,EAAW,CACd1jG,KAAKymB,MACH,EAAArb,eAAeo8C,mBACfv2C,EAAWvF,MAAO,QAEpBy9B,EAAOxpC,EAAO69D,cACd,MAEF,IAAIv7D,EAAYyhG,EAAU1tF,QAAU0tF,EAAU1tF,QAAQ9U,IAAI,EAAA8B,YAAYqG,KAAO,KAC7E,IAAKpH,EAAW,CACdjC,KAAKymB,MACH,EAAArb,eAAeo8C,mBACfv2C,EAAWvF,MAAO,YAEpBy9B,EAAOxpC,EAAO69D,cACd,MAEF1yD,OAAO7I,EAAUmM,MAAQ,EAAAwd,YAAY8L,oBACrC13B,KAAKswF,eAAiBlzD,EAAWp9B,KAAKqvB,SAASsI,gBAAmC11B,EAAW,MAG5Fm7B,GAAap9B,KAAK+qF,gBAAgB3tD,IAGrC+L,EAAOnpC,KAAK2jG,eAAevmE,EAAU,CAAE4lE,EAAUC,GAAahyF,GAC1DiyF,GAAYz/C,GAAczjD,KAAKupD,cAEjCpgB,EAAOnpC,KAAKg5E,kBAAkB7vC,EAAMnpC,KAAKupD,YAAa9F,GAAY,GAAO,EAAOxyC,KALlFk4B,EAAOxpC,EAAO69D,cAQhB,MAEF,KAAK,EAAA59C,MAAM4E,aAAc0+E,GAAW,EACpC,KAAK,EAAAtjF,MAAMyD,MAKT,GAJA2/E,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,GACxC7qB,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaa,KAC1D,GAAIiY,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK+hD,EAASxhD,YAE3BjM,KAAKL,OAAO69D,cAGrB,GAAI0lC,EACFF,EAAWhjG,KAAK+0E,uBAAuBiuB,EAAUv1C,GACjDw1C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,EAAU,GACpDC,EAAY1tD,KAAKupD,gBACZ,CAIL,GAHA05C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACjBoE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAoBvD,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,IAAK+hD,EAASxhD,WAAYyhD,EAAUzhD,YAExDjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAlBdwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUE,GACV,GAAO,EACPr8C,GAEFm8C,EAAWE,EACXs1C,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWC,GACX,GAAO,EACPp8C,GAEFm8C,EAAYC,EAUhB,OAAQ3tD,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS68D,OAAQZ,EAAUC,GAChD,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAAS88D,OACT,EAAA98D,SAAS68D,OACbZ,EACAC,GAEF,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS88D,OAAQb,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACL,KAAK,GAIL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASkyB,OAAQ+pC,EAAUC,GAChD,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAAS+8D,OACT,EAAA/8D,SAASkyB,OACb+pC,EACAC,GAEF,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS+8D,OAAQd,EAAUC,GAChD,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASg9D,OAAQf,EAAUC,GAChD,MAEF,KAAK,GACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASi9D,OAAQhB,EAAUC,GAChD,MAEF,QACEn4F,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAM6E,eAAgBy+E,GAAW,EACtC,KAAK,EAAAtjF,MAAM0D,QAKT,GAJA0/E,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,GACxC7qB,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAac,KAC1D,GAAIgY,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK+hD,EAASxhD,YAE3BjM,KAAKL,OAAO69D,cAGrB,GAAI0lC,EACFF,EAAWhjG,KAAK+0E,uBAAuBiuB,EAAUv1C,GACjDw1C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,EAAU,GACpDC,EAAY1tD,KAAKupD,gBACZ,CAIL,GAHA05C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACjBoE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAoBvD,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,IAAK+hD,EAASxhD,WAAYyhD,EAAUzhD,YAExDjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAlBdwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUE,GACV,GAAO,EACPr8C,GAEFm8C,EAAWE,EACXs1C,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWC,GACX,GAAO,EACPp8C,GAEFm8C,EAAYC,EAUhB,OAAQ3tD,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EAIL,KAAK,EACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASmyB,OAAQ8pC,EAAUC,GAChD,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASk9D,OACT,EAAAl9D,SAASmyB,OACb8pC,EACAC,GAEF,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASk9D,OAAQjB,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACL,KAAK,GAIL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASoyB,OAAQ6pC,EAAUC,GAChD,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASm9D,OACT,EAAAn9D,SAASoyB,OACb6pC,EACAC,GAEF,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASm9D,OAAQlB,EAAUC,GAChD,MAEF,KAAK,GAAc,CACjB,IAAI7lE,EAAWp9B,KAAKmwF,eACpB,IAAK/yD,EAAU,CACb,IAAIsmE,EAAY1jG,KAAKu9B,QAAQ1J,aAAa,EAAA7wB,YAAYmF,OACtD,IAAKu7F,EAAW,CACd1jG,KAAKymB,MACH,EAAArb,eAAeo8C,mBACfv2C,EAAWvF,MAAO,SAEpBy9B,EAAOxpC,EAAO69D,cACd,MAEF,IAAIv7D,EAAYyhG,EAAU1tF,QAAU0tF,EAAU1tF,QAAQ9U,IAAI,EAAA8B,YAAYsG,KAAO,KAC7E,IAAKrH,EAAW,CACdjC,KAAKymB,MACH,EAAArb,eAAeo8C,mBACfv2C,EAAWvF,MAAO,aAEpBy9B,EAAOxpC,EAAO69D,cACd,MAEF1yD,OAAO7I,EAAUmM,MAAQ,EAAAwd,YAAY8L,oBACrC13B,KAAKmwF,eAAiB/yD,EAAWp9B,KAAKqvB,SAASsI,gBAAmC11B,EAAW,MAK7FknC,EAHG/L,GAAap9B,KAAK+qF,gBAAgB3tD,GAG9Bp9B,KAAK2jG,eAAevmE,EAAU,CAAE4lE,EAAUC,GAAahyF,GAFvDtR,EAAO69D,cAIhB,MAEF,KAAK,GAAc,CACjB,IAAIpgC,EAAWp9B,KAAKowF,eACpB,IAAKhzD,EAAU,CACb,IAAIsmE,EAAY1jG,KAAKu9B,QAAQ1J,aAAa,EAAA7wB,YAAYkF,MACtD,IAAKw7F,EAAW,CACd1jG,KAAKymB,MACH,EAAArb,eAAeo8C,mBACfv2C,EAAWvF,MAAO,QAEpBy9B,EAAOxpC,EAAO69D,cACd,MAEF,IAAIv7D,EAAYyhG,EAAU1tF,QAAU0tF,EAAU1tF,QAAQ9U,IAAI,EAAA8B,YAAYsG,KAAO,KAC7E,IAAKrH,EAAW,CACdjC,KAAKymB,MACH,EAAArb,eAAeo8C,mBACfv2C,EAAWvF,MAAO,YAEpBy9B,EAAOxpC,EAAO69D,cACd,MAEF1yD,OAAO7I,EAAUmM,MAAQ,EAAAwd,YAAY8L,oBACrC13B,KAAKowF,eAAiBhzD,EAAWp9B,KAAKqvB,SAASsI,gBAAmC11B,EAAW,MAK7FknC,EAHG/L,GAAap9B,KAAK+qF,gBAAgB3tD,GAG9Bp9B,KAAK2jG,eAAevmE,EAAU,CAAE4lE,EAAUC,GAAahyF,GAFvDtR,EAAO69D,cAIhB,MAEF,QACE1yD,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAM8E,yBAA0Bw+E,GAAW,EAChD,KAAK,EAAAtjF,MAAM6D,kBAKT,GAJAu/E,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,EAAe9qB,SACvDC,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAa0B,aAC1D,GAAIoX,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM+hD,EAASxhD,YAE5BjM,KAAKL,OAAO69D,cAKrB,OAFAylC,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,EAAU,GACpDC,EAAY1tD,KAAKupD,YACTvpD,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACL,KAAK,EACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS+xB,OAAQkqC,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASo9D,OAAQnB,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASo9D,OACT,EAAAp9D,SAAS+xB,OACbkqC,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJAjjG,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM1L,KAAKupD,YAAYt9C,YAEpCtM,EAAO69D,cAEhB,QACE1yD,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAM+E,+BAAgCu+E,GAAW,EACtD,KAAK,EAAAtjF,MAAM8D,wBAKT,GAJAs/E,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,EAAe9qB,SACvDC,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAasB,aAC1D,GAAIwX,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM+hD,EAASxhD,YAE5BjM,KAAKL,OAAO69D,cAMrB,OAHAwlC,EAAWhjG,KAAK+0E,uBAAuBiuB,EAAUv1C,GACjDw1C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,EAAU,GACpDC,EAAY1tD,KAAKupD,YACTvpD,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EAIL,KAAK,EACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASgyB,OAAQiqC,EAAUC,GAChD,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASivC,OAAQgtB,EAAUC,GAChD,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASivC,OACT,EAAAjvC,SAASgyB,OACbiqC,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACL,KAAK,GAIL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASiyB,OAAQgqC,EAAUC,GAChD,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASq9D,OAAQpB,EAAUC,GAChD,MAEF,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASq9D,OACT,EAAAr9D,SAASiyB,OACbgqC,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJAjjG,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM1L,KAAKupD,YAAYt9C,YAEpCtM,EAAO69D,cAEhB,QACE1yD,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAMgF,2CAA4Cs+E,GAAW,EAClE,KAAK,EAAAtjF,MAAM+D,oCAKT,GAJAq/E,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,EAAe9qB,SACvDC,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAauB,eAC1D,GAAIuX,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,MAAO+hD,EAASxhD,YAE7BjM,KAAKL,OAAO69D,cAMrB,OAHAwlC,EAAWhjG,KAAK+0E,uBAAuBiuB,EAAUv1C,GACjDw1C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,EAAU,GACpDC,EAAY1tD,KAAKupD,YACTvpD,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,GACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASiyB,OAAQgqC,EAAUC,GAElD,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASiyB,OAAQgqC,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASq9D,OAAQpB,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASq9D,OACT,EAAAr9D,SAASiyB,OACbgqC,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJAjjG,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,MAAO1L,KAAKupD,YAAYt9C,YAErCtM,EAAO69D,cAEhB,QACE1yD,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAMiF,iBAAkBq+E,GAAW,EACxC,KAAK,EAAAtjF,MAAMgE,UAKT,GAJAo/E,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,EAAe9qB,SACvDC,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAae,aAC1D,GAAI+X,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK+hD,EAASxhD,YAE3BjM,KAAKL,OAAO69D,cAGrB,GAAI0lC,EACFD,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,EAAU,GACpDC,EAAY1tD,KAAKupD,gBACZ,CAGL,GAFA05C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACboE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAiB3D,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,IAAK+hD,EAASxhD,WAAYyhD,EAAUzhD,YAExDjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAhBdwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUA,EAAWE,GACrB,GAAO,EACPr8C,GAEF2xF,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWA,EAAYC,GACvB,GAAO,EACPp8C,GAWN,OAAQvR,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS6xB,OAAQoqC,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASs9D,OAAQrB,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASs9D,OACT,EAAAt9D,SAAS6xB,OACboqC,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJAjjG,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK1L,KAAKupD,YAAYt9C,YAEnCtM,EAAO69D,cAEhB,QACE1yD,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAMkF,WAAYo+E,GAAW,EAClC,KAAK,EAAAtjF,MAAMiE,IAKT,GAJAm/E,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,EAAe9qB,SACvDC,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAagB,YAC1D,GAAI8X,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK+hD,EAASxhD,YAE3BjM,KAAKL,OAAO69D,cAGrB,GAAI0lC,EACFD,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,EAAU,GACpDC,EAAY1tD,KAAKupD,gBACZ,CAIL,GAHA05C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACjBoE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAoBvD,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,IAAK+hD,EAASxhD,WAAYyhD,EAAUzhD,YAExDjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAlBdwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUE,GACV,GAAO,EACPr8C,GAEFm8C,EAAWE,EACXs1C,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWC,GACX,GAAO,EACPp8C,GAEFm8C,EAAYC,EAUhB,OAAQ3tD,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASu9D,MAAOtB,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASu9D,MAAOtB,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASw9D,MAAOvB,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASw9D,MACT,EAAAx9D,SAASu9D,MACbtB,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJAjjG,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK1L,KAAKupD,YAAYt9C,YAEnCtM,EAAO69D,cAEhB,QACE1yD,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAMmF,aAAcm+E,GAAW,EACpC,KAAK,EAAAtjF,MAAMkE,MAKT,GAJAk/E,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,EAAe9qB,SACvDC,EAAWztD,KAAKupD,YAGZvpD,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB+0B,EAAS/0B,eAC9B,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAaiB,aAC1D,GAAI6X,EAAU,CACZ0E,EAAOnpC,KAAKmjG,sBAAsB1+D,EAAUnzB,EAAM0xF,EAAUzxF,EAAON,GACnE,OAOJ,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK+hD,EAASxhD,YAE3BjM,KAAKL,OAAO69D,cAGrB,GAAI0lC,EACFD,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,EAAU,GACpDC,EAAY1tD,KAAKupD,gBACZ,CAIL,GAHA05C,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,GAC1CC,EAAY1tD,KAAKupD,cACjBoE,EAAa,EAAAp9B,KAAKq9B,kBAAkBH,EAAUC,GAAW,IAoBvD,OALA1tD,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,IAAK+hD,EAASxhD,WAAYyhD,EAAUzhD,YAExDjM,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAlBdwlC,EAAWhjG,KAAKg5E,kBAAkBgqB,EAChCv1C,EAAUE,GACV,GAAO,EACPr8C,GAEFm8C,EAAWE,EACXs1C,EAAYjjG,KAAKg5E,kBAAkBiqB,EACjCv1C,EAAWC,GACX,GAAO,EACPp8C,GAEFm8C,EAAYC,EAUhB,OAAQ3tD,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS2uC,OAAQstB,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS2uC,OAAQstB,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS+uC,OAAQktB,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACH95D,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAAS+uC,OACT,EAAA/uC,SAAS2uC,OACbstB,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJAjjG,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK1L,KAAKupD,YAAYt9C,YAEnCtM,EAAO69D,cAEhB,QACE1yD,QAAO,GACPq+B,EAAOxpC,EAAO69D,cAGlB,MAKF,KAAK,EAAA59C,MAAMqE,oBAAqB,CAC9B,IAAI6d,EAAO9hC,KAAKu1E,YACZqtB,EAAqC,GAAdlE,EAC3BsE,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,EAAeuqB,WAAYD,GACnEn1C,EAAWztD,KAAKupD,YAEhB,IAAIi7C,EAAY1iE,EAAKw6D,OAOrB,GANAt8F,KAAKu1E,YAAcivB,EACnBA,EAAUnvC,qBAAqB2tC,GAC/BC,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,EAAiC,EAAvBm1C,GACpDl1C,EAAYD,EAGR6qB,GAAkB,EAAA/nD,KAAK3sB,MAAQ00E,GAAkB,EAAA/nD,KAAKG,KACxDuyE,EAAYjjG,KAAKykG,6BAA6BD,EAAWvB,EAAWv1C,GACpE82C,EAAUjI,mBACVv8F,KAAKu1E,YAAczzC,EACnBqH,EAAOxpC,EAAOosF,GACZ/rF,KAAK2qF,cAAcqY,EAAUv1C,GAC7BztD,KAAK2qF,cAAcsY,EAAWv1C,GAC9B/tD,EAAOyD,IAAI,IAEbpD,KAAKupD,YAAc,EAAAh5B,KAAK3sB,SAEnB,CAGL,GAAI6pD,EAAS8N,UAAW,CACtB,IAAImpC,EAAyB1kG,KAAK8vF,oBAAoBxiF,IAAI01F,GACtD2B,EAA0B3kG,KAAK8vF,oBAAoBxiF,IAAI21F,GACvDzY,EAAO1oD,EAAK6wB,aAAalF,GAC7Bu1C,EAAWrjG,EAAOi2E,UAAU4U,EAAK/qD,MAAOujE,GAIxC,IAAI4B,GAAmB,EACnBF,GAA0BC,EACvBD,GAGHzB,EAAYjjG,KAAKi3F,WAAWgM,GAC5B0B,GAA0B,GAH1BC,GAAmB,EAKI,GAAdlG,IACXuE,EAAYjjG,KAAK6kG,iBAAiB5B,EAAWv1C,EAAW82C,EAAW1iE,IAGrE,IAAIgjE,EAAa,IAAIl9F,MACjB88F,GACFI,EAAWjT,QACT7xF,KAAKu5F,YACH55F,EAAOk2E,UAAU2U,EAAK/qD,MAAOguB,EAASrJ,kBAI5C6+C,EAAYjjG,KAAKykG,6BAA6BD,EAAWvB,EAAWv1C,EAAWo3C,GAC/EN,EAAUjI,mBACVv8F,KAAKu1E,YAAczzC,EAEnBqH,EAAOxpC,EAAOosF,GACZ/rF,KAAK2qF,cAAcqY,EAAUv1C,GAC7Bw1C,EACA2B,EACI5kG,KAAKi3F,WACHt3F,EAAOk2E,UAAU2U,EAAK/qD,MAAOguB,EAASrJ,iBAExCzkD,EAAOk2E,UAAU2U,EAAK/qD,MAAOguB,EAASrJ,kBAExCsgD,GAA0BC,IAAyB3kG,KAAK8vF,oBAAoBn/D,IAAIwY,GAChFqhD,GAAM1oD,EAAKoxB,cAAcs3B,QAS7B,GALAyY,EAAYjjG,KAAKykG,6BAA6BD,EAAWvB,EAAWv1C,GACpE82C,EAAUjI,mBACVv8F,KAAKu1E,YAAczzC,EAGfqH,EAAOxpC,EAAOi3C,gBAAgBosD,GAAU,EAAM,GAChD75D,EAAOxpC,EAAOosF,GACZ/rF,KAAK2qF,cAAcqY,EAAUhjG,KAAKupD,aAClC05C,EACA95D,OAIG,CACL,IAAI01D,EAAY/8D,EAAK6wB,aAAalF,GAC7B3rB,EAAK+0B,YAAYmsC,EAAUv1C,IAAW3rB,EAAK8wB,aAAaisC,EAAUp/D,MAAO,EAAAkyB,WAAWuC,SACrFpyB,EAAK42D,UAAUsK,EAAUv1C,IAAW3rB,EAAK8wB,aAAaisC,EAAUp/D,MAAO,EAAAkyB,WAAWzE,SACtF/jB,EAAOxpC,EAAOosF,GACZ/rF,KAAK2qF,cAAchrF,EAAOi2E,UAAUipB,EAAUp/D,MAAOujE,GAAWv1C,GAChEw1C,EACAtjG,EAAOk2E,UAAUgpB,EAAUp/D,MAAOguB,EAASrJ,iBAE7CtiB,EAAKoxB,cAAc2rC,GAGvB7+F,KAAKupD,YAAckE,EAErB,MAEF,KAAK,EAAA7tC,MAAMsE,QAAS,CAClB,IAAI4d,EAAO9hC,KAAKu1E,YACZqtB,EAAqC,GAAdlE,EAC3BsE,EAAWhjG,KAAKq0E,kBAAkB/iE,EAAMgnE,EAAeuqB,WAAYD,GACnEn1C,EAAWztD,KAAKupD,YAEhB,IAAIi7C,EAAY1iE,EAAKw6D,OAOrB,GANAt8F,KAAKu1E,YAAcivB,EACnBA,EAAUxuC,sBAAsBgtC,GAChCC,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOk8C,EAAiC,EAAvBm1C,GACpDl1C,EAAYD,EAGR6qB,GAAkB,EAAA/nD,KAAK3sB,MAAQ00E,GAAkB,EAAA/nD,KAAKG,KACxDuyE,EAAYjjG,KAAKykG,6BAA6BD,EAAWvB,EAAWx1C,GACpE+2C,EAAUjI,mBACVv8F,KAAKu1E,YAAczzC,EACnBqH,EAAOxpC,EAAOosF,GACZ/rF,KAAK2qF,cAAcqY,EAAUv1C,GAC7B9tD,EAAOyD,IAAI,GACXpD,KAAK2qF,cAAcsY,EAAWv1C,IAEhC1tD,KAAKupD,YAAc,EAAAh5B,KAAK3sB,SAEnB,CAGL,GAAI6pD,EAAS8N,UAAW,CACtB,IAAImpC,EAAyB1kG,KAAK8vF,oBAAoBxiF,IAAI01F,GACtD2B,EAA0B3kG,KAAK8vF,oBAAoBxiF,IAAI21F,GACvDzY,EAAO1oD,EAAK6wB,aAAalF,GAC7Bu1C,EAAWrjG,EAAOi2E,UAAU4U,EAAK/qD,MAAOujE,GAIxC,IAAI+B,GAAmB,EACnBL,GAA0BC,EACvBD,GAGHzB,EAAYjjG,KAAKi3F,WAAWgM,GAC5B0B,GAA0B,GAH1BI,GAAmB,EAKI,GAAdrG,IACXuE,EAAYjjG,KAAK6kG,iBAAiB5B,EAAWv1C,EAAW82C,EAAW1iE,IAGrE,IAAIgjE,EAAa,IAAIl9F,MACjB88F,GAGFI,EAAWjT,QACT7xF,KAAKu5F,YACH55F,EAAOk2E,UAAU2U,EAAK/qD,MAAOguB,EAASrJ,kBAI5C6+C,EAAYjjG,KAAKykG,6BAA6BD,EAAWvB,EAAWv1C,EAAWo3C,GAC/EN,EAAUjI,mBACVv8F,KAAKu1E,YAAczzC,EAEnBqH,EAAOxpC,EAAOosF,GACZ/rF,KAAK2qF,cAAcqY,EAAUv1C,GAC7Bs3C,EACI/kG,KAAKi3F,WACHt3F,EAAOk2E,UAAU2U,EAAK/qD,MAAOguB,EAASrJ,iBAExCzkD,EAAOk2E,UAAU2U,EAAK/qD,MAAOguB,EAASrJ,gBAC1C6+C,IAEEyB,GAA0BC,IAAyB3kG,KAAK8vF,oBAAoBn/D,IAAIwY,GAChFqhD,GAAM1oD,EAAKoxB,cAAcs3B,QAS7B,GALAyY,EAAYjjG,KAAKykG,6BAA6BD,EAAWvB,EAAWv1C,GACpE82C,EAAUjI,mBACVv8F,KAAKu1E,YAAczzC,EAGfqH,EAAOxpC,EAAOi3C,gBAAgBosD,GAAU,EAAM,GAChD75D,EAAOxpC,EAAOosF,GACZ/rF,KAAK2qF,cAAcqY,EAAUv1C,GAC7BtkB,EACA85D,OAIG,CACL,IAAIzY,EAAO1oD,EAAK6wB,aAAalF,GACxB3rB,EAAK+0B,YAAYmsC,EAAUv1C,IAAW3rB,EAAK8wB,aAAa43B,EAAK/qD,MAAO,EAAAkyB,WAAWuC,SAChFpyB,EAAK42D,UAAUsK,EAAUv1C,IAAW3rB,EAAK8wB,aAAa43B,EAAK/qD,MAAO,EAAAkyB,WAAWzE,SACjF/jB,EAAOxpC,EAAOosF,GACZ/rF,KAAK2qF,cAAchrF,EAAOi2E,UAAU4U,EAAK/qD,MAAOujE,GAAWv1C,GAC3D9tD,EAAOk2E,UAAU2U,EAAK/qD,MAAOguB,EAASrJ,gBACtC6+C,GAEFnhE,EAAKoxB,cAAcs3B,GAGvBxqF,KAAKupD,YAAckE,EAErB,MAEF,QACE3iD,QAAO,GACPq+B,EAAOnpC,KAAKL,OAAO69D,cAGvB,IAAK0lC,EAAU,OAAO/5D,EACtB,IAAI9Z,EAAWrvB,KAAKqvB,SAChBkV,EAASlV,EAAS48B,iBAAiB36C,EAAMtR,KAAKu1E,aAClD,IAAKhxC,EAAQ,OAAO5kC,EAAO69D,cAC3B,IAAI/Z,EAAap0B,EAASw8B,iBAAiBtnB,GAE3C,OADKkf,IAAYA,EAAa,EAAAlzB,KAAKG,MAC9B1wB,KAAKupD,YAAYqkC,uBAAuBnqC,GAOtCzjD,KAAKglG,eACVzgE,EACA4E,EACAnpC,KAAKupD,YACLh4C,EACA8d,EAAS22B,sBACT32B,EAAS42B,yBACTqyB,GAAkB,EAAA/nD,KAAKG,OAbvB1wB,KAAKymB,MACH,EAAArb,eAAegmD,mCACfngD,EAAWvF,MAAO1L,KAAKupD,YAAYt9C,WAAYw3C,EAAWx3C,YAErDtM,EAAO69D,eAaV,qBACNvM,EACA3vD,EACAg4F,EACA1pC,GAIA,OAAO5vD,KAAK2jG,eAAe1yC,EAAkB,CAAEqoC,GAAa1pC,GAAY,GAGlE,sBACNqB,EACA3/C,EACA0xF,EACAzxF,EACAq+C,GAEA,IAAIlC,EACJ,GAAIuD,EAAiBp4B,GAAG,EAAAx2B,YAAYy6B,UAAW,CAC7C,IAAI+C,EAAgB/0B,OAAOmmD,EAAiBhhC,QAASnlB,OAAO+0B,EAAczxB,MAAQ,EAAAwd,YAAY7Z,OAC9F27C,EAAYuD,EAAiBz3C,UAAUkoB,eAAe,QAUtDgsB,EAAYuD,EAAiBz3C,UAAUkoB,eAAe,GAExD,IAAIuhE,EAAYjjG,KAAKq0E,kBAAkB9iE,EAAOm8C,EAAW,GACzD,OAAO1tD,KAAK2jG,eAAe1yC,EAAkB,CAAE+xC,EAAUC,GAAarzC,GAGhE,kBAAkB3+C,EAAwBwtF,EAA6BnmB,GAC7E,IACIjpD,EADUrvB,KAAKu9B,QACIlO,SACnByS,EAAO9hC,KAAKu1E,YACZhxC,EAASlV,EAAS48B,iBAAiBh7C,EAAY6wB,GACnD,IAAKyC,EAAQ,OAAOvkC,KAAKL,OAAO69D,cAChC,IAII/Z,EAJAwhD,EAAiB51E,EAAS22B,sBAC1BxzC,EAAoB6c,EAAS42B,yBAIjC,OAAQ1hB,EAAOn2B,MACb,KAAK,EAAAwd,YAAY7O,OAEf,IAAK/c,KAAKo1F,cAAsB7wD,GAAS,OAAOvkC,KAAKL,OAAO69D,cAG9D,KAAK,EAAA5xC,YAAY8T,MACjB,KAAK,EAAA9T,YAAY0M,MACfmrB,EAAmClf,EAAQ90B,KACvC80B,EAAOlP,aAAa,EAAAxJ,eAAexO,SAASrd,KAAKklG,YAAYj0F,GACjE,MAEF,KAAK,EAAA2a,YAAYqM,mBAAoB,CACnC,IAAIC,EAAuCqM,EACvCnM,EAAkBF,EAAkBE,gBACxC,IAAKA,EAKH,OAJAp4B,KAAKymB,MACH,EAAArb,eAAe+5F,oEACfl0F,EAAWvF,MAAOwsB,EAAkBhJ,cAE/BlvB,KAAKL,OAAO69D,cAErB,IAAI36B,EAAiB7iC,KAAKqvB,SAASsI,gBAAgBS,EAAiB,KAAM,EAAA2uB,UAAwB,EAAAhB,WAAWO,QAC7G,IAAKzjB,EAAgB,OAAO7iC,KAAKL,OAAO69D,cACxC1yD,OAAyD,GAAlD+3B,EAAerpB,UAAUkoB,eAAeh1B,QAC/C+2C,EAAa5gB,EAAerpB,UAAUkoB,eAAe,GACjDtJ,EAAgB/C,aAAa,EAAAxJ,eAAexO,SAASrd,KAAKklG,YAAYj0F,GAC1E,MAEF,KAAK,EAAA2a,YAAYyM,SAAU,CACzB,IAAIw4B,EAA6BtsB,EAC7B1B,EAAiBguB,EAAiBhuB,eACtC,IAAKA,EAKH,OAJA7iC,KAAKymB,MACH,EAAArb,eAAe+5F,oEACfl0F,EAAWvF,MAAOmlD,EAAiB3hC,cAE9BlvB,KAAKL,OAAO69D,cAErB1yD,OAAyD,GAAlD+3B,EAAerpB,UAAUkoB,eAAeh1B,QAC/C+2C,EAAa5gB,EAAerpB,UAAUkoB,eAAe,GACjDmB,EAAexN,aAAa,EAAAxJ,eAAexO,SAASrd,KAAKklG,YAAYj0F,GACzE,MAEF,KAAK,EAAA2a,YAAYkX,eAAgB,CAC/B,IAAI7S,EAA0BsU,EAAQtU,OACtCnlB,OAAOmlB,EAAO7hB,MAAQ,EAAAwd,YAAY7Z,OAClC,IAAI8tB,EAAuB5P,EACvB8S,EAAcjB,EAAKjJ,GAAG,OACtBusE,EAAavlE,EAAcmD,eAAe,EAAArX,aAAaM,YAAa8W,GACxE,IAAKqiE,EAAY,CAaf,OAZiBvlE,EAAcmD,eAAe,EAAArX,aAAaK,YAAa+W,GAOtE/iC,KAAKymB,MACH,EAAArb,eAAei6F,+CACfp0F,EAAWvF,MAAOm0B,EAAc3Q,cAPlClvB,KAAKymB,MACH,EAAArb,eAAe68C,qCACfh3C,EAAWvF,MAAOm0B,EAAc3Q,cAQ7BlvB,KAAKL,OAAO69D,cAErB1yD,OAAqD,GAA9Cs6F,EAAW5rF,UAAUkoB,eAAeh1B,QAC3C+2C,EAAa2hD,EAAW5rF,UAAUkoB,eAAe,GAC7C0jE,EAAW/vE,aAAa,EAAAxJ,eAAexO,SAASrd,KAAKklG,YAAYj0F,IAChE8xB,GAAe/iC,KAAKguB,QAAQmhE,UAC/BnvF,KAAKmvF,SACH,EAAA/jF,eAAek6F,2CACfr0F,EAAWvF,OAGf,MAEF,QAKE,OAJA1L,KAAKymB,MACH,EAAArb,eAAeivB,gBACfppB,EAAWvF,OAEN1L,KAAKL,OAAO69D,cAKvB1yD,OAAO24C,GAAc,EAAAlzB,KAAKG,MAC1B,IAAI4oE,EAAYt5F,KAAKq0E,kBAAkBoqB,EAAiBh7C,EAAY,IAChE3pC,EAAY9Z,KAAKupD,YACrB,OAAOvpD,KAAKglG,eACVzgE,EACAvkC,KAAKg5E,kBAAkBsgB,EAAWx/E,EAAW2pC,GAAY,GAAO,EAAOg7C,GACvE3kF,EACA2kF,EACAwG,EACAzyF,EACA8lE,GAAkB,EAAA/nD,KAAKG,MAK3B,eAEE6T,EAEA+0D,EAEAx/E,EAEA2kF,EAEAwG,EAEAM,EAEAC,GAEA,IAAI7lG,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YAKhB,OAAQhxC,EAAOn2B,MACb,KAAK,EAAAwd,YAAY8T,MAAO,CACtB,IAAI8B,EAAe+C,EACnB,OAAIzC,EAAKgzB,YAAYtzB,EAAM/B,MAAO,EAAAkyB,WAAWsC,UAAU,IACrDj0D,KAAKymB,MACH,EAAArb,eAAe+5F,oEACf1G,EAAgB/yF,MAAO64B,EAAOrV,cAEhClvB,KAAKupD,YAAci8C,EAAMhkE,EAAM/xB,KAAO,EAAA8gB,KAAKG,KACpC/wB,EAAO69D,eAETx9D,KAAKylG,oBAAoBjkE,EAAO83D,EAAWx/E,EAAW0rF,GAE/D,KAAK,EAAA55E,YAAY7O,OAAQ,CACvB,IAAI+b,EAAiByL,EACrB,OAAKvkC,KAAKo1F,cAAct8D,GACpByL,EAAO7J,MAAM,EAAAr4B,YAAYge,MAAQ,EAAAhe,YAAYwf,WAC/C7hB,KAAKymB,MACH,EAAArb,eAAe+5F,oEACf1G,EAAgB/yF,MAChB64B,EAAOrV,cAETlvB,KAAKupD,YAAci8C,EAAM1sE,EAAOrpB,KAAO,EAAA8gB,KAAKG,KACrC/wB,EAAO69D,eAETx9D,KAAKy3F,qBAAqB3+D,EAAQwgE,EAAWkM,GAVZ7lG,EAAO69D,cAYjD,KAAK,EAAA5xC,YAAY0M,MAAO,CACtB,IAAIuM,EAAuBN,EACvBwnB,EAAkBlnB,EAAcknB,gBACpC,OACElnB,EAAchM,GAAG,EAAAx2B,YAAYwf,YAE3BigB,EAAK6mB,eAAe9vB,GAAG,EAAAx2B,YAAY+P,cACf,OAApB25C,GAGF/rD,KAAKymB,MACH,EAAArb,eAAe+5F,oEACf1G,EAAgB/yF,MAAOm5B,EAAc3V,cAEhCvvB,EAAO69D,eAETx9D,KAAK0lG,oBAAoB7gE,EAC9By0D,EAEAt5F,KAAKq0E,kBAAkBvpE,OAAOm6F,GAAiBjlG,KAAKguB,QAAQyC,WAC5D+0E,GAGJ,KAAK,EAAA55E,YAAYqM,mBAAoB,CACnC,IAAIC,EAAuCqM,EACvCnM,EAAkBF,EAAkBE,gBACxC,IAAKA,EAKH,OAJAp4B,KAAKymB,MACH,EAAArb,eAAe+5F,oEACf1G,EAAgB/yF,MAAO64B,EAAOrV,cAEzBvvB,EAAO69D,cAEhB,IAAI36B,EAAiB7iC,KAAKqvB,SAASsI,gBAAgBS,EAAiB,KAAM,EAAA2uB,UAAwB,EAAAhB,WAAWO,QAC7G,IAAKzjB,EAAgB,OAAOljC,EAAO69D,cACnC1yD,OAAyD,GAAlD+3B,EAAerpB,UAAUkoB,eAAeh1B,QAC/C,IAAIoN,EAAY+oB,EAAerpB,UAAUkoB,eAAe,GAGxD,GAFI1hC,KAAK8vF,oBAAoBxiF,IAAIgsF,KAAYA,EAAYt5F,KAAK2lG,gBAAgBrM,EAAWx/E,EAAWgoB,KAE/F0jE,EAAK,OAAOxlG,KAAK2jG,eAAe9gE,EAAgB,CAAEy2D,GAAamF,GAEpE,IAAItmE,EAAkBrtB,OAAOotB,EAAkBC,iBAC3CyK,EAAiB5iC,KAAKqvB,SAASsI,gBAAgBQ,EAAiB,KAAM,EAAA4uB,UAAwB,EAAAhB,WAAWO,QAC7G,IAAK1jB,EAAgB,OAAOjjC,EAAO69D,cACnC,IAAIzuD,EAAa6zB,EAAeppB,UAAUzK,WAC1CjE,OAAOgP,GAAa/K,GACpB,IAAI62F,EAAmB72F,EAAWq1C,eAClC,OAAOzkD,EAAOksC,MAAM,KAAM,CACxB7rC,KAAK2jG,eAAe9gE,EAAgB,CAAEy2D,GAAamF,GACnDz+F,KAAK2jG,eAAe/gE,EAAgB,KAAM67D,IACzCmH,GAEL,KAAK,EAAAh6E,YAAYyM,SAAU,CACzB,IAAIw4B,EAA6BtsB,EACjCz5B,OAAO+lD,EAAiB5gC,OAAO7hB,MAAQ,EAAAwd,YAAY7Z,OACnD,IAAI8tB,EAAuBgxB,EAAiB5gC,OAC5CnlB,OAAO+0B,EAAczxB,MAAQ,EAAAwd,YAAY7Z,OACzC,IAAI8wB,EAAiBguB,EAAiBhuB,eACtC,IAAKA,EAKH,OAJA7iC,KAAKymB,MACH,EAAArb,eAAe+5F,oEACf1G,EAAgB/yF,MAAO64B,EAAOrV,cAEzBvvB,EAAO69D,cAEhB1yD,OAAyD,GAAlD+3B,EAAerpB,UAAUkoB,eAAeh1B,QAC/C,IAAIoN,EAAY+oB,EAAerpB,UAAUkoB,eAAe,GAGxD,GAFI1hC,KAAK8vF,oBAAoBxiF,IAAIgsF,KAAYA,EAAYt5F,KAAK2lG,gBAAgBrM,EAAWx/E,EAAWgoB,KAE/F0jE,EAAK,CACR,IAAIK,EAAW7lG,KAAKq0E,kBAAkBvpE,OAAOm6F,GAAiBplE,EAAcpwB,MAC5E,OAAOzP,KAAK2jG,eAAe9gE,EAAgB,CAAEgjE,EAAUvM,GAAamF,GAGtE,IAAI77D,EAAiB93B,OAAkBy5B,EAAQ3B,gBAC3C7zB,EAAa6zB,EAAeppB,UAAUzK,WACtC62F,EAAmB72F,EAAWq1C,eAC9ByhD,EAAW7lG,KAAKq0E,kBAAkBvpE,OAAOm6F,GAAiBjlG,KAAKguB,QAAQyC,WACvE+5D,EAAO1oD,EAAK6wB,aAAa5jD,GACzB26B,EAAM/pC,EAAOksC,MAAM,KAAM,CAC3B7rC,KAAK2jG,eAAe9gE,EAAgB,CAClCljC,EAAOi2E,UAAU4U,EAAK/qD,MAAOomE,GAC7BvM,GACCmF,GACHz+F,KAAK2jG,eAAe/gE,EAAgB,CAClCjjC,EAAOk2E,UAAU2U,EAAK/qD,MAAOmmE,IAC5BnH,IACFmH,GAEH,OADA9jE,EAAKoxB,cAAcs3B,GACZ9gD,EAET,KAAK,EAAA9d,YAAYkX,eAAgB,CAC/B,IACI7S,EADiCsU,EACTtU,OAC5BnlB,OAAOmlB,EAAO7hB,MAAQ,EAAAwd,YAAY7Z,OAClC,IAAI8tB,EAAuB5P,EAC3BnlB,OAAO+0B,EAAczxB,MAAQ,EAAAwd,YAAY7Z,OACzC,IAAIgxB,EAAcjB,EAAKjJ,GAAG,OACtB+J,EAAiB/C,EAAcmD,eAAe,EAAArX,aAAaK,YAAa+W,GAC5E,IAAKH,EAKH,OAJA5iC,KAAKymB,MACH,EAAArb,eAAe68C,qCACfw2C,EAAgB/yF,MAAOm0B,EAAc3Q,cAEhCvvB,EAAO69D,cAEhB,IAAI36B,EAAiBhD,EAAcmD,eAAe,EAAArX,aAAaM,YAAa8W,GAC5E,IAAKF,EAMH,OALA7iC,KAAKymB,MACH,EAAArb,eAAei6F,+CACf5G,EAAgB/yF,MAAOm0B,EAAc3Q,cAEvClvB,KAAKupD,YAAci8C,EAAM5iE,EAAeppB,UAAUzK,WAAa,EAAAwhB,KAAKG,KAC7D/wB,EAAO69D,cAEhB1yD,OAAyD,GAAlD+3B,EAAerpB,UAAUkoB,eAAeh1B,QAC/C,IAAIoN,EAAY+oB,EAAerpB,UAAUkoB,eAAe,GACpD1hC,KAAK8vF,oBAAoBxiF,IAAIgsF,KAAYA,EAAYt5F,KAAK2lG,gBAAgBrM,EAAWx/E,EAAWgoB,IACpG,IAAI+jE,EAAW7lG,KAAKq0E,kBAAkBvpE,OAAOm6F,GAAiBplE,EAAcpwB,MACxEq2F,EAAc9lG,KAAKq0E,kBAAkBvpE,OAAOy6F,GAAkB,EAAAh1E,KAAKntB,IAAK,GAC5E,GAAIoiG,EAAK,CACP,IAAIO,EAAajkE,EAAK6wB,aAAa9yB,EAAcpwB,MAC7Cu2F,EAAclkE,EAAK6wB,aAAa3yD,KAAKupD,aACrCx6C,EAAa6zB,EAAeppB,UAAUzK,WAC1C+yB,EAAKoxB,cAAc6yC,GACnB,IAAIr8D,EAAM/pC,EAAOksC,MAAM,KAAM,CAC3B7rC,KAAK2jG,eAAe9gE,EAAgB,CAClCljC,EAAOi2E,UAAUmwB,EAAWtmE,MAAOomE,GACnClmG,EAAOi2E,UAAUowB,EAAYvmE,MAAOqmE,GACpCxM,GACCmF,GACHz+F,KAAK2jG,eAAe/gE,EAAgB,CAClCjjC,EAAOk2E,UAAUkwB,EAAWtmE,MAAOsmE,EAAWt2F,KAAK20C,gBACnDzkD,EAAOk2E,UAAUmwB,EAAYvmE,MAAOumE,EAAYv2F,KAAK20C,iBACpDq6C,IACF1vF,EAAWq1C,gBAGd,OAFAtiB,EAAKoxB,cAAc8yC,GACnBlkE,EAAKoxB,cAAc6yC,GACZr8D,EAEP,OAAO1pC,KAAK2jG,eAAe9gE,EAAgB,CACzCgjE,EACAC,EACAxM,GACCmF,IAQT,OAJAz+F,KAAKymB,MACH,EAAArb,eAAeivB,gBACfokE,EAAgB/yF,OAEX/L,EAAO69D,cAIR,oBAENh8B,EAEA83D,EAEAx/E,EAEA0rF,GAEA,IAAI7lG,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YACZ9lE,EAAO+xB,EAAM/xB,KACjB3E,OAAO2E,GAAQ,EAAA8gB,KAAKG,MACpB,IAAI6Q,EAAaC,EAAM/B,MAQvB,GANIhwB,EAAKopB,GAAG,QACL/e,EAAU+e,GAAG,MAAuBiJ,EAAK42D,UAAUY,EAAW7pF,GAAOqyB,EAAK8wB,aAAarxB,EAAY,EAAAowB,WAAWzE,SAC9GprB,EAAK0wB,eAAejxB,EAAY,EAAAowB,WAAWzE,UAElDprB,EAAK8wB,aAAarxB,EAAY,EAAAowB,WAAWwC,aAErC1kD,EAAK8rD,UAAW,CAClB,IAAI0qC,EAAkBjmG,KAAK8vF,oBAAoBxiF,IAAIgsF,GACnD,OAAIx3D,EAAKizB,eAAexzB,EAAY,EAAAowB,WAAWqD,eAC7CskC,EAAYt5F,KAAKkmG,YACf5M,EACA35F,EAAOk2E,UAAUt0C,EAAY9xB,EAAK20C,gBAClC6hD,GAEET,GACFxlG,KAAKupD,YAAc95C,EACZ9P,EAAOi2E,UAAUr0C,EAAY+3D,KAEpCt5F,KAAKupD,YAAc,EAAAh5B,KAAKG,KACjB/wB,EAAOq4F,UAAUz2D,EAAY+3D,MAGtCx3D,EAAK0wB,eAAejxB,EAAY,EAAAowB,WAAWyC,wBAC3CtyB,EAAK8wB,aAAarxB,EAAY,EAAAowB,WAAWkB,UACpCozC,IAAiB3M,EAAYt5F,KAAKi3F,WAAWqC,IAC9CkM,GACFxlG,KAAKupD,YAAc95C,EACZ9P,EAAOi2E,UAAUr0C,EAAY+3D,KAEpCt5F,KAAKupD,YAAc,EAAAh5B,KAAKG,KACjB/wB,EAAOq4F,UAAUz2D,EAAY+3D,KAQxC,OAJI7pF,EAAKopB,GAAG,MACLiJ,EAAK+0B,YAAYyiC,EAAW7pF,GAC5BqyB,EAAK0wB,eAAejxB,EAAY,EAAAowB,WAAWuC,SADRpyB,EAAK8wB,aAAarxB,EAAY,EAAAowB,WAAWuC,UAG/EsxC,GACFxlG,KAAKupD,YAAc95C,EACZ9P,EAAOi2E,UAAUr0C,EAAY+3D,KAEpCt5F,KAAKupD,YAAc,EAAAh5B,KAAKG,KACjB/wB,EAAOq4F,UAAUz2D,EAAY+3D,IAMlC,qBAENxgE,EAEAwgE,EAEAkM,GAEA,IAAI7lG,EAASK,KAAKL,OACd8P,EAAOqpB,EAAOrpB,KAClB3E,OAAO2E,GAAQ,EAAA8gB,KAAKG,MACpB,IAAI8lD,EAAa/mE,EAAK20C,eAEtB,GAAI30C,EAAK8rD,UAAW,CAClB,IAAI0qC,EAAkBjmG,KAAK8vF,oBAAoBxiF,IAAIgsF,GAQnD,OAPAA,EAAY35F,EAAOmyF,WAAWh5D,EAAO5J,aACnClvB,KAAKkmG,YACH5M,EACA35F,EAAOktF,WAAW/zD,EAAO5J,aAAcsnD,GACvCyvB,IAGAT,GACFxlG,KAAKupD,YAAc95C,EACZ9P,EAAOksC,MAAM,KAAM,CACxBytD,EACA35F,EAAOktF,WAAW/zD,EAAO5J,aAAcsnD,IACtCA,KAEHx2E,KAAKupD,YAAc,EAAAh5B,KAAKG,KACjB4oE,GAIT,OADAA,EAAYt5F,KAAK+0E,uBAAuBukB,EAAW7pF,GAC/C+1F,GACFxlG,KAAKupD,YAAc95C,EACZ9P,EAAOksC,MAAM,KAAM,CACxBlsC,EAAOmyF,WAAWh5D,EAAO5J,aAAcoqE,GACvC35F,EAAOktF,WAAW/zD,EAAO5J,aAAcsnD,IACtCA,KAEHx2E,KAAKupD,YAAc,EAAAh5B,KAAKG,KACjB/wB,EAAOmyF,WAAWh5D,EAAO5J,aAC9BoqE,IAOA,oBAEN30D,EAEA20D,EAEAuM,EAEAL,GAEA,IAAI7lG,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YACZ7vC,EAAYf,EAAMl1B,KAClB02F,EAAkBzgE,EAAU0e,eAChCt5C,OAAO65B,EAAM1U,OAAO7hB,MAAQ,EAAAwd,YAAY7Z,OACxC,IAAI0vB,EAAmBkD,EAAM1U,OAAQxgB,KACjC2pF,EAAiB33D,EAAS2iB,eAE9B,IAAKzf,EAAM9L,GAAG,EAAAx2B,YAAYuqF,UAAW,CACnCjoD,EAAMj3B,IAAI,EAAArL,YAAYuqF,UACtB,IAAIrlC,EAAW5iB,EAAM4iB,SACjBA,GAAUvnD,KAAKi2F,mBAAmBtxD,EAAMl1B,KAAM83C,GAGpD,GAAI7hB,EAAU61B,WAAa95B,EAAS85B,UAAW,CAC7C,IAGI7xB,EAHA08D,EAAWtkE,EAAK6wB,aAAalxB,EAAU,EAAA4kE,eAAe/M,IAEtD2M,EAAkBjmG,KAAK8vF,oBAAoBxiF,IAAIgsF,GAEnD,GAAIkM,EAAK,CACP,IAAIc,EAAYxkE,EAAK6wB,aAAajtB,GAC7B5D,EAAK+0B,YAAYyiC,EAAW5zD,IAAY5D,EAAK8wB,aAAa0zC,EAAU7mE,MAAO,EAAAkyB,WAAWuC,SACvFpyB,EAAK42D,UAAUY,EAAW5zD,IAAY5D,EAAK8wB,aAAa0zC,EAAU7mE,MAAO,EAAAkyB,WAAWzE,SACxFxjB,EAAM/pC,EAAOksC,MAAM,KAAM,CACvBlsC,EAAO08D,MAAM32B,EAAUqd,SACrBpjD,EAAOi2E,UAAUwwB,EAAS3mE,MAAOomE,GACjC7lG,KAAKkmG,YACHvmG,EAAOi2E,UAAU0wB,EAAU7mE,MAAO65D,GAClC35F,EAAOy8D,KAAK12B,EAAUqd,SAAUrd,EAAU7M,GAAG,GAC3Cl5B,EAAOk2E,UAAUuwB,EAAS3mE,MAAO25D,GACjC+M,EAAiBxhE,EAAMnC,cAEzByjE,GAEFE,EAAiBxhE,EAAMnC,cAEzB7iC,EAAOk2E,UAAUywB,EAAU7mE,MAAO0mE,IACjCA,GACHrkE,EAAKoxB,cAAcozC,GACnBtmG,KAAKupD,YAAc7jB,OAEnBgE,EAAM/pC,EAAO08D,MAAM32B,EAAUqd,SAC3BpjD,EAAOi2E,UAAUwwB,EAAS3mE,MAAOomE,GACjC7lG,KAAKkmG,YACH5M,EACA35F,EAAOy8D,KAAK12B,EAAUqd,SAAUrd,EAAU7M,GAAG,GAC3Cl5B,EAAOk2E,UAAUuwB,EAAS3mE,MAAO25D,GACjC+M,EAAiBxhE,EAAMnC,cAEzByjE,GAEFE,EAAiBxhE,EAAMnC,cAEzBxiC,KAAKupD,YAAc,EAAAh5B,KAAKG,KAG1B,OADAoR,EAAKoxB,cAAckzC,GACZ18D,EAEP,GAAI87D,EAAK,CACP,IAAIhb,EAAO1oD,EAAK6wB,aAAajtB,GACxB5D,EAAK+0B,YAAYyiC,EAAW5zD,IAAY5D,EAAK8wB,aAAa43B,EAAK/qD,MAAO,EAAAkyB,WAAWuC,SAClFpyB,EAAK42D,UAAUY,EAAW5zD,IAAY5D,EAAK8wB,aAAa43B,EAAK/qD,MAAO,EAAAkyB,WAAWzE,SACnF,IAAIxjB,EAAM/pC,EAAOksC,MAAM,KAAM,CAC3BlsC,EAAO08D,MAAM32B,EAAUqd,SACrB8iD,EACAlmG,EAAOi2E,UAAU4U,EAAK/qD,MAAO65D,GAC7B6M,EAAiBxhE,EAAMnC,cAEzB7iC,EAAOk2E,UAAU2U,EAAK/qD,MAAO0mE,IAC5BA,GAGH,OAFArkE,EAAKoxB,cAAcs3B,GACnBxqF,KAAKupD,YAAc7jB,EACZgE,EAGP,OADA1pC,KAAKupD,YAAc,EAAAh5B,KAAKG,KACjB/wB,EAAO08D,MAAM32B,EAAUqd,SAC5B8iD,EACAvM,EACA6M,EAAiBxhE,EAAMnC,cAOvB,sBAENvxB,EAEAqnE,EAEAomB,GAGA,IAAI/+F,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YAGhB,GAAItkE,EAAWA,WAAW7C,MAAQ,EAAAP,SAASiH,MAAO,CAChD,IAAIgtB,EAAO9hC,KAAKu1E,YACZ5sB,EAAiB7mB,EAAK6mB,eAC1B,IAAKA,EAAe9vB,GAAG,EAAAx2B,YAAY+P,aAKjC,OAJApS,KAAKymB,MACH,EAAArb,eAAem7F,8FACft1F,EAAWvF,OAEN/L,EAAO69D,cAGhB,IAAIvtC,EAASnlB,OAAO69C,EAAe14B,QACnCnlB,OAAOmlB,EAAO7hB,MAAQ,EAAAwd,YAAY7Z,OAClC,IAAI8tB,EAAuB5P,EACvBu2E,EAAoB17F,OAAO+0B,EAAcyD,MACzCyqB,EAAYjjD,OAAOg3B,EAAKksB,YAAY,EAAAhrD,YAAYsC,QAChD2wE,EAAiBj2E,KAAKguB,QAAQioD,eAO9BwwB,EAAUzmG,KAAKgrF,kBACjBhrF,KAAK+4F,kBAAkByN,EAAmBv1F,GAC1CA,EAAWhB,UACXgB,EACAtR,EAAOosF,GACLpsF,EAAOk2E,UAAU9nB,EAAUtuB,MAAOw2C,GAClCt2E,EAAOk2E,UAAU9nB,EAAUtuB,MAAOw2C,GAClCj2E,KAAKi3F,WACHj3F,KAAK24F,eAAe94D,KAEvB,IAGH/0B,OAAO07F,EAAkB/2F,KAAKulF,aAAeh1F,KAAK8vF,oBAAoBxiF,IAAIm5F,IAC1E,IAAIp7D,EAAyB,CAC3B1rC,EAAOq4F,UAAUjqC,EAAUtuB,MAAOgnE,IAKpC,OAHAzmG,KAAK44F,qCAAqC/4D,EAAewL,GAGrDvJ,EAAKpH,MACP,OAGA16B,KAAKymB,MACH,EAAArb,eAAes7F,kFACfz1F,EAAWvF,OAEN/L,EAAO69D,gBAEhB17B,EAAKp0B,IAAI,KACT1N,KAAKupD,YAAc,EAAAh5B,KAAKG,KACjB/wB,EAAOquF,QAAQ3iD,IAIxB,IAGI7xB,EACAmtF,EAJApiE,EAASvkC,KAAKqvB,SAAS48B,iBAAiBh7C,EAAWA,WAAY6wB,GACnE,IAAKyC,EAAQ,OAAO5kC,EAAO69D,cAI3B,OAAQj5B,EAAOn2B,MAGb,KAAK,EAAAwd,YAAY8L,mBAAoB,CACnC,IAAI82B,EAAuCjqB,EAG3C,GAAIiqB,EAAkBn5B,aAAa,EAAAxJ,eAAehP,SAChD,OAAO7c,KAAK4mG,6BAA6Bp4C,EAAmBv9C,EAAYqnE,GAG1E,IAAI2sB,EAAiBjlG,KAAKqvB,SAAS22B,sBAC/BoU,EAAmBp6D,KAAKqvB,SAASo/B,eAAex9C,EAAYu9C,EAAmB1sB,GACnF,OAAKs4B,EACEp6D,KAAKgrF,kBACV5wB,EACAnpD,EAAWhB,UACXgB,EACAmpD,EAAiBvhC,GAAG,EAAAx2B,YAAYy6B,UAC5B98B,KAAKq0E,kBAAkBvpE,OAAOm6F,GAAiBjlG,KAAKguB,QAAQyC,WAC5D,EACJiuE,GAR4B1+F,KAAKL,OAAO69D,cAa5C,KAAK,EAAA5xC,YAAY8T,MAAO,CACtB,IAAI8B,EAAe+C,EAEnB,GADA/qB,EAAYgoB,EAAM/xB,KAAKwzC,mBACR,CAEX0jD,EADEnlE,EAAM3I,GAAG,EAAAx2B,YAAY+8B,SACZz/B,EAAOyD,IAAIynB,QAAQ2W,EAAMrC,uBAEzBx/B,EAAOk2E,UAAUr0C,EAAM/B,MAAO,EAAA2G,WAAWt/B,KAEtD,MAMF,OAJA9G,KAAKymB,MACH,EAAArb,eAAesjD,uGACfz9C,EAAWvF,MAAO81B,EAAM/xB,KAAKxD,YAExBtM,EAAO69D,cAEhB,KAAK,EAAA5xC,YAAY7O,OAAQ,CACvB,IAAI+b,EAAiByL,EAErB,GADA/qB,EAAYsf,EAAOrpB,KAAKwzC,mBACT,CACb0jD,EAAWhnG,EAAOktF,WAAW/zD,EAAO5J,aAAc4J,EAAOrpB,KAAK20C,gBAC9D,MAMF,OAJApkD,KAAKymB,MACH,EAAArb,eAAesjD,uGACfz9C,EAAWvF,MAAOotB,EAAOrpB,KAAKxD,YAEzBtM,EAAO69D,cAEhB,KAAK,EAAA5xC,YAAY0M,MAAO,CACtB,IAAIuM,EAAuBN,EACvBmB,EAAYb,EAAcp1B,KAE9B,GADA+J,EAAYksB,EAAUud,mBACP,CACb,IAAIgiD,EAAiBn6F,OAAO9K,KAAKqvB,SAAS22B,uBACtC6/C,EAAW7lG,KAAKq0E,kBAAkB4wB,EAAgBjlG,KAAKguB,QAAQyC,WACnEk2E,EAAWhnG,EAAOy8D,KAChB,GACA,EACAypC,EACA,EAAAz/D,WAAWt/B,IACX+9B,EAAcrC,cAEhB,MAMA,OAJAxiC,KAAKymB,MACH,EAAArb,eAAesjD,uGACfz9C,EAAWvF,MAAOg6B,EAAUz5B,YAEvBtM,EAAO69D,cAGlB,KAAK,EAAA5xC,YAAY0W,gBAAiB,CAChC,IAAIukE,EAAiCtiE,EACrC/qB,EAAYqtF,EAAertF,UAC3BmtF,EAAW3mG,KAAKq0E,kBAAkBpjE,EAAWA,WAAY41F,EAAep3F,KAAM,GAC9E,MAGF,KAAK,EAAAmc,YAAYqM,mBAAoB,CACnC,IACIE,EAAkBrtB,OADqBy5B,EACIpM,iBAC3CyK,EAAiB5iC,KAAKqvB,SAASsI,gBAAgBQ,EAAiB,MACpE,IAAKyK,EAAgB,OAAOjjC,EAAO69D,cAGnC,GAFAmpC,EAAW3mG,KAAKgrF,kBAAkBpoD,EAAgB,GAAI3xB,EAAWA,cACjEuI,EAAYxZ,KAAKupD,YAAYtG,oBAM3B,OAJAjjD,KAAKymB,MACH,EAAArb,eAAesjD,uGACfz9C,EAAWvF,MAAO1L,KAAKupD,YAAYt9C,YAE9BtM,EAAO69D,cAEhB,MAEF,KAAK,EAAA5xC,YAAYyM,SAAU,CACzB,IACIuK,EAAiB93B,OADYy5B,EACY3B,gBAK7C,GAJA+jE,EAAW3mG,KAAKgrF,kBAAkBpoD,EAAgB,GAAI3xB,EAAWA,WAC/DjR,KAAKq0E,kBAAkBvpE,OAAO9K,KAAKqvB,SAAS22B,uBAAwBhmD,KAAKguB,QAAQyC,cAEnFjX,EAAYxZ,KAAKupD,YAAYtG,oBAM3B,OAJAjjD,KAAKymB,MACH,EAAArb,eAAesjD,uGACfz9C,EAAWvF,MAAO1L,KAAKupD,YAAYt9C,YAE9BtM,EAAO69D,cAEhB,MAIF,QAAS,CACP,IAAI/tD,EAAOzP,KAAKqvB,SAASw8B,iBAAiBtnB,GAY1C,OAXI90B,EACFzP,KAAKymB,MACH,EAAArb,eAAe88C,8BACfj3C,EAAWvF,MAAO+D,EAAKxD,YAGzBjM,KAAKymB,MACH,EAAArb,eAAe0gD,2CACf76C,EAAWvF,OAGR/L,EAAO69D,eAGlB,OAAOx9D,KAAK8mG,oBACVh8F,OAAO0O,GACPmtF,EACA11F,EAAWhB,UACXgB,EACA,EACAqnE,GAAkB,EAAA/nD,KAAKG,MAInB,6BACNzuB,EACAgP,EACAqnE,GAEIr2E,EAAUozB,aAAa,EAAAxJ,eAAexO,SAASrd,KAAKklG,YAAYj0F,GAEpE,IAAIvC,EAA+B,KAI/BsN,EAAqB/Z,EAAU+Z,mBAC/BE,EAAoBjL,EAAWvC,cAC/BuC,EAAWvC,gBACRzM,EAAU42B,GAAG,EAAAx2B,YAAYyuB,UAC5B9wB,KAAKymB,MACH,EAAArb,eAAeu7C,sBACf11C,EAAWvF,MAAOzJ,EAAUitB,cAGhCxgB,EAAgB1O,KAAKqvB,SAASg4B,qBAC5Bv8C,OAAOkR,GACPE,EACAlc,KAAKu1E,YAAY5sB,eAAe14B,OAChC,EAAA82B,QAAqB/mD,KAAKu1E,YAAYt1C,yBACtChvB,IAGJ,IAAIgjE,EAAM,IAAI,EAAA8yB,eACd9yB,EAAIC,SAAWl0E,KACfi0E,EAAIhyE,UAAYA,EAChBgyE,EAAIvlE,cAAgBA,EACpBulE,EAAI3qC,SAAWr4B,EAAWhB,UAC1BgkE,EAAIqE,eAAiBA,EACrBrE,EAAIrkB,WAAa3+C,EACjBgjE,EAAI6E,gBAAiB,EACrB,IAAI5pD,EAAejtB,EAAUitB,aAC7B,GAAI,EAAA+6D,SAAS38E,IAAI4hB,GAAe,CAE9B,OADSpkB,OAAO,EAAAm/E,SAAS/oF,IAAIguB,GACtB83E,CAAG/yB,GAMZ,OAJAj0E,KAAKymB,MACH,EAAArb,eAAeivB,gBACfppB,EAAWA,WAAWvF,OAEjB1L,KAAKL,OAAO69D,cAOrB,mBACEhkD,EACA0E,EACA+oF,EACAr3C,GAKA,GAAIq3C,IAAwB,MADbztF,EAAUioB,UAMvB,OAJAzhC,KAAKymB,MACH,EAAArb,eAAe87F,kDACft3C,EAAWlkD,QAEN,EAIT,IAAI84C,EAAUhrC,EAAUgrC,QACxB,GAAIA,EAKF,OAJAxkD,KAAKymB,MACH,EAAArb,eAAeivB,gBACfu1B,EAAWlkD,QAEN,EAGT,IAAIy7F,EAAU3tF,EAAU+qC,mBACpBhT,EAAU/3B,EAAUkoB,eAAeh1B,OAGvC,OAAIwR,EAAeipF,GACjBnnG,KAAKymB,MACH0gF,EAAU51D,EACN,EAAAnmC,eAAe2+E,wCACf,EAAA3+E,eAAe2wB,+BACnB6zB,EAAWlkD,MAAOy7F,EAAQl7F,WAAYiS,EAAajS,aAE9C,KAILiS,EAAeqzB,IAAYiT,KAC7BxkD,KAAKymB,MACH,EAAArb,eAAe2wB,+BACf6zB,EAAWlkD,MAAO6lC,EAAQtlC,WAAYiS,EAAajS,aAE9C,GAOH,YAAY2jD,EAAkBw3C,EAAiC,MAEjEpnG,KAAKguB,QAAQkhE,WAAat/B,EAAWlkD,MAAMM,OAAO6tB,YAChDutE,EACFpnG,KAAKs5B,aACH,EAAAluB,eAAei8F,oBACfz3C,EAAWlkD,MAAO07F,EAAkB17F,OAGtC1L,KAAKymB,MACH,EAAArb,eAAei8F,oBACfz3C,EAAWlkD,QAOnB,kBACE0xB,EACAkqE,EACA13C,EACA23C,EAAyB,EACzB7I,EAAA,GAEA,IAAIxgF,EAAeopF,EAAoB56F,OACnC8M,EAAY4jB,EAAS5jB,UACzB,IAAKxZ,KAAKwnG,mBACRhuF,EACA0E,EACW,GAAXqpF,EACA33C,GAGA,OADA5vD,KAAKupD,YAAc/vC,EAAUzK,WACtB/O,KAAKL,OAAO69D,cAKrB,GAHIpgC,EAAS/H,aAAa,EAAAxJ,eAAexO,SAASrd,KAAKklG,YAAYt1C,GAG/DxyB,EAAS/H,aAAa,EAAAxJ,eAAe7O,QAAS,CAChDlS,QAAQsyB,EAASvE,GAAG,EAAAx2B,YAAYm4F,aAChC,IAAIzK,EAAc/vF,KAAK+vF,YACvB,IAAIA,EAAYtiF,SAAS2vB,GAKlB,CACL2yD,EAAY/iF,KAAKowB,GACjB,IAAIsE,EAAiBloB,EAAUkoB,eAC/B52B,OAAOoT,GAAgBwjB,EAAeh1B,QAEtC,IAAIoD,EAAO,IAAIlI,MAAqBsW,GACpC,IAAK,IAAI7d,EAAI,EAAGA,EAAI6d,IAAgB7d,EAClCyP,EAAKzP,GAAKL,KAAKq0E,kBAAkBizB,EAAoBjnG,GAAIqhC,EAAerhC,GACtE,IAIJ,IAAI8oC,EAAOnpC,KAAKynG,eAAerqE,EAAUttB,EAAMy3F,EAAkD,IAA1B,EAAd7I,IASzD,OARI1+F,KAAKupD,YAAYgS,YACC,GAAdmjC,EAGJ1+F,KAAK8vF,oBAAoBn/D,IAAIwY,GAF7BA,EAAOnpC,KAAK2lG,gBAAgBx8D,EAAM/L,EAAS5jB,UAAUzK,WAAY/O,KAAKu1E,cAK1Ewa,EAAYr9B,MACLvpB,EAzBPnpC,KAAKo6B,QACH,EAAAhvB,eAAes8F,yCACf93C,EAAWlkD,MAAO0xB,EAASlO,cA4BjC,IAAIy4E,EAAuBJ,EAAUrpF,EAAe,EAAIA,EACpDorB,EAAW,IAAI1hC,MAAqB+/F,GACpCloE,EAAQ,EACR8nE,IACFj+D,EAAS,GAAKi+D,EACd9nE,EAAQ,GAEV,IAAIiC,EAAiBloB,EAAUkoB,eAC/B,IAAK,IAAIrhC,EAAI,EAAGA,EAAI6d,IAAgB7d,IAAKo/B,EACvC6J,EAAS7J,GAASz/B,KAAKq0E,kBAAkBizB,EAAoBjnG,GAAIqhC,EAAerhC,GAAE,GAKpF,GADAyK,OAAO20B,GAASkoE,GACZnuF,EAAUzK,WAAWwsD,UAAW,CAClC,GAAkB,EAAdmjC,EAEF,OAAO1+F,KAAK2jG,eAAevmE,EAAUkM,EAAUsmB,GAAY,GACtD,GAAkB,GAAd8uC,EAAuC,CAEhD,IAAIv1D,EAAOnpC,KAAK2jG,eAAevmE,EAAUkM,EAAUsmB,GAAY,GAAO,GAEtE,OADA5vD,KAAK8vF,oBAAoBn/D,IAAIwY,GACtBA,EAEP,OAAOnpC,KAAK2jG,eAAevmE,EAAUkM,EAAUsmB,GAAY,GAAO,GAGtE,OAAO5vD,KAAK2jG,eAAevmE,EAAUkM,EAAUsmB,EACJ,IAA1B,EAAd8uC,IAIL,eACEthE,EACAkM,EACAi+D,EAAyB,EACzBK,GAA2B,GAEvBxqE,EAASvE,GAAG,EAAAx2B,YAAY6hC,UAC1BlkC,KAAKkwF,aAAav/D,IAAIyM,GAExB,IAAIz9B,EAASK,KAAKL,OACdue,EAAeorB,EAAWA,EAAS58B,OAAS,EAC5C8M,EAAY4jB,EAAS5jB,UACrBkoB,EAAiBloB,EAAUkoB,eAC3B0jB,EAAgB1jB,EAAeh1B,OAG/BkpF,EAAe51F,KAAKu1E,YACpBzzC,EAAO,EAAAC,KAAK8lE,aAAajS,EAAa7jC,eAAgB30B,GACtD3jB,EAAO,GACPquF,EAAa,IAAIhgG,IAGrB,IAAK,IAAIzH,EAAI6d,EAAe,EAAG7d,GAAK,IAAKA,EAAG,CAM1C,IAAI0nG,EAAYz+D,EAAUjpC,GACtB2nG,EAAYtmE,EAAerhC,GAC3B4nG,EAAgBnmE,EAAKi+D,eAAevmF,EAAUqoB,iBAAiBxhC,GAAI2nG,EAAWF,GAClF,EAAAzB,eAAe0B,EAAWD,GAErBlS,EAAa/+B,YAAYkxC,EAAWC,IAAYlmE,EAAK8wB,aAAaq1C,EAAcxoE,MAAO,EAAAkyB,WAAWuC,SACnGpyB,EAAK42D,UAAUqP,EAAWC,IAAYlmE,EAAK8wB,aAAaq1C,EAAcxoE,MAAO,EAAAkyB,WAAWzE,SAExF86C,EAAUzsC,YACPv7D,KAAK8vF,oBAAoBxiF,IAAIy6F,KAAYA,EAAY/nG,KAAKi3F,WAAW8Q,IAC1EjmE,EAAK8wB,aAAaq1C,EAAcxoE,MAAO,EAAAkyB,WAAWkB,WAEpDp5C,EAAKo4E,QACHlyF,EAAOq4F,UAAUiQ,EAAcxoE,MAAOsoE,IAG1C,GAAIR,EAAS,CACX,IAAIt3E,EAASnlB,OAAOsyB,EAASnN,QAC7BnlB,OAAOmlB,EAAO7hB,MAAQ,EAAAwd,YAAY7Z,OAClC,IAAI8tB,EAAuB5P,EACvBwR,EAAW32B,OAAOsyB,EAAS5jB,UAAUioB,UACrCssB,EAAYjsB,EAAKi+D,eAAe,EAAA/8F,YAAYsC,MAAOm8B,EAAUqmE,GAEjEruF,EAAKo4E,QACHlyF,EAAOq4F,UAAUjqC,EAAUtuB,MAAO8nE,IAEpC,IAAIjkE,EAAOzD,EAAcyD,KACrBA,GAAMxB,EAAKomE,eAAe,EAAAllG,YAAYuC,OAAQ+9B,EAAK7zB,KAAMs+C,EAAUtuB,YAEvE30B,QAAQsyB,EAAS5jB,UAAUioB,UAK7BzhC,KAAKu1E,YAAczzC,EACnB,IAAK,IAAIzhC,EAAI6d,EAAc7d,EAAI+kD,IAAiB/kD,EAAG,CACjD,IAAI8nG,EAAWzmE,EAAerhC,GAC1B21F,EAAWh2F,KAAKq0E,kBAClBvpE,OAAOsyB,EAASn7B,UAAUoa,iBAAiBvN,WAAWzO,GAAGqP,aACzDy4F,EACA,IAEEF,EAAgBnmE,EAAKi+D,eAAevmF,EAAUqoB,iBAAiBxhC,GAAI8nG,GAClErmE,EAAK+0B,YAAYm/B,EAAUmS,IAAWrmE,EAAK8wB,aAAaq1C,EAAcxoE,MAAO,EAAAkyB,WAAWuC,SACzFpyB,EAAK42D,UAAU1C,EAAUmS,IAAWrmE,EAAK8wB,aAAaq1C,EAAcxoE,MAAO,EAAAkyB,WAAWzE,SACtFi7C,EAAS5sC,YACXz5B,EAAK8wB,aAAaq1C,EAAcxoE,MAAO,EAAAkyB,WAAWkB,UAC7C7yD,KAAK8vF,oBAAoBxiF,IAAI0oF,KAAWA,EAAWh2F,KAAKi3F,WAAWjB,KAE1Ev8E,EAAKzM,KACHrN,EAAOq4F,UAAUiQ,EAAcxoE,MAAOu2D,IAK1Ch2F,KAAKi4F,oBAAoB76D,EAAU3jB,GAG9BqoB,EAAKjJ,GAAG,OACX74B,KAAKk4F,oBAAoBp2D,EAAMroB,GAC/BzZ,KAAK81F,mBAAmBh0D,EAAMroB,IAEhCqoB,EAAKy6D,mBACL,IAAIxtF,EAAa+yB,EAAK/yB,WACtB/O,KAAKu1E,YAAcqgB,EAGnB,IAAIzsD,EAAOxpC,EAAOksC,MAAM/J,EAAKqwB,kBAAmB14C,EAAM1K,EAAWq1C,gBAQjE,OAPApkD,KAAKupD,YAAcx6C,EACfA,EAAWwsD,WACTqsC,IACFz+D,EAAOnpC,KAAKu5F,YAAYpwD,GACxBnpC,KAAKupD,YAAc,EAAAh5B,KAAKG,MAGrByY,EAIT,iBAAiBnM,GAQf,IAAIwD,EAAaxD,EAASwD,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAI4nE,EAAoBprE,EAASxjB,UAC7B6uF,EAAerrE,EAAS9N,aACxBo5E,EAAyBF,EAAkB1mE,eAC3C6mE,EAAgCvrE,EAAS/6B,UAAUoa,iBAAiBvN,WACpEC,EAAaq5F,EAAkBr5F,WAC/B0yB,EAAW2mE,EAAkB3mE,SAC7ByE,EAAalJ,EAASnE,GAAG,EAAAx2B,YAAYy6B,UAGrC0rE,EAAeJ,EAAkB7jD,mBACjCkkD,EAAcD,EACdE,EAAeJ,EAAuB57F,OACtCi8F,EAAcD,EACdxiE,MACAuiE,IACAE,GAEJ,IAAIC,EAAc99F,OAAO69F,EAAcF,GAEnCI,EAAoB,IAAIjhG,MAAqB6gG,GAC7CK,EAAe,EAGfnpG,EAASK,KAAKL,OACdumC,IACF2iE,EAAkB,GAAKlpG,EAAOk2E,UAAU,EAAG71E,KAAKguB,QAAQioD,gBACxD6yB,EAAe,GAIjB,IAAK,IAAIzoG,EAAI,EAAGA,EAAImoG,IAAgBnoG,IAAKyoG,EACvCD,EAAkBC,GAAgBnpG,EAAOk2E,UAAUizB,EAAcR,EAAuBjoG,GAAG+jD,gBAE7Ft5C,OAAOg+F,GAAgBL,GAGvB,IAAIM,EAAsB,IAAI,EAAAzqE,UAAUt+B,KAAKu9B,QAAS+qE,EAAwBv5F,EAAY0yB,GAC1FsnE,EAAoBxkD,mBAAqBmkD,EACzCK,EAAoBzkD,eAAiB8jD,EAAkB9jD,gBACvD9jB,EAAa,IAAI,EAAArQ,SACf6M,EAASp8B,KAAO,cAChBo8B,EAAS/6B,UACT8mG,EACA/rE,EAASiD,0BAEAvyB,IAAIsvB,EAAS9oB,MAAQ,EAAA7R,YAAYm4F,WAAa,EAAAn4F,YAAYuqF,UACrE5vD,EAASwD,WAAaA,EAItB,IAAIo1D,EAAe51F,KAAKu1E,YACpBzzC,EAAOtB,EAAWsB,KACtB9hC,KAAKu1E,YAAczzC,EAGnB,IAAI4K,EAAWk8D,EAAc,EACzBn1F,EAAQ,IAAI7L,MAAc8kC,GAC1Bs8D,EAAM,KAAOJ,EAAY38F,WAC7B,IAAK,IAAI5L,EAAI,EAAGA,EAAIqsC,IAAYrsC,EAAG,CACjC,IAAIsV,EAAQtV,EAAE4L,WAAa+8F,EAC3Bv1F,EAAMpT,GAAKsV,EAEb,IAAI8D,EAAO9Z,EAAOksC,MAAMp4B,EAAM,GAAI,CAChC9T,EAAOksC,MAAM,aAAc,CACzBlsC,EAAOspG,OAAOx1F,EAAO,aAEnB+0F,EACI7oG,EAAOq1E,OACL,EAAAjuC,SAASqmD,OACTztF,EAAOktF,WAAW,EAAAj3D,aAAa8kC,gBAAiB,EAAAt0B,WAAWt/B,KAC3DnH,EAAOyD,IAAIolG,IAEb7oG,EAAOktF,WAAW,EAAAj3D,aAAa8kC,gBAAiB,EAAAt0B,WAAWt/B,QAGnEnH,EAAO69D,gBAET,IAAK,IAAIn9D,EAAI,EAAGA,EAAIuoG,IAAevoG,IAAKyoG,EAAc,CACpD,IAGI9S,EAHAvmF,EAAO64F,EAAuBE,EAAenoG,GAC7CwR,EAAc02F,EAA8BC,EAAenoG,GAC3DqP,EAAcmC,EAAYnC,YAE1BA,EACFsmF,EAAWr2F,EAAOq4F,UAAU8Q,EAC1B9oG,KAAKq0E,kBACH3kE,EACAD,EAAI,KAKRzP,KAAKymB,MACH,EAAArb,eAAe89F,4CACfr3F,EAAYnG,OAEdsqF,EAAWr2F,EAAO69D,eAEpB/jD,EAAO9Z,EAAOksC,MAAMp4B,EAAMpT,EAAI,GAAI,CAChCoZ,EACAu8E,IAEF6S,EAAkBC,GAAgBnpG,EAAOk2E,UAAUizB,EAAcr5F,EAAK20C,gBAExEt5C,OAAOg+F,GAAgBH,GAEvB,IAAIt9D,EAAyB,CAAE5xB,GAC3BgtF,EAAU9mG,EAAOa,KAAK6nG,EAAcQ,EAAmB95F,EAAWq1C,gBAClEr1C,GAAc,EAAAwhB,KAAKG,KACrB1wB,KAAKykG,6BAA6B3iE,EAAM2kE,EAAS13F,EAAYs8B,IAE7DA,EAAMr+B,KAAKy5F,GACXzmG,KAAKk4F,oBAAoBp2D,EAAMuJ,IAEjCvJ,EAAKy6D,mBACLv8F,KAAKu1E,YAAcqgB,EAEnB,IAAI7D,EAAUpyF,EAAOmtF,YACnBtsD,EAAWtR,aACX65E,EAAoB/W,aACpB+W,EAAoB9W,cACpB,EAAA/tC,mBAAmB1jB,EAAWJ,kBAC9BzgC,EAAOquF,QAAQ3iD,EAAOt8B,EAAWq1C,iBAGnC,OADA5jB,EAAW0xD,SAASvyF,EAAQoyF,GACrBvxD,EAIT,+BACE,IAAKxgC,KAAK6vF,uBAAwB,CAChC,IAAIlwF,EAASK,KAAKL,OAClBK,KAAK6vF,uBAAyBlwF,EAAO2uF,UAAU,EAAA14D,aAAa8kC,gBAAiB,EAAAt0B,WAAWt/B,KAAK,EAAMnH,EAAOyD,IAAI,IAK5GzD,EAAOmtF,YAAY,EAAAl3D,aAAa+kC,mBAAoB,EAAAv0B,WAAWt/B,IAAK,EAAAs/B,WAAWI,KAAM,KACnF7mC,EAAOmyF,WAAW,EAAAl8D,aAAa8kC,gBAAiB/6D,EAAOk2E,UAAU,EAAG,EAAAzvC,WAAWt/B,OAEjFnH,EAAOwyF,kBAAkB,EAAAv8D,aAAa+kC,mBAAoBi0B,EAAYj0B,qBAQ5E,WAAWxxB,GACT,IAAIvS,EAAiB52B,KAAKu9B,QAAQ3G,eAElC,OADA52B,KAAK+qF,gBAAgBn0D,GACd52B,KAAKL,OAAOa,KAAKo2B,EAAe1H,aAAc,CAAEia,GAAQnpC,KAAKguB,QAAQioD,gBAI9E,YAAY9sC,GACV,IAAItS,EAAkB72B,KAAKu9B,QAAQ1G,gBAEnC,OADA72B,KAAK+qF,gBAAgBl0D,GACd72B,KAAKL,OAAOa,KAAKq2B,EAAgB3H,aAAc,CAAEia,GAAQ,EAAA/C,WAAWI,MAI7E,YAEE2iE,EAEAC,EAEAnD,GAAwB,GAExB,IAAItmG,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YACZU,EAAiBj2E,KAAKguB,QAAQioD,eAClC,GAAIgwB,EAAiB,CAGnB,IAAIzb,EAAO1oD,EAAK6wB,aAAa3yD,KAAKguB,QAAQyC,UAAW,EAAA41E,eAAe+C,IAChE1/D,EAAM/pC,EAAOksC,MAAM,KAAM,CAC3BlsC,EAAOq4F,UAAUxN,EAAK/qD,MAAO0pE,GAC7BnpG,KAAKu5F,YAAY6P,GACjBzpG,EAAOk2E,UAAU2U,EAAK/qD,MAAOw2C,IAC5BA,GAEH,OADAn0C,EAAKoxB,cAAcs3B,GACZ9gD,EACF,CAKL,IAAIjZ,EAAYzwB,KAAKguB,QAAQyC,UACzB+kD,EAAQ1zC,EAAK6wB,aAAaliC,EAAW,EAAA41E,eAAe+C,IACpD3zB,EAAQ3zC,EAAK6wB,aAAaliC,GAC1BiZ,EAAM/pC,EAAOksC,MAAM,KAAM,CAC3BlsC,EAAOosF,GACLpsF,EAAOq1E,OAAOiB,GAAkB,EAAA7vC,WAAWr/B,IAAM,EAAAggC,SAASyvB,MAAQ,EAAAzvB,SAASwvB,MACzE52D,EAAOi2E,UAAUJ,EAAM/1C,MAAO0pE,GAC9BxpG,EAAOi2E,UAAUH,EAAMh2C,MAAO2pE,IAEhCzpG,EAAOksC,MAAM,KAAM,CACjBlsC,EAAOq4F,UAAUxiB,EAAM/1C,MACrBz/B,KAAKi3F,WAAWt3F,EAAOk2E,UAAUL,EAAM/1C,MAAOw2C,KAEhDj2E,KAAKu5F,YAAY55F,EAAOk2E,UAAUJ,EAAMh2C,MAAOw2C,OAGnDt2E,EAAOk2E,UAAUL,EAAM/1C,MAAOw2C,IAC7BA,GAGH,OAFAn0C,EAAKoxB,cAAcuiB,GACnB3zC,EAAKoxB,cAAcsiB,GACZ9rC,GAKX,gBAEEP,EAEA15B,EAEAqyB,EAAa9hC,KAAKu1E,aAmBlB,IAAI/zC,EAAQM,EAAKunE,oBAAoB55F,GAErC,OADIqyB,EAAK42D,UAAUvvD,EAAM15B,IAAOqyB,EAAK8wB,aAAapxB,EAAM/B,MAAO,EAAAkyB,WAAWzE,SACnEltD,KAAKL,OAAOi2E,UAAUp0C,EAAM/B,MAAO0J,GAO5C,mBAEEA,EAEArH,GAKA,OAAQ,EAAA0J,gBAAgBrC,IACtB,KAAK,EAAA7C,aAAagQ,SAAU,CAC1B,IAAI7W,EAAQ,EAAA01B,iBAAiBhsB,GAC7B,GAAIrH,EAAKizB,eAAet1B,EAAO,EAAAkyB,WAAWqD,cAExC,OADAlzB,EAAK0wB,eAAe/yB,EAAO,EAAAkyB,WAAWqD,cAC/Bv1B,EAET,MAEF,KAAK,EAAA6G,aAAa8X,SAChB,GAAI,EAAA6W,WAAW9rB,GAAO,CAIpB,IAAI1J,EAAQ,EAAAy1B,iBAAiB/rB,GAC7B,GAAIrH,EAAKizB,eAAet1B,EAAO,EAAAkyB,WAAWqD,cAExC,OADAlzB,EAAK0wB,eAAe/yB,EAAO,EAAAkyB,WAAWqD,cAC/Bv1B,EAGX,MAEF,KAAK,EAAA6G,aAAamX,MAChB,GAA2B,OAAvB,EAAAoc,aAAa1wB,GAAgB,CAC/B,IAAI0R,EAAQ,EAAAif,mBAAmB3wB,GAC/B,GAAI0R,EACF,OAAO76C,KAAKihG,mBAAmB,EAAAjnC,cAAc7wB,EAAM0R,EAAQ,GAAI/Y,IAMvE,OAAQ,EAIV,iBAEEqH,EAEA15B,EAEA4sF,EAEAD,GAIA,OADYp8F,KAAKihG,mBAAmB93D,EAAMkzD,GAGtCr8F,KAAK2lG,gBAAgBx8D,EAAM15B,EAAM2sF,GAEjCp8F,KAAK2lG,gBAAgB3lG,KAAKi3F,WAAW9tD,GAAO15B,EAAM2sF,GAIxD,oBAEEt6D,EAEAuJ,EAMA6mD,GAAiB,GAIjB,IAAIpgC,EAAehwB,EAAKgwB,aACxB,GAAIA,EAAc,CAChB,IAAInyD,EAASK,KAAKL,OAElB,IAAK,IAAIy3B,EAAUC,WAAWy6B,GAAezxD,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAClF,IAAImhC,EAAQriB,UAAUiY,EAAQ/2B,IAC9B,GAAImhC,EAAM3I,GAAG,EAAAx2B,YAAYo8B,QAAS,CAChC,IAAI8C,EAAaC,EAAM/B,MACnBqC,EAAKizB,eAAexzB,EAAY,EAAAowB,WAAWqD,gBACzCk9B,GAAUpwD,EAAK0wB,eAAejxB,EAAY,EAAAowB,WAAWqD,cACzD3pB,EAAMr+B,KACJhN,KAAKu5F,YACH55F,EAAOk2E,UAAUt0C,EAAYC,EAAM/xB,KAAK20C,sBAUtD,6BAEEtiB,EAEAw3D,EAEAx/E,EAEAuxB,EAAgC,KAEhC6mD,GAAiB,GAEZ7mD,IAAOA,EAAQ,IAAIzjC,OACxByjC,EAAMr+B,KACJhN,KAAKL,OAAO2rC,OAEd,IAAIg+D,EAAej+D,EAAM3+B,OACzB1M,KAAKk4F,oBAAoBp2D,EAAMuJ,EAAO6mD,GACtC,IAAIvyF,EAASK,KAAKL,OAClB,GAAI0rC,EAAM3+B,OAAS48F,EAAc,CAC/B,IAAI9yB,EAAa18D,EAAUsqC,eACvBomC,EAAO1oD,EAAK6wB,aAAa74C,GACxBgoB,EAAK+0B,YAAYyiC,EAAWx/E,IAAYgoB,EAAK8wB,aAAa43B,EAAK/qD,MAAO,EAAAkyB,WAAWuC,SAClFpyB,EAAK42D,UAAUY,EAAWx/E,IAAYgoB,EAAK8wB,aAAa43B,EAAK/qD,MAAO,EAAAkyB,WAAWzE,SACnF7hB,EAAMi+D,EAAe,GAAK3pG,EAAOq4F,UAAUxN,EAAK/qD,MAAO65D,GACvDjuD,EAAMr+B,KACJrN,EAAOk2E,UAAU2U,EAAK/qD,MAAO+2C,IAE/B,IAAI9sC,EAAM/pC,EAAOquF,QAAQ3iD,EAAOmrC,GAEhC,OADA10C,EAAKoxB,cAAcs3B,GACZ9gD,EACF,OAAI2B,EAAM3+B,OAAS,GACxB2+B,EAAMi+D,EAAe,GAAKhQ,EACnB35F,EAAOquF,QAAQ3iD,EAAOvxB,EAAUsqC,iBAElCk1C,EAIT,mBAEEx3D,EAEAuJ,GAIA,GAAIvJ,EAAKgsB,SAAU,CAGjB,IACI79B,EADAyN,EAAUoE,EAEd,KAAO7R,EAASyN,EAAQzN,QAAQyN,EAAUzN,EAC1C,IAAI6hC,EAAep0B,EAAQo0B,aAC3B,GAAIA,EAEF,IAAK,IAAI16B,EAAUC,WAAWy6B,GAAezxD,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAClF,IAAImhC,EAAQriB,UAAUiY,EAAQ/2B,IAC9BL,KAAKupG,uBAAuB/nE,EAAOM,EAAMuJ,QAGxC,CACL,IAAIlL,EAAgB2B,EAAKiwB,eAAe5xB,cACxC,IAAK,IAAI9/B,EAAI,EAAG8b,EAAIgkB,EAAczzB,OAAQrM,EAAI8b,IAAK9b,EAAG,CACpD,IAAImhC,EAAQriB,UAAUghB,EAAc9/B,IACpCL,KAAKupG,uBAAuB/nE,EAAOM,EAAMuJ,KAMvC,uBAEN7J,EAEAM,EAEAuJ,GAEA,IAAI9J,EAAaC,EAAM/B,MACnB9/B,EAASK,KAAKL,QACb4hC,GAAcO,EAAKizB,eAAexzB,EAAY,EAAAowB,WAAWqD,gBAC5DlzB,EAAK0wB,eAAejxB,EAAY,EAAAowB,WAAWqD,cAC3C3pB,EAAMr+B,KACJhN,KAAKu5F,YACH55F,EAAOk2E,UAAUt0C,EAAYC,EAAM/xB,KAAK20C,mBAShD,eACEhnB,EACAkM,EACAsmB,EACAg4C,GAA2B,EAE3B4B,GAAwB,GAKxB,GAHIpsE,EAASvE,GAAG,EAAAx2B,YAAY6hC,UAC1BlkC,KAAKkwF,aAAav/D,IAAIyM,GAEpBA,EAAS/H,aAAa,EAAAxJ,eAAe7O,QAAS,CAChDlS,QAAQsyB,EAASvE,GAAG,EAAAx2B,YAAYm4F,aAChC,IAAIzK,EAAc/vF,KAAK+vF,YACvB,IAAIA,EAAYtiF,SAAS2vB,GAKlB,CAEL,IAAI+L,EACJ,GAFA4mD,EAAY/iF,KAAKowB,GAEbA,EAASvE,GAAG,EAAAx2B,YAAYy6B,UAAW,CACrC,IAAI2sE,EAAc3+F,OAAOw+B,GACzBx+B,OAAO2+F,EAAY/8F,QACnBy8B,EAAOnpC,KAAKynG,eAAerqE,EAAUqsE,EAAYn3C,MAAM,GAAIm3C,EAAY,GAAI7B,QAE3Ez+D,EAAOnpC,KAAKynG,eAAerqE,EAAUkM,EAAU,EAAGs+D,GAEpD,IAAI74F,EAAa/O,KAAKupD,YAStB,OARIx6C,EAAWwsD,YACRiuC,EAGHxpG,KAAK8vF,oBAAoBn/D,IAAIwY,GAF7BA,EAAOnpC,KAAK2lG,gBAAgBx8D,EAAMp6B,IAKtCghF,EAAYr9B,MACLvpB,EAvBPnpC,KAAKo6B,QACH,EAAAhvB,eAAes8F,yCACf93C,EAAWlkD,MAAO0xB,EAASlO,cAwBjC,IAAIspD,EAAclvC,EAAWA,EAAS58B,OAAS,EAC3CwR,EAAes6D,EAEfiwB,EADerrE,EAAS5jB,UAAU+qC,mBAElCmkD,EAAetrE,EAAS5jB,UAAUkoB,eAAeh1B,OACjDi8F,EAAcD,EACdtrE,EAASvE,GAAG,EAAAx2B,YAAYy6B,cACxB2rE,IACAE,IACAzqF,GAEJpT,OAAO0tE,GAAeiwB,GAEtB,IAAI9oG,EAASK,KAAKL,OAClB,IAAKK,KAAK+qF,gBAAgB3tD,GAAW,OAAOz9B,EAAO69D,cACnD,IAAIzuD,EAAaquB,EAAS5jB,UAAUzK,WAChC26F,EAAetsE,EAASvE,GAAG,EAAAx2B,YAAY+zF,eAG3C,GAAI5d,EAAcmwB,EAAa,CACxBr/D,KACHA,EAAW,IAAI1hC,MAAM+gG,IACZj8F,OAAS,GAEpB,IAAIg1B,EAAiBtE,EAAS5jB,UAAUkoB,eACpCplB,EAAiB8gB,EAASn7B,UAAUoa,iBAAiBvN,WACzDhE,OAAOwR,EAAe5P,QAAUg1B,EAAeh1B,QAC/C,IAAIi9F,GAA0B,EAC9B,IAAK,IAAItpG,EAAI6d,EAAc7d,EAAIqoG,IAAgBroG,EAAG,CAChD,IAAIqP,EAAc4M,EAAejc,GAAGqP,YACpC,GAAIA,EAAa,CACf,GAAIA,EAAYk6F,gBAAiB,CAC/BtgE,EAASt8B,KAAKhN,KAAKq0E,kBACjB3kE,EACAgyB,EAAerhC,GAAE,IAGnB,SAEF,IAAIm3B,EAAWx3B,KAAKqvB,SAAS48B,iBAAiBv8C,EAAa0tB,EAAS0E,KAAMJ,EAAerhC,GAAI,EAAA0lD,WAAWkD,SACxG,GAAIzxB,GACEA,EAASppB,MAAQ,EAAAwd,YAAY7O,OAAQ,CACvC,IAAI+b,EAAiBtB,EACrB,GAAIx3B,KAAKo1F,cAAct8D,GAAS,CAC1BA,EAAOD,GAAG,EAAAx2B,YAAY+8B,SACxBkK,EAASt8B,KACPhN,KAAK82F,sBAAsBh+D,EAAQ4I,EAAerhC,GAAI,IAGxDipC,EAASt8B,KACPhN,KAAKg5E,kBACHr5E,EAAOktF,WAAW/zD,EAAO5J,aAAc4J,EAAOrpB,KAAK20C,gBACnDtrB,EAAOrpB,KAAMiyB,EAAerhC,IAAI,GAAO,EAAOqP,IAIpD,WAKR45B,EAASt8B,KAAKhN,KAAKqrF,SAAS3pD,EAAerhC,KAC3CspG,GAA0B,EAE5B,IAAKA,IACED,EAAc,CACjB,IAAI1sE,EAAWI,EAEf,GADAA,EAAWp9B,KAAK20F,iBAAiBv3D,IAC5Bp9B,KAAK+qF,gBAAgB3tD,GAAW,OAAOz9B,EAAO69D,cACnDpgC,EAAS0E,KAAK5tB,MAAQ8oB,EAAS8E,KAAK5tB,MACpC,IAAI0xF,EAAmB72F,EAAWq1C,eAC9Bjb,EAAOxpC,EAAOa,KAAK48B,EAASlO,aAAcoa,EAAUs8D,GAaxD,OAZA5lG,KAAKupD,YAAcx6C,EACfA,EAAWwsD,YACTqsC,GACFz+D,EAAOnpC,KAAKu5F,YAAYpwD,GACxBnpC,KAAKupD,YAAc,EAAAh5B,KAAKG,MACd84E,EAGVxpG,KAAK8vF,oBAAoBn/D,IAAIwY,GAF7BA,EAAOnpC,KAAK2lG,gBAAgBx8D,EAAMp6B,IAKtC/O,KAAK40F,+BACEj1F,EAAOksC,MAAM,KAAM,CACxBlsC,EAAOmyF,WAAW,EAAAl8D,aAAa8kC,gBAAiB/6D,EAAOyD,IAAI8a,IAC3DirB,GACCnpC,KAAKupD,YAAYnF,iBAQ1B,IAAIjb,EAAOxpC,EAAOa,KAAK48B,EAASlO,aAAcoa,EAAUv6B,EAAWq1C,gBAUnE,OATApkD,KAAKupD,YAAcx6C,EACfA,EAAWwsD,YACTqsC,GACFz+D,EAAOnpC,KAAKu5F,YAAYpwD,GACxBnpC,KAAKupD,YAAc,EAAAh5B,KAAKG,MACd84E,IACVrgE,EAAOnpC,KAAK2lG,gBAAgBx8D,EAAMp6B,KAG/Bo6B,EAIT,oBACE3vB,EACAmtF,EACAW,EACA13C,EACA23C,EAAyB,EACzBK,GAA2B,GAE3B,IAAI1pF,EAAeopF,EAAoB56F,OAEvC,IAAK1M,KAAKwnG,mBACRhuF,EACA0E,EACW,GAAXqpF,EACA33C,GAEA,OAAO5vD,KAAKL,OAAO69D,cAGrB,IAAImqC,EAAuBJ,EAAUrpF,EAAe,EAAIA,EACpDorB,EAAW,IAAI1hC,MAAqB+/F,GACpCloE,EAAQ,EACR8nE,IACFj+D,EAAS,GAAKi+D,EACd9nE,EAAQ,GAEV,IAAIiC,EAAiBloB,EAAUkoB,eAC/B,IAAK,IAAIrhC,EAAI,EAAGA,EAAI6d,IAAgB7d,IAAKo/B,EACvC6J,EAAS7J,GAASz/B,KAAKq0E,kBAAkBizB,EAAoBjnG,GAAIqhC,EAAerhC,GAAE,GAKpF,OADAyK,OAAO20B,GAASkoE,GACT3nG,KAAK6pG,iBAAiBrwF,EAAWmtF,EAAUr9D,EAAUs+D,GAI9D,iBACEpuF,EACAmtF,EACAr9D,EAAmC,KACnCs+D,GAA2B,GAE3B,IAAIpvB,EAAclvC,EAAWA,EAAS58B,OAAS,EAC3CwR,EAAes6D,EAEfiwB,EADejvF,EAAU+qC,mBAEzBmkD,EAAelvF,EAAUkoB,eAAeh1B,OACxCi8F,EAAcD,EACdlvF,EAAUioB,aACVgnE,IACAE,IACAzqF,GAEJpT,OAAO0tE,GAAeiwB,GAEtB,IAAI9oG,EAASK,KAAKL,OAGlB,GAAI64E,EAAcmwB,EAAa,CACxBr/D,KACHA,EAAW,IAAI1hC,MAAM+gG,IACZj8F,OAAS,GAEpB,IAAIg1B,EAAiBloB,EAAUkoB,eAC/B,IAAK,IAAIrhC,EAAI6d,EAAc7d,EAAIqoG,IAAgBroG,EAC7CipC,EAASt8B,KAAKhN,KAAKqrF,SAAS3pD,EAAerhC,KAI/C,IAAI0O,EAAayK,EAAUzK,WAC3B/O,KAAK40F,+BACL,IAAIzrD,EAAOxpC,EAAOksC,MAAM,KAAM,CAC5BlsC,EAAOmyF,WAAW,EAAAl8D,aAAa8kC,gBAC7B/6D,EAAOyD,IAAI8a,IAEbve,EAAOytC,cACLptC,KAAKguB,QAAQgD,SACTrxB,EAAO20E,MAAM,EAAAxtC,QAAQ07D,QAASmE,GAC9BA,EACJr9D,EACA9vB,EAAUw4E,aACVx4E,EAAUy4E,gBAEXljF,EAAWq1C,gBAUd,OATApkD,KAAKupD,YAAcx6C,EACfA,EAAWwsD,YACTqsC,GACFz+D,EAAOnpC,KAAKu5F,YAAYpwD,GACxBnpC,KAAKupD,YAAc,EAAAh5B,KAAKG,MAExByY,EAAOnpC,KAAK2lG,gBAAgBx8D,EAAMp6B,IAG/Bo6B,EAGD,uBACNl4B,EACAqnE,EACAomB,GAEA,IAAI1sF,EAAcf,EAAWe,YACzB83F,EAAiB93F,EAAYtF,OAC7B0+E,EAAQ,IAAIxjF,MAAqBkiG,KACrC,IAAK,IAAIzpG,EAAI,EAAGA,EAAIypG,IAAkBzpG,EACpC+qF,EAAM/qF,GAAKL,KAAKq0E,kBAAkBriE,EAAY3R,GAAI,EAAAkwB,KAAKG,KACrD,GAIJ,OADA06D,EAAM0e,GAAkB9pG,KAAKq0E,kBAAkBriE,EAAY83F,GAAiBxxB,EAAgBomB,GACrF1+F,KAAKL,OAAOquF,QAAQ5C,EAAOprF,KAAKupD,YAAYnF,gBAG7C,+BACNnzC,EACAqnE,EACAomB,GAEA,IAAI/+F,EAASK,KAAKL,OACd4sD,EAAmBt7C,EAAWA,WAC9BwyC,EAAazjD,KAAKqvB,SAAS25B,kBAAkBuD,EAAkBvsD,KAAKu1E,aACxE,GAAI9xB,EAAY,CACd,GAAIA,EAAW5qB,GAAG,KAAsB,CACtC,IAAIH,EAAiB+qB,EAAW/qB,eAChC,GAAIA,EAAgB,CAClB,IAAIqK,EAAc/iC,KAAKu1E,YAAY18C,GAAG,OAClCuzB,EAAa1zB,EAAesK,eAAe,EAAArX,aAAaK,YAAa+W,GACzE,GAAIqpB,EAAY,CACd,IAAIm7C,EAAUvnG,KAAKq0E,kBAAkB9nB,EAAkB7zB,EAAejpB,KAAI,GAS1E,OANKszB,GAAe/iC,KAAKguB,QAAQmhE,UAC/BnvF,KAAKmvF,SACH,EAAA/jF,eAAek6F,2CACfr0F,EAAWvF,OAGR1L,KAAKgrF,kBAAkB5+B,EAAY,CACxCn7C,EAAWuB,mBACVvB,EAAYs2F,EAAS7I,KAI9B1+F,KAAKymB,MACH,EAAArb,eAAe68C,qCACfh3C,EAAWA,WAAWvF,MAAO+3C,EAAWx3C,YAG5C,OAAOtM,EAAO69D,cAGR,0BACNvsD,EACA84F,EACArL,GAEA,IAAI7sF,EAAcZ,EAAWY,YAAYm4F,QACzCl/F,QAAQ+G,EAAYiE,gBACpB,IAUIsnB,EAVA0E,EAAO9hC,KAAKu1E,YACZ5sB,EAAiB7mB,EAAK6mB,eACtB1mD,EAAY,IAAI,EAAAmuB,kBAClBve,EAAYjR,KAAK4L,KAAKE,OAClBmF,EAAYjR,KAAK4L,KACjB,cAAgBm8C,EAAejoB,mBAAmBz0B,WACtD08C,EACA92C,EACA,EAAAga,eAAepP,MAGbwjB,EAA0B,EAAA8mB,QAAQjlB,EAAK7B,yBAI3C,GAAI8pE,EAAqB,CACvB,IAAIx6C,EAAgBttD,EAAUoa,iBAC1BC,EAAiBizC,EAAczgD,WAC/Bm7F,EAAuB3tF,EAAe5P,OAGtCg1B,EAAiBqoE,EAAoBroE,eACrC0jB,EAAgB1jB,EAAeh1B,OACnC,GAAIu9F,EAAuB7kD,EAKzB,OAJAplD,KAAKymB,MACH,EAAArb,eAAe2wB,+BACf9qB,EAAWvF,MAAO05C,EAAcn5C,WAAYg+F,EAAqBh+F,YAE5DjM,KAAKL,OAAO69D,cAIrB,IAAIlZ,EAAiB,IAAI18C,MAAcqiG,GACvC,IAAK,IAAI5pG,EAAI,EAAGA,EAAI4pG,IAAwB5pG,EAAG,CAC7C,IAAIonD,EAAgBnrC,EAAejc,GAEnC,GADAikD,EAAejkD,GAAKonD,EAAc7mD,KAAK4L,MAClC,EAAAo7C,cAAcH,EAAch4C,MAAO,CACtC,IAAI48C,EAAersD,KAAKqvB,SAASi4B,YAC/BG,EAAch4C,KACdk5C,EAAe14B,OACfgQ,GAEF,IAAKosB,EAAc,OAAOrsD,KAAKL,OAAO69D,cACtC,IAAK97B,EAAerhC,GAAGutF,uBAAuBvhC,GAK5C,OAJArsD,KAAKymB,MACH,EAAArb,eAAegmD,mCACf3J,EAAc/7C,MAAOg2B,EAAerhC,GAAG4L,WAAYogD,EAAapgD,YAE3DjM,KAAKL,OAAO69D,eAOzB,IAAIzuD,EAAag7F,EAAoBh7F,WACrC,IAAK,EAAA64C,cAAc2H,EAAcxgD,YAAa,CAC5C,IAAIs9C,EAAersD,KAAKqvB,SAASi4B,YAC/BiI,EAAcxgD,WACd45C,EAAe14B,OACfgQ,GAEF,IAAKosB,EAAc,OAAOrsD,KAAKL,OAAO69D,cACtC,GACEzuD,GAAc,EAAAwhB,KAAKG,KACf27B,GAAgB,EAAA97B,KAAKG,MACpB27B,EAAauhC,uBAAuB7+E,GAMzC,OAJA/O,KAAKymB,MACH,EAAArb,eAAegmD,mCACf7B,EAAcxgD,WAAWrD,MAAO2gD,EAAapgD,WAAY8C,EAAW9C,YAE/DjM,KAAKL,OAAO69D,cAKvB,IAAI/7B,EAAWsoE,EAAoBtoE,SAC/ByoE,EAAe36C,EAAcvgD,iBACjC,GAAIk7F,EAAc,CAChB,IAAKzoE,EAKH,OAJAzhC,KAAKymB,MACH,EAAArb,eAAe6iD,+CACfi8C,EAAax+F,OAER1L,KAAKL,OAAO69D,cAErB,IAAInR,EAAersD,KAAKqvB,SAASi4B,YAC/B4iD,EACAvhD,EAAe14B,OACfgQ,GAEF,IAAKosB,EAAc,OAAOrsD,KAAKL,OAAO69D,cACtC,IAAK/7B,EAASmsD,uBAAuBvhC,GAKnC,OAJArsD,KAAKymB,MACH,EAAArb,eAAegmD,mCACf84C,EAAax+F,MAAO+1B,EAASx1B,WAAYogD,EAAapgD,YAEjDjM,KAAKL,OAAO69D,cAIvB,IAAIhkD,EAAY,IAAI,EAAA8kB,UAAUt+B,KAAKu9B,QAASmE,EAAgB3yB,EAAY0yB,GASxE,GARAjoB,EAAU+qC,mBAAqBa,EAC/B5rC,EAAU8qC,eAAiBA,EAC3BlnB,EAAW,IAAI,EAAAjN,SACbluB,EAAUrB,KACVqB,EACAuX,EACAymB,IAEGjgC,KAAK+qF,gBAAgB3tD,GAAW,OAAOp9B,KAAKL,OAAO69D,cACxDx9D,KAAKupD,YAAcwgD,EAAoBt6F,SAGlC,CAEL,KADA2tB,EAAWp9B,KAAKqvB,SAASsI,gBAAgB11B,EAAW,KAAMg+B,IAC3C,OAAOjgC,KAAKL,OAAO69D,cAClCx9D,KAAK+qF,gBAAgB3tD,GACrBp9B,KAAKupD,YAAcnsB,EAAS5jB,UAAU/J,KAGxC,IAAIgwB,EAAQz/B,KAAKmqG,yBAAyB/sE,GAC1C,OAAOqC,EAAQ,EACXz/B,KAAKL,OAAO69D,cACZx9D,KAAKL,OAAOyD,IAAIq8B,GAId,4BAA4BxuB,GAClC,IAAIoG,EAAepG,EAAWvF,MAAMM,OAAOqL,aACvC8W,EAAcnuB,KAAKu9B,QAAQpP,YAC/BrjB,OAAOqjB,EAAY7gB,IAAI+J,IACHvM,OAAOqjB,EAAYjtB,IAAImW,IACxBwhB,GAAG,EAAAx2B,YAAYuqF,WAChC5sF,KAAK46F,kBAAkBvjF,EAAcpG,GAIjC,4BACNA,EACAqnE,EACAomB,GAEA,IAAI/+F,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YACZ5sB,EAAiB7mB,EAAK6mB,eAG1B,OAAQ13C,EAAW7C,MACjB,KAAK,EAAAP,SAAS2F,KAAM,CAClB,IAAIwa,EAAUhuB,KAAKguB,QACnB,GAAIsqD,EAAez/C,GAAG,KAAsB,CAC1C,IAAIH,EAAiB4/C,EAAe5/C,eACpC,GAAIA,EAEF,OADA14B,KAAKupD,YAAc7wB,EAAejpB,KAAKm3C,aAChC54B,EAAQgD,SAAWrxB,EAAO0D,IAAI,GAAK1D,EAAOyD,IAAI,GAEvD,IAAI6/C,EAAqBq1B,EAAer1B,mBACxC,OAAIA,GACFjjD,KAAKupD,YAActG,EAAmBxzC,KAAKm3C,aACpCjnD,EAAOyD,IAAI,IAEbzD,EAAOyqG,WAOhB,OALApqG,KAAKupD,YAAcv7B,EAAQyC,UAC3BzwB,KAAKo6B,QACH,EAAAhvB,eAAei/F,sCACfp5F,EAAWvF,MAAO1L,KAAKupD,YAAYt9C,YAE9B+hB,EAAQgD,SACXrxB,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,GAEjB,KAAK,EAAAyK,SAASqH,KAEZ,OADAlV,KAAKupD,YAAc,EAAAh5B,KAAK3sB,KACjBjE,EAAOyD,IAAI,GAEpB,KAAK,EAAAyK,SAAS6E,MAEZ,OADA1S,KAAKupD,YAAc,EAAAh5B,KAAK3sB,KACjBjE,EAAOyD,IAAI,GAEpB,KAAK,EAAAyK,SAASmH,KACZ,GAAI2zC,EAAe9vB,GAAG,EAAAx2B,YAAYy6B,UAAW,CAC3C,IAAIixB,EAAYjjD,OAAOg3B,EAAKksB,YAAY,EAAAhrD,YAAYsC,QAChD2qB,EAASnlB,OAAO69C,EAAe14B,QACnCnlB,OAAOmlB,EAAO7hB,MAAQ,EAAAwd,YAAY7Z,OAClC,IAAI8tB,EAAuB5P,EACvBgmD,EAAiBj2E,KAAKguB,QAAQioD,eAClC,GAAIttB,EAAe9vB,GAAG,EAAAx2B,YAAY+P,eAC3B0vB,EAAKjJ,GAAG,IAAsB,CACjCiJ,EAAKp0B,IAAI,IAOT,IAAI29B,EAAyB,CAC3B1rC,EAAOosF,GACLpsF,EAAO20E,MAAM2B,GAAkB,EAAA7vC,WAAWr/B,IAAM,EAAA+/B,QAAQivB,OAAS,EAAAjvB,QAAQgvB,OACvEn2D,EAAOk2E,UAAU9nB,EAAUtuB,MAAOw2C,IAEpCt2E,EAAOq4F,UAAUjqC,EAAUtuB,MACzBz/B,KAAKi3F,WACHj3F,KAAK24F,eAAe94D,OAU5B,OALA7/B,KAAK44F,qCAAqC/4D,EAAewL,GACzDA,EAAMr+B,KACJrN,EAAOk2E,UAAU9nB,EAAUtuB,MAAOw2C,IAEpCj2E,KAAKupD,YAAcwE,EAAUt+C,KACtB9P,EAAOquF,QAAQ3iD,EAAO4qC,GAIjC,IAAIx0C,EAAW32B,OAAO69C,EAAenvC,UAAUioB,UAE/C,OADAzhC,KAAKupD,YAAc9nB,EACZ9hC,EAAOk2E,UAAU9nB,EAAUtuB,MAAOgC,EAAS2iB,gBAOpD,OALApkD,KAAKymB,MACH,EAAArb,eAAe6iD,+CACfh9C,EAAWvF,OAEb1L,KAAKupD,YAAcvpD,KAAKguB,QAAQyC,UACzB9wB,EAAO69D,cAEhB,KAAK,EAAA3vD,SAASiH,MAAO,CACnB,IAAIgtB,EAAO9hC,KAAKu1E,YACZ5sB,EAAiB7mB,EAAK6mB,eAU1B,GATIA,EAAe9vB,GAAG,EAAAx2B,YAAY+P,eAC3B0vB,EAAKjJ,GAAG,MAEX74B,KAAKymB,MACH,EAAArb,eAAek/F,iGACfr5F,EAAWvF,QAIbo2B,EAAKgsB,SAAU,CACjB,IAAIy8C,EAAazoE,EAAKksB,YAAY,EAAAhrD,YAAYsC,OAC9C,GAAIilG,EAAY,CACd,IACIjnE,EADkBx4B,OAAOy/F,EAAW96F,KAAKipB,gBAClB4K,KAC3B,GAAIA,EAEF,OADAtjC,KAAKupD,YAAcjmB,EAAK7zB,KACjB9P,EAAOk2E,UAAU00B,EAAW9qE,MAAO6D,EAAK7zB,KAAK20C,iBAI1D,GAAIuE,EAAe9vB,GAAG,EAAAx2B,YAAYy6B,UAAW,CAC3C,IAAI7M,EAASnlB,OAAO69C,EAAe14B,QACnCnlB,OAAOmlB,EAAO7hB,MAAQ,EAAAwd,YAAY7Z,OAClC,IACIy0F,EADuBv2E,EACWqT,KACtC,GAAIkjE,EAAmB,CACrB,IAAIgE,EAAYhE,EAAkB/2F,KAElC,OADAzP,KAAKupD,YAAcihD,EACZ7qG,EAAOk2E,UAAU,EAAG20B,EAAUpmD,iBAQzC,OALApkD,KAAKymB,MACH,EAAArb,eAAe+iD,iDACfl9C,EAAWvF,OAEb1L,KAAKupD,YAAcvpD,KAAKguB,QAAQyC,UACzB9wB,EAAO69D,eAIlBx9D,KAAKyqG,4BAA4Bx5F,GAGjC,IAAIw+E,EAAgBzvF,KAAKyvF,cACpBA,IAAeA,EAAgB9mC,GACpC,IAAIpkB,EAASvkC,KAAKqvB,SAAS66B,2BACzBj5C,EACA6wB,EACA2tD,GAEF,IAAKlrD,EAGH,OADIvkC,KAAKupD,aAAe,EAAAh5B,KAAKG,OAAM1wB,KAAKupD,YAAc,EAAAh5B,KAAKntB,KACpDzD,EAAO69D,cAGhB,OAAQj5B,EAAOn2B,MACb,KAAK,EAAAwd,YAAY8T,MAAO,CACtB,IAAI8B,EAAe+C,EACfmmE,EAAYlpE,EAAM/xB,KAEtB,GADA3E,OAAO4/F,GAAa,EAAAn6E,KAAKG,MACrB8Q,EAAM3I,GAAG,EAAAx2B,YAAY+8B,SACvB,OAAOp/B,KAAK82F,sBAAsBt1D,EAAO82C,EAAgBomB,GAE3D,IAAIn9D,EAAaC,EAAM/B,MAOvB,OANA30B,OAAOy2B,GAAc,GACjBmpE,EAAU7xE,GAAG,MAAuBiJ,EAAKgzB,YAAYvzB,EAAY,EAAAowB,WAAWzE,SAAS,KACvFw9C,EAAYA,EAAUxnD,iBAExBljD,KAAKupD,YAAcmhD,EAEfnmE,EAAOtU,QAAU6R,EAAKiwB,gBAExB/xD,KAAKymB,MACH,EAAArb,eAAeivB,gBACfppB,EAAWvF,OAEN/L,EAAO69D,eAET79D,EAAOk2E,UAAUt0C,EAAYmpE,EAAUtmD,gBAEhD,KAAK,EAAAx4B,YAAY7O,OAAQ,CACvB,IAAI+b,EAAiByL,EACrB,IAAKvkC,KAAKo1F,cAAct8D,GACtB,OAAOn5B,EAAO69D,cAEhB,IAAIrsB,EAAarY,EAAOrpB,KAExB,OADA3E,OAAOqmC,GAAc,EAAA5gB,KAAKG,MACtBoI,EAAOD,GAAG,EAAAx2B,YAAY+8B,SACjBp/B,KAAK82F,sBAAsBh+D,EAAQw/C,EAAgBomB,IAE5D1+F,KAAKupD,YAAcpY,EACZxxC,EAAOktF,WAAW/zD,EAAO5J,aAAciiB,EAAWiT,iBAE3D,KAAK,EAAAx4B,YAAY0T,UAAW,CAC1B,IAAIo1D,EAAuBnwD,EAC3B,OAAKA,EAAO1L,GAAG,EAAAx2B,YAAYuqF,WAQ3B5sF,KAAKupD,YAAc,EAAAh5B,KAAKntB,IACpBsxF,EAAU77D,GAAG,EAAAx2B,YAAY+8B,UAC3Bt0B,OAAsC,GAA/B4pF,EAAUx1D,mBACVv/B,EAAOyD,IAAIynB,QAAQ6pE,EAAUv1D,wBAE/Bx/B,EAAOktF,WAAW6H,EAAUxlE,aAAc,EAAAkX,WAAWt/B,OAZ1D9G,KAAKymB,MACH,EAAArb,eAAeu/F,+HACf15F,EAAWvF,OAEb1L,KAAKupD,YAAc,EAAAh5B,KAAKntB,IACjBzD,EAAO69D,eASlB,KAAK,EAAA5xC,YAAY8L,mBAAoB,CACnC,IAAI82B,EAAuCjqB,EACvCvoB,EAAqBwyC,EAAkBxyC,mBAE3C,GAA2B,OAAvBA,GAA4D,GAA7BA,EAAmBtP,OAKpD,OAJA1M,KAAKymB,MACH,EAAArb,eAAe2wB,+BACf9qB,EAAWvF,MAAOsQ,EAAmBtP,OAAOT,WAAY,KAEnDtM,EAAO69D,cAGhB,IAAIpD,EAAmBp6D,KAAKqvB,SAASsI,gBACnC62B,EACA,KACA,EAAAzH,QAAqBjlB,EAAK7B,0BAE5B,IAAKm6B,IAAqBp6D,KAAK+qF,gBAAgB3wB,GAAmB,OAAOz6D,EAAO69D,cAChF,GAAI8a,EAAez/C,GAAG,MAEpB,OADA74B,KAAKupD,YAAc,EAAAh5B,KAAKvsB,OACjBrE,EAAOirG,SAASxwC,EAAiBlrC,cAE1C,IAAIuQ,EAAQz/B,KAAKmqG,yBAAyB/vC,GAE1C,OADAp6D,KAAKupD,YAAc6Q,EAAiB5gD,UAAU/J,KACvC9P,EAAOyD,IAAIq8B,IAOtB,OAJAz/B,KAAKymB,MACH,EAAArb,eAAeivB,gBACfppB,EAAWvF,OAEN1L,KAAKL,OAAO69D,cAGb,4BACNvsD,EACAqnE,EACAomB,GAEA,IAAI58D,EAAO9hC,KAAKu1E,YACZxiE,EAAS9B,EAAW8B,OAGxB,GAAIA,EAAO3E,MAAQ,EAAAP,SAASgB,UAAW,CACrC,IAAIg8F,EAA2B93F,EAC/B,IAAM83F,EAAUl8F,aAAck8F,EAAUC,iBAAmB,CACzD,IAAIz4F,EAAUrS,KAAKqvB,SAAS8F,gBAAgB01E,EAAUjqG,KAAMkhC,EAAK6mB,eAAgB,EAAA5C,WAAWkD,SAC5F,GAAgB,OAAZ52C,GAAoBA,EAAQjE,MAAQ,EAAAwd,YAAYyI,gBAAiB,CACnE,IAAIpyB,EAA4BoQ,EAChC,GAAIpQ,EAAU42B,GAAG,EAAAx2B,YAAYyuB,SAC3B,OAAO9wB,KAAK+qG,oBAAoB95F,EAAYhP,KAOpD,IAAI2oC,EAAe5qC,KAAKqvB,SAASi4B,YAC/Br2C,EAAW8B,OACX+uB,EAAK6mB,eACL,EAAA5B,QAAQjlB,EAAK7B,0BAEf,OAAK2K,EAIE5qC,KAAKgrG,mBAAmB/5F,EAAY25B,IAHzC5qC,KAAKupD,YAAc,EAAAh5B,KAAK3sB,KACjB5D,KAAKL,OAAO69D,eAKf,mBAAmBvsD,EAAkC25B,GAC3D,IAAIjrC,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YACZpsC,EAAOnpC,KAAKq0E,kBAAkBpjE,EAAWA,WAAY25B,GACrDqgE,EAAajrG,KAAKupD,YAItB,GAHAvpD,KAAKupD,YAAc,EAAAh5B,KAAK3sB,MAGnBgnC,EAAa/R,GAAG,KACnB,OAAOl5B,EAAO4qF,mBAAmBphD,EAAMxpC,EAAOyD,IAAI6nG,GAAcrgE,EAAe,EAAI,IAIrF,IAAKqgE,EAAWpyE,GAAG,KACjB,OAAOl5B,EAAO4qF,mBAAmBphD,EAAMxpC,EAAOyD,IAAI,IAIpD,IAAI6yE,EAAiBg1B,EAAW7mD,eAGhC,GAAI6mD,EAAWpyE,GAAG,OAAwB+R,EAAa/R,GAAG,KAAqB,CAG7E,GAAIoyE,EAAW/nD,gBAAgBc,eAAepZ,GAC5C,OAAOjrC,EAAOq1E,OACZiB,GAAkB,EAAA7vC,WAAWr/B,IACzB,EAAAggC,SAASyvB,MACT,EAAAzvB,SAASwvB,MACbptB,EACAnpC,KAAKqrF,SAAS4f,IAKlB,GAAIrgE,EAAaoZ,eAAeinD,GAAa,CAC3C,IAAI1tE,EAAUv9B,KAAKu9B,QACnB,IAAM0tE,EAAWjW,cAAepqD,EAAaoqD,YAAc,CACzD,IAAIxK,EAAO1oD,EAAK6wB,aAAas4C,GACzBj0E,EAAqBlsB,OAAOyyB,EAAQvG,oBACxCh3B,KAAK+qF,gBAAgB/zD,GACrB,IAAI0S,EAAM/pC,EAAOosF,GACfpsF,EAAO20E,MACL2B,GAAkB,EAAA7vC,WAAWr/B,IACzB,EAAA+/B,QAAQivB,OACR,EAAAjvB,QAAQgvB,OACZn2D,EAAOi2E,UAAU4U,EAAK/qD,MAAO0J,IAE/BxpC,EAAOyD,IAAI,GACXpD,KAAK2jG,eAAe3sE,EAAoB,CACtCr3B,EAAOk2E,UAAU2U,EAAK/qD,MAAOw2C,GAC7Bt2E,EAAOyD,IAAIwnC,EAAalS,eAAgBjJ,KACvCxe,IASL,OAPA6wB,EAAKoxB,cAAcs3B,GACfxqF,KAAKguB,QAAQmhE,UACfnvF,KAAKmvF,SACH,EAAA/jF,eAAe8/F,kDACfj6F,EAAWvF,OAGRg+B,EAEP1pC,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,aAAcu/F,EAAWh/F,WAAY2+B,EAAa3+B,iBAMrE,CAGL,GAAIg/F,EAAWjnD,eAAepZ,GAC5B,OAAOjrC,EAAO4qF,mBAAmBphD,EAAMxpC,EAAOyD,IAAI,IAG7C,GAAIwnC,EAAaoZ,eAAeinD,GAAa,CAClD,IAAI1tE,EAAUv9B,KAAKu9B,QACnB,IAAM0tE,EAAWjW,cAAepqD,EAAaoqD,YAAc,CAIzD,IAAIxK,EAAO1oD,EAAK6wB,aAAas4C,GACzBj0E,EAAqBlsB,OAAOyyB,EAAQvG,oBACxCh3B,KAAK+qF,gBAAgB/zD,GACrB,IAAI0S,EAAM/pC,EAAOosF,GACfpsF,EAAO20E,MACL2B,GAAkB,EAAA7vC,WAAWr/B,IACzB,EAAA+/B,QAAQivB,OACR,EAAAjvB,QAAQgvB,OACZn2D,EAAOi2E,UAAU4U,EAAK/qD,MAAO0J,IAE/BxpC,EAAOyD,IAAI,GACXpD,KAAK2jG,eAAe3sE,EAAoB,CACtCr3B,EAAOk2E,UAAU2U,EAAK/qD,MAAOw2C,GAC7Bt2E,EAAOyD,IAAIwnC,EAAalS,eAAgBjJ,KACvCxe,IAGL,OADA6wB,EAAKoxB,cAAcs3B,GACZ9gD,EAEP1pC,KAAKymB,MACH,EAAArb,eAAeyiD,8CACf58C,EAAWvF,MAAO,aAAcu/F,EAAWh/F,WAAY2+B,EAAa3+B,aAO5E,OAAOtM,EAAO4qF,mBAAmBphD,EAAMxpC,EAAOyD,IAAI,IAG5C,oBAAoB6N,EAAkChP,GAC5D,IAAItC,EAASK,KAAKL,OACdwpC,EAAOnpC,KAAKq0E,kBAAkBpjE,EAAWA,WAAY,EAAAsf,KAAK4yB,MAC1D8nD,EAAajrG,KAAKupD,YAClB0sB,EAAiBg1B,EAAW7mD,eAEhCpkD,KAAKupD,YAAc,EAAAh5B,KAAK3sB,KAGxB,IAAI80B,EAAiBuyE,EAAWvyE,eAChC,GAAIuyE,EAAWpyE,GAAG,MAA2C,OAAnBH,EAAyB,CAGjE,GAAIA,EAAeyK,QAAQlhC,GAGzB,OAAIgpG,EAAWpyE,GAAG,KACTl5B,EAAOq1E,OACZiB,GAAkB,EAAA7vC,WAAWr/B,IACzB,EAAAggC,SAASyvB,MACT,EAAAzvB,SAASwvB,MACbptB,EACAnpC,KAAKqrF,SAAS4f,IAKTtrG,EAAO4qF,mBAAmBphD,EAAMxpC,EAAOyD,IAAI,IAI/C,GAAInB,EAAUkhC,QAAQzK,EAAez2B,WAE1C,OADAjC,KAAKiwF,uBAAuBt/D,IAAI1uB,GACzBtC,EAAOa,KAAKyB,EAAUitB,aAAe,cAAe,CAAEia,GAAQ,EAAA/C,WAAWt/B,KAKpF,OAAOnH,EAAO4qF,mBAAmBphD,EAAMxpC,EAAOyD,IAAI,IAG5C,yBACN6N,EACAqnE,EACAomB,EACAyM,GAAyB,GAEzB,IAAIxrG,EAASK,KAAKL,OAClB,OAAQsR,EAAWJ,aACjB,KAAK,EAAA9C,YAAY+C,MAEf,OADAhG,QAAQqgG,GACDnrG,KAAKorG,oBACcn6F,EACxBqnE,EACAomB,GAGJ,KAAK,EAAA3wF,YAAY6E,MAAO,CACtB,IAAIy4F,EAAsCp6F,EAAY3P,MAItD,OAHI6pG,IACFE,GAAcA,GAEZ/yB,GAAkB,EAAA/nD,KAAK1sB,IAClBlE,EAAOkE,IAASwnG,IAEzBrrG,KAAKupD,YAAc,EAAAh5B,KAAKzsB,IACjBnE,EAAOmE,IAAIunG,IAEpB,KAAK,EAAAt9F,YAAYoF,QAAS,CACxB,IAAIq5C,EAAsCv7C,EAAY3P,MAClD6pG,IACF3+C,EAAWc,QACT5jC,QAAQ,GACR8iC,IAGJ,IAAI/8C,EAAOzP,KAAKqvB,SAASg+B,4BAA4Bb,EAAU8rB,GAE/D,OADAt4E,KAAKupD,YAAc95C,EACXA,EAAKrB,MACX,KAAK,EAAgB,IAAKpO,KAAKguB,QAAQgD,SAAU,OAAOrxB,EAAOyD,IAAIynB,QAAQ2hC,IAC3E,KAAK,EAAc,OAAO7sD,EAAO0D,IAAIwnB,QAAQ2hC,GAAWzhC,SAASyhC,IACjE,KAAK,EAAgB,IAAKxsD,KAAKguB,QAAQgD,SAAU,OAAOrxB,EAAOyD,IAAIynB,QAAQ2hC,IAC3E,KAAK,EAAc,OAAO7sD,EAAO0D,IAAIwnB,QAAQ2hC,GAAWzhC,SAASyhC,IACjE,KAAK,GAAc,OAAO7sD,EAAOkE,IAAIynG,WAAW9+C,IAChD,KAAK,GAAc,OAAO7sD,EAAOmE,IAAIynG,WAAW/+C,IAChD,QAAS,OAAO7sD,EAAOyD,IAAIynB,QAAQ2hC,KAGvC,KAAK,EAAAz+C,YAAY6G,OAEf,OADA9J,QAAQqgG,GACDnrG,KAAKwrG,qBAA8Cv6F,EAAYytF,GAExE,KAAK,EAAA3wF,YAAY6F,OAEf,OADA9I,QAAQqgG,GACDnrG,KAAKyrG,qBAA8Cx6F,EAAYqnE,GAS1E,OALAt4E,KAAKymB,MACH,EAAArb,eAAeivB,gBACfppB,EAAWvF,OAEb1L,KAAKupD,YAAc+uB,EACZ34E,EAAO69D,cAGR,qBACNvsD,EACAytF,GAEA,IAAIv1D,EAAOnpC,KAAKsqF,mBAAmBr5E,EAAW3P,OAO9C,OANkB,GAAdo9F,GACF1+F,KAAK8vF,oBAAoBn/D,IAAIwY,GAKxBA,EAGD,oBACNl4B,EACAqnE,EACAomB,GAEA,IAAI/+F,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YACZh4C,EAAUv9B,KAAKu9B,QAGnB,GAAI+6C,EAAez/C,GAAG,KAAsB,CAC1C,IAAIH,EAAiB4/C,EAAe5/C,eACpC,GAAuB,OAAnBA,GAA2BA,EAAeyK,QAAQ5F,EAAQpH,sBAC5D,OAAOn2B,KAAK0rG,0BAA0Bz6F,EAAYqnE,EAAgBomB,GAKtE,IAAIrsF,EAAUrS,KAAKqvB,SAAS48B,iBAAiBh7C,EAAY6wB,EAAM9hC,KAAKupD,aACpE,IAAKl3C,EAAS,OAAO1S,EAAO69D,cAC5B1yD,OAAOuH,EAAQjE,MAAQ,EAAAwd,YAAY7Z,OACnC,IAAImoF,EAAuB7nF,EACvBs5F,EAAYzR,EAAczqF,KAC1B4+C,EAAc6rC,EAAc/0D,mBAAmB5H,EAAQrH,gBAAiB,GACxEnC,EAAsBjpB,OAAOyyB,EAAQxJ,qBAGrCqyE,EAAWtkE,EAAK6wB,aAAa3yD,KAAKguB,QAAQyC,WAC1Cm7E,EAAgB9pE,EAAK6wB,aAAa5+B,EAAoBtkB,MAGtDuC,EAAcf,EAAWF,mBACzBrE,EAASsF,EAAYtF,OACrBgH,EAAS,IAAI9L,MAAqB8E,GAClCyuB,GAAW,EACX0wE,EAAoBx9C,EAAYjK,eACpC,IAAK,IAAI/jD,EAAI,EAAGA,EAAIqM,IAAUrM,EAAG,CAC/B,IAAI4Q,EAAae,EAAY3R,GAC7B,GAAI4Q,EAAY,CACd,IAAIk4B,EAAOnpC,KAAKq0E,kBAA8BpjE,EAAYo9C,EACxD,IAEExW,EAAUl4C,EAAO+6E,cAAcvxC,EAAM,EAAA5B,sBAAsBozC,qBAC3D9iC,EACF1O,EAAO0O,EAEP1c,GAAW,EAEbznB,EAAOrT,GAAK8oC,OAEZz1B,EAAOrT,GAAKL,KAAKqrF,SAASh9B,GAK9B,GAAIlzB,EAAU,CACZ2G,EAAKoxB,cAAckzC,GACnBtkE,EAAKoxB,cAAc04C,GAEnB,IAAI9R,EAAoBv8D,EAAQu8D,kBAC5BG,EAAgBj6F,KAAK8rG,gBAAgBz9C,EAAa36C,GAClDq4F,EAAgBliF,QAAQowE,EAAczqE,OAAQ9F,QAAQowE,IAI1D,GAAkB,GAAd4E,EAAyC,CAC3C,IAAIsN,EAAehsG,KAAKisG,qBAAqB59C,EAAa4rC,GACtDiS,EAAeriF,QAAQmiF,EAAax8E,OAAQ9F,QAAQowE,IAExD,OADA95F,KAAKupD,YAAcoiD,EACZpuE,EAAQvP,QAAQgD,SACnBhxB,KAAKL,OAAO0D,IAAIwnB,QAAQqhF,GAAenhF,SAASmhF,IAChDlsG,KAAKL,OAAOyD,IAAIynB,QAAQqhF,IAGvB,CAEL,IAAI/iE,EAAOnpC,KAAK2jG,eAAepmE,EAAQpG,mBAAoB,CACzDx3B,EAAOyD,IAAIsJ,GACX6wB,EAAQvP,QAAQgD,SACZrxB,EAAO0D,IAAIgrD,EAAYg7B,WACvB1pF,EAAOyD,IAAIirD,EAAYg7B,WAC3B1pF,EAAOyD,IAAI82F,EAAczqE,IACzB8N,EAAQvP,QAAQgD,SACZrxB,EAAO0D,IAAIwnB,QAAQkhF,GAAgBhhF,SAASghF,IAC5CpsG,EAAOyD,IAAIynB,QAAQkhF,KACtB96F,GAUH,OATAjR,KAAKupD,YAAcoiD,EACnBxiE,EAAOnpC,KAAKi3F,WAAW9tD,GACnBwiE,EAAUpwC,YACQ,GAAdmjC,EAGJ1+F,KAAK8vF,oBAAoBn/D,IAAIwY,GAF7BA,EAAOnpC,KAAK2lG,gBAAgBx8D,EAAMwiE,IAK/BxiE,GAMX,IADa+wD,EAAcl3D,eAAe,EAAArX,aAAaM,aAAa,GASlE,OAPA6V,EAAKoxB,cAAckzC,GACnBtkE,EAAKoxB,cAAc04C,GACnB5rG,KAAKymB,MACH,EAAArb,eAAei6F,+CACfp0F,EAAWvF,MAAOwuF,EAAchrE,cAElClvB,KAAKupD,YAAcoiD,EACZhsG,EAAO69D,cAEhB,IAAI2uC,EAAkBR,EAAUvnD,eAE5B/Y,EAAQ,IAAIzjC,MAEhByjC,EAAMr+B,KACJrN,EAAOq4F,UAAUoO,EAAS3mE,MACxBz/B,KAAKi3F,WACHj3F,KAAK2jG,eAAepmE,EAAQpG,mBAAoB,CAC9Cx3B,EAAOyD,IAAIsJ,GACX6wB,EAAQvP,QAAQgD,SACZrxB,EAAO0D,IAAIgrD,EAAYg7B,WACvB1pF,EAAOyD,IAAIirD,EAAYg7B,WAC3B1pF,EAAOyD,IAAI82F,EAAczqE,IACzB8N,EAAQvP,QAAQgD,SACZrxB,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,IACd6N,MAKT,IAAIm7F,EAAkBthG,OAAOovF,EAAcvmE,aAAa,cACxD7oB,OAAOshG,EAAgBh+F,MAAQ,EAAAwd,YAAY0M,OAC3C+S,EAAMr+B,KACJrN,EAAOq4F,UAAU4T,EAAcnsE,MAC7B9/B,EAAOy8D,KAAKuvC,EAAU5oD,UAAU,EAC9BpjD,EAAOk2E,UAAUuwB,EAAS3mE,MAAO0sE,GACjCA,EACQC,EAAiB5pE,gBAI/B,IAAI+4B,EAAYlN,EAAYkN,UAC5B,IAAK,IAAIl7D,EAAI,EAAGgpF,EAAYh7B,EAAYg7B,UAAWhpF,EAAIqM,IAAUrM,EAAG,CAClE,IAAIi5F,EAAY5lF,EAAOrT,GACnBk7D,IAEGv7D,KAAK8vF,oBAAoBxiF,IAAIgsF,KAChCA,EAAYt5F,KAAKi3F,WAAWqC,KAIhCjuD,EAAMr+B,KACJrN,EAAO08D,MAAMhO,EAAYtL,SACvBpjD,EAAOk2E,UAAU+1B,EAAcnsE,MAAO0sE,GACtC7S,EACAuS,EACAxrG,GAAKgpF,IAKXh+C,EAAMr+B,KACJrN,EAAOk2E,UAAUuwB,EAAS3mE,MAAO0sE,IAEnCrqE,EAAKoxB,cAAckzC,GACnBtkE,EAAKoxB,cAAc04C,GACnB5rG,KAAKupD,YAAcoiD,EACnB,IAAIxiE,EAAOxpC,EAAOquF,QAAQ3iD,EAAO8gE,GAQjC,OAPIR,EAAUpwC,YACM,GAAdmjC,EACF1+F,KAAK8vF,oBAAoBn/D,IAAIwY,GAE7BA,EAAOnpC,KAAK2lG,gBAAgBx8D,EAAMwiE,EAAW3rG,KAAKu1E,cAG/CpsC,EAID,0BACNl4B,EACAqnE,EACAomB,GAEA,IAAI/+F,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YACZh4C,EAAUv9B,KAAKu9B,QAGnBzyB,OAAOwtE,EAAez/C,GAAG,MACzB,IAAIqhE,EAAgBpvF,OAAOwtE,EAAe5/C,gBACtCizE,EAAYzR,EAAczqF,KAC1B4+C,EAAc6rC,EAAc/0D,mBAAmB5H,EAAQpH,sBAAuB,GAG9EiwE,EAAWtkE,EAAK6wB,aAAa3yD,KAAKguB,QAAQyC,WAG1Cze,EAAcf,EAAWF,mBACzBrE,EAASsF,EAAYtF,OACrBgH,EAAS,IAAI9L,MAAqB8E,GAClCm/F,EAAoBx9C,EAAYjK,eAChCjpB,GAAW,EACf,IAAK,IAAI96B,EAAI,EAAGA,EAAIqM,IAAUrM,EAAG,CAC/B,IAAI4Q,EAAae,EAAY3R,GAC7B,GAAI4Q,EAAY,CACd,IAAIk4B,EAAOnpC,KAAKq0E,kBAAkBpjE,EAAYo9C,EAC5C,IAEExW,EAAUl4C,EAAO+6E,cAAcvxC,EAAM,EAAA5B,sBAAsBozC,qBAC3D9iC,EACF1O,EAAO0O,EAEP1c,GAAW,EAEbznB,EAAOrT,GAAK8oC,OAEZz1B,EAAOrT,GAAKL,KAAKqrF,SAASh9B,GAI9B,IAAIr9B,EAAWhxB,KAAKguB,QAAQgD,SACxBq7E,EAAa34F,EAAOhH,QAAU2hD,EAAYg7B,UAG9C,GAAIluD,EAAU,CACZ2G,EAAKoxB,cAAckzC,GAEnB,IAAInM,EAAgBj6F,KAAK8rG,gBAAgBz9C,EAAa36C,EAAQwmF,EAAczqE,IACxEs8E,EAAgBliF,QAAQowE,EAAczqE,OAAQ9F,QAAQ6T,EAAQu8D,oBAGlE,GAAkB,GAAd4E,EAAyC,CAC3C,IAAIv1D,EAAOnpC,KAAKguB,QAAQgD,SACpBrxB,EAAO0D,IAAIwnB,QAAQkhF,GAAgBhhF,SAASghF,IAC5CpsG,EAAOyD,IAAIynB,QAAQkhF,IAQvB,OAPkB,GAAdrN,GACF1+F,KAAK8vF,oBAAoBn/D,IAAIwY,GAK/BnpC,KAAKupD,YAAcoiD,EACZxiE,EAGF,CAEL,IAAIA,EAAOnpC,KAAKi3F,WACdj3F,KAAK2jG,eAAepmE,EAAQrG,oBAAqB,CAC/ClG,EACIrxB,EAAO0D,IAAIgpG,GACX1sG,EAAOyD,IAAIipG,GACf1sG,EAAOyD,IAAI82F,EAAczqE,IACzBuB,EACIrxB,EAAO0D,IAAIwnB,QAAQkhF,GAAgBhhF,SAASghF,IAC5CpsG,EAAOyD,IAAIynB,QAAQkhF,KACtB96F,IAUL,OARI06F,EAAUpwC,YACM,GAAdmjC,EACF1+F,KAAK8vF,oBAAoBn/D,IAAIwY,GAE7BA,EAAOnpC,KAAK2lG,gBAAgBx8D,EAAMwiE,IAGtC3rG,KAAKupD,YAAcoiD,EACZxiE,GAMX,IADa+wD,EAAcl3D,eAAe,EAAArX,aAAaM,aAAa,GAQlE,OANA6V,EAAKoxB,cAAckzC,GACnBpmG,KAAKymB,MACH,EAAArb,eAAei6F,+CACfp0F,EAAWvF,MAAOwuF,EAAchrE,cAElClvB,KAAKupD,YAAcoiD,EACZhsG,EAAO69D,cAEhB,IAAI2uC,EAAkBR,EAAUvnD,eAE5B/Y,EAAQ,IAAIzjC,MAEhByjC,EAAMr+B,KACJrN,EAAOq4F,UAAUoO,EAAS3mE,MACxBz/B,KAAKi3F,WACHj3F,KAAK2jG,eAAepmE,EAAQrG,oBAAqB,CAC/ClG,EACIrxB,EAAO0D,IAAIgpG,GACX1sG,EAAOyD,IAAIipG,GACf1sG,EAAOyD,IAAI82F,EAAczqE,KACxBxe,MAIT,IAAIsqD,EAAYlN,EAAYkN,UAC5B,IAAK,IAAIl7D,EAAI,EAAGgpF,EAAYh7B,EAAYg7B,UAAWhpF,EAAIqM,IAAUrM,EAAG,CAClE,IAAIi5F,EAAY5lF,EAAOrT,GACnBk7D,IAEGv7D,KAAK8vF,oBAAoBxiF,IAAIgsF,KAChCA,EAAYt5F,KAAKi3F,WAAWqC,KAIhCjuD,EAAMr+B,KACJrN,EAAO08D,MAAMhO,EAAYtL,SACvBpjD,EAAOk2E,UAAUuwB,EAAS3mE,MAAO0sE,GACjC7S,EACAuS,EACAxrG,GAAKgpF,IAKXh+C,EAAMr+B,KACJrN,EAAOk2E,UAAUuwB,EAAS3mE,MAAO0sE,IAEnCrqE,EAAKoxB,cAAckzC,GACnBpmG,KAAKupD,YAAcoiD,EACnB,IAAIxiE,EAAOxpC,EAAOquF,QAAQ3iD,EAAO8gE,GAQjC,OAPIR,EAAUpwC,YACM,GAAdmjC,EACF1+F,KAAK8vF,oBAAoBn/D,IAAIwY,GAE7BA,EAAOnpC,KAAK2lG,gBAAgBx8D,EAAMwiE,EAAW3rG,KAAKu1E,cAG/CpsC,EAGD,qBAAqBl4B,EAAqCqnE,GAChE,IAAI34E,EAASK,KAAKL,OAGd+4B,EAAiB4/C,EAAe5/C,eACpC,IAAK4/C,EAAez/C,GAAG,OAAyBH,GAAkBA,EAAetqB,MAAQ,EAAAwd,YAAY7Z,MAKnG,OAJA/R,KAAKymB,MACH,EAAArb,eAAegmD,mCACfngD,EAAWvF,MAAO,WAAY4sE,EAAersE,YAExCtM,EAAO69D,cAEhB,IAAI9Z,EAAYhrB,EAAejpB,KAE/B,GADAzP,KAAKupD,YAAc7F,EAAUR,gBACzBxqB,EAAeG,GAAG,EAAAx2B,YAAY0d,UAKhC,OAJA/f,KAAKymB,MACH,EAAArb,eAAekhG,+CACfr7F,EAAWvF,OAEN/L,EAAO69D,cAIhB,IAAIzM,EAAgBr4B,EAAez2B,UAAU64B,qBAC7C,GAAIi2B,EAKF,OAJA/wD,KAAKs5B,aACH,EAAAluB,eAAemhG,8EACft7F,EAAWvF,MAAOqlD,EAAcx7B,eAAe7pB,MAAOg4C,EAAUz3C,YAE3DtM,EAAO69D,cAGhB,IAAIjC,EAAY7X,EAAU6X,UACrBA,GACHv7D,KAAKklG,YAAYj0F,EAAY,EAAA8lF,cAAc,EAAAjpF,cAAcsP,UAAWsb,EAAes+D,iBAIrF,IAAIvjF,EAAQxC,EAAWwC,MACnBi5B,EAAWj5B,EAAM/G,OACjBgH,EAASzC,EAAWyC,OACpBsC,EAAU0iB,EAAe1iB,QACzBw2F,GAAY,EACZphB,EAAQ,IAAIxjF,MACZk6B,EAAO9hC,KAAKu1E,YACZspB,EAAYtjC,EACZz5B,EAAKunE,oBAAoB3lD,GACzB5hB,EAAK6wB,aAAajP,GAClB+oD,EAAkB/oD,EAAUU,eAChCt5C,OAAO4hC,GAAYh5B,EAAOhH,QAG1B,IAAIggG,EAAgB,IAAI5kG,IACxB,GAAIkO,EACF,IAAK,IAAI2c,EAAQC,SAAS5c,GAAU3V,EAAI,EAAG8b,EAAIwW,EAAMjmB,OAAQrM,EAAI8b,IAAK9b,EAAG,CACvE,IAAIssG,EAAYh6E,EAAMtyB,GAClB23B,EAASltB,OAAOkL,EAAQ9U,IAAIyrG,IACjB,OAAX30E,GAAmBA,EAAO5pB,MAAQ,EAAAwd,YAAY0M,OAChDo0E,EAAc/7E,IAAWqH,GAM/B,IAAK,IAAI33B,EAAI,EAAGA,EAAIqsC,IAAYrsC,EAAG,CACjC,IACI23B,EADA2G,EAAalrB,EAAMpT,GAAGmM,KAE1B,IAAKwJ,IAAYA,EAAQ1I,IAAIqxB,KAAgB3G,EAASltB,OAAOkL,EAAQ9U,IAAIy9B,KAAcvwB,MAAQ,EAAAwd,YAAY0M,MAAO,CAChHt4B,KAAKymB,MACH,EAAArb,eAAeg9C,oCACf30C,EAAMpT,GAAGqL,MAAOizB,EAAY+kB,EAAUz3C,YAExCugG,GAAY,EACZ,SAEF,GAAIx0E,EAAOa,GAAG,EAAAx2B,YAAYqf,SAAU,CAClC1hB,KAAKymB,MACH,EAAArb,eAAewhG,yDACfn5F,EAAMpT,GAAGqL,MAAOizB,EAAY+kB,EAAUz3C,YAExCugG,GAAY,EACZ,SAEF,GAAIx0E,EAAOa,GAAG,EAAAx2B,YAAYsf,WAAY,CACpC3hB,KAAKymB,MACH,EAAArb,eAAeyhG,8EACfp5F,EAAMpT,GAAGqL,MAAOizB,EAAY+kB,EAAUz3C,YAExCugG,GAAY,EACZ,SAEF,IAAI3nE,EAAuB7M,EACvB0N,EAAYb,EAAcp1B,KAE1B05B,EAAOnpC,KAAKq0E,kBAAkB3gE,EAAOrT,GAAIqlC,EAAW,IACpDA,EAAU61B,YAAcv7D,KAAK8vF,oBAAoBxiF,IAAI67B,KACvDA,EAAOnpC,KAAKi3F,WAAW9tD,IAEzBiiD,EAAMp+E,KACJrN,EAAO08D,MACL32B,EAAUqd,SACVpjD,EAAOk2E,UAAUgpB,EAAUp/D,MAAOgtE,GAClCtjE,EACAzD,EAAU0e,eACVvf,EAAcrC,eAKlBkqE,EAAcI,OAAOjoE,GAGvB,GADA7kC,KAAKupD,YAAc7F,EAAUR,gBACzBspD,EAAW,OAAO7sG,EAAO69D,cAG7B,IAAK,IAAIpmC,EAAUm7D,WAAWma,GAAgB16E,EAAI,EAAG1xB,EAAI82B,EAAQ1qB,OAAQslB,EAAI1xB,IAAK0xB,EAAG,CACnF,IAAI6S,EAAgBzN,EAAQpF,GACxB0T,EAAYb,EAAcp1B,KAE9B,IAAIo1B,EAAcknB,gBAIlB,IAAIrmB,EAAU7M,GAAG,MAAqD,OAA7B6M,EAAUhN,gBAE5CgN,EAAU7M,GAAG,KAFpB,CAYA,OAAQ6M,EAAUt3B,MAEhB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACHg9E,EAAMp+E,KACJrN,EAAO08D,MACL32B,EAAUqd,SACVpjD,EAAOk2E,UAAUgpB,EAAUp/D,MAAOgtE,GAClCzsG,KAAKqrF,SAAS3lD,GACdA,EAAU0e,eACVvf,EAAcrC,eAGlB,SAKJxiC,KAAKymB,MACH,EAAArb,eAAe2hG,uDACf97F,EAAWvF,MAAOm5B,EAAcjkC,KAAM,WAAY8iD,EAAUz3C,YAE9DugG,GAAY,OA1CRxsG,KAAKymB,MACH,EAAArb,eAAe2hG,uDACf97F,EAAWvF,MAAOm5B,EAAcjkC,KAAM,WAAY8iD,EAAUz3C,YAE9DugG,GAAY,EAwClB,OAAIA,EAAkB7sG,EAAO69D,eAG7B4tB,EAAMyG,QACJlyF,EAAOq4F,UAAU6G,EAAUp/D,MACzBz/B,KAAKksF,mBAAmBxzD,EAAgB,GAAI,GAAyBznB,KAKzEm6E,EAAMp+E,KACJrN,EAAOk2E,UAAUgpB,EAAUp/D,MAAOgtE,IAG/BlxC,GAAWz5B,EAAKoxB,cAAc2rC,GACnC7+F,KAAKupD,YAAc7F,EAAUR,gBACtBvjD,EAAOquF,QAAQ5C,EAAOqhB,IAGvB,qBACNx7F,EACAqnE,EACAomB,GAEA,IAAI/+F,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YAGZhxC,EAASvkC,KAAKqvB,SAAS8F,gBAAgBlkB,EAAWmC,SAAU0uB,EAAK6mB,gBACrE,IAAKpkB,EAAQ,OAAO5kC,EAAO69D,cAC3B,GAAIj5B,EAAOn2B,MAAQ,EAAAwd,YAAYyI,gBAK7B,OAJAr0B,KAAKymB,MACH,EAAArb,eAAeyjD,qCACf59C,EAAWmC,SAAS1H,OAEf1L,KAAKL,OAAO69D,cAErB,IAGI9kC,EAHA2C,EAAiCkJ,EACjC1E,EAA8B,KAC9BnxB,EAAgBuC,EAAWvC,cAqB/B,OAdEmxB,GAJCnxB,GACoD,QAApDgqB,EAAiB4/C,EAAe5/C,iBACjCA,EAAeG,GAAG,EAAAx2B,YAAYyuB,SAEd9wB,KAAKqvB,SAASoI,aAC5B4D,EACA3C,EAAehqB,cACf,EAAAq4C,QAAqBjlB,EAAK7B,0BAGZjgC,KAAKqvB,SAASy3B,8BAC5BzrB,EACA3sB,EACAozB,EAAK6mB,eAAe14B,OACpB,EAAA82B,QAAqBjlB,EAAK7B,yBAC1BhvB,KAIAqnE,GAAkB,EAAA/nD,KAAKG,OAAMguE,GAAe,GACzC1+F,KAAKksF,mBAAmBrsD,EAAe5uB,EAAWhB,UAAWyuF,EAAaztF,IAFtDtR,EAAO69D,cAMpC,kBAAkB39B,EAAsB+vB,GACtC,IAAIxyB,EAAWyC,EAAc2D,oBAC7B,GAAIpG,EAGF,OADKA,EAAS/H,aAAa,EAAAxJ,eAAe7O,SAAShd,KAAK+qF,gBAAgB3tD,GACjEA,EAIT,IAAI4vE,EAAYntE,EAAcyD,KAC1BrD,EAA0B,EAAA8mB,QAAQlnB,EAAcI,yBACpD,GAAI+sE,EAAW,CACb,IAAIC,EAAWjtG,KAAK+4F,kBAAkBiU,EAAWp9C,GACjDxyB,EAAW,IAAI,EAAAjN,SACb,EAAAntB,YAAYwC,YACZ,IAAI,EAAA4qB,kBACF,EAAAptB,YAAYwC,YACZq6B,EAEsBotE,EAASp7F,YAAam4F,SAE9CiD,EAASzzF,UACTymB,OAIG,CACL7C,EAAW,IAAI,EAAAjN,SACb,EAAAntB,YAAYwC,YACZ,IAAI,EAAA4qB,kBACF,EAAAptB,YAAYwC,YACZq6B,EACA7/B,KAAKu9B,QAAQlN,8BAA8B,EAAArtB,YAAYwC,YACrD,EAAAnD,YAAYy6B,SAAW,EAAAz6B,YAAY+P,cAGvC,IAAI,EAAAksB,UAAUt+B,KAAKu9B,QAAS,KAAMsC,EAAcpwB,KAAMowB,EAAcpwB,MACpEwwB,GAEF,IAAIjqB,EAAU6pB,EAAc7pB,QACvBA,IAAS6pB,EAAc7pB,QAAUA,EAAU,IAAIjO,KACpDiO,EAAQtI,IAAI,cAAe0vB,EAASn7B,WAGtCm7B,EAASlO,aAAe2Q,EAAc3Q,aAAe,EAAAxsB,mBAAqB,cAC1E06B,EAAS1vB,IAAI,EAAArL,YAAYuqF,UACzBxvD,EAASn7B,UAAU0tD,oBAAoB,GAAIvyB,GAC3CyC,EAAc2D,oBAAsBpG,EACpC,IAAIw4D,EAAe51F,KAAKu1E,YACpBzzC,EAAO1E,EAAS0E,KACpB9hC,KAAKu1E,YAAczzC,EAGnB,IAAItoB,EAAY4jB,EAAS5jB,UACrB7Z,EAASK,KAAKL,OACds2E,EAAiBj2E,KAAKguB,QAAQioD,eAC9B5qC,EAAQ,IAAIzjC,MASZslG,EAAYltG,KAAK24F,eAAe94D,GAUpC,GATIA,EAAcpwB,KAAK8rD,YAAW2xC,EAAYltG,KAAKi3F,WAAWiW,IAC9D7hE,EAAMr+B,KACJrN,EAAOosF,GACLpsF,EAAO20E,MAAM2B,GAAkB,EAAA7vC,WAAWr/B,IAAM,EAAA+/B,QAAQivB,OAAS,EAAAjvB,QAAQgvB,OACvEn2D,EAAOk2E,UAAU,EAAGI,IAEtBt2E,EAAOq4F,UAAU,EAAGkV,KAGpBF,EAAW,CACb,IAAItrE,EAAiBloB,EAAUkoB,eAC3B0jB,EAAgB1jB,EAAeh1B,OAC/B48B,EAAW,IAAI1hC,MAAqB,EAAIw9C,GAC5C9b,EAAS,GAAK3pC,EAAOk2E,UAAU,EAAGI,GAClC,IAAK,IAAI51E,EAAI,EAAGA,EAAI+kD,IAAiB/kD,EACnCipC,EAASjpC,EAAI,GAAKV,EAAOk2E,UAAUx1E,EAAI,EAAGqhC,EAAerhC,GAAG+jD,gBAE9D/Y,EAAMr+B,KACJrN,EAAOq4F,UAAU,EACfh4F,KAAK2jG,eAAe74F,OAAOkiG,EAAUxpE,qBAAsB8F,EAAUsmB,GAAY,GAAO,KAI9F5vD,KAAK44F,qCAAqC/4D,EAAewL,GACzD,IAAI5xB,EAAOzZ,KAAKykG,6BAA6B3iE,EAAMniC,EAAOk2E,UAAU,EAAGI,GAAiBp2C,EAAcpwB,KAAM47B,GAC5GvJ,EAAKy6D,mBACLv8F,KAAKu1E,YAAcqgB,EAGnB,IAAI3zD,EAAS7E,EAAS+C,cAClB0P,EAAW,IAAIjoC,MACf4wE,EAAc,EAAIh/D,EAAUkoB,eAAeh1B,OAC3CqpF,EAAY9zD,EAAOv1B,OACvB,GAAIqpF,EAAYvd,EACd,IAAK,IAAIn4E,EAAIm4E,EAAan4E,EAAI01F,IAAa11F,EAAGwvC,EAAS7iC,KAAKi1B,EAAO5hC,GAAGoP,KAAK20C,gBAE7E,IAAI2tC,EAAUpyF,EAAOmtF,YAAY1vD,EAASlO,aAAc1V,EAAUw4E,aAAcx4E,EAAUy4E,cAAepiD,EAAUp2B,GAEnH,OADA2jB,EAAS80D,SAASvyF,EAAQoyF,GACnB30D,EAGT,mBAEEyC,EAEAynE,EAEA5I,EAEA9uC,GAEA,IAAIu9C,EAAOntG,KAAK+4F,kBAAkBl5D,EAAe+vB,IAC7C/vB,EAAcpwB,KAAKulF,aAAemY,EAAK93E,aAAa,EAAAxJ,eAAexO,UAASrd,KAAKklG,YAAYt1C,GACjG,IAAIzmB,EAAOnpC,KAAKgrF,kBACdmiB,EACA7F,EACA13C,EACA5vD,KAAKqrF,SAASrrF,KAAKguB,QAAQyC,WAC3BiuE,GAKF,OAHI,EAAA9yD,kBAAkBzC,IAAS,EAAA/C,WAAWI,OACxCxmC,KAAKupD,YAAc1pB,EAAcpwB,MAE5B05B,EAGD,gCACNl4B,EACA04C,EACA+0C,GAEA,IAAI/+F,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YAEhBv1E,KAAKyqG,4BAA4Bx5F,GAEjC,IACIszB,EADWvkC,KAAKqvB,SACE48B,iBAAiBh7C,EAAY6wB,EAAM6nB,GACzD,IAAKplB,EAAQ,OAAO5kC,EAAO69D,cAG3B,OAFIj5B,EAAOlP,aAAa,EAAAxJ,eAAexO,SAASrd,KAAKklG,YAAYj0F,GAEzDszB,EAAOn2B,MACb,KAAK,EAAAwd,YAAY7O,OAAQ,CACvB,IAAI+b,EAAiByL,EACrB,IAAKvkC,KAAKo1F,cAAct8D,GAAS,OAAOn5B,EAAO69D,cAC/C,IAAIrsB,EAAarY,EAAOrpB,KAExB,OADA3E,OAAOqmC,GAAc,EAAA5gB,KAAKG,MACtBoI,EAAOD,GAAG,EAAAx2B,YAAY+8B,SACjBp/B,KAAK82F,sBAAsBh+D,EAAQ6wB,EAAS+0C,IAErD1+F,KAAKupD,YAAcpY,EACZxxC,EAAOktF,WAAW/zD,EAAO5J,aAAciiB,EAAWiT,iBAE3D,KAAK,EAAAx4B,YAAY0T,UAAW,CAC1B,IAAIo1D,EAAuBnwD,EACvBtU,EAASnlB,OAAO4pF,EAAUzkE,QAC9BnlB,OAAOmlB,EAAO7hB,MAAQ,EAAAwd,YAAYjL,MAClC,IAAIysF,EAAmBn9E,EACvB,OAAKjwB,KAAKq1F,YAAY+X,IAItBptG,KAAKupD,YAAc,EAAAh5B,KAAKntB,IACpBsxF,EAAU77D,GAAG,EAAAx2B,YAAY+8B,UAC3Bt0B,OAAsC,GAA/B4pF,EAAUx1D,mBACVl/B,KAAK82F,sBAAsBpC,EAAW/qC,EAAS+0C,KAExD5zF,OAAO4pF,EAAUjlF,MAAQ,EAAA8gB,KAAKntB,KACvBzD,EAAOktF,WAAW6H,EAAUxlE,aAAc,EAAAkX,WAAWt/B,QAT1D9G,KAAKupD,YAAc,EAAAh5B,KAAKntB,IACjBpD,KAAKL,OAAO69D,eAUvB,KAAK,EAAA5xC,YAAY0M,MAAO,CACtB,IAAIuM,EAAuBN,EACvBmB,EAAYb,EAAcp1B,KAC9B3E,OAAO+5B,EAAcrC,cAAgB,GACrC,IAAIyiE,EAAiBn6F,OAAO9K,KAAKqvB,SAAS22B,uBACtC6/C,EAAW7lG,KAAKq0E,kBAAkB4wB,EAAgBjlG,KAAKguB,QAAQyC,WAC/DgR,EAAWzhC,KAAKupD,YASpB,GARI9nB,EAAS5I,GAAG,OACTiJ,EAAK42D,UAAUmN,EAAUpkE,IAC5BzhC,KAAKymB,MACH,EAAArb,eAAeiiG,wBACfpI,EAAev5F,SAIhBm5B,EAAchM,GAAG,EAAAx2B,YAAYuqF,UAAW,CAC3C/nD,EAAcn3B,IAAI,EAAArL,YAAYuqF,UAC9B,IAAIrlC,EAAW1iB,EAAc0iB,SACzBA,GAAUvnD,KAAKi2F,mBAAmBpxD,EAAcp1B,KAAM83C,GAG5D,OADAvnD,KAAKupD,YAAc7jB,EACZ/lC,EAAOy8D,KACZ12B,EAAUqd,SACVrd,EAAU7M,GAAG,GACbgtE,EACAngE,EAAU0e,eACVvf,EAAcrC,cAGlB,KAAK,EAAA5W,YAAYqM,mBAAoB,CACnC,IACIE,EADuCoM,EACHpM,gBACxC,GAAIA,EAAiB,CACnB,IAAIt3B,EAASb,KAAKqvB,SAASsI,gBAAgBQ,EAAiB,MAC5D,GAAIt3B,EAAQ,OAAOb,KAAKgrF,kBAAkBnqF,EAAQ,GAAIoQ,EAAY,GAEpE,OAAOtR,EAAO69D,cAEhB,KAAK,EAAA5xC,YAAYyM,SAAU,CACzB,IACIuK,EAAiB93B,OADYy5B,EACY3B,gBAC7C,OAAO5iC,KAAKgrF,kBAAkBpoD,EAAgB,GAAI3xB,EAChDjR,KAAKq0E,kBAAkBvpE,OAAO9K,KAAKqvB,SAAS22B,uBAAwBhmD,KAAKguB,QAAQyC,YAGrF,KAAK,EAAA7E,YAAY8L,mBAAoB,CACnC,IAAI82B,EAAuCjqB,EAC3C,GAAIiqB,EAAkB31B,GAAG,EAAAx2B,YAAY0f,QAAS,CAC5C,IAAIq4C,EAAmBp6D,KAAKqvB,SAASsI,gBAAgB62B,EAAmB,MACxE,OAAK4L,GACAp6D,KAAK+qF,gBAAgB3wB,IAC1Bp6D,KAAKupD,YAAc6Q,EAAiB3qD,KAC7B9P,EAAOyD,IAAIpD,KAAKmqG,yBAAyB/vC,KAHlBz6D,EAAO69D,cASvC,OAJAx9D,KAAKymB,MACH,EAAArb,eAAekiG,wEACfr8F,EAAWvF,MAAO8iD,EAAkB5tD,MAE/BjB,EAAO69D,eAOlB,OAJAx9D,KAAKymB,MACH,EAAArb,eAAeivB,gBACfppB,EAAWvF,OAEN/L,EAAO69D,cAGR,yBACNvsD,EACA04C,EACA+0C,GAEA,IAAI/+F,EAASK,KAAKL,OACd4U,EAAStD,EAAWsD,OACpBC,EAASvD,EAAWuD,OAEpB4oF,EAAWp9F,KAAK2qF,cAClB3qF,KAAKq0E,kBAAkBpjE,EAAWqD,UAAW,EAAAic,KAAK3sB,MAClD5D,KAAKupD,aAIH8zC,EAAWr9F,KAAKs9F,kBAAkBF,GACtC,GAAgB,GAAZC,EACF,OAAO19F,EAAO4qF,mBAAmB6S,EAAUp9F,KAAKq0E,kBAAkB9/D,EAAQo1C,IAE5E,GAAgB,GAAZ0zC,EACF,OAAO19F,EAAO4qF,mBAAmB6S,EAAUp9F,KAAKq0E,kBAAkB7/D,EAAQm1C,IAG5E,IAAIi5C,EAAqC,GAAdlE,EAEvBtC,EAAYp8F,KAAKu1E,YACjBg4B,EAAanR,EAAUE,OAC3BiR,EAAWl4C,qBAAqB+nC,GAChCp9F,KAAKu1E,YAAcg4B,EACnB,IAAIC,EAAaxtG,KAAKq0E,kBAAkB9/D,EAAQo1C,EAASi5C,GACrD6K,EAAaztG,KAAKupD,YAClBmkD,EAA2B1tG,KAAK8vF,oBAAoBxiF,IAAIkgG,GAExDG,EAAavR,EAAUE,OAC3BqR,EAAW33C,sBAAsBonC,GACjCp9F,KAAKu1E,YAAco4B,EACnB,IAAIC,EAAa5tG,KAAKq0E,kBAAkB7/D,EAAQm1C,GAAW,EAAAp5B,KAAK4yB,KAAOsqD,EAAa9jD,EAASi5C,GACzFiL,EAAa7tG,KAAKupD,YAClBukD,EAA2B9tG,KAAK8vF,oBAAoBxiF,IAAIsgG,GAExDjgD,EAAa,EAAAp9B,KAAKq9B,kBAAkB6/C,EAAYI,GAAY,GAChE,IAAKlgD,EAMH,OALA3tD,KAAKymB,MACH,EAAArb,eAAegmD,mCACf58C,EAAO9I,MAAOmiG,EAAW5hG,WAAYwhG,EAAWxhG,YAElDjM,KAAKupD,YAAcI,EACZhqD,EAAO69D,cAgBhB,GAdAgwC,EAAaxtG,KAAKg5E,kBAChBw0B,EACAC,EAAY9/C,GACZ,GAAO,EACPp5C,GAEFq5F,EAAa5tG,KAAKg5E,kBAChB40B,EACAC,EAAYlgD,GACZ,GAAO,EACPn5C,GAEFxU,KAAKupD,YAAcoE,EAEf+/C,GAA4BI,EACzBJ,GAIHE,EAAa5tG,KAAKi3F,WAAW2W,GAC7BE,GAA2B,IAJ3BN,EAAaxtG,KAAKi3F,WAAWuW,GAC7BE,GAA2B,QAKxB,IAAKA,GAA4B//C,EAAW4N,UACjD,GAAkB,GAAdmjC,EAAuC,EAErB,GADF1+F,KAAKihG,mBAAmBuM,EAAYD,KAC/BC,EAAaxtG,KAAKi3F,WAAWuW,KAEhC,GADFxtG,KAAKihG,mBAAmB2M,EAAYD,KAC/BC,EAAa5tG,KAAKi3F,WAAW2W,IACpDF,GAA2B,EAC3BI,GAA2B,OAE3BN,EAAaxtG,KAAK6kG,iBAAiB2I,EAAYC,EAAYF,EAAYnR,GACvEwR,EAAa5tG,KAAK6kG,iBAAiB+I,EAAYC,EAAYF,EAAYvR,GAI3EoR,EAAaxtG,KAAKykG,6BAA6B8I,EAAYC,EAAY7/C,GACvE4/C,EAAWhR,mBAEXqR,EAAa5tG,KAAKykG,6BAA6BkJ,EAAYC,EAAYjgD,GACvEggD,EAAWpR,mBAEXv8F,KAAKu1E,YAAc6mB,EACnBA,EAAUoC,cAAc+O,EAAYI,GAEpC,IAAIxkE,EAAOxpC,EAAOosF,GAAGqR,EAAUoQ,EAAYI,GAG3C,OAFA9iG,OAAO4iG,GAA4BI,GAC/BJ,GAA0B1tG,KAAK8vF,oBAAoBn/D,IAAIwY,GACpDA,EAGD,8BACNl4B,EACAqnE,EACAomB,GAEA,IAAI/+F,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YAGZw4B,EAAW/tG,KAAKq0E,kBAClBpjE,EAAWkE,QACXmjE,EAAeuqB,WAAU,GAK3B,GAAI,EAAAr3D,gBAAgBuiE,IAAa,EAAAznE,aAAaG,YAAa,OAAOsnE,EAIlE,IASI5kE,EATA01D,EAA0B,KAW9B,OAVIvmB,GAAkB,EAAA/nD,KAAKG,OACzBmuE,EAAY/8D,EAAK6wB,aAAa3yD,KAAKupD,aACnCwkD,EAAWpuG,EAAOi2E,UAChBipB,EAAUp/D,MACVsuE,IAMI98F,EAAWI,UACjB,KAAK,EAAAuO,MAAM2D,UAGT,GAAIvjB,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB14B,KAAKupD,YAAY7wB,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAa+B,aAC1D,GAAI+W,EAAU,CACZ,IAAIyB,EAAazB,EAAS5L,GAAG,EAAAx2B,YAAYy6B,UAOzC,GANkB,OAAd+hE,GAAuB34D,IACzB6nE,EAAW,EAAAz4C,iBAAiBy4C,GAC5BjsE,EAAKoxB,cAAc2rC,GACnBA,EAAY,MAEd11D,EAAOnpC,KAAKguG,qBAAqBvpE,EAAUxzB,EAAWkE,QAAS44F,EAAU98F,GACrEi1B,EAAY,MAChB,OAAOiD,GAQX,OALAnpC,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM1L,KAAKupD,YAAYt9C,YAEvC4yF,GAAW/8D,EAAKoxB,cAAc2rC,GAC3Bl/F,EAAO69D,cAGhB,OAAQx9D,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH+6B,EAAOxpC,EAAOq1E,OACZ,EAAAjuC,SAAS4uC,OACTo4B,EACApuG,EAAOyD,IAAI,IAEb,MAEF,KAAK,EACL,KAAK,EAAgB,CACnB,IAAI4qB,EAAUhuB,KAAKguB,QACnBmb,EAAOxpC,EAAOq1E,OACZhnD,EAAQgD,SACJ,EAAA+V,SAASgvC,OACT,EAAAhvC,SAAS4uC,OACbo4B,EACA/tG,KAAKiuG,QAAQjuG,KAAKupD,cAEpB,MAEF,KAAK,EACL,KAAK,EACHpgB,EAAOxpC,EAAOq1E,OACZ,EAAAjuC,SAASgvC,OACTg4B,EACApuG,EAAO0D,IAAI,IAEb,MAEF,KAAK,GACH8lC,EAAOxpC,EAAOq1E,OACZ,EAAAjuC,SAASs8D,OACT0K,EACApuG,EAAOkE,IAAI,IAEb,MAEF,KAAK,GACHslC,EAAOxpC,EAAOq1E,OACZ,EAAAjuC,SAASu8D,OACTyK,EACApuG,EAAOmE,IAAI,IAEb,MAEF,QAKE,OAJA9D,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM1L,KAAKupD,YAAYt9C,YAEpCtM,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAM4D,YAGT,GAAIxjB,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB14B,KAAKupD,YAAY7wB,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAagC,aAC1D,GAAI8W,EAAU,CACZ,IAAIyB,EAAazB,EAAS5L,GAAG,EAAAx2B,YAAYy6B,UAOzC,GANkB,OAAd+hE,GAAuB34D,IACzB6nE,EAAW,EAAAz4C,iBAAiBy4C,GAC5BjsE,EAAKoxB,cAAc2rC,GACnBA,EAAY,MAEd11D,EAAOnpC,KAAKguG,qBAAqBvpE,EAAUxzB,EAAWkE,QAAS44F,EAAU98F,GACrEwzB,EAAS5L,GAAG,EAAAx2B,YAAYy6B,UAAW,MACvC,OAAOqM,GAQX,OALAnpC,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM1L,KAAKupD,YAAYt9C,YAEvC4yF,GAAW/8D,EAAKoxB,cAAc2rC,GAC3Bl/F,EAAO69D,cAGhB,OAAQx9D,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH+6B,EAAOxpC,EAAOq1E,OACZ,EAAAjuC,SAASqmD,OACT2gB,EACApuG,EAAOyD,IAAI,IAEb,MAEF,KAAK,EACL,KAAK,EAAgB,CACnB,IAAI4qB,EAAUhuB,KAAKguB,QACnBmb,EAAOxpC,EAAOq1E,OACZhnD,EAAQgD,SACJ,EAAA+V,SAASomD,OACT,EAAApmD,SAASqmD,OACb2gB,EACA/tG,KAAKiuG,QAAQjuG,KAAKupD,cAEpB,MAEF,KAAK,EACL,KAAK,EACHpgB,EAAOxpC,EAAOq1E,OACZ,EAAAjuC,SAASomD,OACT4gB,EACApuG,EAAO0D,IAAI,IAEb,MAEF,KAAK,GACH8lC,EAAOxpC,EAAOq1E,OACZ,EAAAjuC,SAAS0jD,OACTsjB,EACApuG,EAAOkE,IAAI,IAEb,MAEF,KAAK,GACHslC,EAAOxpC,EAAOq1E,OACZ,EAAAjuC,SAAS2jD,OACTqjB,EACApuG,EAAOmE,IAAI,IAEb,MAEF,QAKE,OAJA9D,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM1L,KAAKupD,YAAYt9C,YAEpCtM,EAAO69D,cAGlB,MAEF,QAEE,OADA1yD,QAAO,GACAnL,EAAO69D,cAIlB,IAAInuC,EAAWrvB,KAAKqvB,SAChBkV,EAASlV,EAAS48B,iBAAiBh7C,EAAWkE,QAAS2sB,GAC3D,IAAKyC,EAEH,OADIs6D,GAAW/8D,EAAKoxB,cAAc2rC,GAC3Bl/F,EAAO69D,cAIhB,IAAKqhC,EACH,OAAO7+F,KAAKglG,eACVzgE,EACA4E,EACAnpC,KAAKupD,YACLt4C,EAAWkE,QACXka,EAAS22B,sBACT32B,EAAS42B,0BACT,GAKJ,IAAIioD,EAAWluG,KAAKglG,eAClBzgE,EACA4E,EACAnpC,KAAKupD,YACLt4C,EAAWkE,QACXka,EAAS22B,sBACT32B,EAAS42B,0BACT,GAGFjmD,KAAKupD,YAAcs1C,EAAUpvF,KAC7BqyB,EAAKoxB,cAAc2rC,GACnB,IAAIroB,EAAaqoB,EAAUpvF,KAAK20C,eAEhC,OAAOzkD,EAAOksC,MAAM,KAAM,CACxBqiE,EACAvuG,EAAOk2E,UAAUgpB,EAAUp/D,MAAO+2C,IACjCA,GAGG,6BACNvlE,EACAqnE,EACAomB,GAEA,IAEIv1D,EAFAxpC,EAASK,KAAKL,OACdujG,GAAW,EAGf,OAAQjyF,EAAWI,UACjB,KAAK,EAAAuO,MAAMqD,KAQT,GAPAkmB,EAAOnpC,KAAKq0E,kBACVpjE,EAAWkE,QACXmjE,EAAeuqB,WAAU,GAKvB7iG,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB14B,KAAKupD,YAAY7wB,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAa1I,MAC1D,GAAIwhB,EAAU,OAAOzkC,KAAKguG,qBAAqBvpE,EAAUxzB,EAAWkE,QAASg0B,EAAMl4B,GAMrF,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK1L,KAAKupD,YAAYt9C,YAEnCtM,EAAO69D,cAIhB,MAEF,KAAK,EAAA59C,MAAMsD,MAAO,CAChB,IAAI/N,EAAUlE,EAAWkE,QACzB,GAAIA,EAAQkhE,iBAAkB,CAE5BltC,EAAOnpC,KAAK0gG,yBAA4CvrF,EAASmjE,EAAgB,GAAkB,GAE/Ft4E,KAAKguB,QAAQkU,WAAWliC,KAAKi8F,iBAAiB9yD,EAAMl4B,EAAWvF,OACnE,MAUF,GAPAy9B,EAAOnpC,KAAKq0E,kBACVpjE,EAAWkE,QACXmjE,EAAeuqB,WAAU,GAKvB7iG,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB14B,KAAKupD,YAAY7wB,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAazI,OAC1D,GAAIuhB,EAAU,OAAOzkC,KAAKguG,qBAAqBvpE,EAAUxzB,EAAWkE,QAASg0B,EAAMl4B,GAMrF,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK1L,KAAKupD,YAAYt9C,YAEnCtM,EAAO69D,cAGhB,OAAQx9D,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASqmD,OAAQztF,EAAOyD,IAAI,GAAI+lC,GACrD,MAEF,KAAK,EACL,KAAK,EACHA,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASomD,OACT,EAAApmD,SAASqmD,OACbptF,KAAKqrF,SAASrrF,KAAKupD,aACnBpgB,GAEF,MAEF,KAAK,EACL,KAAK,EACHA,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASomD,OAAQxtF,EAAO0D,IAAI,GAAI8lC,GACrD,MAEF,KAAK,GACHA,EAAOxpC,EAAO20E,MAAM,EAAAxtC,QAAQqnE,OAAQhlE,GACpC,MAEF,KAAK,GACHA,EAAOxpC,EAAO20E,MAAM,EAAAxtC,QAAQsnE,OAAQjlE,GACpC,MAEF,QACEnpC,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK1L,KAAKupD,YAAYt9C,YAE1Ck9B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAM2D,UAST,GARA2/E,GAAW,EACX/5D,EAAOnpC,KAAKq0E,kBACVpjE,EAAWkE,QACXmjE,EAAeuqB,WAAU,GAKvB7iG,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB14B,KAAKupD,YAAY7wB,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAa2B,YAC1D,GAAImX,EAAU,CAEZ,GADA0E,EAAOnpC,KAAKguG,qBAAqBvpE,EAAUxzB,EAAWkE,QAASg0B,EAAMl4B,GACjEwzB,EAAS5L,GAAG,EAAAx2B,YAAYy6B,UAAW,MACvC,OAAOqM,GAOX,OAJAnpC,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM1L,KAAKupD,YAAYt9C,YAEpCtM,EAAO69D,cAGhB,OAAQx9D,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS4uC,OAAQxsC,EAAMnpC,KAAKL,OAAOyD,IAAI,IAC5D,MAEF,KAAK,EACL,KAAK,EACH+lC,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASgvC,OACT,EAAAhvC,SAAS4uC,OACbxsC,EACAnpC,KAAKiuG,QAAQjuG,KAAKupD,cAEpB,MAEF,KAAK,EACL,KAAK,EACHpgB,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASgvC,OAAQ5sC,EAAMxpC,EAAO0D,IAAI,IACvD,MAEF,KAAK,GACH8lC,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASs8D,OAAQl6D,EAAMxpC,EAAOkE,IAAI,IACvD,MAEF,KAAK,GACHslC,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASu8D,OAAQn6D,EAAMxpC,EAAOmE,IAAI,IACvD,MAEF,QACE9D,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM1L,KAAKupD,YAAYt9C,YAE3Ck9B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAM4D,YAST,GARA0/E,GAAW,EACX/5D,EAAOnpC,KAAKq0E,kBACVpjE,EAAWkE,QACXmjE,EAAeuqB,WAAU,GAKvB7iG,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB14B,KAAKupD,YAAY7wB,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAa4B,YAC1D,GAAIkX,EAAU,CAEZ,GADA0E,EAAOnpC,KAAKguG,qBAAqBvpE,EAAUxzB,EAAWkE,QAASg0B,EAAMl4B,GACjEwzB,EAAS5L,GAAG,EAAAx2B,YAAYy6B,UAAW,MACvC,OAAOqM,GAOX,OAJAnpC,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM1L,KAAKupD,YAAYt9C,YAEpCtM,EAAO69D,cAGhB,OAAQx9D,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASqmD,OAAQjkD,EAAMxpC,EAAOyD,IAAI,IACvD,MAEF,KAAK,EACL,KAAK,EACH+lC,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAASomD,OACT,EAAApmD,SAASqmD,OACbjkD,EACAnpC,KAAKiuG,QAAQjuG,KAAKupD,cAEpB,MAEF,KAAK,EACL,KAAK,EACHpgB,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASomD,OAAQhkD,EAAMxpC,EAAO0D,IAAI,IACvD,MAEF,KAAK,GACH8lC,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS0jD,OAAQthD,EAAMxpC,EAAOkE,IAAI,IACvD,MAEF,KAAK,GACHslC,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS2jD,OAAQvhD,EAAMxpC,EAAOmE,IAAI,IACvD,MAEF,QACE9D,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,KAAM1L,KAAKupD,YAAYt9C,YAE3Ck9B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAMmE,YAQT,GAPAolB,EAAOnpC,KAAKq0E,kBACVpjE,EAAWkE,QACXmjE,EAAeuqB,WAAU,GAKvB7iG,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB14B,KAAKupD,YAAY7wB,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAa6B,KAC1D,GAAIiX,EAAU,OAAOzkC,KAAKguG,qBAAqBvpE,EAAUxzB,EAAWkE,QAASg0B,EAAMl4B,IAKvFk4B,EAAOxpC,EAAO20E,MAAM,EAAAxtC,QAAQgvB,OAAQ91D,KAAK2qF,cAAcxhD,EAAMnpC,KAAKupD,cAClEvpD,KAAKupD,YAAc,EAAAh5B,KAAK3sB,KACxB,MAEF,KAAK,EAAAgc,MAAMoE,MAYT,GAXAmlB,EAAOnpC,KAAKq0E,kBACVpjE,EAAWkE,QACXmjE,GAAkB,EAAA/nD,KAAKG,KACnB,EAAAH,KAAKntB,IACLk1E,EAAez/C,GAAG,GAChB,EAAAtI,KAAKltB,IACLi1E,EAAc,GAKlBt4E,KAAKupD,YAAY1wB,GAAG,KAAsB,CAC5C,IAAIH,EAAiB14B,KAAKupD,YAAY7wB,eACtC,GAAIA,EAAgB,CAClB,IAAI+L,EAAW/L,EAAesK,eAAe,EAAArX,aAAa8B,aAC1D,GAAIgX,EAAU,OAAOzkC,KAAKguG,qBAAqBvpE,EAAUxzB,EAAWkE,QAASg0B,EAAMl4B,GAMrF,OAJAjR,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK1L,KAAKupD,YAAYt9C,YAEnCtM,EAAO69D,cAShB,OAPEr0B,EAAOnpC,KAAKg5E,kBAAkB7vC,EAC5BnpC,KAAKupD,YAAavpD,KAAKupD,YAAYiE,SACnC,GAAO,EACPv8C,EAAWkE,SAIPnV,KAAKupD,YAAYn7C,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH+6B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS2uC,OAAQvsC,EAAMxpC,EAAOyD,KAAK,IACxD,MAEF,KAAK,EACL,KAAK,EACH+lC,EAAOxpC,EAAOq1E,OACZh1E,KAAKguB,QAAQgD,SACT,EAAA+V,SAAS+uC,OACT,EAAA/uC,SAAS2uC,OACbvsC,EACAnpC,KAAKquG,WAAWruG,KAAKupD,cAEvB,MAEF,KAAK,EACL,KAAK,EACHpgB,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS+uC,OAAQ3sC,EAAMxpC,EAAO0D,KAAK,GAAI,IAC5D,MAEF,QACErD,KAAKymB,MACH,EAAArb,eAAe+hD,2CACfl8C,EAAWvF,MAAO,IAAK1L,KAAKupD,YAAYt9C,YAE1Ck9B,EAAOxpC,EAAO69D,cAGlB,MAEF,KAAK,EAAA59C,MAAMqC,OACT,OAAOjiB,KAAKsuG,cAAcr9F,EAAYqnE,EAAgBomB,GAExD,QAEE,OADA5zF,QAAO,GACAnL,EAAO69D,cAGlB,IAAK0lC,EAAU,OAAO/5D,EACtB,IAAI9Z,EAAWrvB,KAAKqvB,SAChBkV,EAASlV,EAAS48B,iBAAiBh7C,EAAWkE,QAASnV,KAAKu1E,aAChE,OAAKhxC,EACEvkC,KAAKglG,eACVzgE,EACA4E,EACAnpC,KAAKupD,YACLt4C,EAAWkE,QACXka,EAAS22B,sBACT32B,EAAS42B,yBACTqyB,GAAkB,EAAA/nD,KAAKG,MARL/wB,EAAO69D,cAYrB,cACNvsD,EACAqnE,EACAomB,GAEA,IAGI6P,EAHAp5F,EAAUlE,EAAWkE,QACrBg0B,EAAsB,EACtBlV,EAAiBj0B,KAAKu9B,QAAQtJ,eAElC,GAAI9e,EAAQ/G,MAAQ,EAAAP,SAAS2F,KAC3B+6F,EAAa,aACR,CACL,IAAIl8F,EAAUrS,KAAKqvB,SAAS48B,iBAAiB92C,EAASnV,KAAKu1E,YAAa,EAAAhlD,KAAK4yB,KAAM,EAAA4C,WAAWkD,SAC9F,GAAK52C,EAsBH,OAAQA,EAAQjE,MACd,KAAK,EAAAwd,YAAYyI,gBACjB,KAAK,EAAAzI,YAAYrK,UACjB,KAAK,EAAAqK,YAAYjL,KACf4tF,EAAa,SACb,MAEF,KAAK,EAAA3iF,YAAY8L,mBACf62E,EAAa,WACb,MAEF,QAAS,CACPplE,EAAOnpC,KAAKq0E,kBAAkBl/D,EAAS,EAAAob,KAAK4yB,MAC5C,IAAI1zC,EAAOzP,KAAKupD,YAEhB,GADApgB,EAAOnpC,KAAKg5E,kBAAkB7vC,EAAM15B,EAAM,EAAA8gB,KAAKG,MAAM,GAAM,EAAOvb,GAC9D1F,EAAKopB,GAAG,KAAsB,CAEhC,GADyBppB,EAAKwzC,mBAE5BsrD,EAAa,eACR,CACL,IAAI71E,EAAiBjpB,EAAKipB,eAGtB61E,EAFA71E,EACEA,EAAez2B,YAAcgyB,EAAehyB,UACjC,SAEA,SAGF,eAIjBssG,EADS9+F,GAAQ,EAAA8gB,KAAK3sB,KACT,UACJ6L,EAAKirB,MAAM,IACP,SAEA,YAEf,WA5DQ,CACZ,OAAQvlB,EAAQ/G,MACd,KAAK,EAAAP,SAAS4C,WAAY,MAC1B,KAAK,EAAA5C,SAASmG,eACd,KAAK,EAAAnG,SAAS0E,cAKZ,GAJU4C,EAAQ/G,KAAQ,EAAAP,SAASmG,eAAnCmB,EAC+BA,EAASlE,YAEvBjR,KAAKqvB,SAAS25B,kBAAkB7zC,EAASnV,KAAKu1E,YAAa,EAAAhlD,KAAK4yB,KAAM,EAAA4C,WAAWO,QAGhG,OADAtmD,KAAKupD,YAAct1B,EAAexkB,KAC3BzP,KAAKL,OAAO69D,cAIvB,QACEr0B,EAAOnpC,KAAKq0E,kBAAkBl/D,EAAS,EAAAob,KAAK4yB,MAC5Cha,EAAOnpC,KAAKg5E,kBAAkB7vC,EAAMnpC,KAAKupD,YAAa,EAAAh5B,KAAKG,MAAM,GAAM,EAAOvb,GAGlFo5F,EAAa,aA8CjB,OADAvuG,KAAKupD,YAAct1B,EAAexkB,KAC3B05B,EACHnpC,KAAKL,OAAOksC,MAAM,KAAM,CAAE1C,EAAMnpC,KAAKsqF,mBAAmBikB,IAAevuG,KAAKguB,QAAQioD,gBACpFj2E,KAAKsqF,mBAAmBikB,GAI9B,uBAAuBplE,EAAqB15B,GAC1C,IAAI9P,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YAChB,OAAQ9lE,EAAKrB,MACX,KAAK,EACC0zB,EAAK+0B,YAAY1tB,EAAM15B,KACzB05B,EAAOnpC,KAAKguB,QAAQyD,WAAW,GAC3B9xB,EAAO20E,MAAM,EAAAxtC,QAAQ0nE,cAAerlE,GACpCxpC,EAAOq1E,OAAO,EAAAjuC,SAASgyB,OACrBp5D,EAAOq1E,OAAO,EAAAjuC,SAAS+xB,OACrB3vB,EACAxpC,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,KAAK,EACC0+B,EAAK+0B,YAAY1tB,EAAM15B,KACzB05B,EAAOnpC,KAAKguB,QAAQyD,WAAW,GAC3B9xB,EAAO20E,MAAM,EAAAxtC,QAAQ2nE,eAAgBtlE,GACrCxpC,EAAOq1E,OAAO,EAAAjuC,SAASgyB,OACrBp5D,EAAOq1E,OAAO,EAAAjuC,SAAS+xB,OACrB3vB,EACAxpC,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,KAAK,EACC0+B,EAAK+0B,YAAY1tB,EAAM15B,KACzB05B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS6xB,OAC5BzvB,EACAxpC,EAAOyD,IAAI,OAGf,MAEF,KAAK,EACC0+B,EAAK+0B,YAAY1tB,EAAM15B,KACzB05B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAAS6xB,OAC5BzvB,EACAxpC,EAAOyD,IAAI,SAGf,MAEF,KAAK,GACC0+B,EAAK+0B,YAAY1tB,EAAM15B,KAEzB05B,EAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASwvB,MAC5BptB,EACAxpC,EAAOyD,IAAI,KAMnB,OAAO+lC,EAIT,iBAAiBA,EAAqBz9B,GACpC,IAAIqmD,EAAiB/xD,KAAKu1E,YAAYxjB,eAClC/lD,EAASN,EAAMM,OACfA,EAAOsS,eAAiB,IAAGtS,EAAOsS,eAAiBte,KAAKL,OAAO+uG,iBAAiB1iG,EAAOE,iBAC3FR,EAAMsZ,aAAemkB,EACrB4oB,EAAe1xB,eAAerzB,KAAKtB,GAIrC,oBAAoBg+E,EAAkB95B,GACpC,QAAK5vD,KAAKguB,QAAQyD,WAAWi4D,KAC3B1pF,KAAKymB,MACH,EAAArb,eAAeu+E,yBACf/5B,EAAWlkD,MAAO,EAAAvB,gBAAgBu/E,KAE7B,GAMX,mBAAmBj6E,EAAYmgD,GAC7B,OAAQngD,EAAKrB,MACX,KAAK,GAAe,OAAOpO,KAAKk5E,oBAAoB,GAActpB,GAClE,KAAK,GAAiB,OAAO5vD,KAAKk5E,oBAAoB,IAAyBtpB,GAEjF,GAAIngD,EAAKopB,GAAG,KAAsB,CAChC,IAAIH,EAAiBjpB,EAAKipB,eAC1B,KAAOA,GAAgB,CACrB,IAAIhqB,EAAgBgqB,EAAehqB,cACnC,GAAIA,EACF,IAAK,IAAIrO,EAAI,EAAG8b,EAAIzN,EAAchC,OAAQrM,EAAI8b,IAAK9b,EACjD,IAAKL,KAAKi2F,mBAAmBvnF,EAAcrO,GAAIuvD,GAC7C,OAAO,EAIbl3B,EAAiBA,EAAe4K,MAGpC,OAAO,EAIT,wBAAwB9pB,EAAsBo2C,GAC5C,IAAI++C,GAAY,EACZ3/F,EAAmB4gD,EAAW5gD,iBAC9BA,IACGhP,KAAKi2F,mBAAmBnrF,OAAO0O,EAAUioB,UAAWzyB,KACvD2/F,GAAY,IAGhB,IAAIjtE,EAAiBloB,EAAUkoB,eAC/B,IAAK,IAAIrhC,EAAI,EAAG8b,EAAIulB,EAAeh1B,OAAQrM,EAAI8b,IAAK9b,EAC7CL,KAAKi2F,mBAAmBv0D,EAAerhC,GAAIuvD,EAAW9gD,WAAWzO,MACpEsuG,GAAY,GAMhB,OAHK3uG,KAAKi2F,mBAAmBz8E,EAAUzK,WAAY6gD,EAAW7gD,cAC5D4/F,GAAY,GAEPA,EAIT,kBAAkBxlE,GAChB,IACIyiD,EADS5rF,KAAKL,OACE+6E,cAAcvxC,EAAM,EAAA5B,sBAAsBskD,SAC9D,OAAID,EACK,EAAAp2B,iBAAiBo2B,GACpB,EACA,EAEC,EAMT,SAASn8E,GACP,IAAI9P,EAASK,KAAKL,OAClB,OAAQ8P,EAAKrB,MACX,QAAStD,QAAO,GAChB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAOnL,EAAOyD,IAAI,GACtC,KAAK,EACL,KAAK,EAAgB,GAAiB,IAAbqM,EAAK69B,KAAY,OAAO3tC,EAAOyD,IAAI,GAC5D,KAAK,EACL,KAAK,EAAc,OAAOzD,EAAO0D,IAAI,GACrC,KAAK,GAAc,OAAO1D,EAAOkE,IAAI,GACrC,KAAK,GAAc,OAAOlE,EAAOmE,IAAI,GACrC,KAAK,GAAe,OAAOnE,EAAOoE,KAAK6qG,GACvC,KAAK,GAAiB,OAAOjvG,EAAOyqG,YAKxC,QAAQ36F,GACN,IAAI9P,EAASK,KAAKL,OAClB,OAAQ8P,EAAKrB,MACX,QAAStD,QAAO,GAChB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAOnL,EAAOyD,IAAI,GACtC,KAAK,EACL,KAAK,EAAgB,GAAiB,IAAbqM,EAAK69B,KAAY,OAAO3tC,EAAOyD,IAAI,GAC5D,KAAK,EACL,KAAK,EAAc,OAAOzD,EAAO0D,IAAI,GACrC,KAAK,GAAc,OAAO1D,EAAOkE,IAAI,GACrC,KAAK,GAAc,OAAOlE,EAAOmE,IAAI,IAKzC,WAAW2L,GACT,IAAI9P,EAASK,KAAKL,OAClB,OAAQ8P,EAAKrB,MACX,QAAStD,QAAO,GAChB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAAc,OAAOnL,EAAOyD,KAAK,GACtC,KAAK,EACL,KAAK,EAAgB,GAAiB,IAAbqM,EAAK69B,KAAY,OAAO3tC,EAAOyD,KAAK,GAC7D,KAAK,EACL,KAAK,EAAc,OAAOzD,EAAO0D,KAAK,GAAI,GAC1C,KAAK,GAAc,OAAO1D,EAAOkE,KAAK,GACtC,KAAK,GAAc,OAAOlE,EAAOmE,KAAK,IAK1C,cAAcqlC,EAAqB15B,GACjC,IAAI9P,EAASK,KAAKL,OAClB,OAAQ8P,EAAKrB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACH+6B,EAAOnpC,KAAK+0E,uBAAuB5rC,EAAM15B,GAG3C,KAAK,GACL,KAAK,EACL,KAAK,EACH,OAAO05B,EAET,KAAK,EACL,KAAK,EACH,OAAOxpC,EAAOq1E,OAAO,EAAAjuC,SAASyvB,MAAOrtB,EAAMxpC,EAAO0D,IAAI,IAExD,KAAK,EAAoBoM,EAAK8rD,WAAav7D,KAAK8vF,oBAAoBxiF,IAAI67B,KAAOA,EAAOnpC,KAAK2lG,gBAAgBx8D,EAAM15B,IACjH,KAAK,EACH,OAAoB,IAAbA,EAAK69B,KACR3tC,EAAOq1E,OAAO,EAAAjuC,SAASyvB,MAAOrtB,EAAMxpC,EAAO0D,IAAI,IAC/C8lC,EAEN,KAAK,GAAc,CAEjB,IAAIrH,EAAO9hC,KAAKu1E,YACZiV,EAAO1oD,EAAK6wB,aAAa,EAAApiC,KAAK1sB,KAC9B6lC,EAAM/pC,EAAOq1E,OAAO,EAAAjuC,SAAS6xB,OAC/Bj5D,EAAOq1E,OAAO,EAAAjuC,SAASkwB,MAAOt3D,EAAOi2E,UAAU4U,EAAK/qD,MAAO0J,GAAOxpC,EAAOkE,IAAI,IAC7ElE,EAAOq1E,OAAO,EAAAjuC,SAASgwB,MACrBp3D,EAAOk2E,UAAU2U,EAAK/qD,MAAO,EAAA2G,WAAW7+B,KACxC5H,EAAOk2E,UAAU2U,EAAK/qD,MAAO,EAAA2G,WAAW7+B,OAI5C,OADAu6B,EAAKoxB,cAAcs3B,GACZ9gD,EAET,KAAK,GAAc,CAEjB,IAAI5H,EAAO9hC,KAAKu1E,YACZiV,EAAO1oD,EAAK6wB,aAAa,EAAApiC,KAAKzsB,KAC9B4lC,EAAM/pC,EAAOq1E,OAAO,EAAAjuC,SAAS6xB,OAC/Bj5D,EAAOq1E,OAAO,EAAAjuC,SAASmwB,MAAOv3D,EAAOi2E,UAAU4U,EAAK/qD,MAAO0J,GAAOxpC,EAAOmE,IAAI,IAC7EnE,EAAOq1E,OAAO,EAAAjuC,SAASiwB,MACrBr3D,EAAOk2E,UAAU2U,EAAK/qD,MAAO,EAAA2G,WAAW5+B,KACxC7H,EAAOk2E,UAAU2U,EAAK/qD,MAAO,EAAA2G,WAAW5+B,OAI5C,OADAs6B,EAAKoxB,cAAcs3B,GACZ9gD,EAET,KAAK,GAGH,OAAO/pC,EAAO20E,MAAM,EAAAxtC,QAAQgvB,OAAQn2D,EAAOkvG,YAAY1lE,IAEzD,QAEE,OADAr+B,QAAO,GACAnL,EAAOyD,IAAI,IAMxB,eACEy8B,GAGA,IAAItC,EAAUv9B,KAAKu9B,QACnBzyB,OAAO+0B,EAActC,SAAWA,GAChC,IAAI59B,EAASK,KAAKL,OACdquB,EAAUhuB,KAAKguB,QACnBhuB,KAAKupD,YAAc1pB,EAAcpwB,KACjC,IAAI+mB,EAAgB+G,EAAQ/G,cAE5B,OADAx2B,KAAK+qF,gBAAgBv0D,GACd72B,EAAOa,KAAKg2B,EAActH,aAAc,CAC7ClB,EAAQgD,SACJrxB,EAAO0D,IAAIw8B,EAAc0D,kBACzB5jC,EAAOyD,IAAIy8B,EAAc0D,kBAC7B5jC,EAAOyD,IACLy8B,EAAcxK,aAAa,EAAAxJ,eAAezO,WACtC,EACAyiB,EAAcpQ,KAEnBzB,EAAQioD,gBAIb,qCAEEp2C,EAEAwL,EAAyB,IAEzB,IAAIr1B,EAAU6pB,EAAc7pB,QAC5B,IAAKA,EAAS,OAAOq1B,EAErB,IAAI1rC,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YACZznB,EAAWhsB,EAAKgsB,SAChBghD,EAAiBhhD,EACjBhsB,EAAKksB,YAAY,EAAAhrD,YAAYsC,OAAQm6B,MACrC,EACAw2C,EAAiBj2E,KAAKguB,QAAQioD,eAGlC,IAAK,IAAI7+C,EAAUC,WAAWrhB,GAAU3V,EAAI,EAAG8b,EAAIib,EAAQ1qB,OAAQrM,EAAI8b,IAAK9b,EAAG,CAC7E,IAAI23B,EAAS7Y,UAAUiY,EAAQ/2B,IAC/B,GACE23B,EAAO5pB,MAAQ,EAAAwd,YAAY0M,OAC3BN,EAAO/H,QAAU4P,EACjB,SAEF,IAAI8E,EAAe3M,EACnBltB,QAAQ65B,EAAMjK,MAAM,EAAAr4B,YAAYge,QAChC,IAKI21E,EALAtwD,EAAYf,EAAMl1B,KAClB02F,EAAkBzgE,EAAU0e,eAC5BkM,EAAiB3rB,EAAM1iC,UACvB8pD,EAAkBuE,EAAevE,gBACjCzsC,EAAiBgxC,EAAehxC,eAEhCioC,EAAW5iB,EAAM4iB,SACjBA,GAAUvnD,KAAKi2F,mBAAmBvwD,EAAW6hB,GAG7CjoC,GAAkB,GACpB02E,EAAWr2F,EAAOk2E,UAChB/nB,EACIhsB,EAAKksB,YAAYrpB,EAAM/jC,MAAO6+B,MAC9B,EAAIngB,EACR6mF,GAEEzgE,EAAU61B,YAAWy6B,EAAWh2F,KAAKi3F,WAAWjB,KAG3CjqC,GACTiqC,EAAWh2F,KAAKq0E,kBAAkBtoB,EAAiBrmB,EACjD,IAEEA,EAAU61B,YAAcv7D,KAAK8vF,oBAAoBxiF,IAAI0oF,KACvDA,EAAWh2F,KAAKi3F,WAAWjB,KAK7BA,EAAWh2F,KAAKqrF,SAAS3lD,GAG3B2F,EAAMr+B,KACJrN,EAAO08D,MAAM32B,EAAUqd,SACrBpjD,EAAOk2E,UAAUi5B,EAAgB74B,GACjC+f,EACAmQ,EACAxhE,EAAMnC,eAIZ,OAAO6I,EAIT,UAEE5/B,EAEAsjG,GAEA,IAMIC,EANAzxE,EAAUv9B,KAAKu9B,QACf59B,EAASK,KAAKL,OACds0B,EAAiBsJ,EAAQtJ,eACzBqC,EAAgBiH,EAAQjH,cAC5B,IAAKA,IAAkBt2B,KAAK+qF,gBAAgBz0D,GAAgB,OAAO32B,EAAO69D,cAQxEwxC,EALc,OAAZvjG,EAKWzL,KAAKq0E,kBAAkB5oE,EAASwoB,EAAexkB,KAAM,IAErDzP,KAAKqrF,SAASp3D,EAAexkB,MAG5C,IAAIw/F,EAAcjvG,KAAKsqF,mBAAmBykB,EAAarjG,MAAMM,OAAOE,gBAChER,EAAQqjG,EAAarjG,MACrBM,EAASN,EAAMM,OACnB,OAAOrM,EAAOksC,MAAM,KAAM,CACxBlsC,EAAOa,KACL81B,EAAcpH,aAAc,CAC1B8/E,EACAC,EACAtvG,EAAOyD,IAAI4I,EAAOG,OAAOT,EAAMU,QAC/BzM,EAAOyD,IAAI4I,EAAOK,aAEpB,EAAA+5B,WAAWI,MAEb7mC,EAAO69D,gBAKX,wBAEEr0B,EAEA15B,EAEAmgD,GAEA9kD,OAAO2E,EAAKopB,GAAG,MACf,IAAIl5B,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YACZiV,EAAO1oD,EAAK6wB,aAAaljD,GAS7B,OARKqyB,EAAK+0B,YAAY1tB,EAAM15B,IAAOqyB,EAAK8wB,aAAa43B,EAAK/qD,MAAO,EAAAkyB,WAAWuC,SAC5EpyB,EAAK8wB,aAAa43B,EAAK/qD,MAAO,EAAAkyB,WAAWzE,SACzC/jB,EAAOxpC,EAAOosF,GACZpsF,EAAOi2E,UAAU4U,EAAK/qD,MAAO0J,GAC7BxpC,EAAOk2E,UAAU2U,EAAK/qD,MAAOhwB,EAAK20C,gBAClCpkD,KAAK8rF,UAAU,KAAMl8B,IAEvB9tB,EAAKoxB,cAAcs3B,GACZrhD,EAIT,uBAEEA,EAEA15B,EAEAyB,EAEA0+C,GAEA9kD,OAAOoG,EAAO2nB,GAAG,MAAwB3nB,EAAOgyC,gBAAgBc,eAAev0C,IAC/E,IAAI9P,EAASK,KAAKL,OACdmiC,EAAO9hC,KAAKu1E,YACZiV,EAAO1oD,EAAK6wB,aAAaljD,GACzBunB,EAAqBh3B,KAAKu9B,QAAQvG,mBAWtC,OAVAlsB,OAAO9K,KAAK+qF,gBAAgB/zD,IAC5BmS,EAAOxpC,EAAOosF,GACZpsF,EAAOa,KAAKw2B,EAAmB9H,aAAc,CAC3CvvB,EAAOi2E,UAAU4U,EAAK/qD,MAAO0J,GAC7BxpC,EAAOyD,IAAI8N,EAAOwnB,eAAgBjJ,KACjC,EAAA2W,WAAWt/B,KACdnH,EAAOk2E,UAAU2U,EAAK/qD,MAAOhwB,EAAK20C,gBAClCpkD,KAAK8rF,UAAU,KAAMl8B,IAEvB9tB,EAAKoxB,cAAcs3B,GACZrhD,GApzTX,aA0zTA,MAAMylE,EAAY,IAAIlmG,WAAW,IAEjC,SAAS2tF,EACPhkF,EACAR,GAQA,GALA0kF,EAA8B1kF,EAAYnG,MAAMM,OAAO+S,WAEvDy3E,EAA+B,EAAA33D,mBAC7BxsB,EAAQzR,KAAMyR,EAAQ4d,OAAQ5d,EAAQwmB,GAAG,EAAAx2B,YAAYy6B,WAAW,GAE7DzqB,EAAQgjB,aAAa,EAAAxJ,eAAe/O,UAAzC,CAEA,IAAIygB,EAAUlrB,EAAQkrB,QAClB5d,EAAY7U,OAAO,EAAAisF,cAAc,EAAAjpF,cAAcgP,SAAUjL,EAAYoE,aACrEnG,EAAO6P,EAAU1P,UACrB,GAAa,OAATH,GAAiBA,EAAKpD,OAAS,EAAG,CACpC,IAAIqf,EAAMjc,EAAK,GAGXic,EAAIyP,cAAc,EAAAztB,YAAY6G,SAChC4hF,EAAyDzqE,EAAKzqB,MAC1DwO,EAAKpD,QAAU,IACjBqf,EAAMjc,EAAK,GACPic,EAAIyP,cAAc,EAAAztB,YAAY6G,SAChC2hF,EAA8BC,EAC9BA,EAAyDzqE,EAAKzqB,MAC1DwO,EAAKpD,OAAS,GAChB6wB,EAAQ9W,MACN,EAAArb,eAAe2wB,+BACfpc,EAAUjU,MAAO,IAAKoE,EAAKpD,OAAOT,aAItCsxB,EAAQ9W,MACN,EAAArb,eAAe0wB,wBACf/P,EAAIrgB,SAKV6xB,EAAQ9W,MACN,EAAArb,eAAe0wB,wBACf/P,EAAIrgB,YAIR6xB,EAAQ9W,MACN,EAAArb,eAAe2+E,wCACfpqE,EAAUjU,MAAO,IAAK,MAK5B,IAAI6qF,EACAC,G,8ECjqUJ,SAAYprF,GACV,2CACA,mDACA,yCACA,6DACA,iJACA,qGACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uKACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,uFACA,yDACA,6IACA,uIACA,uIACA,+GACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,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,MAAMwiH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocBuffer = \"__allocBuffer\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./text\";\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \":\" +\n        source.lineAt(range.start).toString() +\n        \":\" +\n        source.columnAt().toString()\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,i32[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenCodesAtPos = assert(seenInSource.get(range.start));\n          if (seenCodesAtPos.includes(code)) return;\n          seenCodesAtPos.push(code);\n        } else {\n          seenInSource.set(range.start, [ code ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,i32[]>();\n        seenInSource.set(range.start, [ code ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode,\n  isTrivialAlphanum\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var node = new TypeName();\n    node.kind = NodeKind.TYPENAME;\n    node.range = range;\n    node.identifier = name;\n    node.next = null;\n    return node;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var node = new NamedTypeNode();\n    node.kind = NodeKind.NAMEDTYPE;\n    node.range = range;\n    node.name = name;\n    node.typeArguments = typeArguments;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var node = new FunctionTypeNode();\n    node.kind = NodeKind.FUNCTIONTYPE;\n    node.range = range;\n    node.parameters = parameters;\n    node.returnType = returnType;\n    node.explicitThisType = explicitThisType;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var node = new TypeParameterNode();\n    node.kind = NodeKind.TYPEPARAMETER;\n    node.range = range;\n    node.name = name;\n    node.extendsType = extendsType;\n    node.defaultType = defaultType;\n    return node;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var node = new ParameterNode();\n    node.kind = NodeKind.PARAMETER;\n    node.range = range;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.parameterKind = kind;\n    return node;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var node = new DecoratorNode();\n    node.kind = NodeKind.DECORATOR;\n    node.range = range;\n    node.name = name;\n    node.arguments = args;\n    node.decoratorKind = DecoratorKind.fromNode(name);\n    return node;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.kind = NodeKind.COMMENT;\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = name;\n    node.isQuoted = isQuoted;\n    return node;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = \"\";\n    return node;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var node = new ArrayLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.range = range;\n    node.literalKind = LiteralKind.ARRAY;\n    node.elementExpressions = elements;\n    return node;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var node = new AssertionExpression();\n    node.kind = NodeKind.ASSERTION;\n    node.range = range;\n    node.assertionKind = assertionKind;\n    node.expression = expression;\n    node.toType = toType;\n    return node;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var node = new BinaryExpression();\n    node.kind = NodeKind.BINARY;\n    node.range = range;\n    node.operator = operator;\n    node.left = left;\n    node.right = right;\n    return node;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var node = new CallExpression();\n    node.kind = NodeKind.CALL;\n    node.range = range;\n    node.expression = expression;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var node = new ClassExpression();\n    node.kind = NodeKind.CLASS;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var node = new CommaExpression();\n    node.kind = NodeKind.COMMA;\n    node.range = range;\n    node.expressions = expressions;\n    return node;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var node = new ConstructorExpression();\n    node.kind = NodeKind.CONSTRUCTOR;\n    node.range = range;\n    node.text = \"constructor\";\n    return node;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var node = new ElementAccessExpression();\n    node.kind = NodeKind.ELEMENTACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.elementExpression = element;\n    return node;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var node = new FalseExpression();\n    node.kind = NodeKind.FALSE;\n    node.range = range;\n    node.text = \"false\";\n    return node;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var node = new FloatLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.FLOAT;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var node = new FunctionExpression();\n    node.kind = NodeKind.FUNCTION;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var node = new InstanceOfExpression();\n    node.kind = NodeKind.INSTANCEOF;\n    node.range = range;\n    node.expression = expression;\n    node.isType = isType;\n    return node;\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var node = new IntegerLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.INTEGER;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var node = new NewExpression();\n    node.kind = NodeKind.NEW;\n    node.range = range;\n    node.typeName = typeName;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var node = new NullExpression();\n    node.kind = NodeKind.NULL;\n    node.range = range;\n    node.text = \"null\";\n    return node;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var node = new ObjectLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.OBJECT;\n    node.range = range;\n    node.names = names;\n    node.values = values;\n    return node;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var node = new ParenthesizedExpression();\n    node.kind = NodeKind.PARENTHESIZED;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var node = new PropertyAccessExpression();\n    node.kind = NodeKind.PROPERTYACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.property = property;\n    return node;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var node = new RegexpLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.REGEXP;\n    node.range = range;\n    node.pattern = pattern;\n    node.patternFlags = flags;\n    return node;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var node = new TernaryExpression();\n    node.kind = NodeKind.TERNARY;\n    node.range = range;\n    node.condition = condition;\n    node.ifThen = ifThen;\n    node.ifElse = ifElse;\n    return node;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var node = new StringLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.STRING;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var node = new SuperExpression();\n    node.kind = NodeKind.SUPER;\n    node.range = range;\n    node.text = \"super\";\n    return node;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var node = new ThisExpression();\n    node.kind = NodeKind.THIS;\n    node.range = range;\n    node.text = \"this\";\n    return node;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var node = new TrueExpression();\n    node.kind = NodeKind.TRUE;\n    node.range = range;\n    node.text = \"true\";\n    return node;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var node = new UnaryPostfixExpression();\n    node.kind = NodeKind.UNARYPOSTFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var node = new UnaryPrefixExpression();\n    node.kind = NodeKind.UNARYPREFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var node = new BlockStatement();\n    node.kind = NodeKind.BLOCK;\n    node.range = range;\n    node.statements = statements;\n    return node;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var node = new BreakStatement();\n    node.kind = NodeKind.BREAK;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var node = new ClassDeclaration();\n    node.kind = NodeKind.CLASSDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = identifier;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.implementsTypes = implementsTypes;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var node = new ContinueStatement();\n    node.kind = NodeKind.CONTINUE;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var node = new DoStatement();\n    node.kind = NodeKind.DO;\n    node.range = range;\n    node.statement = statement;\n    node.condition = condition;\n    return node;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var node = new EmptyStatement();\n    node.kind = NodeKind.EMPTY;\n    node.range = range;\n    return node;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var node = new EnumDeclaration();\n    node.kind = NodeKind.ENUMDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.values = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    initializer: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var node = new EnumValueDeclaration();\n    node.kind = NodeKind.ENUMVALUEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.initializer = initializer;\n    return node;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var node = new ExportStatement();\n    node.kind = NodeKind.EXPORT;\n    node.range = range;\n    node.members = members;\n    node.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      node.internalPath = normalizedPath;\n    } else {\n      node.internalPath = null;\n    }\n    node.isDeclare = isDeclare;\n    return node;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var node = new ExportDefaultStatement();\n    node.kind = NodeKind.EXPORTDEFAULT;\n    node.declaration = declaration;\n    node.range = range;\n    return node;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var node = new ExportImportStatement();\n    node.kind = NodeKind.EXPORTIMPORT;\n    node.range = range;\n    node.name = name;\n    node.externalName = externalName;\n    return node;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var node = new ExportMember();\n    node.kind = NodeKind.EXPORTMEMBER;\n    node.range = range;\n    node.localName = name;\n    if (!externalName) externalName = name;\n    node.exportedName = externalName;\n    return node;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var node = new ExpressionStatement();\n    node.kind = NodeKind.EXPRESSION;\n    node.range = expression.range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var node = new IfStatement();\n    node.kind = NodeKind.IF;\n    node.range = range;\n    node.condition = condition;\n    node.ifTrue = ifTrue;\n    node.ifFalse = ifFalse;\n    return node;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = decls;\n    node.namespaceName = null;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = normalizedPath;\n    return node;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = null;\n    node.namespaceName = identifier;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = normalizedPath;\n    return node;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var node = new ImportDeclaration();\n    node.kind = NodeKind.IMPORTDECLARATION;\n    node.range = range;\n    node.foreignName = foreignName;\n    if (!name) name = foreignName;\n    node.name = name;\n    return node;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var node = new InterfaceDeclaration();\n    node.kind = NodeKind.INTERFACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var node = new FieldDeclaration();\n    node.kind = NodeKind.FIELDDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var node = new ForStatement();\n    node.kind = NodeKind.FOR;\n    node.range = range;\n    node.initializer = initializer;\n    node.condition = condition;\n    node.incrementor = incrementor;\n    node.statement = statement;\n    return node;\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    var node = new ForOfStatement();\n    node.kind = NodeKind.FOROF;\n    node.range = range;\n    node.variable = variable;\n    node.iterable = iterable;\n    node.statement = statement;\n    return node;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var node = new FunctionDeclaration();\n    node.kind = NodeKind.FUNCTIONDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    node.arrowKind = arrowKind;\n    return node;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var node = new IndexSignatureDeclaration();\n    node.kind = NodeKind.INDEXSIGNATUREDECLARATION;\n    node.range = range;\n    node.keyType = keyType;\n    node.valueType = valueType;\n    node.flags = flags;\n    return node;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var node = new MethodDeclaration();\n    node.kind = NodeKind.METHODDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var node = new NamespaceDeclaration();\n    node.kind = NodeKind.NAMESPACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var node = new ReturnStatement();\n    node.kind = NodeKind.RETURN;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var node = new SwitchStatement();\n    node.kind = NodeKind.SWITCH;\n    node.range = range;\n    node.condition = condition;\n    node.cases = cases;\n    return node;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var node = new SwitchCase();\n    node.kind = NodeKind.SWITCHCASE;\n    node.range = range;\n    node.label = label;\n    node.statements = statements;\n    return node;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var node = new ThrowStatement();\n    node.kind = NodeKind.THROW;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var node = new TryStatement();\n    node.kind = NodeKind.TRY;\n    node.range = range;\n    node.statements = statements;\n    node.catchVariable = catchVariable;\n    node.catchStatements = catchStatements;\n    node.finallyStatements = finallyStatements;\n    return node;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var node = new TypeDeclaration();\n    node.kind = NodeKind.TYPEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.type = alias;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var node = new VariableStatement();\n    node.kind = NodeKind.VARIABLE;\n    node.range = range;\n    node.declarations = declarations;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var node = new VariableDeclaration();\n    node.kind = NodeKind.VARIABLEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators; // inherited\n    return node;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var node = new VoidStatement();\n    node.kind = NodeKind.VOID;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var node = new WhileStatement();\n    node.kind = NodeKind.WHILE;\n    node.range = range;\n    node.condition = condition;\n    node.statement = statement;\n    return node;\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        // @operator.binary, @operator.prefix, @operator.postfix\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  /** Textual name. */\n  text: string;\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL,\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  /** Integer value. */\n  value: i64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.kind = NodeKind.SOURCE;\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Rememberd column number. */\n  private lineColumn: i32 = 0;\n\n  /** Determines the line number at the specified position. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n  variable: Statement;\n  /** Iterable expression being iterated. */\n  iterable: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  var pos = path.lastIndexOf(\".\");\n  var len = path.length;\n  if (pos >= 0 && len - pos >= 2) { // at least one char plus dot\n    let cur = pos;\n    while (++cur < len) {\n      if (!isTrivialAlphanum(path.charCodeAt(cur))) {\n        assert(false); // not a valid external path\n        return path;\n      }\n    }\n    return path.substring(0, pos);\n  }\n  assert(false); // not an external path\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n  debugInfoRef: usize = 0;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          let start = this.pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && this.pos < this.end &&\n            ((text.charCodeAt(this.pos)) & 0xFC00) == 0xDC00\n          ) ++this.pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, this.pos)\n          );\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) reusableState = null;\n    else state = new State();\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// ├─File                     File, analogous to Source in the AST\n// └─FunctionTarget           Indirectly called function helper (typed)\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Static array prototype reference. */\n  staticArrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocBuffer(size: usize, id: u32, data: usize = 0): usize` */\n  allocBufferInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    this.options = options;\n    var nativeSource = new Source(LIBRARY_SUBST + \".wasm\", \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, id: u32, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, signature, null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    // Initialize only once\n    if (this.initialized) return;\n\n    this.initialized = true;\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let localIdentifier = queuedImport.localIdentifier;\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            localIdentifier.text,\n            element,\n            localIdentifier // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonNames.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonNames.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonNames.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, basePrototype.identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) continue; // explicitly disabled\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    this.staticArrayPrototype = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonNames.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonNames.alloc);\n    this.reallocInstance = this.requireFunction(CommonNames.realloc);\n    this.freeInstance = this.requireFunction(CommonNames.free);\n    this.retainInstance = this.requireFunction(CommonNames.retain);\n    this.releaseInstance = this.requireFunction(CommonNames.release);\n    this.collectInstance = this.requireFunction(CommonNames.collect);\n    this.typeinfoInstance = this.requireFunction(CommonNames.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonNames.instanceof_);\n    this.visitInstance = this.requireFunction(CommonNames.visit);\n    this.allocBufferInstance = this.requireFunction(CommonNames.allocBuffer);\n    this.allocArrayInstance = this.requireFunction(CommonNames.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? assert(filesByName.get(foreignPath))\n         : filesByName.has(foreignPathAlt)\n         ? assert(filesByName.get(foreignPathAlt))\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            let method = this.initializeMethod(methodDeclaration, element);\n            if (method !== null && methodDeclaration.name.kind == NodeKind.CONSTRUCTOR) {\n              element.constructorPrototype = method;\n            }\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return null;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return null;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n    return element;\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.arguments;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var cyclics = new Set<Class>();\n    // TODO: for (let instance of this.managedClasses.values()) {\n    for (let _values = Map_values(this.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element, localIdentifier: IdentifierExpression): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt()\n        );\n      }\n    }\n  }\n}\n\nvar nextFunctionTarget = 0;\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      \"~sig\" + nextFunctionTarget.toString(),\n      \"~sig\" + nextFunctionTarget.toString(),\n      program,\n      program.nativeFile\n    );\n    ++nextFunctionTarget;\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n\n    // Remember extendees and mark overloaded methods virtual\n    var basePrototype: ClassPrototype  = base.prototype;\n    var thisPrototype = this.prototype;\n    assert(basePrototype != thisPrototype);\n    basePrototype.extendees.add(thisPrototype);\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _keys = Map_keys(baseInstanceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = _keys[i];\n            let member = assert(baseInstanceMembers.get(memberName));\n            if (thisInstanceMembers.has(memberName)) {\n              member.set(CommonFlags.VIRTUAL);\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      switch (fieldInstance.type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.f32ArrayPrototype) return Type.f32;\n        if (prototype == program.f64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.i8ArrayPrototype) return Type.i8;\n        if (prototype == program.i16ArrayPrototype) return Type.i16;\n        if (prototype == program.i32ArrayPrototype) return Type.i32;\n        if (prototype == program.i64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.u8ArrayPrototype) return Type.u8;\n        if (prototype == program.u8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.u16ArrayPrototype) return Type.u16;\n        if (prototype == program.u32ArrayPrototype) return Type.u32;\n        if (prototype == program.u64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.is(TypeFlags.REFERENCE)) {\n            if ((current = fieldType.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = []\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport type NativeType = usize;\nexport namespace NativeType {\n  export const None: NativeType = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: NativeType = 1 /* _BinaryenTypeUnreachable */;\n  export const I32: NativeType = 2 /* _BinaryenTypeInt32 */;\n  export const I64: NativeType = 3 /* _BinaryenTypeInt64 */;\n  export const F32: NativeType = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: NativeType = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: NativeType = 6 /* _BinaryenTypeVec128 */;\n  export const Funcref: NativeType = 7 /* _BinaryenTypeFuncref */;\n  export const Anyref: NativeType = 8 /* _BinaryenTypeAnyref */;\n  export const Nullref: NativeType = 9 /* _BinaryenTypeNullref */;\n  export const Exnref: NativeType = 10 /* _BinaryenTypeExnref */;\n  export const Auto: NativeType = -1 /* _BinaryenTypeAuto */;\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  All = 1023 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  Host = 20 /* _BinaryenHostId */,\n  Nop = 21 /* _BinaryenNopId */,\n  Unreachable = 22 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 24 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 23 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 25 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 26 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 27 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 28 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 29 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 30 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 31 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 32 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 33 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 34 /* _BinaryenMemoryInitId */,\n  DataDrop = 35 /* _BinaryenDataDropId */,\n  MemoryCopy = 36 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 37 /* _BinaryenMemoryFillId */,\n  Push = 38 /* _BinaryenPushId */,\n  Pop = 39 /* _BinaryenPopId */,\n  RefNull = 40 /* _BinaryenRefNullId */,\n  RefIsNull = 41 /* _BinaryenRefIsNullId */,\n  RefFunc = 42 /* _BinaryenRefFuncId */,\n  Try = 43 /* _BinaryenTryId */,\n  Throw = 44 /* _BinaryenThrowId */,\n  Rethrow = 45 /* _BinaryenRethrowId */,\n  BrOnExn = 46 /* _BinaryenBrOnExnId */,\n  TupleMake = 47 /* _BinaryenTupleMakeId */,\n  TupleExtract = 48 /* _BinaryenTupleExtractId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  AbsI8x16 = 67 /* __BinaryenAbsVecI8x16 */,\n  NegI8x16 = 68 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 69 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  BitmaskI8x16 = 71 /* __BinaryenBitmaskVecI8x16 */,\n  AbsI16x8 = 72 /* __BinaryenAbsVecI16x8 */,\n  NegI16x8 = 73 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 74 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 75 /* _BinaryenAllTrueVecI16x8 */,\n  BitmaskI16x8 = 76 /* _BinaryenBitmaskVecI16x8 */,\n  AbsI32x4 = 77 /* _BinaryenAbsVecI32x4 */,\n  NegI32x4 = 78 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 79 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 80 /* _BinaryenAllTrueVecI32x4 */,\n  BitmaskI32x4 = 81 /* _BinaryenBitmaskVecI32x4 */,\n  NegI64x2 = 82 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 83 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 84 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 85 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 86 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 87 /* _BinaryenSqrtVecF32x4 */,\n  AbsF64x2 = 88 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 89 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 90 /* _BinaryenSqrtVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 91 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 92 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 93 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 94 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 95 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 96 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 97 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 98 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 99 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 100 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 101 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 102 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 103 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 104 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 105 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 106 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrU32 = 11 /* _BinaryenShrUInt32 */,\n  ShrI32 = 12 /* _BinaryenShrSInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrU64 = 36 /* _BinaryenShrUInt64 */,\n  ShrI64 = 37 /* _BinaryenShrSInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n  AddF32x4 = 156 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 157 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 158 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 159 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 160 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 161 /* _BinaryenMaxVecF32x4 */,\n  AddF64x2 = 162 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 163 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 164 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 165 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 166 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 167 /* _BinaryenMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 168 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 169 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 170 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 171 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 172 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum HostOp {\n  MemorySize = 0 /* _BinaryenMemorySize */,\n  MemoryGrow = 1 /* _BinaryenMemoryGrow */,\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport enum ExpressionRunnerFlags {\n  Default = 0 /* _ExpressionRunnerFlagsDefault */,\n  PreserveSideeffects = 1 /* _ExpressionRunnerFlagsPreserveSideeffects */,\n  TraverseCalls = 2 /* _ExpressionRunnerFlagsTraverseCalls */\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: i64;\n\n  static create(buffer: Uint8Array, offset: i64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = binaryen._BinaryenModuleCreate();\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var module = new Module();\n    var cArr = allocU8Array(buffer);\n    module.ref = binaryen._BinaryenModuleRead(cArr, buffer.length);\n    binaryen._free(changetype<usize>(cArr));\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  maybeDropCondition(condition: ExpressionRef, result: ExpressionRef): ExpressionRef {\n    // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n    // when encountering a local with an unknown value. This helper only drops\n    // the pre-evaluated condition if it has relevant side effects.\n    // see WebAssembly/binaryen#1237\n    if ((getSideEffects(condition) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n      return this.block(null, [\n        this.drop(condition),\n        result\n      ], getExpressionType(result));\n    }\n    return result;\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType);\n      binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // tuples (pseudo instructions)\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, params, results, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, params, results);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  runPass(pass: string, func: FunctionRef = 0): void {\n    var cStr = allocString(pass);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cStr, 1);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cStr, 1);\n    }\n    binaryen._free(cStr);\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var cStrs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      cStrs[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(cStrs);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(cStrs[i]);\n  }\n\n  optimize(optimizeLevel: i32, shrinkLevel: i32, debugInfo: bool = false, usesARC: bool = true): void {\n    // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n    if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n    binaryen._BinaryenSetOptimizeLevel(optimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(shrinkLevel);\n    binaryen._BinaryenSetDebugInfo(debugInfo);\n\n    // Tweak inlining limits based on optimization levels\n    if (optimizeLevel >= 2 && shrinkLevel === 0) {\n      binaryen._BinaryenSetAlwaysInlineMaxSize(12);\n      binaryen._BinaryenSetFlexibleInlineMaxSize(70);\n      binaryen._BinaryenSetOneCallerInlineMaxSize(200);\n    } else {\n      binaryen._BinaryenSetAlwaysInlineMaxSize(\n        optimizeLevel == 0 && shrinkLevel >= 0\n          ? 2\n          : 4\n      );\n      binaryen._BinaryenSetFlexibleInlineMaxSize(65);\n      binaryen._BinaryenSetOneCallerInlineMaxSize(80);\n    }\n\n    // Pass order here differs substantially from Binaryen's defaults\n    // see: Binaryen/src/pass.cpp\n    if (optimizeLevel > 0 || shrinkLevel > 0) {\n      let passes = new Array<string>();\n\n      // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-module-elements\"); // +\n\n      // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"ssa-nomerge\");\n      }\n      if (optimizeLevel >= 3) {\n        passes.push(\"flatten\");\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"vacuum\");\n        passes.push(\"code-folding\");\n        passes.push(\"flatten\");\n        passes.push(\"local-cse\");\n        passes.push(\"reorder-locals\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n      }\n      if (usesARC) {\n        if (optimizeLevel < 3) {\n          passes.push(\"flatten\");\n        }\n        passes.push(\"post-assemblyscript\");\n      }\n      passes.push(\"optimize-instructions\");\n      passes.push(\"inlining\");\n      passes.push(\"dce\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"inlining-optimizing\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"pick-load-signs\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 3 && shrinkLevel <= 1) {\n        passes.push(\"licm\");\n      }\n      passes.push(\"simplify-locals-nostructure\");\n      passes.push(\"vacuum\");\n      passes.push(\"reorder-locals\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"simplify-locals\");\n      passes.push(\"vacuum\");\n      passes.push(\"reorder-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"reorder-locals\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"merge-locals\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"code-folding\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"merge-blocks\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"merge-blocks\");\n      if (optimizeLevel >= 3) {\n        passes.push(\"optimize-instructions\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n      }\n      passes.push(\"vacuum\");\n\n      // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"inlining-optimizing\");\n      }\n      if (binaryen._BinaryenGetLowMemoryUnused()) {\n        if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n          passes.push(\"optimize-added-constants-propagate\");\n        } else {\n          passes.push(\"optimize-added-constants\");\n        }\n      }\n      passes.push(\"duplicate-import-elimination\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"simplify-globals\");\n        passes.push(\"vacuum\");\n      }\n      // precompute works best after global optimizations\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"directize\"); // replace indirect with direct calls\n      passes.push(\"dae-optimizing\"); // reduce arity\n      passes.push(\"inlining-optimizing\"); // and inline if possible\n      if (usesARC) {\n        // works best after inlining to cover most retains/releases\n        passes.push(\"post-assemblyscript-finalize\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        // move code on early return (after CFG cleanup)\n        passes.push(\"code-pushing\");\n        if (optimizeLevel >= 3) {\n          // very expensive, so O3 only\n          passes.push(\"simplify-globals\");\n          passes.push(\"vacuum\");\n          // replace indirect with direct calls again and inline\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"directize\");\n          passes.push(\"dae-optimizing\");\n          passes.push(\"precompute-propagate\");\n          passes.push(\"vacuum\");\n          passes.push(\"merge-locals\");\n          passes.push(\"coalesce-locals\");\n          passes.push(\"simplify-locals-nostructure\");\n          passes.push(\"vacuum\");\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"precompute-propagate\");\n        }\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"vacuum\");\n        passes.push(\"optimize-instructions\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      // clean up\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-nonfunction-module-elements\");\n      passes.push(\"memory-packing\");\n      passes.push(\"remove-unused-module-elements\");\n\n      this.runPasses(passes);\n    }\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var ret = new BinaryModule();\n    ret.output = readBuffer(binaryPtr, binaryLen);\n    ret.sourceMap = readString(sourceMapPtr);\n    binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return ret;\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStrings), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (<u32>binaryen._BinaryenExpressionGetType(expr)) {\n          case <u32>NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case <u32>NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case <u32>NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case <u32>NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case <u32>NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case <u32>NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  runExpression(expr: ExpressionRef, flags: ExpressionRunnerFlags, maxDepth: i32 = 50, maxLoopIterations: i32 = 1): ExpressionRef {\n    var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n    var precomp =  binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n    if (precomp) {\n      assert(getExpressionId(precomp) == ExpressionId.Const);\n      assert(getExpressionType(precomp) == getExpressionType(expr));\n    }\n    return precomp;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType {\n  // TODO: unify this on Binaryen's side?\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return createType(types);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = binaryen._RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  Any = 2047 /* _BinaryenSideEffectAny */\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var ptr = binaryen._malloc(u32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = u32s.length; i < k; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var ptr = binaryen._malloc(ptrs.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = ptrs.length; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: i32): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n  // return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i: Index = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i: Index = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i: Index = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      for (let i: Index = 0, n = binaryen._BinaryenTupleMakeGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenTupleMakeGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Any host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is a host type. */\n  HOST = 1 << 11\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    var cachedNullableType = this.cachedNullableType;\n    if (!cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      cachedNullableType.nonNullableType = this;\n      cachedNullableType.classReference = this.classReference;       // either a class reference\n      cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Any host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.HOST       |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames !== null && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) {\n      return (<FunctionTarget>element).type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return assert(wrapperClasses.get(type));\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, variableLikeElement.type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterInstance = this.resolveFunction( // reports\n          assert(propertyPrototype.getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = assert(wrapperClasses.get(returnType));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return assert(members.get(propertyName)); // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      while (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          node.range\n        );\n        return null;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return assert(wrapperClasses.get(intType));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return assert(wrapperClasses.get(fltType));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.classReference;\n        if (ctxType.is(TypeFlags.REFERENCE) && classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.is(TypeFlags.REFERENCE) &&\n          !elementType.is(TypeFlags.HOST) // TODO: anyref isn't nullable as-is\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        return (<FunctionTarget>target).signature.returnType;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return assert(wrapperClasses.get(Type.bool));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Class[] = [];\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.push(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.includes(base)) return instance;\n    }\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var instanceMembers = instance.members;\n    if (!instanceMembers) instance.members = instanceMembers = new Map();\n\n    // Alias base members\n    var pendingClasses = this.resolveClassPending;\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.includes(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let baseMemberName = unchecked(_keys[i]);\n          let baseMember = assert(baseMembers.get(baseMemberName));\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyPrototype = <PropertyPrototype>member;\n            let propertyInstance = new Property(propertyPrototype, instance);\n            let getterPrototype = propertyPrototype.getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = propertyPrototype.setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.nextMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n      if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          assert(instance.contextualTypeArguments),\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    var pendingIndex = pendingClasses.indexOf(instance);\n    assert(~pendingIndex); // must be pending\n    pendingClasses.splice(pendingIndex, 1);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    var derivedPendingClasses = new Array<Class>();\n    for (let i = 0, k = pendingClasses.length; i < k; ++i) {\n      let pending = pendingClasses[i];\n      if (instance == pending.base) derivedPendingClasses.push(pending);\n    }\n    for (let i = 0, k = derivedPendingClasses.length; i < k; ++i) {\n      this.finishResolveClass(derivedPendingClasses[i], reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow always calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 13,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.parentFunction = this.parentFunction;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toNativeType()) {\n      case <u32>NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case <u32>NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++).toString(), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (<u32>local.type.toNativeType()) {\n      case <u32>NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Exnref: {\n        let tempExnrefs = parentFunction.tempExnrefs;\n        if (tempExnrefs) temps = tempExnrefs;\n        else parentFunction.tempExnrefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ALLOCATES) { // can become conditional\n      if (otherFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (otherFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ALLOCATES) {\n      if (rightFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (rightFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        let newFlags = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n        if (leftFlags & LocalFlags.RETAINED) {\n          if (rightFlags & LocalFlags.RETAINED) {\n            newFlags |= LocalFlags.RETAINED;\n          } else {\n            newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n          }\n        } else if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        } else {\n          newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n        }\n        thisLocalFlags[i] = newFlags;\n      }\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.is(TypeFlags.REFERENCE)) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        if (name == program.retainInstance.internalName) {\n          // __retain just passes through the argument\n          this.inheritNonnullIfTrue(getCallOperand(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>NativeType.I32: { value = getConstValueI32(expr); break; }\n          case <u32>NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ALLOCATES)) sb.push(\"ALLOCATES\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ALLOCATES)) sb.push(\"CONDITIONALLY_ALLOCATES\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set<i32>()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression,\n  NodeKind,\n  LiteralExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  createType,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_data = \"~lib/memory/memory.data\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  /** Compiler reference. */\n  compiler: Compiler;\n  /** Prototype being called. */\n  prototype: FunctionPrototype;\n  /** Provided type arguments. */\n  typeArguments: Type[] | null;\n  /** Provided operands. */\n  operands: Expression[];\n  /** Contextual type. */\n  contextualType: Type;\n  /** Respective call expression. */\n  reportNode: CallExpression;\n  /** Whether originating from inline assembly. */\n  contextIsExact: bool;\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.FLOAT) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type == Type.bool ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.SIGNED) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      let stringInstance = compiler.program.stringInstance;\n      if (stringInstance !== null && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.signatureReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classType = type.classReference;\n  if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classType.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classType.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classType.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.is(TypeFlags.REFERENCE)) {\n    let classReference = resultType.classReference;\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      let signatureReference = resultType.signatureReference;\n      if (signatureReference) {\n        value = \"Function\";\n      } else {\n        value = \"Anyref\";\n      }\n    }\n  } else {\n    switch (resultType.kind) {\n      case TypeKind.BOOL: { value = \"bool\"; break; }\n      case TypeKind.I8: { value = \"i8\"; break; }\n      case TypeKind.U8: { value = \"u8\"; break; }\n      case TypeKind.I16: { value = \"i16\"; break; }\n      case TypeKind.U16: { value = \"u16\"; break; }\n      case TypeKind.I32: { value = \"i32\"; break; }\n      case TypeKind.U32: { value = \"u32\"; break; }\n      case TypeKind.F32: { value = \"f32\"; break; }\n      case TypeKind.I64: { value = \"i64\"; break; }\n      case TypeKind.U64: { value = \"u64\"; break; }\n      case TypeKind.F64: { value = \"f64\"; break; }\n      case TypeKind.ISIZE: { value = \"isize\"; break; }\n      case TypeKind.USIZE: { value = \"usize\"; break; }\n      case TypeKind.V128: { value = \"v128\"; break; }\n      case TypeKind.ANYREF: { value = \"anyref\"; break; }\n      default: assert(false);\n      case TypeKind.VOID: { value = \"void\"; break; }\n    }\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let signatureReference = type.signatureReference;\n    if (signatureReference) {\n      return module.i32(signatureReference.id);\n    }\n    let classReference = type.classReference;\n    if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      return module.i32(classReference.id);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotlI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotrI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                isWasm64 ? module.i64(63) : module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0),\n                module.i64(63)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(0));\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(1));\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 3) {\n    immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (numOperands == 4) {\n      immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    arg2 = compiler.convertExpression(arg2,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[2]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType // ^\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.host(HostOp.MemorySize);\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  return module.host(HostOp.MemoryGrow, null, [\n    compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n  ]);\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var usizeType = compiler.options.usizeType;\n  var offset: i64;\n  if (typeArguments !== null && typeArguments.length > 0) { // data<T>(values[, align])\n    let elementType = typeArguments[0];\n    if (!elementType.is(TypeFlags.VALUE)) {\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let nativeElementType = elementType.toNativeType();\n    let valuesOperand = operands[0];\n    if (valuesOperand.kind != NodeKind.LITERAL || (<LiteralExpression>valuesOperand).literalKind != LiteralKind.ARRAY) {\n      compiler.error(\n        DiagnosticCode.Array_literal_expected,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let expressions = (<ArrayLiteralExpression>valuesOperand).elementExpressions;\n    let numElements = expressions.length;\n    let exprs = new Array<ExpressionRef>(numElements);\n    let isStatic = true;\n    for (let i = 0; i < numElements; ++i) {\n      let expression = expressions[i];\n      if (expression) {\n        let expr = compiler.compileExpression(expression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        exprs[i] = expr;\n      } else {\n        exprs[i] = compiler.makeZero(elementType);\n      }\n    }\n    if (!isStatic) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        valuesOperand.range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = elementType.byteSize;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    let buf = new Uint8Array(numElements * elementType.byteSize);\n    assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n    offset = compiler.addMemorySegment(buf, align).offset;\n  } else { // data(size[, align])\n    let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(arg0, ExpressionRunnerFlags.PreserveSideeffects);\n    if (!precomp) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let size = getConstValueI32(precomp);\n    if (size < 1) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[0].range, \"1\", i32.MAX_VALUE.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = 16;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    offset = compiler.addMemorySegment(new Uint8Array(size), align).offset;\n  }\n  // FIXME: what if recompiles happen? recompiles are bad.\n  compiler.currentType = usizeType;\n  if (usizeType == Type.usize32) {\n    assert(!i64_high(offset));\n    return module.i32(i64_low(offset));\n  } else {\n    return module.i64(i64_low(offset), i64_high(offset));\n  }\n}\nbuiltins.set(BuiltinNames.memory_data, builtin_memory_data);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // omit if assertions are disabled\n  if (compiler.options.noAssert) {\n    return arg0;\n  }\n\n  // omit if the assertion can be proven statically\n  var evaled = module.runExpression(arg0, ExpressionRunnerFlags.Default);\n  if (evaled) {\n    switch (<u32>getExpressionType(evaled)) {\n      case <u32>NativeType.I32: {\n        if (getConstValueI32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        if (getConstValueI64Low(evaled) | getConstValueI64High(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        if (getConstValueF32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        if (getConstValueF64(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0),\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0),\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    ctx.reportNode.typeArgumentsRange\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.classReference;\n  if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i8, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI8(getConstValueI32(precomp), bytes, i);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i16, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI16(getConstValueI32(precomp), bytes, i << 1);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI32(getConstValueI32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      let off = i << 3;\n      writeI32(getConstValueI64Low(precomp), bytes, off);\n      writeI32(getConstValueI64High(precomp), bytes, off + 4);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF32(getConstValueF32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF64(getConstValueF64(precomp), bytes, i << 3);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.compileExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          let precomp = module.runExpression(argN, ExpressionRunnerFlags.PreserveSideeffects);\n          let idx = 0;\n          if (precomp) {\n            idx = getConstValueI32(precomp);\n            if (idx < 0 || idx > maxIdx) {\n              compiler.error(\n                DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                operand.range, \"Lane index\", \"0\", maxIdx.toString()\n              );\n              idx = 0;\n            }\n          } else {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AnyTrueI64x2\n            : UnaryOp.AnyTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instance.type.isManaged);\n    assert(instanceId == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\")) !== null) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        let visitThisType = assert(visitSig.thisType);\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n          let member = unchecked(_values[j]);\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ instanceId ]);\n    blocks.push(block);\n  }\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    let base = instance.base;\n    if (base) relooper.addBranch(blocks[instanceId], blocks[base.id]);\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var module = compiler.module;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    let expr = compiler.compileExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      assert(getConstValueI64High(precomp) == 0); // TODO\n      value = getConstValueI64Low(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    let expr = compiler.compileExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      value = getConstValueI32(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression: Expression, naturalAlign: i32, compiler: Compiler): i32 {\n  var align = evaluateImmediateOffset(expression, compiler);\n  if (align < 0) return align;\n  if (align < 1 || naturalAlign > 16) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n      expression.range, \"Alignment\", \"1\", naturalAlign.toString()\n    );\n    return -1;\n  }\n  if (!isPowerOf2(align)) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_power_of_two,\n      expression.range, \"Alignment\"\n    );\n    return -1;\n  }\n  return align;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.is(TypeFlags.INTEGER | TypeFlags.VALUE)) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.binaryen || (global.binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonNames,\n  INDEX_SUFFIX,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Static table start offset. */\n  tableBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: i32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: string[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled library functions. */\n  lazyLibraryFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create();\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    module.setFeatures(featureFlags);\n  }\n\n  initializeProgram(): void {\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize(this.options);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // check and perform this program initialization if it hasn't been done\n    this.initializeProgram();\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        // TODO: for (let classInstance of cyclicClasses) {\n        for (let _values = Set_values(cyclicClasses), i = 0, k = _values.length; i < k; ++i) {\n          let classInstance = unchecked(_values[i]);\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy library functions\n    var lazyLibraryFunctions = this.lazyLibraryFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyLibraryFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyLibraryFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyLibraryFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    this.setupVirtualLookupTables();\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      ExportNames.memory,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTable, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  private setupVirtualLookupTables(): void {\n    // TODO: :-)\n    var program = this.program;\n    var virtualCalls = this.virtualCalls;\n\n    // Virtual instance methods in the function table are potentially called virtually\n    var functionTable = this.functionTable;\n    var elementsByName = program.elementsByName;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instanceName = unchecked(functionTable[i]);\n      if (elementsByName.has(instanceName)) { // otherwise ~anonymous\n        let instance = assert(elementsByName.get(instanceName));\n        if (instance.is(CommonFlags.INSTANCE | CommonFlags.VIRTUAL)) {\n          assert(instance.kind == ElementKind.FUNCTION);\n          virtualCalls.add(<Function>instance);\n        }\n      }\n    }\n\n    // Inject a virtual lookup table into each function potentially called virtually\n    // TODO: for (let instance of virtualCalls.values()) {\n    for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      this.warning(\n        DiagnosticCode.Function_0_is_possibly_called_virtually_which_is_not_yet_supported,\n        instance.identifierNode.range, instance.internalName\n      );\n    }\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionInstances = (<FunctionPrototype>element).instances;\n        if (functionInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classInstances = (<ClassPrototype>element).instances;\n        if (classInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.ensureModuleExport(GETTER_PREFIX + name, getterPrototype, prefix);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.ensureModuleExport(SETTER_PREFIX + name, setterPrototype, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        if (!functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          let signature = functionInstance.signature;\n          if (signature.requiredParameters < signature.parameterTypes.length) {\n            // utilize trampoline to fill in omitted arguments\n            functionInstance = this.ensureTrampoline(functionInstance);\n            this.ensureBuiltinArgumentsLength();\n          }\n          if (functionInstance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(functionInstance.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getter = propertyInstance.getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = propertyInstance.setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport(fieldInstance.internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport(fieldInstance.internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (instance) this.compileClass(instance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) {\n          assert(!getterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(getterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) {\n          assert(!setterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              initializeInStart = true;\n            }\n          }\n          if (this.skippedAutoreleases.has(initExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  member.declaration.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyLibraryFunctions.add(instance);\n        return true;\n      }\n    }\n\n    var previousType = this.currentType;\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      let body = module.flatten(stmts, instance.signature.returnType.toNativeType());\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        body = module.block(\"vtable\", [ body ], getExpressionType(body));\n      }\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        body\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract function\n    } else if (instance.is(CommonFlags.ABSTRACT)) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n      this.virtualCalls.add(instance);\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitializationInConstructor(classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (functionInstance) this.compileFunction(functionInstance);\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyPrototype = <PropertyPrototype>element;\n            let getterPrototype = propertyPrototype.getterPrototype;\n            if (getterPrototype) {\n              assert(!getterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(getterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            let setterPrototype = propertyPrototype.setterPrototype;\n            if (setterPrototype) {\n              assert(!setterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(setterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (functionInstance) this.compileFunction(functionInstance);\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType))\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType))\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    assert(isPowerOf2(alignment));\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance.id, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  /** Writes a series of static values of the specified type to a buffer. */\n  writeStaticBuffer(buf: Uint8Array, pos: i32, elementType: Type, values: ExpressionRef[]): i32 {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var nativeType = elementType.toNativeType();\n    switch (<u32>nativeType) {\n      case <u32>NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    return pos;\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, id, byteLength);\n    assert(this.writeStaticBuffer(buf, runtimeHeaderSize, elementType, values) == buf.length);\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.nextMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance.id, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(instance: Function): i32 {\n    assert(instance.is(CommonFlags.COMPILED));\n    var index = instance.functionTableIndex;\n    if (index >= 0) return index;\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    index = tableBase + functionTable.length;\n    if (!instance.is(CommonFlags.TRAMPOLINE) && instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      instance = this.ensureTrampoline(instance);\n    }\n    functionTable.push(instance.internalName);\n    instance.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        labelNode.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current !== null && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      );\n      let condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpression(condition, Type.bool),\n        this.currentType\n      );\n      condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        stmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        return module.block(null, [\n          module.drop(condExpr),\n          this.compileStatement(ifTrue)\n        ]);\n      }\n      case ConditionKind.FALSE: {\n        return ifFalse\n          ? module.block(null, [\n              module.drop(condExpr),\n              this.compileStatement(ifFalse)\n            ])\n          : module.drop(condExpr);\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      if (elseTerminates && !thenTerminates) {\n        flow.inherit(thenFlow);\n      } else {\n        flow.inheritMutual(thenFlow, elseFlow);\n      }\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length > 0) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr != 0 && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString()\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp;\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = assert(scopedLocals.get(name));\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      stmts.push(\n        module.drop(condExpr)\n      );\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.is(TypeFlags.REFERENCE) || toType.is(TypeFlags.REFERENCE)) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.is(TypeFlags.NULLABLE) && !toType.is(TypeFlags.NULLABLE)) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.is(TypeFlags.POINTER) && !toType.is(TypeFlags.POINTER)) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        leftExpr = this.convertExpression(leftExpr,\n          leftType, leftType = commonType,\n          false, true, // !\n          left\n        );\n        rightExpr = this.convertExpression(rightExpr,\n          rightType, rightType = commonType,\n          false, true, // !\n          right\n        );\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f32PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f64PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyPrototype.internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.WILL_RETAIN);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        if (\n          fieldInstance.is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode !== null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, fieldInstance.internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert(propertyPrototype.getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        assert(valueType == returnType);\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        assert(propertyInstance.parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>propertyInstance.parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), classInstance.type);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let valueType = setterInstance.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), classInstance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(classInstance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = getterInstance.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (!valueType.is(TypeFlags.NULLABLE) || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          module.local_get(localIndex, type.toNativeType()),\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          module.global_get(global.internalName, nativeType),\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = assert(classInstance.base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.flatten(stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression; // compileCallDirect may reset\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        return this.compileCallDirect(\n          functionInstance,\n          expression.arguments,\n          expression,\n          functionInstance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low(local.constantIntegerValue));\n          } else {\n            indexArg = module.local_get(local.index, NativeType.I32);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          indexArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            fieldInstance.memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, fieldType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        let functionTarget = <FunctionTarget>target;\n        signature = functionTarget.signature;\n        indexArg = this.compileExpression(expression.expression, functionTarget.type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterPrototype = assert(propertyPrototype.getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: asc can't see this yet\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var ctx = new BuiltinContext();\n    ctx.compiler = this;\n    ctx.prototype = prototype;\n    ctx.typeArguments = typeArguments;\n    ctx.operands = expression.arguments;\n    ctx.contextualType = contextualType;\n    ctx.reportNode = expression;\n    ctx.contextIsExact = false;\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    if (instance.is(CommonFlags.VIRTUAL)) {\n      this.virtualCalls.add(instance);\n    }\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      trampolineSignature.nativeParams,\n      trampolineSignature.nativeResults,\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureBuiltinArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n      // TODO: Enable this once mutable globals are the default nearly everywhere.\n      // if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n      //   module.addGlobalExport(BuiltinNames.argumentsLength, ExportNames.argumentsLength);\n      // } else {\n        module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n          module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n        );\n        module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n      // }\n    }\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        // TODO: for (let local of scopedLocals.values()) {\n        for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n          let local = unchecked(_values[i]);\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      let localsByIndex = flow.parentFunction.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; ++i) {\n        let local = unchecked(localsByIndex[i]);\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType())\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.is(CommonFlags.VIRTUAL)) {\n      this.virtualCalls.add(instance);\n    }\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        let returnType = this.currentType;\n        if (returnType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, returnType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureBuiltinArgumentsLength();\n          return module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.ensureBuiltinArgumentsLength();\n    var expr = module.block(null, [\n      module.global_set(BuiltinNames.argumentsLength, // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      module.call_indirect(\n        this.options.isWasm64\n          ? module.unary(UnaryOp.WrapI64, indexArg)\n          : indexArg,\n        operands,\n        signature.nativeParams,\n        signature.nativeResults\n      )\n    ], returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            if (!isUnchecked && this.options.pedantic) {\n              this.pedantic(\n                DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n                expression.range\n              );\n            }\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          return module.ref_null();\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitializationInConstructor(classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.flatten(stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.is(TypeFlags.HOST | TypeFlags.REFERENCE)) {\n          this.currentType = Type.anyref;\n          return module.ref_func(functionInstance.internalName);\n        }\n        let index = this.ensureFunctionTableEntry(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      makeMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.maybeDropCondition(expr, module.i32(0));\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.maybeDropCondition(expr, module.i32(1));\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.classReference;\n    if (actualType.is(TypeFlags.REFERENCE) && classReference !== null) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.is(TypeFlags.NULLABLE)) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.maybeDropCondition(expr, module.i32(1));\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    if (contextualType.is(TypeFlags.REFERENCE)) {\n      let classReference = contextualType.classReference;\n      if (classReference !== null && classReference.extends(program.staticArrayPrototype)) {\n        return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n      }\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      if (expression) {\n        let expr = this.compileExpression(<Expression>expression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType);\n      }\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __allocArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression)\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    assert(contextualType.is(TypeFlags.REFERENCE));\n    var arrayInstance = assert(contextualType.classReference);\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype)![0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      if (expression) {\n        let expr = this.compileExpression(expression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType);\n      }\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.runtimeHeaderSize));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __allocBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression)\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression)\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // Check that contextual type is a class (TODO: hidden class for interfaces?)\n    var classReference = contextualType.classReference;\n    if (!contextualType.is(TypeFlags.REFERENCE) || !classReference || classReference.kind != ElementKind.CLASS) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n    var classType = classReference.type;\n    this.currentType = classType.nonNullableType;\n    if (classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.range\n      );\n      return module.unreachable();\n    }\n\n    // Check that the class is compatible with object literals\n    var ctorPrototype = classReference.prototype.constructorPrototype;\n    if (ctorPrototype) {\n      this.errorRelated(\n        DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal,\n        expression.range, ctorPrototype.identifierNode.range, classType.toString()\n      );\n      return module.unreachable();\n    }\n\n    var isManaged = classType.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>();\n    var flow = this.currentFlow;\n    var tempLocal = isManaged\n      ? flow.getAutoreleaseLocal(classType)\n      : flow.getTempLocal(classType);\n    var nativeClassType = classType.toNativeType();\n    assert(numNames == values.length);\n\n    // Assume all class fields will be omitted, and add them to our omitted list\n    var omittedFields = new Set<Field>();\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberKey = _keys[i];\n        let member = assert(members.get(memberKey));\n        if (member !== null && member.kind == ElementKind.FIELD) {\n          omittedFields.add(<Field>member); // incl. private/protected\n        }\n      }\n    }\n\n    // Iterate through the members defined in our expression\n    for (let i = 0; i < numNames; ++i) {\n      let memberName = names[i].text;\n      let member: DeclaredElement;\n      if (!members || !members.has(memberName) || (member = assert(members.get(memberName))).kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n\n      let expr = this.compileExpression(values[i], fieldType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n      if (fieldType.isManaged && !this.skippedAutoreleases.has(expr)) {\n        expr = this.makeRetain(expr);\n      }\n      exprs.push(\n        module.store( // TODO: handle setters as well\n          fieldType.byteSize,\n          module.local_get(tempLocal.index, nativeClassType),\n          expr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        )\n      );\n\n      // This member is no longer omitted, so delete from our omitted fields\n      omittedFields.delete(fieldInstance);\n    }\n    this.currentType = classType.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // Check remaining omitted fields\n    for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n      let fieldInstance = _values[j];\n      let fieldType = fieldInstance.type;\n\n      if (fieldInstance.initializerNode) {\n        continue; // set by default ctor\n      }\n\n      if (fieldType.is(TypeFlags.REFERENCE) && fieldType.classReference !== null) {\n        // TODO: Check if it is a class, with a default value (constructor with no params).\n        if (!fieldType.is(TypeFlags.NULLABLE)) {\n          this.error(\n            DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n            expression.range, fieldInstance.name, \"<object>\", classType.toString()\n          );\n          hasErrors = true;\n          continue;\n        }\n      }\n\n      switch (fieldType.kind) {\n        // Number Types (and Number alias types)\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL:\n        case TypeKind.F32:\n        case TypeKind.F64: {\n          exprs.push(\n            module.store( // TODO: handle setters as well\n              fieldType.byteSize,\n              module.local_get(tempLocal.index, nativeClassType),\n              this.makeZero(fieldType),\n              fieldType.toNativeType(),\n              fieldInstance.memoryOffset\n            )\n          );\n          continue;\n        }\n      }\n\n      // Otherwise error\n      this.error(\n        DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n        expression.range, fieldInstance.name, \"<object>\", classType.toString()\n      );\n      hasErrors = true;\n    }\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs.unshift(\n      module.local_set(tempLocal.index,\n        this.compileInstantiate(classReference, [], Constraints.WILL_RETAIN, expression)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs.push(\n      module.local_get(tempLocal.index, nativeClassType)\n    );\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classType.nonNullableType;\n    return module.flatten(exprs, nativeClassType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    var contextualTypeArguments = makeMap(classInstance.contextualTypeArguments);\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        contextualTypeArguments\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance, // bound\n          this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        contextualTypeArguments\n      );\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitializationInConstructor(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (classInstance.type.isUnmanaged || ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly WILL_DROP\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n        let thisType = this.currentType;\n        if (thisType.is(TypeFlags.NULLABLE)) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        return module.load(\n          fieldType.byteSize,\n          fieldType.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.is(CommonFlags.STATIC)) {\n          let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n          if (!functionInstance) return module.unreachable();\n          if (!this.compileFunction(functionInstance)) return module.unreachable();\n          this.currentType = functionInstance.type;\n          return module.i32(this.ensureFunctionTableEntry(functionInstance));\n        }\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, functionPrototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(expression.condition, Type.bool),\n      this.currentType\n    );\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = this.evaluateCondition(condExpr);\n    if (condKind == ConditionKind.TRUE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n    }\n    if (condKind == ConditionKind.FALSE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) { // access on non-object\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            // fall-through\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto); // may trigger an error\n            expr = this.convertExpression(expr, this.currentType, Type.void, true, false, operand);\n          }\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.ANYREF: return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n    }\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      while (classReference) {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (!this.checkTypeSupported(parameterTypes[i], reportNode.parameters[i])) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n  evaluateCondition(expr: ExpressionRef): ConditionKind {\n    var module = this.module;\n    var evaled = module.runExpression(expr, ExpressionRunnerFlags.Default);\n    if (evaled) {\n      return getConstValueI32(evaled)\n        ? ConditionKind.TRUE\n        : ConditionKind.FALSE;\n    }\n    return ConditionKind.UNKNOWN;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.ANYREF: return module.ref_null();\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ANYREF: {\n        // TODO: non-null object might still be considered falseish\n        // i.e. a ref to Boolean(false), Number(0), String(\"\") etc.\n        return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(fieldType, typeNode);\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var stringInstance = program.stringInstance;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type);\n    }\n\n    var filenameArg = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageArg,\n          filenameArg,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(type.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.is(TypeFlags.REFERENCE) && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Function_0_is_possibly_called_virtually_which_is_not_yet_supported = 104,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 105,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Array_literal_expected = 227,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Property_0_is_private_and_only_accessible_within_class_1 = 2341,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = 2445,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Cannot_create_an_instance_of_an_abstract_class = 2511,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Property_0_is_missing_in_type_1_but_required_in_type_2 = 2741,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Function '{0}' is possibly called virtually, which is not yet supported.\";\n    case 105: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 227: return \"Array literal expected.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2511: return \"Cannot create an instance of an abstract class.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] | null = null\n  ) {\n    super(diagnostics);\n    this.sources = sources ? sources : new Array<Source>();\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with file extensions\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!member) return null;\n      members.push(member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && initializer !== null) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators !== null && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n      if (!startPos) startPos = accessStart;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n      if (!startPos) startPos = accessStart;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n      if (!startPos) startPos = accessStart;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n      if (!startPos) startPos = staticStart;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n        if (!startPos) startPos = abstractStart;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT)) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && ((flags & CommonFlags.STATIC) != 0 || isInterface || initializer !== null)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments = new Array<TypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments.length) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() {};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9 // see: https://github.com/WebAssembly/multi-value\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString();\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function(set) {\n  return Array.from(set.values());\n};\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program, options: Options): void {\n  program.initialize(options);\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\n// TODO: When vTables are pulled, perhaps it would be better to extend an ASTWalker\nexport * from \"./extra/ast\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\nexport function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    // TODO: for (let v of original) {\n    for (let _values = Set_values(original), i = 0, k = _values.length; i < k; ++i) {\n      let v = unchecked(_values[i]);\n      cloned.add(v);\n    }\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is trivially alphanumeric. */\nexport function isTrivialAlphanum(code: i32): bool {\n  return code >= CharCode.a && code <= CharCode.z\n      || code >= CharCode.A && code <= CharCode.Z\n      || code >= CharCode._0 && code <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  IndexSignatureDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  DeclarationStatement,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATUREDECLARATION: {\n        this.visitIndexSignatureDeclaration(<IndexSignatureDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name === value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.arguments);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    this.sb.push(i64_to_string(node.value));\n  }\n\n  visitStringLiteral(str: string, singleQuoted: bool = false): void {\n    var sb = this.sb;\n    var off = 0;\n    var quote = singleQuoted ? \"'\" : \"\\\"\";\n    sb.push(quote);\n    var i = 0;\n    for (let k = str.length; i < k;) {\n      switch (str.charCodeAt(i)) {\n        case CharCode.NULL: {\n          if (i > off) sb.push(str.substring(off, off = i + 1));\n          sb.push(\"\\\\0\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKSPACE: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\b\");\n          break;\n        }\n        case CharCode.TAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\t\");\n          break;\n        }\n        case CharCode.LINEFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\n\");\n          break;\n        }\n        case CharCode.VERTICALTAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\v\");\n          break;\n        }\n        case CharCode.FORMFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\f\");\n          break;\n        }\n        case CharCode.CARRIAGERETURN: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\r\");\n          off = ++i;\n          break;\n        }\n        case CharCode.DOUBLEQUOTE: {\n          if (!singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\\\\"\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.SINGLEQUOTE: {\n          if (singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\'\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.BACKSLASH: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\\\");\n          off = ++i;\n          break;\n        }\n        default: {\n          ++i;\n          break;\n        }\n      }\n    }\n    if (i > off) sb.push(str.substring(off, i));\n    sb.push(quote);\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.arguments);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(statement: Statement): void {\n    this.visitNode(statement);\n    var sb = this.sb;\n    if (\n      !sb.length ||                          // leading EmptyStatement\n      statement.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      statement.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members != null && members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITE_ASSIGNMENT) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignatureDeclaration(node: IndexSignatureDeclaration): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITE_ASSIGNMENT) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.arguments;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n"],"sourceRoot":""}