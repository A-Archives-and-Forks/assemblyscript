{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/extra/ast.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","StaticArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","NativeMath","NativeMathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","trace","seed","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocBuffer","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","source","toString","normalizedPath","lineAt","start","columnAt","formatDiagnosticContext","useColors","text","len","length","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","relatedSource","diagnostics","seen","has","seenInSource","seenCodesAtPos","includes","set","withRange","emitDiagnostic","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","node","TypeName","kind","TYPENAME","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","NAMEDTYPE","parameters","returnType","explicitThisType","FunctionTypeNode","FUNCTIONTYPE","createNamedType","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","TYPEPARAMETER","type","initializer","ParameterNode","PARAMETER","parameterKind","args","DecoratorNode","DECORATOR","arguments","decoratorKind","fromNode","CommentNode","COMMENT","commentKind","isQuoted","IdentifierExpression","IDENTIFIER","elements","ArrayLiteralExpression","LITERAL","literalKind","ARRAY","elementExpressions","assertionKind","expression","toType","AssertionExpression","ASSERTION","operator","left","right","BinaryExpression","BINARY","typeArgs","CallExpression","CALL","declaration","ClassExpression","CLASS","expressions","CommaExpression","COMMA","ConstructorExpression","CONSTRUCTOR","element","ElementAccessExpression","ELEMENTACCESS","elementExpression","FalseExpression","FALSE","FloatLiteralExpression","FLOAT","FunctionExpression","FUNCTION","isType","InstanceOfExpression","INSTANCEOF","IntegerLiteralExpression","INTEGER","typeName","NewExpression","NEW","NullExpression","NULL","names","values","ObjectLiteralExpression","OBJECT","ParenthesizedExpression","PARENTHESIZED","PropertyAccessExpression","PROPERTYACCESS","pattern","flags","RegexpLiteralExpression","REGEXP","patternFlags","condition","ifThen","ifElse","TernaryExpression","TERNARY","StringLiteralExpression","STRING","SuperExpression","SUPER","ThisExpression","THIS","TrueExpression","TRUE","operand","UnaryPostfixExpression","UNARYPOSTFIX","UnaryPrefixExpression","UNARYPREFIX","statements","BlockStatement","BLOCK","label","BreakStatement","BREAK","typeParameters","implementsTypes","members","decorators","ClassDeclaration","CLASSDECLARATION","ContinueStatement","CONTINUE","statement","DoStatement","DO","EmptyStatement","EnumDeclaration","ENUMDECLARATION","EnumValueDeclaration","ENUMVALUEDECLARATION","path","isDeclare","ExportStatement","EXPORT","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","ExportDefaultStatement","EXPORTDEFAULT","externalName","ExportImportStatement","EXPORTIMPORT","ExportMember","EXPORTMEMBER","localName","exportedName","ExpressionStatement","EXPRESSION","ifTrue","ifFalse","IfStatement","IF","decls","ImportStatement","IMPORT","declarations","namespaceName","foreignName","ImportDeclaration","IMPORTDECLARATION","InterfaceDeclaration","INTERFACEDECLARATION","FieldDeclaration","FIELDDECLARATION","incrementor","ForStatement","FOR","variable","iterable","ForOfStatement","FOROF","signature","body","arrowKind","FunctionDeclaration","FUNCTIONDECLARATION","keyType","valueType","IndexSignatureDeclaration","INDEXSIGNATUREDECLARATION","MethodDeclaration","METHODDECLARATION","NamespaceDeclaration","NAMESPACEDECLARATION","ReturnStatement","RETURN","cases","SwitchStatement","SWITCH","SwitchCase","SWITCHCASE","ThrowStatement","THROW","catchVariable","catchStatements","finallyStatements","TryStatement","TRY","alias","TypeDeclaration","TYPEDECLARATION","VariableStatement","VARIABLE","VariableDeclaration","VARIABLEDECLARATION","VoidStatement","VOID","WhileStatement","WHILE","changetype","TypeNode","typeParameterNodes","namedTypeNode","typeArgumentNodes","k","hasGenericComponent","functionTypeNode","parameterNodes","ParameterKind","implicitFieldDeclaration","NONE","flag","nameNode","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","CommentKind","Expression","LiteralExpression","AssertionKind","numTypeArguments","Range","numArguments","UnaryExpression","Statement","super","debugInfoIndex","exportPaths","lineCache","lineColumn","SOURCE","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","off","unchecked","DeclarationStatement","VariableLikeDeclarationStatement","parameterIndex","ArrowKind","createFunctionDeclaration","endsWith","decorator","Token","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","CONST","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","ENUM","EXTENDS","FINALLY","FROM","GET","IMPLEMENTS","IN","INTERFACE","IS","KEYOF","LET","MODULE","NAMESPACE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","SET","STATIC","TYPE","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","debugInfoRef","a","b","Tokenizer","DiagnosticEmitter","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","MAX_VALUE","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","error","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","result","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_new","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","i64_low","invalid","i64_high","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PREFIX_INC","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","Program","options","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","initialized","nativeDummySignature","nativeSource","Source","nativeFile","File","internalName","parser","Parser","resolver","Resolver","buffer","offset","id","payloadSize","writeI32","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","parent","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","registerConstantInteger","isWasm64","WASM64","WASM32","noAssert","memoryBase","tableBase","optimizeLevelHint","shrinkLevelHint","lowMemoryLimit","hasFeature","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","_keys","Map_keys","starExports","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportNames","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","isDeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","isWasi","BuiltinNames","wasiAbort","wasiTrace","wasiSeed","firstChar","parseInt","arrayPrototype","staticArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocBufferInstance","allocArrayInstance","_values","Map_values","USER_ENTRY","markModuleExports","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","markModuleExport","exportsStar","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","propertyPrototype","getterPrototype","setterPrototype","PROPERTY","FIELD","staticMembers","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","isAny","initializeProperty","initializeMethod","AMBIENT","INTERFACE_PROTOTYPE","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","isLiteralKind","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","declaredElements","DeclaredElement","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","ensureGlobal","makeNativeNamespaceDeclaration","SCOPED","copyExportsToNamespace","memberName","TYPEDEFINITION","mangleInternalName","lookup","inSelf","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","classInstance","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","setDebugLocation","AcyclicState","nextFunctionTarget","FUNCTION_TARGET","FIELD_PROTOTYPE","memoryOffset","getterRef","setterRef","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extendees","extends","basePtototype","Class","base","nextMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","isBuiltinArray","lengthField","thisInstanceMembers","baseInstanceMembers","VIRTUAL","nextPrototype","inheritedTypeArguments","baseName","baseType","target","uncheckedOverload","overload","fieldName","field","baseOffset","fieldInstance","writeI8","writeI16","writeF32","writeF64","extendedPrototype","getTypeArgumentsTo","abvInstance","acyclic","hasCycle","cyclesTo","other","except","fieldType","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","NativeType","FeatureFlags","ExpressionId","SideEffects","None","Unreachable","Funcref","Nullref","Exnref","Auto","UnaryOp","BinaryOp","HostOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","binaryen","_BinaryenModuleCreate","lit","_malloc","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","_free","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","expr","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","_BinaryenTupleMake","tuple","_BinaryenTupleExtract","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","val","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","output","__i32_load8_u","readBuffer","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","getSideEffects","features","All","_BinaryenExpressionGetSideEffects","u8s","numValues","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","ch","fromCharCodes","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","Host","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Push","_BinaryenPushGetValue","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperand","TupleExtract","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","auto","isize64","isize32","usize64","usize32","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","typesToNativeTypes","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","numParameterTypes","nativeTypes","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cachedDefaultParameterNames","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","variableLikeElement","indexedGet","resolvedType","baseInstance","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","PREFIX","Type_0_is_illegal_in_this_context","NONNULL","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","elementType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","functionPrototype","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","pendingClasses","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","finishResolveClass","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldPrototype","fieldTypeNode","baseField","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","operatorInstance","overloadKind","overloadPrototype","Type_0_is_not_assignable_to_type_1","IndexSignature","pendingIndex","indexOf","splice","derivedPendingClasses","pending","LocalFlags","FlowFlags","ConditionKind","scopedLocals","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","resetBreakContext","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","INITIALIZED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","before","after","min","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","functionInstance","levels","findUsedLocalsVisit","used","traverse","started","argumentsLength","setArgumentsLength","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","ctz","popcnt","rotl","rotr","abs","floor","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","instantiate","idof","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_min","v128_max","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","heap_base","rtti_base","visit_globals","visit_members","isNaN","isFinite","memory_size","memory_grow","memory_copy","memory_fill","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","compileExpression","unary","ClzI64","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","builtin_ctz","CtzI64","builtin_popcnt","PopcntI64","builtin_rotl","ensureSmallIntegerWrap","binary","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","currentFlow","temp1","temp2","XorI32","AddI32","local_tee","local_get","XorI64","AddI64","ShrI64","nativeSizeType","AbsF32","AbsF64","builtin_max","isNumericLiteral","MaxF32","MaxF64","nativeType","builtin_min","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","immAlign","contextualType","outType","numOperands","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","builtin_store","contextIsExact","inType","convertExpression","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","builtin_atomic_wait","builtin_diagnostic","checkTypeAbsent","User_defined_0","builtin_conversion","builtin_i8x16","precomputeExpression","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","AnyTrueI8x16","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","builtin_v128_qfma","simd_ternary","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","typeToRuntimeFlags","alignLog2","evaluateConstantType","argumentsRange","feature","Feature_0_is_not_enabled","setCurrentTypeOnError","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","builtins","firstOperand","classMembers","Type_0_has_no_property_1","resultType","ensureStaticString","hasSideEffects","drop","temp","SubF32","SubF64","makeIsTrueish","host","MemorySize","MemoryGrow","compileFunction","compileCallDirect","isChangeableTo","Type_0_cannot_be_changed_to_type_1","makeAbort","if","alreadyUnchecked","unset","compileInstantiate","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","runtimeFeatures","exprs","COMPILED","global_get","addFunction","nativeSizeSize","blocks","outer","addBlockWithSwitch","SubI64","SubI32","lastId","visitImpl","instanceId","isDeclaredInLibrary","visitFunc","visitSig","visitThisType","isStrictlyAssignableTo","fieldOffset","return","addBlock","flatten","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","addMemorySegment","addGlobal","Binaryen","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","importMemory","sharedMemory","importTable","exportTable","explicitStart","noUnsafe","pedantic","Constraints","RuntimeFeatures","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","skippedAutoreleases","inlineStack","lazyLibraryFunctions","pendingClassInstanceOf","virtualCalls","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","setLowMemoryUnused","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","setFeatures","compile","initialize","initializeProgram","startFunctionInstance","startFunctionBody","currentBody","files","compileFile","compileExports","startIsEmpty","unshift","global_set","funcRef","nativeParams","nativeResults","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Set_values","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileClassInstanceOf","setupVirtualLookupTables","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","Function_0_is_possibly_called_virtually_which_is_not_yet_supported","elementName","ensureModuleExport","prefix","functionInstances","fullName","classInstances","addGlobalExport","Cannot_export_a_mutable_global","enumValue","ensureTrampoline","ensureBuiltinArgumentsLength","setter","internalGetterName","internalSetterName","isUnmanaged","subPrefix","implicitExport","compileMembers","compileGlobal","compileEnum","compileClass","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","checkTypeSupported","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","initializeInStart","origInitExpr","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","compileInlineConstant","makeZero","findDecorator","decoratorNodes","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","local_set","compileFunctionBody","performAutoreleases","addFunctionImport","getFunction","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","makeAllocation","makeFieldInitializationInConstructor","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureConstructor","compileField","compileProperty","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","makeRelease","compilePropertyGetter","compilePropertySetter","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","byteLength","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","labelNode","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateConditionKind","tcond","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","thenTerminates","elseStmts","elseFlow","elseTerminates","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","newArgs","numDeclarations","initializers","initAutoreleaseSkipped","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","doCompileWhileStatement","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","compileAssignment","AddF32","AddF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrU64","AndI64","OrI32","OrI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","retainLeftInThen","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","makeReplace","nativeFieldType","tempThis","findUsedLocals","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","functionTarget","compileCallIndirect","BuiltinContext","fn","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","relatedReportNode","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","Optional_parameter_must_have_an_initializer","newExpr","oldExpr","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","theOperands","isCallImport","allOptionalsAreConstant","compilesToConst","makeCallIndirect","numExpressions","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","ref_null","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","makeInstanceofClass","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","bufferAddress","arraySegment","addStaticArrayHeader","arrayAddress","nativeArrayType","dataStartMember","bufferSize","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","baseClass","baseCtor","allocExpr","parentEnum","Object_is_possibly_null","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","supported","v128_zero","ref_is_null","thisLocalIndex","codeLocation","messageArg","filenameArg","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","USER","currentSource","tn","parseTopLevelStatement","finish","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","getStart","getEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","remainingMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","x","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","gt","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","map","keys","formatDiagnostic","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","optimizeLevel","shrinkLevel","getSource","parseFile","nextFile","getDependee","cls","util","readI32","readI64","valueI64","cloned","v","overrides","ipos","dirname","origin","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","ASTBuilder","builder","visitNode","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitIndexSignatureDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitNodeAndTerminate","visitTypeName","visitTypeNode","visitStringLiteral","numElements","visitArguments","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitRegexpLiteralExpression","visitArrayLiteralExpression","visitObjectLiteralExpression","singleQuoted","lastCharPos","isDefault","serializeExternalModifiers","numMembers","serializeAccessModifiers"],"mappings":"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,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYC,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAgIA,0BAwBA,uCAA4Chf,GAE1C,OADAkK,OAAOlK,EAAK8L,QACJ9L,EAAKiM,WAAW,IACtB,KAAK,IAAY,MAAe,UAARjM,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsC0hB,GACpC,OAAQA,GACN,KAAK3C,EAAMa,OAAQ,MAAO,SAC1B,KAAKb,EAAMqB,GAAI,MAAO,KACtB,KAAKrB,EAAM1M,WAAY,MAAO,aAC9B,KAAK0M,EAAMrM,IAAK,MAAO,MACvB,KAAKqM,EAAMqC,OAAQ,MAAO,SAC1B,KAAKrC,EAAM/D,KAAM,MAAO,OACxB,KAAK+D,EAAMwC,MAAO,MAAO,QACzB,KAAKxC,EAAM4C,YAAa,MAAO,MAC/B,KAAK5C,EAAMzN,MAAO,MAAO,IACzB,KAAKyN,EAAM6C,SAAU,MAAO,IAC5B,KAAK7C,EAAM8C,YAAa,MAAO,IAC/B,KAAK9C,EAAM+C,gBAAiB,MAAO,KACnC,KAAK/C,EAAMgD,mBAAoB,MAAO,KACtC,KAAKhD,EAAMiD,cAAe,MAAO,KACjC,KAAKjD,EAAMkD,mBAAoB,MAAO,KACtC,KAAKlD,EAAMmD,qBAAsB,MAAO,MACxC,KAAKnD,EAAMoD,0BAA2B,MAAO,MAC7C,KAAKpD,EAAMqD,KAAM,MAAO,IACxB,KAAKrD,EAAMsD,MAAO,MAAO,IACzB,KAAKtD,EAAMuD,kBAAmB,MAAO,KACrC,KAAKvD,EAAMwD,SAAU,MAAO,IAC5B,KAAKxD,EAAMyD,MAAO,MAAO,IACzB,KAAKzD,EAAM0D,QAAS,MAAO,IAC3B,KAAK1D,EAAM2D,UAAW,MAAO,KAC7B,KAAK3D,EAAM4D,YAAa,MAAO,KAC/B,KAAK5D,EAAM6D,kBAAmB,MAAO,KACrC,KAAK7D,EAAM8D,wBAAyB,MAAO,KAC3C,KAAK9D,EAAM+D,oCAAqC,MAAO,MACvD,KAAK/D,EAAMgE,UAAW,MAAO,IAC7B,KAAKhE,EAAMiE,IAAK,MAAO,IACvB,KAAKjE,EAAMkE,MAAO,MAAO,IACzB,KAAKlE,EAAMmE,YAAa,MAAO,IAC/B,KAAKnE,EAAMoE,MAAO,MAAO,IACzB,KAAKpE,EAAMqE,oBAAqB,MAAO,KACvC,KAAKrE,EAAMsE,QAAS,MAAO,KAC3B,KAAKtE,EAAMuE,OAAQ,MAAO,IAC1B,KAAKvE,EAAMwE,YAAa,MAAO,KAC/B,KAAKxE,EAAMyE,aAAc,MAAO,KAChC,KAAKzE,EAAM0E,gBAAiB,MAAO,KACnC,KAAK1E,EAAM2E,yBAA0B,MAAO,MAC5C,KAAK3E,EAAM4E,aAAc,MAAO,KAChC,KAAK5E,EAAM6E,eAAgB,MAAO,KAClC,KAAK7E,EAAM8E,yBAA0B,MAAO,MAC5C,KAAK9E,EAAM+E,+BAAgC,MAAO,MAClD,KAAK/E,EAAMgF,2CAA4C,MAAO,OAC9D,KAAKhF,EAAMiF,iBAAkB,MAAO,KACpC,KAAKjF,EAAMkF,WAAY,MAAO,KAC9B,KAAKlF,EAAMmF,aAAc,MAAO,KAChC,QAEE,OADAha,QAAO,GACA,KAKb,MAAaoT,EAOX,YAAYlS,EAAgBI,EAAYO,GAFxC,KAAAoY,aAAsB,EAGpB/kB,KAAKgM,OAASA,EACdhM,KAAKoM,MAAQA,EACbpM,KAAK2M,IAAMA,EAGb,YAAYqY,EAAUC,GACpB,GAAID,EAAEhZ,QAAUiZ,EAAEjZ,OAAQ,MAAM,IAAI/C,MAAM,mBAC1C,OAAO,IAAIiV,EAAM8G,EAAEhZ,OACjBgZ,EAAE5Y,MAAQ6Y,EAAE7Y,MAAQ4Y,EAAE5Y,MAAQ6Y,EAAE7Y,MAChC4Y,EAAErY,IAAMsY,EAAEtY,IAAMqY,EAAErY,IAAMsY,EAAEtY,KAI9B,cACE,OAAO,IAAIuR,EAAMle,KAAKgM,OAAQhM,KAAKoM,MAAOpM,KAAKoM,OAGjD,YACE,OAAO,IAAI8R,EAAMle,KAAKgM,OAAQhM,KAAK2M,IAAK3M,KAAK2M,KAG/C,WACE,OAAO3M,KAAKgM,OAAOQ,KAAKO,UAAU/M,KAAKoM,MAAOpM,KAAK2M,MA9BvD,UAsCA,MAAauY,UAAkB,EAAAC,kBAgB7B,YAAYnZ,EAAgBoB,EAA0C,MACpEkR,MAAMlR,GAdR,KAAAT,IAAW,EAEX,KAAAkS,IAAW,EACX,KAAAyD,OAAgB,EAChB,KAAA8C,SAAgB,EAEhB,KAAAC,WAAoB,EACpB,KAAAC,aAAoB,EACpB,KAAAC,oBAA2B,EAE3B,KAAAC,UAAmC,KAMjCxlB,KAAKgM,OAASA,EACdhM,KAAK6e,IAAM,EACX7e,KAAK2M,IAAMX,EAAOQ,KAAKE,OAClBU,IAAaA,EAAc,IAChCpN,KAAKoN,YAAcA,EAEnB,IAAIT,EAAM3M,KAAK2M,IACXH,EAAOR,EAAOQ,KAWlB,GAPExM,KAAK6e,IAAMlS,GACkB,OAA7BH,EAAKK,WAAW7M,KAAK6e,QAEnB7e,KAAK6e,IAKP7e,KAAK6e,IAAM,EAAIlS,GACc,IAA7BH,EAAKK,WAAW7M,KAAK6e,MACY,IAAjCrS,EAAKK,WAAW7M,KAAK6e,IAAM,GAG3B,IADA7e,KAAK6e,KAAO,EAEV7e,KAAK6e,IAAMlS,GACkB,IAA7BH,EAAKK,WAAW7M,KAAK6e,QAEnB7e,KAAK6e,IAMb,KAAK4G,EAAyC7F,EAAmBW,SAE/D,IAAI+B,EADJtiB,KAAKqlB,WAAa,EAElB,GAAG/C,EAAQtiB,KAAK0lB,WAAWD,SACpBnD,GAAS3C,EAAMyC,SAEtB,OADApiB,KAAKsiB,MAAQA,EACNA,EAGD,WACNmD,EAAyC7F,EAAmBW,QAC5DoF,EAAsBviB,IAAIwiB,WAI1B,IAFA,IAAIjZ,EAAM3M,KAAK2M,IACXH,EAAOxM,KAAKgM,OAAOQ,KAChBxM,KAAK6e,IAAMlS,GAAK,CACrB3M,KAAKolB,SAAWplB,KAAK6e,IACrB,IAAIne,EAAI8L,EAAKK,WAAW7M,KAAK6e,KAC7B,OAAQne,GACN,KAAK,GACH,OACIV,KAAK6e,IAAMlS,GACgB,IAA7BH,EAAKK,WAAW7M,KAAK6e,MACpB,MAGL,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,KACD7e,KAAK6e,IACP,MAEF,KAAK,GAEH,QADE7e,KAAK6e,IAEL8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,GACJ,IAA7BH,EAAKK,WAAW7M,KAAK6e,QAEnB7e,KAAK6e,IAEL8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,GACJ,IAA7BH,EAAKK,WAAW7M,KAAK6e,QAEnB7e,KAAK6e,IACAc,EAAMoD,2BAERpD,EAAMkD,oBAERlD,EAAMmE,YAEf,KAAK,GACL,KAAK,GACL,KAAK,GACH,OAAOnE,EAAMkG,cAEf,KAAK,GAEH,QADE7lB,KAAK6e,IAEL8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,GACJ,IAA7BH,EAAKK,WAAW7M,KAAK6e,QAEnB7e,KAAK6e,IACAc,EAAM6E,gBAER7E,EAAM0D,QAEf,KAAK,GAEH,KADErjB,KAAK6e,IACH8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,EAAK,CACxC,IAAImZ,EAAMtZ,EAAKK,WAAW7M,KAAK6e,KAC/B,GAAW,IAAPiH,EAEF,QADE9lB,KAAK6e,IACAc,EAAMqE,oBAEf,GAAW,IAAP8B,EAEF,QADE9lB,KAAK6e,IACAc,EAAMiF,iBAGjB,OAAOjF,EAAMgE,UAEf,KAAK,GAEH,QADE3jB,KAAK6e,IACAc,EAAMoG,UAEf,KAAK,GAEH,QADE/lB,KAAK6e,IACAc,EAAMqG,WAEf,KAAK,GAEH,KADEhmB,KAAK6e,IACH8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,EAAK,CACxC,IAAImZ,EAAMtZ,EAAKK,WAAW7M,KAAK6e,KAC/B,GAAW,IAAPiH,EAEF,QADE9lB,KAAK6e,IACAc,EAAM0E,gBAEf,GAAW,IAAPyB,EAEF,QADE9lB,KAAK6e,IAEL8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,GACJ,IAA7BH,EAAKK,WAAW7M,KAAK6e,QAEnB7e,KAAK6e,IACAc,EAAM2E,0BAER3E,EAAMuD,kBAGjB,OAAOvD,EAAMwD,SAEf,KAAK,GAEH,KADEnjB,KAAK6e,IACH8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,EAAK,CACxC,IAAImZ,EAAMtZ,EAAKK,WAAW7M,KAAK6e,KAC/B,GAAW,IAAPiH,EAEF,QADE9lB,KAAK6e,IACAc,EAAM2D,UAEf,GAAW,IAAPwC,EAEF,QADE9lB,KAAK6e,IACAc,EAAMwE,YAGjB,OAAOxE,EAAMqD,KAEf,KAAK,GAEH,QADEhjB,KAAK6e,IACAc,EAAMzN,MAEf,KAAK,GAEH,KADElS,KAAK6e,IACH8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,EAAK,CACxC,IAAImZ,EAAMtZ,EAAKK,WAAW7M,KAAK6e,KAC/B,GAAW,IAAPiH,EAEF,QADE9lB,KAAK6e,IACAc,EAAM4D,YAEf,GAAW,IAAPuC,EAEF,QADE9lB,KAAK6e,IACAc,EAAMyE,aAGjB,OAAOzE,EAAMsD,MAEf,KAAK,GAEH,KADEjjB,KAAK6e,IACH8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,EAAK,CACxC,IAAImZ,EAAMtZ,EAAKK,WAAW7M,KAAK6e,KAC/B,GAAI,EAAAoH,eAAeH,GAEjB,QADE9lB,KAAK6e,IACAc,EAAMuG,aAEf,GACEP,EAAiB,GAAK3lB,KAAK6e,IAAM,EAAIlS,GAC9B,IAAPmZ,GACiC,IAAjCtZ,EAAKK,WAAW7M,KAAK6e,IAAM,GAG3B,OADA7e,KAAK6e,KAAO,EACLc,EAAM4C,YAGjB,OAAO5C,EAAMwG,IAEf,KAAK,GAAgB,CACnB,IAAIC,EAAkBpmB,KAAK6e,IAE3B,KADE7e,KAAK6e,IACH8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,EAAK,CACxC,IAAImZ,EAAMtZ,EAAKK,WAAW7M,KAAK6e,KAC/B,GAAW,IAAPiH,EAAuB,CACzB,IAAIxV,EAAc,EAAAuN,YAAYwI,KAQ9B,IANErmB,KAAK6e,IAAM,EAAIlS,GACkB,IAAjCH,EAAKK,WAAW7M,KAAK6e,IAAM,OAEzB7e,KAAK6e,IACPvO,EAAc,EAAAuN,YAAYyI,UAEnBtmB,KAAK6e,IAAMlS,GAClB,GAAiC,IAA7BH,EAAKK,WAAW7M,KAAK6e,KAA2B,GAChD7e,KAAK6e,IACP,MAGA7e,KAAKwlB,WACPxlB,KAAKwlB,UACHlV,EACA9D,EAAKO,UAAUqZ,EAAiBpmB,KAAK6e,KACrC7e,KAAK0L,MAAM0a,EAAiBpmB,KAAK6e,MAGrC,MAEF,GAAW,IAAPiH,EAA0B,CAC5B,IAAIS,GAAS,EACb,OAASvmB,KAAK6e,IAAMlS,GAElB,GADAjM,EAAI8L,EAAKK,WAAW7M,KAAK6e,KAElB,IAALne,GACAV,KAAK6e,IAAM,EAAIlS,GACkB,IAAjCH,EAAKK,WAAW7M,KAAK6e,IAAM,GAC3B,CACA7e,KAAK6e,KAAO,EACZ0H,GAAS,EACT,MAGCA,EAKMvmB,KAAKwlB,WACdxlB,KAAKwlB,UACH,EAAA3H,YAAYnI,MACZlJ,EAAKO,UAAUqZ,EAAiBpmB,KAAK6e,KACrC7e,KAAK0L,MAAM0a,EAAiBpmB,KAAK6e,MARnC7e,KAAKwmB,MACH,EAAApb,eAAeqb,YACfzmB,KAAK0L,MAAM1L,KAAK6e,KAAM,MAS1B,MAEF,GAAW,IAAPiH,EAEF,QADE9lB,KAAK6e,IACAc,EAAM4E,aAGjB,OAAO5E,EAAMyD,MAEf,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACH,OAAOpjB,KAAK0mB,cACR/G,EAAMgH,eACNhH,EAAMuG,aAEZ,KAAK,GAEH,QADElmB,KAAK6e,IACAc,EAAMiH,MAEf,KAAK,GAEH,QADE5mB,KAAK6e,IACAc,EAAMkH,UAEf,KAAK,GAEH,KADE7mB,KAAK6e,IACH8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,EAAK,CACxC,IAAImZ,EAAMtZ,EAAKK,WAAW7M,KAAK6e,KAC/B,GAAW,IAAPiH,EAEF,QADE9lB,KAAK6e,IAEL8G,EAAiB,GACjB3lB,KAAK6e,IAAMlS,GACkB,IAA7BH,EAAKK,WAAW7M,KAAK6e,QAEnB7e,KAAK6e,IACAc,EAAM8E,0BAER9E,EAAM6D,kBAEf,GAAW,IAAPsC,EAEF,QADE9lB,KAAK6e,IACAc,EAAM+C,gBAGjB,OAAO/C,EAAM6C,SAEf,KAAK,GAEH,KADExiB,KAAK6e,IACH8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,EAAK,CACxC,IAAImZ,EAAMtZ,EAAKK,WAAW7M,KAAK6e,KAC/B,GAAW,IAAPiH,EAEF,QADE9lB,KAAK6e,IAEL8G,EAAiB,GACjB3lB,KAAK6e,IAAMlS,GACkB,IAA7BH,EAAKK,WAAW7M,KAAK6e,QAEnB7e,KAAK6e,IACAc,EAAMmD,sBAERnD,EAAMiD,cAEf,GAAW,IAAPkD,EAEF,QADE9lB,KAAK6e,IACAc,EAAMmH,mBAGjB,OAAOnH,EAAMuE,OAEf,KAAK,GAEH,KADElkB,KAAK6e,IACH8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,EAAK,CACxC,IAAImZ,EAAMtZ,EAAKK,WAAW7M,KAAK6e,KAC/B,GAAW,IAAPiH,EAA6B,CAE/B,KADE9lB,KAAK6e,IACH8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,EAAK,CAExC,GADAmZ,EAAMtZ,EAAKK,WAAW7M,KAAK6e,KAChB,IAAPiH,EAEF,QADE9lB,KAAK6e,IAEL8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,GACJ,IAA7BH,EAAKK,WAAW7M,KAAK6e,QAEnB7e,KAAK6e,IACAc,EAAMgF,4CAERhF,EAAM+D,oCAEf,GAAW,IAAPoC,EAEF,QADE9lB,KAAK6e,IACAc,EAAM+E,+BAGjB,OAAO/E,EAAM8D,wBAEf,GAAW,IAAPqC,EAEF,QADE9lB,KAAK6e,IACAc,EAAMgD,mBAGjB,OAAOhD,EAAM8C,YAEf,KAAK,GAEH,QADEziB,KAAK6e,IACAc,EAAMoH,SAEf,KAAK,GAEH,QADE/mB,KAAK6e,IACAc,EAAMqH,YAEf,KAAK,GAEH,QADEhnB,KAAK6e,IACAc,EAAMsH,aAEf,KAAK,GAEH,QADEjnB,KAAK6e,IAEL8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,GACJ,IAA7BH,EAAKK,WAAW7M,KAAK6e,QAEnB7e,KAAK6e,IACAc,EAAMmF,cAERnF,EAAMkE,MAEf,KAAK,IAEH,QADE7jB,KAAK6e,IACAc,EAAMuH,UAEf,KAAK,IAEH,KADElnB,KAAK6e,IACH8G,EAAiB,GAAK3lB,KAAK6e,IAAMlS,EAAK,CACxC,IAAImZ,EAAMtZ,EAAKK,WAAW7M,KAAK6e,KAC/B,GAAW,KAAPiH,EAEF,QADE9lB,KAAK6e,IACAc,EAAMsE,QAEf,GAAW,IAAP6B,EAEF,QADE9lB,KAAK6e,IACAc,EAAMkF,WAGjB,OAAOlF,EAAMiE,IAEf,KAAK,IAEH,QADE5jB,KAAK6e,IACAc,EAAMwH,WAEf,KAAK,IAEH,QADEnnB,KAAK6e,IACAc,EAAMoE,MAEf,KAAK,GAEH,QADE/jB,KAAK6e,IACAc,EAAMyH,GAEf,QAAS,CACP,GAAI,EAAAC,kBAAkB3mB,GAAI,CACxB,GAAI,EAAA4mB,mBAAmB5mB,GAAI,CACzB,IAAI6mB,EAAYvnB,KAAK6e,IACrB,OACI7e,KAAK6e,IAAMlS,GACb,EAAA6a,iBAAiB9mB,EAAI8L,EAAKK,WAAW7M,KAAK6e,OAE1C,IAAK,EAAAyI,mBAAmB5mB,GAEtB,OADAV,KAAK6e,IAAM0I,EACJ5H,EAAMlP,WAGjB,IACIgX,EAAe5H,EADDrT,EAAKO,UAAUwa,EAAWvnB,KAAK6e,MAEjD,GACE4I,IAAiB9H,EAAMyC,SACvBqD,IAAuB7F,EAAmB8H,SAExCjC,IAAuB7F,EAAmB+H,SAC1CtF,EAAsBoF,IAGxB,OAAOA,EAETznB,KAAK6e,IAAM0I,EAEb,OAAO5H,EAAMlP,WACR,GAAI,EAAAmX,aAAalnB,GAAI,GACxBV,KAAK6e,IACP,MAEF,IAAIzS,EAAQpM,KAAK6e,MASjB,OAPkB,QAAX,MAAJne,IAAyBV,KAAK6e,IAAM7e,KAAK2M,KACA,QAAX,MAA7BH,EAAKK,WAAW7M,KAAK6e,SACrB7e,KAAK6e,IACT7e,KAAKwmB,MACH,EAAApb,eAAeyc,kBACf7nB,KAAK0L,MAAMU,EAAOpM,KAAK6e,MAElBc,EAAMyC,UAInB,OAAOzC,EAAMmI,UAGf,KACEC,GAAuB,EACvBtC,EAAyC7F,EAAmBW,QAC5DyH,EAAyB5kB,IAAIwiB,WAE7B,IAAIpZ,EAAOxM,KAAKgM,OAAOQ,KACvB,GAAIxM,KAAKqlB,UAAY,EAAG,CACtB,IAGIA,EAHAkC,EAAYvnB,KAAK6e,IACjBoJ,EAAcjoB,KAAKsiB,MACnB4F,EAAiBloB,KAAKolB,SAE1B,GAAGC,EAAYrlB,KAAK0lB,WAAWD,EAAoBuC,SAC5C3C,GAAa1F,EAAMyC,SAG1B,GAFApiB,KAAKqlB,UAAYA,EACjBrlB,KAAKslB,aAAetlB,KAAKolB,SACrB2C,EAAgB,CAClB/nB,KAAKulB,oBAAqB,EAC1B,IAAK,IAAI1G,EAAM0I,EAAW5a,EAAM3M,KAAKslB,aAAczG,EAAMlS,IAAOkS,EAC9D,GAAI,EAAAjS,YAAYJ,EAAKK,WAAWgS,IAAO,CACrC7e,KAAKulB,oBAAqB,EAC1B,OAINvlB,KAAK6e,IAAM0I,EACXvnB,KAAKsiB,MAAQ2F,EACbjoB,KAAKolB,SAAW8C,EAElB,OAAOloB,KAAKqlB,UAGd,eAAeI,EAAyC7F,EAAmB+H,QACzE,OAAO3nB,KAAKmoB,KAAKxI,EAAMlP,WAAYgV,GAGrC,KAAKnD,EAAcmD,EAAyC7F,EAAmBW,SAC7E,IAUI8E,EAVAkC,EAAYvnB,KAAK6e,IACjBoJ,EAAcjoB,KAAKsiB,MACnB4F,EAAiBloB,KAAKolB,SACtB4C,EAAoB5kB,IAAIwiB,UAC5B,OAAQtD,GACN,KAAK3C,EAAM8C,YACTuF,EAAoB,EAKxB,GAAG3C,EAAYrlB,KAAK0lB,WAAWD,EAAoBuC,SAC5C3C,GAAa1F,EAAMyC,SAC1B,OAAIiD,GAAa/C,GACftiB,KAAKsiB,MAAQA,EACbtiB,KAAKqlB,WAAa,GACX,IAEPrlB,KAAK6e,IAAM0I,EACXvnB,KAAKsiB,MAAQ2F,EACbjoB,KAAKolB,SAAW8C,GACT,GAIX,OACE,IAAIE,EAAQC,EAMZ,OALID,EAAOC,EAAgB,KACtBD,EAAQ,IAAIE,EACjBF,EAAMvJ,IAAM7e,KAAK6e,IACjBuJ,EAAM9F,MAAQtiB,KAAKsiB,MACnB8F,EAAMhD,SAAWplB,KAAKolB,SACfgD,EAGT,QAAQA,GACNC,EAAgBD,EAGlB,MAAMA,GACJpoB,KAAK6e,IAAMuJ,EAAMvJ,IACjB7e,KAAKsiB,MAAQ8F,EAAM9F,MACnBtiB,KAAKolB,SAAWgD,EAAMhD,SACtBplB,KAAKqlB,WAAa,EAGpB,MAAMjZ,GAAa,EAAIO,GAAW,GAOhC,OANIP,EAAQ,GACVA,EAAQpM,KAAKolB,SACbzY,EAAM3M,KAAK6e,KACFlS,EAAM,IACfA,EAAMP,GAED,IAAI8R,EAAMle,KAAKgM,OAAQI,EAAOO,GAGvC,iBAIE,IAHA,IAAIH,EAAOxM,KAAKgM,OAAOQ,KACnBJ,EAAQpM,KAAK6e,IACblS,EAAM3M,KAAK2M,MAEX3M,KAAK6e,IAAMlS,GACb,EAAA6a,iBAAiBhb,EAAKK,WAAW7M,KAAK6e,QAExC,OAAOrS,EAAKO,UAAUX,EAAOpM,KAAK6e,KAGpC,aAME,IALA,IAAIrS,EAAOxM,KAAKgM,OAAOQ,KACnB+b,EAAQ/b,EAAKK,WAAW7M,KAAK6e,OAC7BzS,EAAQpM,KAAK6e,IACblS,EAAM3M,KAAK2M,IACX6b,EAAS,KACA,CACX,GAAIxoB,KAAK6e,KAAOlS,EAAK,CACnB6b,GAAUhc,EAAKO,UAAUX,EAAOpM,KAAK6e,KACrC7e,KAAKwmB,MACH,EAAApb,eAAeqd,4BACfzoB,KAAK0L,MAAMU,EAAQ,EAAGO,IAExB,MAEF,IAAIjM,EAAI8L,EAAKK,WAAW7M,KAAK6e,KAC7B,GAAIne,GAAK6nB,EAAO,CACdC,GAAUhc,EAAKO,UAAUX,EAAOpM,KAAK6e,OACrC,MAEF,GAAS,IAALne,EAAJ,CAMA,GAAI,EAAAkM,YAAYlM,IAAe,IAAT6nB,EAA4B,CAChDC,GAAUhc,EAAKO,UAAUX,EAAOpM,KAAK6e,KACrC7e,KAAKwmB,MACH,EAAApb,eAAeqd,4BACfzoB,KAAK0L,MAAMU,EAAQ,EAAGpM,KAAK6e,MAE7B,QAEA7e,KAAK6e,SAbL2J,GAAUhc,EAAKO,UAAUX,EAAOpM,KAAK6e,KACrC2J,GAAUxoB,KAAK0oB,qBACftc,EAAQpM,KAAK6e,IAajB,OAAO2J,EAGT,qBACE,IAAI7b,EAAM3M,KAAK2M,IACf,KAAM3M,KAAK6e,KAAOlS,EAKhB,OAJA3M,KAAKwmB,MACH,EAAApb,eAAeud,uBACf3oB,KAAK0L,MAAMiB,IAEN,GAGT,IAAIH,EAAOxM,KAAKgM,OAAOQ,KACnB9L,EAAI8L,EAAKK,WAAW7M,KAAK6e,OAC7B,OAAQne,GACN,KAAK,GAAa,MAAO,KACzB,KAAK,GAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,GAAsB,MAAO,IAClC,KAAK,GAAsB,MAAO,IAClC,KAAK,IACH,OACEV,KAAK6e,IAAMlS,GACkB,KAA7BH,EAAKK,WAAW7M,KAAK6e,QAEnB7e,KAAK6e,IACA7e,KAAK4oB,6BAEP5oB,KAAK6oB,oBAEd,KAAK,IACH,OAAO7oB,KAAK8oB,wBAEd,KAAK,GAED9oB,KAAK6e,IAAMlS,GACkB,IAA7BH,EAAKK,WAAW7M,KAAK6e,QAEnB7e,KAAK6e,IAIX,KAAK,GACL,KAAK,KACL,KAAK,KAA6B,MAAO,GACzC,QAAS,OAAOlX,OAAOohB,aAAaroB,IAIxC,oBAKE,IAJA,IAAI8L,EAAOxM,KAAKgM,OAAOQ,KACnBJ,EAAQpM,KAAK6e,IACblS,EAAM3M,KAAK2M,IACXqc,GAAU,IACD,CACX,GAAIhpB,KAAK6e,KAAOlS,EAAK,CACnB3M,KAAKwmB,MACH,EAAApb,eAAe6d,wCACfjpB,KAAK0L,MAAMU,EAAOO,IAEpB,MAEF,GAAiC,IAA7BH,EAAKK,WAAW7M,KAAK6e,KAA4B,GACjD7e,KAAK6e,IACPmK,GAAU,EACV,SAEF,IAAItoB,EAAI8L,EAAKK,WAAW7M,KAAK6e,KAC7B,IAAKmK,GAAgB,IAALtoB,EAAqB,MACrC,GAAI,EAAAkM,YAAYlM,GAAI,CAClBV,KAAKwmB,MACH,EAAApb,eAAe6d,wCACfjpB,KAAK0L,MAAMU,EAAOpM,KAAK6e,MAEzB,QAEA7e,KAAK6e,IACPmK,GAAU,EAEZ,OAAOxc,EAAKO,UAAUX,EAAOpM,KAAK6e,KAGpC,kBAKE,IAJA,IAAIrS,EAAOxM,KAAKgM,OAAOQ,KACnBJ,EAAQpM,KAAK6e,IACblS,EAAM3M,KAAK2M,IACXuH,EAAQ,EACLlU,KAAK6e,IAAMlS,GAAK,CACrB,IAAIjM,EAAS8L,EAAKK,WAAW7M,KAAK6e,KAClC,IAAK,EAAA2I,iBAAiB9mB,GAAI,MAI1B,SAHEV,KAAK6e,IAGCne,GACN,KAAK,IACHwT,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,KAAK,IACHA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,KAAK,IACHA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACFlU,KAAKwmB,MACH,EAAApb,eAAe8d,iCACflpB,KAAK0L,MAAMU,EAAOpM,KAAK6e,MAGpBrS,EAAKO,UAAUX,EAAOpM,KAAK6e,KAGpC,cACE,IAAIlS,EAAM3M,KAAK2M,IACXH,EAAOxM,KAAKgM,OAAOQ,KACnBqS,EAAM7e,KAAK6e,IACf,GAAIA,EAAM,EAAIlS,GAA+B,IAAxBH,EAAKK,WAAWgS,GACnC,OAAmC,GAA3BrS,EAAKK,WAAWgS,EAAM,IAC5B,KAAK,IACL,KAAK,GACL,KAAK,IAAY,OAAO,EAG5B,KAAOA,EAAMlS,GAAK,CAChB,IAAIjM,EAAI8L,EAAKK,WAAWgS,GACxB,GAAS,IAALne,GAAiC,MAAP,GAAJA,GAAuB,OAAO,EACxD,GAAS,IAALA,IAAoBA,EAAI,IAAeA,EAAI,IAAc,MAE7Dme,IAEF,OAAO,EAGT,cACE,IAAIrS,EAAOxM,KAAKgM,OAAOQ,KACvB,GAAIxM,KAAK6e,IAAM,EAAI7e,KAAK2M,KAAoC,IAA7BH,EAAKK,WAAW7M,KAAK6e,KAAqB,CACvE,OAAwC,GAAhCrS,EAAKK,WAAW7M,KAAK6e,IAAM,IACjC,KAAK,IAEH,OADA7e,KAAK6e,KAAO,EACL7e,KAAKmpB,iBAEd,KAAK,GAEH,OADAnpB,KAAK6e,KAAO,EACL7e,KAAKopB,oBAEd,KAAK,IAEH,OADAppB,KAAK6e,KAAO,EACL7e,KAAKqpB,mBAGhB,GAAI,EAAAC,aAAa9c,EAAKK,WAAW7M,KAAK6e,IAAM,IAAK,CAC/C,IAAIzS,EAAQpM,KAAK6e,MACf7e,KAAK6e,IACP,IAAIvd,EAAQtB,KAAKqpB,mBAKjB,OAJArpB,KAAKwmB,MACH,EAAApb,eAAeme,8CACfvpB,KAAK0L,MAAMU,EAAOpM,KAAK6e,MAElBvd,GAGX,OAAOtB,KAAKwpB,qBAGd,iBAOE,IANA,IAAIhd,EAAOxM,KAAKgM,OAAOQ,KACnBJ,EAAQpM,KAAK6e,IACbvd,EAAQmoB,QAAQ,GAChBC,EAAQD,QAAQ,GAChBE,EAASvd,EACTO,EAAM3M,KAAK2M,IACR3M,KAAK6e,IAAMlS,GAAK,CACrB,IAAIkS,EAAM7e,KAAK6e,IACXne,EAAI8L,EAAKK,WAAWgS,GACxB,GAAIne,GAAK,IAAeA,GAAK,GAE3BY,EAAQsoB,QACNC,QAAQvoB,EAAOooB,GACfD,QAAQ/oB,EAAI,UAER,GAAIA,GAAK,IAAcA,GAAK,GAElCY,EAAQsoB,QACNC,QAAQvoB,EAAOooB,GACfD,QAAQ,GAAK/oB,EAAI,UAEd,GAAIA,GAAK,IAAcA,GAAK,IAEjCY,EAAQsoB,QACNC,QAAQvoB,EAAOooB,GACfD,QAAQ,GAAK/oB,EAAI,SAEd,IAAS,IAALA,EAWT,MAVIipB,GAAU9K,GACZ7e,KAAKwmB,MACHmD,GAAUvd,EACN,EAAAhB,eAAe0e,wCACf,EAAA1e,eAAe2e,0DACnB/pB,KAAK0L,MAAMmT,IAGf8K,EAAS9K,EAAM,EAIjB7e,KAAK6e,IAAMA,EAAM,EAanB,OAXI7e,KAAK6e,KAAOzS,EACdpM,KAAKwmB,MACH,EAAApb,eAAe4e,2BACfhqB,KAAK0L,MAAMU,IAEJud,GAAU3pB,KAAK6e,KACxB7e,KAAKwmB,MACH,EAAApb,eAAe0e,wCACf9pB,KAAK0L,MAAMie,EAAS,IAGjBroB,EAGT,qBAOE,IANA,IAAIkL,EAAOxM,KAAKgM,OAAOQ,KACnBJ,EAAQpM,KAAK6e,IACblS,EAAM3M,KAAK2M,IACXrL,EAAQmoB,QAAQ,GAChBQ,EAASR,QAAQ,IACjBE,EAASvd,EACNpM,KAAK6e,IAAMlS,GAAK,CACrB,IAAIkS,EAAM7e,KAAK6e,IACXne,EAAI8L,EAAKK,WAAWgS,GACxB,GAAIne,GAAK,IAAeA,GAAK,GAE3BY,EAAQsoB,QACNM,QAAQ5oB,EAAO2oB,GACfR,QAAQ/oB,EAAI,SAET,IAAS,IAALA,EAWT,MAVIipB,GAAU9K,GACZ7e,KAAKwmB,MACHmD,GAAUvd,EACN,EAAAhB,eAAe0e,wCACf,EAAA1e,eAAe2e,0DACnB/pB,KAAK0L,MAAMmT,IAGf8K,EAAS9K,EAAM,EAIjB7e,KAAK6e,IAAMA,EAAM,EAanB,OAXI7e,KAAK6e,KAAOzS,EACdpM,KAAKwmB,MACH,EAAApb,eAAe+e,eACfnqB,KAAK0L,MAAMU,IAEJud,GAAU3pB,KAAK6e,KACxB7e,KAAKwmB,MACH,EAAApb,eAAe0e,wCACf9pB,KAAK0L,MAAMie,EAAS,IAGjBroB,EAGT,mBAOE,IANA,IAAIkL,EAAOxM,KAAKgM,OAAOQ,KACnBJ,EAAQpM,KAAK6e,IACbvd,EAAQmoB,QAAQ,GAChBW,EAAQX,QAAQ,GAChBE,EAASvd,EACTO,EAAM3M,KAAK2M,IACR3M,KAAK6e,IAAMlS,GAAK,CACrB,IAAIkS,EAAM7e,KAAK6e,IACXne,EAAI8L,EAAKK,WAAWgS,GACxB,GAAIne,GAAK,IAAeA,GAAK,GAE3BY,EAAQsoB,QACNC,QAAQvoB,EAAO8oB,GACfX,QAAQ/oB,EAAI,SAET,IAAS,IAALA,EAWT,MAVIipB,GAAU9K,GACZ7e,KAAKwmB,MACHmD,GAAUvd,EACN,EAAAhB,eAAe0e,wCACf,EAAA1e,eAAe2e,0DACnB/pB,KAAK0L,MAAMmT,IAGf8K,EAAS9K,EAAM,IAIf7e,KAAK6e,IAaT,OAXI7e,KAAK6e,KAAOzS,EACdpM,KAAKwmB,MACH,EAAApb,eAAeif,qBACfrqB,KAAK0L,MAAMU,IAEJud,GAAU3pB,KAAK6e,KACxB7e,KAAKwmB,MACH,EAAApb,eAAe0e,wCACf9pB,KAAK0L,MAAMie,EAAS,IAGjBroB,EAGT,oBAOE,IANA,IAAIkL,EAAOxM,KAAKgM,OAAOQ,KACnBJ,EAAQpM,KAAK6e,IACbvd,EAAQmoB,QAAQ,GAChBa,EAAQb,QAAQ,GAChBE,EAASvd,EACTO,EAAM3M,KAAK2M,IACR3M,KAAK6e,IAAMlS,GAAK,CACrB,IAAIkS,EAAM7e,KAAK6e,IACXne,EAAI8L,EAAKK,WAAWgS,GACxB,GAAS,IAALne,EAEFY,EAAQuoB,QAAQvoB,EAAOgpB,QAClB,GAAS,IAAL5pB,EAETY,EAAQsoB,QACNC,QAAQvoB,EAAOgpB,GACfA,OAEG,IAAS,IAAL5pB,EAWT,MAVIipB,GAAU9K,GACZ7e,KAAKwmB,MACHmD,GAAUvd,EACN,EAAAhB,eAAe0e,wCACf,EAAA1e,eAAe2e,0DACnB/pB,KAAK0L,MAAMmT,IAGf8K,EAAS9K,EAAM,EAIjB7e,KAAK6e,IAAMA,EAAM,EAanB,OAXI7e,KAAK6e,KAAOzS,EACdpM,KAAKwmB,MACH,EAAApb,eAAemf,sBACfvqB,KAAK0L,MAAMU,IAEJud,GAAU3pB,KAAK6e,KACxB7e,KAAKwmB,MACH,EAAApb,eAAe0e,wCACf9pB,KAAK0L,MAAMie,EAAS,IAGjBroB,EAGT,YAWE,OAAOtB,KAAKwqB,mBAGd,mBAKE,IAHA,IAAIpe,EAAQpM,KAAK6e,IACblS,EAAM3M,KAAK2M,IACXH,EAAOxM,KAAKgM,OAAOQ,KAChBxM,KAAK6e,IAAMlS,GAAO,EAAAsZ,eAAezZ,EAAKK,WAAW7M,KAAK6e,SACzD7e,KAAK6e,IAET,GAAI7e,KAAK6e,IAAMlS,GAAoC,IAA7BH,EAAKK,WAAW7M,KAAK6e,KAEzC,MADE7e,KAAK6e,IACA7e,KAAK6e,IAAMlS,GAAO,EAAAsZ,eAAezZ,EAAKK,WAAW7M,KAAK6e,SACzD7e,KAAK6e,IAGX,GAAI7e,KAAK6e,IAAMlS,EAAK,CAClB,IAAIjM,EAAI8L,EAAKK,WAAW7M,KAAK6e,KAC7B,GAAgB,MAAP,GAAJne,GAQH,OANIV,KAAK6e,IAAMlS,GACsB,KAAlCjM,EAAI8L,EAAKK,WAAW7M,KAAK6e,OAAgC,IAALne,GACrD,EAAAulB,eAAezZ,EAAKK,WAAW7M,KAAK6e,IAAM,QAExC7e,KAAK6e,IAEF7e,KAAK6e,IAAMlS,GAAO,EAAAsZ,eAAezZ,EAAKK,WAAW7M,KAAK6e,SACzD7e,KAAK6e,IAIb,OAAO4L,WAAWje,EAAKO,UAAUX,EAAOpM,KAAK6e,MAG/C,eACE,MAAM,IAAI5V,MAAM,mBAGlB,sBAAsByhB,EAAc,GAIlC,IAHA,IAAIppB,EAAQ,EACRqL,EAAM3M,KAAK2M,IACXH,EAAOxM,KAAKgM,OAAOQ,KAChBxM,KAAK6e,IAAMlS,GAAK,CACrB,IAAIjM,EAAI8L,EAAKK,WAAW7M,KAAK6e,OAC7B,GAAIne,GAAK,IAAeA,GAAK,GAC3BY,GAASA,GAAS,GAAKZ,EAAI,QACtB,GAAIA,GAAK,IAAcA,GAAK,GACjCY,GAASA,GAAS,GAAKZ,GAAI,OACtB,MAAIA,GAAK,IAAcA,GAAK,KAOjC,OAJAV,KAAKwmB,MACH,EAAApb,eAAe4e,2BACfhqB,KAAK0L,MAAM1L,KAAK6e,IAAM,EAAG7e,KAAK6e,MAEzB,GANPvd,GAASA,GAAS,GAAKZ,GAAI,GAQ7B,GAAgB,KAAVgqB,EAAa,MAErB,OAAIA,GACF1qB,KAAKwmB,MACH,EAAApb,eAAeud,uBACf3oB,KAAK0L,MAAM1L,KAAK6e,MAEX,IAEFlX,OAAOohB,aAAaznB,GAG7B,oBACE,OAAOtB,KAAK8oB,sBAAsB,GAG5B,4BACN,IAAI1c,EAAQpM,KAAK6e,IACbvd,EAAQtB,KAAKmpB,iBACbwB,EAAUC,QAAQtpB,GAClBupB,GAAU,EAEd/f,QAAQggB,SAASxpB,IACbqpB,EAAU,UACZ3qB,KAAKwmB,MACH,EAAApb,eAAe2f,4EACf/qB,KAAK0L,MAAMU,EAAOpM,KAAK6e,MAEzBgM,GAAU,GAGZ,IAAIle,EAAM3M,KAAK2M,IACXH,EAAOxM,KAAKgM,OAAOQ,KAiBvB,OAhBIxM,KAAK6e,KAAOlS,GACd3M,KAAKwmB,MACH,EAAApb,eAAeud,uBACf3oB,KAAK0L,MAAMU,EAAOO,IAEpBke,GAAU,GAC4B,KAA7Bre,EAAKK,WAAW7M,KAAK6e,OAC5B7e,KAAK6e,KAEP7e,KAAKwmB,MACH,EAAApb,eAAe4f,qCACfhrB,KAAK0L,MAAMU,EAAOpM,KAAK6e,MAEzBgM,GAAU,GAGRA,EAAgB,GACbF,EAAU,MACbhjB,OAAOohB,aAAa4B,GACpBhjB,OAAOohB,aACL4B,EAAU,QAAa,GAAM,MAC7BA,EAAU,MAAW,KAAQ,OAIrC,WArmCF,cA0mCA,MAAarC,GAAb,UAUA,IAAID,EAA8B,M,8EClgDlC,aAmBA,OAMA,OAOA,OAKA,OA4CA,OASA,OAIA,QAIA,QAIA,QAKA,MAAM4C,EACJ,YAESC,EAEAC,EAEAC,EAEAC,EAEAC,GARA,KAAAJ,YAEA,KAAAC,kBAEA,KAAAC,oBAEA,KAAAC,cAEA,KAAAC,kBAKX,MAAMC,EACJ,YAESJ,EAEAC,EAEAC,EAEAC,GANA,KAAAH,kBAEA,KAAAC,oBAEA,KAAAC,cAEA,KAAAC,kBAKX,MAAME,EAEJ,YAESH,EAEAC,EAEAG,GAJA,KAAAJ,cAEA,KAAAC,iBAEA,KAAAG,eAKX,IAAYC,EAk6DAC,EA0CAC,GA58DZ,SAAYF,GACV,yBAGA,iCACA,iCACA,qDACA,qDAGA,iBACA,iBACA,iBACA,iBACA,iBACA,kBACA,kCACA,gCACA,kCACA,kCACA,kCACA,sCACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAGA,oBACA,sBACA,kBACA,kCACA,gCACA,gCAGA,kCACA,kCAvCF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KA+CxB,SAAiBA,GAGC,EAAAG,cAAhB,SAA8B3b,EAA8B4b,GAE1D,OADAhhB,OAAOghB,EAAIpf,QACHwD,GACN,KAAK,EAAApC,cAAcqP,SACnB,KAAK,EAAArP,cAAc2P,gBACjB,OAAQqO,EAAIjf,WAAW,IACrB,KAAK,GACH,GAAW,MAAPif,EAAa,OAAOJ,EAAaK,YACrC,GAAW,OAAPD,EAAc,OAAOJ,EAAaM,YACtC,MAEF,KAAK,IACH,GAAW,MAAPF,EAAa,OAAOJ,EAAaO,sBACrC,GAAW,OAAPH,EAAc,OAAOJ,EAAaQ,sBACtC,MAEF,KAAK,GACH,GAAW,KAAPJ,EAAY,OAAOJ,EAAaS,IACpC,MAEF,KAAK,GACH,GAAW,KAAPL,EAAY,OAAOJ,EAAaU,IACpC,MAEF,KAAK,GACH,GAAW,KAAPN,EAAY,OAAOJ,EAAaW,IACpC,GAAW,MAAPP,EAAa,OAAOJ,EAAaY,IACrC,MAEF,KAAK,GACH,GAAW,KAAPR,EAAY,OAAOJ,EAAaa,IACpC,MAEF,KAAK,GACH,GAAW,KAAPT,EAAY,OAAOJ,EAAac,IACpC,MAEF,KAAK,GACH,GAAW,KAAPV,EAAY,OAAOJ,EAAae,YACpC,MAEF,KAAK,IACH,GAAW,KAAPX,EAAY,OAAOJ,EAAagB,WACpC,MAEF,KAAK,GACH,GAAW,KAAPZ,EAAY,OAAOJ,EAAaiB,YACpC,MAEF,KAAK,GACH,GAAW,MAAPb,EAAa,OAAOJ,EAAakB,GACrC,MAEF,KAAK,GACH,GAAW,MAAPd,EAAa,OAAOJ,EAAamB,GACrC,MAEF,KAAK,GACH,GAAW,KAAPf,EAAY,OAAOJ,EAAaoB,GACpC,GAAW,MAAPhB,EAAa,OAAOJ,EAAaqB,GACrC,GAAW,MAAPjB,EAAa,OAAOJ,EAAasB,YACrC,GAAW,OAAPlB,EAAc,OAAOJ,EAAauB,cACtC,MAEF,KAAK,GACH,GAAW,KAAPnB,EAAY,OAAOJ,EAAawB,GACpC,GAAW,MAAPpB,EAAa,OAAOJ,EAAayB,GACrC,GAAW,MAAPrB,EAAa,OAAOJ,EAAa0B,YAIzC,MAEF,KAAK,EAAAtf,cAAc4P,gBACjB,OAAQoO,EAAIjf,WAAW,IACrB,KAAK,GACH,GAAW,KAAPif,EAAY,OAAOJ,EAAa1I,KACpC,GAAW,MAAP8I,EAAa,OAAOJ,EAAa2B,WACrC,MAEF,KAAK,GACH,GAAW,KAAPvB,EAAY,OAAOJ,EAAazI,MACpC,GAAW,MAAP6I,EAAa,OAAOJ,EAAa4B,WACrC,MAEF,KAAK,GACH,GAAW,KAAPxB,EAAY,OAAOJ,EAAa6B,IACpC,MAEF,KAAK,IACH,GAAW,KAAPzB,EAAY,OAAOJ,EAAa8B,YAIxC,MAEF,KAAK,EAAA1f,cAAc6P,iBACjB,OAAQmO,EAAIjf,WAAW,IACrB,KAAK,GACH,GAAW,MAAPif,EAAa,OAAOJ,EAAa+B,YACrC,MAEF,KAAK,GACH,GAAW,MAAP3B,EAAa,OAAOJ,EAAagC,aAO7C,OAAOhC,EAAatJ,SAIN,EAAAuL,gBAAhB,SAAgCrL,GAC9B,OAAQA,GACN,KAAK,EAAA3C,MAAMqD,KACX,KAAK,EAAArD,MAAMwE,YAAa,OAAOuH,EAAaS,IAC5C,KAAK,EAAAxM,MAAMsD,MACX,KAAK,EAAAtD,MAAMyE,aAAc,OAAOsH,EAAaU,IAC7C,KAAK,EAAAzM,MAAMwD,SACX,KAAK,EAAAxD,MAAM0E,gBAAiB,OAAOqH,EAAaW,IAChD,KAAK,EAAA1M,MAAMyD,MACX,KAAK,EAAAzD,MAAM4E,aAAc,OAAOmH,EAAaa,IAC7C,KAAK,EAAA5M,MAAM0D,QACX,KAAK,EAAA1D,MAAM6E,eAAgB,OAAOkH,EAAac,IAC/C,KAAK,EAAA7M,MAAMuD,kBACX,KAAK,EAAAvD,MAAM2E,yBAA0B,OAAOoH,EAAaY,IACzD,KAAK,EAAA3M,MAAMgE,UACX,KAAK,EAAAhE,MAAMiF,iBAAkB,OAAO8G,EAAae,YACjD,KAAK,EAAA9M,MAAMiE,IACX,KAAK,EAAAjE,MAAMkF,WAAY,OAAO6G,EAAagB,WAC3C,KAAK,EAAA/M,MAAMkE,MACX,KAAK,EAAAlE,MAAMmF,aAAc,OAAO4G,EAAaiB,YAC7C,KAAK,EAAAhN,MAAM6D,kBACX,KAAK,EAAA7D,MAAM8E,yBAA0B,OAAOiH,EAAa0B,YACzD,KAAK,EAAAzN,MAAM8D,wBACX,KAAK,EAAA9D,MAAM+E,+BAAgC,OAAOgH,EAAasB,YAC/D,KAAK,EAAArN,MAAM+D,oCACX,KAAK,EAAA/D,MAAMgF,2CAA4C,OAAO+G,EAAauB,cAC3E,KAAK,EAAAtN,MAAMiD,cAAe,OAAO8I,EAAakB,GAC9C,KAAK,EAAAjN,MAAMkD,mBAAoB,OAAO6I,EAAamB,GACnD,KAAK,EAAAlN,MAAM8C,YAAa,OAAOiJ,EAAaoB,GAC5C,KAAK,EAAAnN,MAAMgD,mBAAoB,OAAO+I,EAAaqB,GACnD,KAAK,EAAApN,MAAM6C,SAAU,OAAOkJ,EAAawB,GACzC,KAAK,EAAAvN,MAAM+C,gBAAiB,OAAOgJ,EAAayB,GAElD,OAAOzB,EAAatJ,SAIN,EAAAwL,qBAAhB,SAAqCtL,GACnC,OAAQA,GACN,KAAK,EAAA3C,MAAMqD,KAAM,OAAO0I,EAAa1I,KACrC,KAAK,EAAArD,MAAMsD,MAAO,OAAOyI,EAAazI,MACtC,KAAK,EAAAtD,MAAMmE,YAAa,OAAO4H,EAAa6B,IAC5C,KAAK,EAAA5N,MAAMoE,MAAO,OAAO2H,EAAa8B,YACtC,KAAK,EAAA7N,MAAM2D,UAAW,OAAOoI,EAAa2B,WAC1C,KAAK,EAAA1N,MAAM4D,YAAa,OAAOmI,EAAa4B,WAE9C,OAAO5B,EAAatJ,SAIN,EAAAyL,sBAAhB,SAAsCvL,GACpC,OAAQA,GACN,KAAK,EAAA3C,MAAM2D,UAAW,OAAOoI,EAAa+B,YAC1C,KAAK,EAAA9N,MAAM4D,YAAa,OAAOmI,EAAagC,YAE9C,OAAOhC,EAAatJ,SA5KxB,CAAiBsJ,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAiL7B,MAAaoC,UAAgB,EAAA3I,kBAiH3B,YAEE4I,EAEA3gB,EAA0C,MAE1CkR,MAAMlR,GAhHR,KAAA4gB,QAAoB,GAEpB,KAAAC,kBAAyB,EAWzB,KAAAC,YAAgC,IAAInmB,IAEpC,KAAAomB,eAAsC,IAAIpmB,IAE1C,KAAAqmB,sBAAmE,IAAIrmB,IAEvE,KAAAsmB,gBAAuC,IAAItmB,IAE3C,KAAAumB,eAAkC,IAAIvmB,IAEtC,KAAAwmB,eAAiC,IAAIxmB,IAErC,KAAAymB,iBAAgC,IAAI5mB,MAAiB,GAqErD,KAAA6mB,YAAmB,EAEnB,KAAAC,gBAAuB,EAEvB,KAAAC,aAAoB,EAuFZ,KAAAC,qBAAgD,KAxEtD5uB,KAAK+tB,QAAUA,EACf,IAAIc,EAAe,IAAI,EAAAC,OAAO,EAAAjsB,cAAe,gBAAiB,EAAAmL,WAAWiR,eACzEjf,KAAK6uB,aAAeA,EACpB,IAAIE,EAAa,IAAIC,EAAKhvB,KAAM6uB,GAChC7uB,KAAK+uB,WAAaA,EAClB/uB,KAAKkuB,YAAYxgB,IAAIqhB,EAAWE,aAAcF,GAC9C/uB,KAAKkvB,OAAS,IAAI,EAAAC,OAAOnvB,KAAKoN,YAAapN,KAAKguB,SAChDhuB,KAAKovB,SAAW,IAAI,EAAAC,SAASrvB,MAnB/B,aACE,OAAOA,KAAKmuB,eAAe7gB,IAAI,EAAAtK,YAAYiD,UAsB7C,UAAUoR,GACR,IAAI2W,EAAUhuB,KAAKguB,QACnB,IAAK,IAAI3tB,EAAI,EAAGA,EAAI2tB,EAAQthB,SAAUrM,EAAG,CACvC,IAAI2L,EAASgiB,EAAQ3tB,GACrB,GAAI2L,EAAOqL,cAAgBA,EAAc,OAAOrL,EAAOQ,KAEzD,OAAO,KAIT,mBAAmB8iB,EAAoBC,EAAaC,EAASC,GAO3D3kB,OAAO2kB,EAAe,GAAK,IAC3B,EAAAC,SAASD,EAAaH,EAAQC,GAC9B,EAAAG,SAAS,EAAGJ,EAAQC,EAAS,GAC7B,EAAAG,SAASF,EAAIF,EAAQC,EAAS,GAC9B,EAAAG,SAASD,EAAaH,EAAQC,EAAS,IAIzC,wBACE,OAAO,GAIT,8BAEE3uB,EAEAsT,EAAqB,EAAA7R,YAAYqa,MAEjC,IAAIhR,EAAQ1L,KAAK6uB,aAAanjB,MAC9B,OAAO,EAAAuC,KAAK0hB,0BACV,EAAA1hB,KAAKQ,2BAA2B7N,EAAM8K,GACtC,KAAM,KAAM,KAAMwI,EAAOxI,GAK7B,0BAEE9K,EAEAsT,EAAqB,EAAA7R,YAAYqa,MAEjC,IAAIhR,EAAQ1L,KAAK6uB,aAAanjB,MAC1B4C,EAAa,EAAAL,KAAKQ,2BAA2B7N,EAAM8K,GACvD,OAAO,EAAAuC,KAAK2hB,sBACVthB,EACA,KACA,EAAAL,KAAK4hB,kBAAkBnkB,GACvB,KAAMwI,EAAOxI,GAQjB,8BAEE9K,EAEAsT,EAAqB,EAAA7R,YAAYqa,MAEjC,IAAIhR,EAAQ1L,KAAK6uB,aAAanjB,MAC1B+N,EAAYzZ,KAAK4uB,qBAUrB,OATKnV,IACHzZ,KAAK4uB,qBAAuBnV,EAAY,EAAAxL,KAAK6hB,mBAAmB,GAC9D,EAAA7hB,KAAKkB,gBACH,EAAAlB,KAAKmB,qBAAqB,EAAApM,YAAY2B,MAAO+G,GAC7C,MAAM,EAAOA,GAEf,MAAM,EAAOA,IAGV,EAAAuC,KAAKuR,0BACV,EAAAvR,KAAKQ,2BAA2B7N,EAAM8K,GACtC,KAAM+N,EAAW,KAAM,KAAMvF,EAAO,EAAgBxI,GAKxD,+BAEE9K,EAEAsT,EAAqB,EAAA7R,YAAYqa,MAEjC,IAAIhR,EAAQ1L,KAAK6uB,aAAanjB,MAC9B,OAAO,EAAAuC,KAAK8hB,2BACV,EAAA9hB,KAAKQ,2BAA2B7N,EAAM8K,GACtC,GAAI,KAAMwI,EAAOxI,GAKrB,mBAEE9K,EAEA6Y,EAEAuW,EAAkBhwB,KAAK+uB,WAEvB7a,EAAqB,EAAA7R,YAAYqa,KAEjCuT,EAAiCrE,EAAelP,MAEhD,OAAO,IAAIwT,EACTtvB,EACA,IAAIuvB,EACFvvB,EACAovB,EACAhwB,KAAKowB,8BAA8BxvB,EAAMsT,GACzC+b,GAEFxW,GAKJ,wBAAwB5H,GACtB,IAAIuc,EAAwBpuB,KAAKouB,sBACjC,OAAOA,EAAsB9gB,IAAIuE,GAC7B/G,OAAOsjB,EAAsBltB,IAAI2Q,IACjC,KAIN,WAAWkc,GAET,IAAI/tB,KAAK2uB,YAAT,CAEA3uB,KAAK2uB,aAAc,EACnB3uB,KAAK+tB,QAAUA,EAGf/tB,KAAKqwB,mBAAmB,EAAArtB,YAAYE,GAAI,EAAAotB,KAAKptB,IAC7ClD,KAAKqwB,mBAAmB,EAAArtB,YAAYG,IAAK,EAAAmtB,KAAKntB,KAC9CnD,KAAKqwB,mBAAmB,EAAArtB,YAAYI,IAAK,EAAAktB,KAAKltB,KAC9CpD,KAAKqwB,mBAAmB,EAAArtB,YAAYK,IAAK,EAAAitB,KAAKjtB,KAC9CrD,KAAKqwB,mBAAmB,EAAArtB,YAAYM,MAAOyqB,EAAQwC,WACnDvwB,KAAKqwB,mBAAmB,EAAArtB,YAAYO,GAAI,EAAA+sB,KAAK/sB,IAC7CvD,KAAKqwB,mBAAmB,EAAArtB,YAAYQ,IAAK,EAAA8sB,KAAK9sB,KAC9CxD,KAAKqwB,mBAAmB,EAAArtB,YAAYS,IAAK,EAAA6sB,KAAK7sB,KAC9CzD,KAAKqwB,mBAAmB,EAAArtB,YAAYU,IAAK,EAAA4sB,KAAK5sB,KAC9C1D,KAAKqwB,mBAAmB,EAAArtB,YAAYW,MAAOoqB,EAAQyC,WACnDxwB,KAAKqwB,mBAAmB,EAAArtB,YAAYY,KAAM,EAAA0sB,KAAK1sB,MAC/C5D,KAAKqwB,mBAAmB,EAAArtB,YAAYa,IAAK,EAAAysB,KAAKzsB,KAC9C7D,KAAKqwB,mBAAmB,EAAArtB,YAAYc,IAAK,EAAAwsB,KAAKxsB,KAC9C9D,KAAKqwB,mBAAmB,EAAArtB,YAAY2B,MAAO,EAAA2rB,KAAKG,MAChDzwB,KAAKqwB,mBAAmB,EAAArtB,YAAY4B,OAAQ,EAAA0rB,KAAKxsB,KACjD9D,KAAKqwB,mBAAmB,EAAArtB,YAAY6B,QAAS,EAAAyrB,KAAK1sB,MAClD5D,KAAK+uB,WAAW2B,IAAI,EAAA1tB,YAAY+B,OAAQ,IAAI4rB,EAC1C,EAAA3tB,YAAY+B,OACZ/E,KAAK+uB,WACL/uB,KAAK4wB,0BAA0B,EAAA5tB,YAAY+B,OAAQ,EAAA1C,YAAY4U,OAAS,EAAA5U,YAAYwuB,SACpFjF,EAAe9O,UAEjB9c,KAAK+uB,WAAW2B,IAAI,EAAA1tB,YAAYgC,QAAS,IAAI2rB,EAC3C,EAAA3tB,YAAYgC,QACZhF,KAAK+uB,WACL/uB,KAAK4wB,0BAA0B,EAAA5tB,YAAYgC,QAAS,EAAA3C,YAAY4U,OAAS,EAAA5U,YAAYwuB,SACrFjF,EAAe9O,UAEjB9c,KAAK+uB,WAAW2B,IAAI,EAAA1tB,YAAYiC,QAAS,IAAI0rB,EAC3C,EAAA3tB,YAAYiC,QACZjF,KAAK+uB,WACL/uB,KAAK4wB,0BAA0B,EAAA5tB,YAAYiC,QAAS,EAAA5C,YAAY4U,OAAS,EAAA5U,YAAYwuB,SACrFjF,EAAe9O,UAEjB9c,KAAK+uB,WAAW2B,IAAI,EAAA1tB,YAAYkC,SAAU,IAAIyrB,EAC5C,EAAA3tB,YAAYkC,SACZlF,KAAK+uB,WACL/uB,KAAK4wB,0BAA0B,EAAA5tB,YAAYkC,SAAU,EAAA7C,YAAY4U,OAAS,EAAA5U,YAAYwuB,SACtFjF,EAAe9O,UAMjB9c,KAAKqwB,mBAAmB,EAAArtB,YAAYe,KAAM,EAAAusB,KAAKvsB,MAC/C/D,KAAKqwB,mBAAmB,EAAArtB,YAAYgB,OAAQ,EAAAssB,KAAKtsB,QAGjDhE,KAAK8wB,wBAAwB,EAAA9tB,YAAYyC,WAAY,EAAA6qB,KAAKltB,IACxDqmB,QAAQsE,EAAQgD,SAAW,EAAA3mB,OAAO4mB,OAAS,EAAA5mB,OAAO6mB,SACpDjxB,KAAK8wB,wBAAwB,EAAA9tB,YAAY2C,cAAe,EAAA2qB,KAAK1sB,KAC3D6lB,QAAQsE,EAAQmD,SAAW,EAAI,EAAG,IACpClxB,KAAK8wB,wBAAwB,EAAA9tB,YAAY4C,gBAAiB,EAAA0qB,KAAKltB,IAC7DqmB,QAAQsE,EAAQoD,WAAY,IAC9BnxB,KAAK8wB,wBAAwB,EAAA9tB,YAAY6C,eAAgB,EAAAyqB,KAAKltB,IAC5DqmB,QAAQsE,EAAQqD,UAAW,IAC7BpxB,KAAK8wB,wBAAwB,EAAA9tB,YAAY8C,mBAAoB,EAAAwqB,KAAKltB,IAChEqmB,QAAQsE,EAAQsD,kBAAmB,IACrCrxB,KAAK8wB,wBAAwB,EAAA9tB,YAAY+C,iBAAkB,EAAAuqB,KAAKltB,IAC9DqmB,QAAQsE,EAAQuD,gBAAiB,IACnCtxB,KAAK8wB,wBAAwB,EAAA9tB,YAAYgD,qBAAsB,EAAAsqB,KAAKltB,IAClEqmB,QAAQsE,EAAQwD,eAAgB,IAGlCvxB,KAAK8wB,wBAAwB,EAAA9tB,YAAYkD,2BAA4B,EAAAoqB,KAAK1sB,KACxE6lB,QAAQsE,EAAQyD,WAAW,GAA0B,EAAI,EAAG,IAC9DxxB,KAAK8wB,wBAAwB,EAAA9tB,YAAYmD,4BAA6B,EAAAmqB,KAAK1sB,KACzE6lB,QAAQsE,EAAQyD,WAAW,GAA2B,EAAI,EAAG,IAC/DxxB,KAAK8wB,wBAAwB,EAAA9tB,YAAYoD,4BAA6B,EAAAkqB,KAAK1sB,KACzE6lB,QAAQsE,EAAQyD,WAAW,GAA2B,EAAI,EAAG,IAC/DxxB,KAAK8wB,wBAAwB,EAAA9tB,YAAYqD,wBAAyB,EAAAiqB,KAAK1sB,KACrE6lB,QAAQsE,EAAQyD,WAAW,GAAuB,EAAI,EAAG,IAC3DxxB,KAAK8wB,wBAAwB,EAAA9tB,YAAYsD,iBAAkB,EAAAgqB,KAAK1sB,KAC9D6lB,QAAQsE,EAAQyD,WAAW,IAAgB,EAAI,EAAG,IACpDxxB,KAAK8wB,wBAAwB,EAAA9tB,YAAYuD,oBAAqB,EAAA+pB,KAAK1sB,KACjE6lB,QAAQsE,EAAQyD,WAAW,IAAmB,EAAI,EAAG,IACvDxxB,KAAK8wB,wBAAwB,EAAA9tB,YAAYwD,+BAAgC,EAAA8pB,KAAK1sB,KAC5E6lB,QAAQsE,EAAQyD,WAAW,IAA8B,EAAI,EAAG,IAClExxB,KAAK8wB,wBAAwB,EAAA9tB,YAAYyD,uBAAwB,EAAA6pB,KAAK1sB,KACpE6lB,QAAQsE,EAAQyD,WAAW,KAAsB,EAAI,EAAG,IAC1DxxB,KAAK8wB,wBAAwB,EAAA9tB,YAAY0D,4BAA6B,EAAA4pB,KAAK1sB,KACzE6lB,QAAQsE,EAAQyD,WAAW,KAA2B,EAAI,EAAG,IAC/DxxB,KAAK8wB,wBAAwB,EAAA9tB,YAAY2D,wBAAyB,EAAA2pB,KAAK1sB,KACrE6lB,QAAQsE,EAAQyD,WAAW,KAAuB,EAAI,EAAG,IAG3D,IAAIC,EAAgB,IAAI7pB,MACpB8pB,EAAgB,IAAI3pB,IACpB4pB,EAAoB,IAAI5pB,IACxB6pB,EAAgB,IAAIhqB,MACpBiqB,EAAmB,IAAIjqB,MAG3B,IAAK,IAAIvH,EAAI,EAAG+b,EAAIpc,KAAKguB,QAAQthB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACnD,IAAI2L,EAAShM,KAAKguB,QAAQ3tB,GACtByxB,EAAO,IAAI9C,EAAKhvB,KAAMgM,GAC1BhM,KAAKkuB,YAAYxgB,IAAIokB,EAAK7C,aAAc6C,GACxC,IAAItc,EAAaxJ,EAAOwJ,WACxB,IAAK,IAAIuc,EAAI,EAAGzxB,EAAIkV,EAAW9I,OAAQqlB,EAAIzxB,IAAKyxB,EAAG,CACjD,IAAIzb,EAAYd,EAAWuc,GAC3B,OAAQzb,EAAUlI,MAChB,KAAK,EAAAP,SAASoJ,OACZjX,KAAKgyB,kBAAmC1b,EAAWwb,EAAMJ,EAAeC,GACxE,MAEF,KAAK,EAAA9jB,SAAS2J,cACZxX,KAAKiyB,wBAAgD3b,EAAWwb,EAAMF,EAAeC,GACrF,MAEF,KAAK,EAAAhkB,SAAS2K,OACZxY,KAAKkyB,kBAAmC5b,EAAWwb,EAAML,EAAeC,GACxE,MAEF,KAAK,EAAA7jB,SAAS2N,SACZxb,KAAKmyB,oBAAuC7b,EAAWwb,GACvD,MAEF,KAAK,EAAAjkB,SAASsI,iBACZnW,KAAKoyB,gBAAkC9b,EAAWwb,EAAMF,EAAeC,GACvE,MAEF,KAAK,EAAAhkB,SAAS8I,gBACZ3W,KAAKqyB,eAAgC/b,EAAWwb,GAChD,MAEF,KAAK,EAAAjkB,SAASgM,oBACZ7Z,KAAKsyB,mBAAwChc,EAAWwb,GACxD,MAEF,KAAK,EAAAjkB,SAASkL,qBACZ/Y,KAAKuyB,oBAA0Cjc,EAAWwb,GAC1D,MAEF,KAAK,EAAAjkB,SAASwM,qBACZra,KAAKwyB,oBAA0Clc,EAAWwb,EAAMF,EAAeC,GAC/E,MAEF,KAAK,EAAAhkB,SAASyN,gBACZtb,KAAKyyB,yBAA0Cnc,EAAWwb,KASlE,IAAK,IAAIY,EAAQC,SAAShB,GAAoBtxB,EAAI,EAAG+b,EAAIsW,EAAMhmB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACjF,IAAIyxB,EAAOY,EAAMryB,GACbuyB,EAAc9nB,OAAO6mB,EAAkBzwB,IAAI4wB,IAC/C,IAAK,IAAIC,EAAI,EAAGzxB,EAAIsyB,EAAYlmB,OAAQqlB,EAAIzxB,IAAKyxB,EAAG,CAClD,IAAIc,EAAa1T,UAAUyT,EAAYb,IACnCe,EAAc9yB,KAAK+yB,kBAAkBF,EAAWxH,YAAawH,EAAWvH,gBACvEwH,EAOLhB,EAAKkB,iBAAiBF,GANpB9yB,KAAKwmB,MACH,EAAApb,eAAe6nB,iBACfJ,EAAWpH,YAAY/f,MAAOmnB,EAAWpH,YAAYnqB,QAS7D,IAAK,IAAIjB,EAAI,EAAG+b,EAAIqV,EAAc/kB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACpD,IAAI6yB,EAAezB,EAAcpxB,GAC7B8qB,EAAkB+H,EAAa/H,gBAC/BC,EAAoB8H,EAAa9H,kBACrC,GAAIA,EAAmB,CACrB,IAAI/Y,EAAUrS,KAAKmzB,cACjB/H,EAAkB5e,KAClB0mB,EAAa7H,YACb6H,EAAa5H,eACboG,GAEErf,EACF6gB,EAAahI,UAAUwF,IACrBvF,EAAgB3e,KAChB6F,EACA8Y,GAIFnrB,KAAKwmB,MACH,EAAApb,eAAegoB,kCACfhI,EAAkB1f,MAAOwnB,EAAa7H,YAAaD,EAAkB5e,UAGpE,CACL,IAAIsmB,EAAc9yB,KAAK+yB,kBAAkBG,EAAa7H,YAAa6H,EAAa5H,gBAChF,GAAIwH,EAAa,CACf,IAAI5H,EAAYgI,EAAahI,UACzBpT,EAAYqT,EAAgB3e,KAChC0e,EAAUwF,IACR5Y,EACAgb,EAAYO,oBACVvb,EACAoT,EACAC,GAEFA,QAGFrgB,QAAO,IAOb,IAAK,IAAI4nB,EAAQC,SAASjB,GAAgBrxB,EAAI,EAAG+b,EAAIsW,EAAMhmB,OAAQrM,EAAI+b,IAAK/b,EAAG,CAC7E,IAAIyxB,EAAO3S,UAAUuT,EAAMryB,IACvBX,EAAUoL,OAAO4mB,EAAcxwB,IAAI4wB,IAEvC,IAAK,IAAIwB,EAAcX,SAASjzB,GAAUqyB,EAAI,EAAGzxB,EAAIgzB,EAAY5mB,OAAQqlB,EAAIzxB,IAAKyxB,EAAG,CACnF,IAAIwB,EAAapU,UAAUmU,EAAYvB,IACnCyB,EAAe1oB,OAAOpL,EAAQwB,IAAIqyB,IAClCzb,EAAY0b,EAAarI,gBAAgB3e,KACzC6e,EAAcmI,EAAanI,YAC/B,GAAIA,EAAa,CACf,IAAIhZ,EAAUrS,KAAKmzB,cACjBrb,EACAuT,EACAvgB,OAAO0oB,EAAalI,gBACpBoG,GAEErf,EACFyf,EAAK2B,aAAaF,EAAYlhB,GAE9BrS,KAAKwmB,MACH,EAAApb,eAAegoB,kCACfI,EAAarI,gBAAgBzf,MAC7B2f,EAAavT,OAGZ,CACL,IAAIzF,EAAUyf,EAAK4B,aAAa5b,GAChC,GAAIzF,EACFyf,EAAK2B,aAAaF,EAAYlhB,OACzB,CACL,IAAIshB,EAAgB3zB,KAAK4zB,aAAa9b,GAChB,OAAlB6b,GAA0BE,EAAkBF,EAAcvlB,MAC5D0jB,EAAK2B,aAAaF,EAA6BI,GAE/C3zB,KAAKwmB,MACH,EAAApb,eAAegoB,kCACfI,EAAapI,kBAAkB1f,MAC/BomB,EAAK7C,aAAcuE,EAAapI,kBAAkB5e,SAS9D1B,OAA2B,GAApB9K,KAAKyuB,aACZzuB,KAAK8zB,oBAAsB9zB,KAAK+zB,aAAa,EAAA/wB,YAAYiF,aACzD6C,OAAsC,GAA/B9K,KAAK8zB,oBAAoBtE,IAChCxvB,KAAKg0B,eAAiBh0B,KAAK+zB,aAAa,EAAA/wB,YAAY2E,QACpDmD,OAAiC,GAA1B9K,KAAKg0B,eAAexE,IAC3BxvB,KAAKi0B,wBAA0Bj0B,KAAK+zB,aAAa,EAAA/wB,YAAYgF,iBAC7D8C,OAA0C,GAAnC9K,KAAKi0B,wBAAwBzE,IAGpCxvB,KAAKk0B,qBAAqB,EAAA5D,KAAKptB,GAAI,EAAAF,YAAY4D,IAC/C5G,KAAKk0B,qBAAqB,EAAA5D,KAAKntB,IAAK,EAAAH,YAAY6D,KAChD7G,KAAKk0B,qBAAqB,EAAA5D,KAAKltB,IAAK,EAAAJ,YAAY8D,KAChD9G,KAAKk0B,qBAAqB,EAAA5D,KAAKjtB,IAAK,EAAAL,YAAY+D,KAChD/G,KAAKk0B,qBAAqBnG,EAAQwC,UAAW,EAAAvtB,YAAYgE,OACzDhH,KAAKk0B,qBAAqB,EAAA5D,KAAK/sB,GAAI,EAAAP,YAAYiE,IAC/CjH,KAAKk0B,qBAAqB,EAAA5D,KAAK9sB,IAAK,EAAAR,YAAYkE,KAChDlH,KAAKk0B,qBAAqB,EAAA5D,KAAK7sB,IAAK,EAAAT,YAAYmE,KAChDnH,KAAKk0B,qBAAqB,EAAA5D,KAAK5sB,IAAK,EAAAV,YAAYoE,KAChDpH,KAAKk0B,qBAAqBnG,EAAQyC,UAAW,EAAAxtB,YAAYqE,OACzDrH,KAAKk0B,qBAAqB,EAAA5D,KAAK1sB,KAAM,EAAAZ,YAAYsE,MACjDtH,KAAKk0B,qBAAqB,EAAA5D,KAAKzsB,IAAK,EAAAb,YAAYuE,KAChDvH,KAAKk0B,qBAAqB,EAAA5D,KAAKxsB,IAAK,EAAAd,YAAYwE,KAC5CumB,EAAQyD,WAAW,KAAexxB,KAAKk0B,qBAAqB,EAAA5D,KAAKvsB,KAAM,EAAAf,YAAYyE,MACnFsmB,EAAQyD,WAAW,MAA0BxxB,KAAKk0B,qBAAqB,EAAA5D,KAAKtsB,OAAQ,EAAAhB,YAAY0E,QAGpG1H,KAAKm0B,iBAAmCn0B,KAAKJ,QAAQ,EAAAoD,YAAYsF,UAAWqjB,EAAYyI,iBACxFp0B,KAAKq0B,kBAAoCr0B,KAAKJ,QAAQ,EAAAoD,YAAYuF,WAAYojB,EAAYyI,iBAC1Fp0B,KAAKs0B,kBAAoCt0B,KAAKJ,QAAQ,EAAAoD,YAAYwF,WAAYmjB,EAAYyI,iBAC1Fp0B,KAAKu0B,kBAAoCv0B,KAAKJ,QAAQ,EAAAoD,YAAYyF,WAAYkjB,EAAYyI,iBAC1Fp0B,KAAKw0B,iBAAmCx0B,KAAKJ,QAAQ,EAAAoD,YAAY0F,WAAYijB,EAAYyI,iBACzFp0B,KAAKy0B,wBAA0Cz0B,KAAKJ,QAAQ,EAAAoD,YAAY2F,kBAAmBgjB,EAAYyI,iBACvGp0B,KAAK00B,kBAAoC10B,KAAKJ,QAAQ,EAAAoD,YAAY4F,YAAa+iB,EAAYyI,iBAC3Fp0B,KAAK20B,kBAAoC30B,KAAKJ,QAAQ,EAAAoD,YAAY6F,YAAa8iB,EAAYyI,iBAC3Fp0B,KAAK40B,kBAAoC50B,KAAKJ,QAAQ,EAAAoD,YAAY8F,YAAa6iB,EAAYyI,iBAC3Fp0B,KAAK60B,kBAAoC70B,KAAKJ,QAAQ,EAAAoD,YAAY+F,aAAc4iB,EAAYyI,iBAC5Fp0B,KAAK80B,kBAAoC90B,KAAKJ,QAAQ,EAAAoD,YAAYgG,aAAc2iB,EAAYyI,iBAG5F,IAAIhF,EAAWpvB,KAAKovB,SACpB,IAAK,IAAI/uB,EAAI,EAAG+b,EAAIwV,EAAcllB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACpD,IAAI00B,EAAgBnD,EAAcvxB,GAC9B20B,EAAclqB,OAAOiqB,EAAcC,aACnCC,EAAc7F,EAAS8F,gBAAgBF,EAAYp0B,KAAMm0B,EAAc/E,QAC3E,GAAKiF,EACL,GAAIA,EAAY7mB,MAAQud,EAAYyI,gBAAiB,CACnD,IAAIe,EAAgCF,EAChCE,EAAcC,aAAaxJ,EAAexO,SAC5Cpd,KAAKwmB,MACH,EAAApb,eAAeiqB,yCACfL,EAAYtpB,MAAOypB,EAAcG,eAAe9oB,MAIlD2oB,EAAcC,aAAaxJ,EAAevO,YAC1C0X,EAAcK,aAAaxJ,EAAevO,YAE1Crd,KAAKwmB,MACH,EAAApb,eAAemqB,+DACf,EAAArX,MAAMjR,KAAK8nB,EAAcO,eAAe5pB,MAAOspB,EAAYtpB,QAG/DqpB,EAAcI,cAAgBA,OAE9Bn1B,KAAKwmB,MACH,EAAApb,eAAeoqB,sCACfR,EAAYtpB,OAMlB,CACE,IAAI+pB,EAAgB1H,EAAQ0H,cACvBA,IAAeA,EAAgB,IAAI1tB,KACxC,IAAI2tB,EAAS11B,KAAK01B,OACbD,EAAcnoB,IAAI,EAAAtK,YAAYkG,QACjCusB,EAAc/nB,IAAI,EAAA1K,YAAYkG,MAC5BwsB,EACI,EAAAC,aAAaC,UACb,EAAAD,aAAazsB,OAGhBusB,EAAcnoB,IAAI,EAAAtK,YAAYmG,QACjCssB,EAAc/nB,IAAI,EAAA1K,YAAYmG,MAC5BusB,EACI,EAAAC,aAAaE,UACb,EAAAF,aAAaxsB,OAGhBssB,EAAcnoB,IAAI,EAAAtK,YAAYoG,OACjCqsB,EAAc/nB,IAAI,EAAA1K,YAAYoG,KAC5BssB,EACI,EAAAC,aAAaG,SACb,EAAAH,aAAavsB,MAGhBqsB,EAAcnoB,IAAI,EAAAtK,YAAYkF,OACjCutB,EAAc/nB,IAAI,EAAA1K,YAAYkF,KAAM,EAAAlF,YAAYoF,YAE7CqtB,EAAcnoB,IAAI,EAAAtK,YAAYmF,QACjCstB,EAAc/nB,IAAI,EAAA1K,YAAYmF,MAAO,EAAAnF,YAAYqF,aAGnD,IAAK,IAAIqqB,EAAQC,SAAS8C,GAAgBp1B,EAAI,EAAG+b,EAAIsW,EAAMhmB,OAAQrM,EAAI+b,IAAK/b,EAAG,CAC7E,IAAI+a,EAAQ+D,UAAUuT,EAAMryB,IACxBO,EAAOmb,WAAmB0Z,EAAcv0B,IAAIka,IAEhD,GADAtQ,OAAe,MAARlK,IACFA,EAAK8L,OAAQ,SAClB,IAAIqpB,EAAYn1B,EAAKiM,WAAW,GAChC,GAAIkpB,GAAa,IAAeA,GAAa,GAC3C/1B,KAAK8wB,wBAAwB1V,EAAO,EAAAkV,KAAKltB,IAAKqmB,QAAauM,SAASp1B,EAAM,UACrE,CACL,IAAIutB,EAAiBnuB,KAAKmuB,eAC1B,IAAIA,EAAe7gB,IAAI1M,GAGrB,MAAM,IAAIqI,MAAM,2BAA6BrI,GAF7CutB,EAAezgB,IAAI0N,EAAOtQ,OAAOqjB,EAAejtB,IAAIN,OAS5DZ,KAAKi2B,eAAiCj2B,KAAKJ,QAAQ,EAAAoD,YAAY4E,MAAO+jB,EAAYyI,iBAClFp0B,KAAKk2B,qBAAuCl2B,KAAKJ,QAAQ,EAAAoD,YAAY6E,YAAa8jB,EAAYyI,iBAC9Fp0B,KAAKm2B,aAA+Bn2B,KAAKJ,QAAQ,EAAAoD,YAAY8E,IAAK6jB,EAAYyI,iBAC9Ep0B,KAAKo2B,aAA+Bp2B,KAAKJ,QAAQ,EAAAoD,YAAY+E,IAAK4jB,EAAYyI,iBAC9Ep0B,KAAKq2B,cAAgBr2B,KAAKs2B,eAAe,EAAAtzB,YAAYkG,OACrDlJ,KAAKu2B,cAAgBv2B,KAAKw2B,gBAAgB,EAAAxzB,YAAYuG,OACtDvJ,KAAKy2B,gBAAkBz2B,KAAKw2B,gBAAgB,EAAAxzB,YAAYwG,SACxDxJ,KAAK02B,aAAe12B,KAAKw2B,gBAAgB,EAAAxzB,YAAYyG,MACrDzJ,KAAK22B,eAAiB32B,KAAKw2B,gBAAgB,EAAAxzB,YAAY0G,QACvD1J,KAAK42B,gBAAkB52B,KAAKw2B,gBAAgB,EAAAxzB,YAAY2G,SACxD3J,KAAK62B,gBAAkB72B,KAAKw2B,gBAAgB,EAAAxzB,YAAY4G,SACxD5J,KAAK82B,iBAAmB92B,KAAKw2B,gBAAgB,EAAAxzB,YAAY6G,UACzD7J,KAAK+2B,mBAAqB/2B,KAAKw2B,gBAAgB,EAAAxzB,YAAY8G,aAC3D9J,KAAKg3B,cAAgBh3B,KAAKw2B,gBAAgB,EAAAxzB,YAAY+G,OACtD/J,KAAKi3B,oBAAsBj3B,KAAKw2B,gBAAgB,EAAAxzB,YAAYgH,aAC5DhK,KAAKk3B,mBAAqBl3B,KAAKw2B,gBAAgB,EAAAxzB,YAAYiH,YAI3D,IAAK,IAAIktB,EAAUC,WAAWp3B,KAAKkuB,aAAc7tB,EAAI,EAAG+b,EAAI+a,EAAQzqB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACtF,IAAIyxB,EAAO3S,UAAUgY,EAAQ92B,IACzByxB,EAAK9lB,OAAO4S,YAAc,EAAA5Q,WAAWqpB,YACvCr3B,KAAKs3B,kBAAkBxF,KAMrB,QAAQlxB,EAAcwN,GAC5B,IAAIiE,EAAUrS,KAAK4zB,aAAahzB,GAChC,IAAKyR,EAAS,MAAM,IAAIpJ,MAAM,WAAarI,GAC3C,GAAIyR,EAAQjE,MAAQA,EAAM,MAAM,IAAInF,MAAM,cAAgBrI,GAC1D,OAAOyR,EAID,aAAazR,GACnB,IAAIqB,EAAYjC,KAAKJ,QAAQgB,EAAM+qB,EAAYyI,iBAC3CmD,EAAWv3B,KAAKovB,SAASoI,aAA6Bv1B,EAAW,MACrE,IAAKs1B,EAAU,MAAM,IAAItuB,MAAM,WAAarI,GAC5C,OAAO22B,EAID,eAAe32B,GACrB,IAAIqB,EAAYjC,KAAK4zB,aAAahzB,GAClC,OAAKqB,GAAaA,EAAUmM,MAAQud,EAAY8L,mBACzCz3B,KAAKovB,SAASsI,gBAAmCz1B,EAAW,MADQ,KAKrE,gBAAgBrB,EAAc8N,EAA+B,MACnE,IAAIzM,EAA+BjC,KAAKJ,QAAQgB,EAAM+qB,EAAY8L,oBAC9DF,EAAWv3B,KAAKovB,SAASsI,gBAAgBz1B,EAAWyM,GACxD,IAAK6oB,EAAU,MAAM,IAAItuB,MAAM,WAAarI,GAC5C,OAAO22B,EAID,kBAAkBzF,GACxB,IAAIpyB,EAAUoyB,EAAKpyB,QACnB,GAAIA,EAEF,IAAK,IAAIy3B,EAAUC,WAAW13B,GAAUqyB,EAAI,EAAGzxB,EAAI62B,EAAQzqB,OAAQqlB,EAAIzxB,IAAKyxB,EAAG,CAC7E,IAAI1f,EAAU8M,UAAUgY,EAAQpF,IAChC/xB,KAAK23B,iBAAiBtlB,GAG1B,IAAIulB,EAAc9F,EAAK8F,YACvB,GAAIA,EACF,IAAK,IAAIv3B,EAAI,EAAG+b,EAAIwb,EAAYlrB,OAAQrM,EAAI+b,IAAK/b,EAC/CL,KAAKs3B,kBAAkBM,EAAYv3B,IAMjC,iBAAiBgS,GAEvB,OADAA,EAAQ3E,IAAI,EAAArL,YAAYw1B,eAChBxlB,EAAQjE,MACd,KAAKud,EAAYyI,gBAAiB,CAChC,IAAI0D,EAAmCzlB,EAASylB,gBAChD,GAAIA,EAEF,IAAK,IAAIX,EAAUC,WAAWU,GAAkBz3B,EAAI,EAAG+b,EAAI+a,EAAQzqB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACrF,IAAI03B,EAAS5Y,UAAUgY,EAAQ92B,IAC/BL,KAAK23B,iBAAiBI,GAG1B,MAEF,KAAKpM,EAAYqM,mBAAoB,CACnC,IAAIC,EAAuC5lB,EACvC6lB,EAAkBD,EAAkBC,gBACpCA,GAAiBl4B,KAAK23B,iBAAiBO,GAC3C,IAAIC,EAAkBF,EAAkBE,gBACpCA,GAAiBn4B,KAAK23B,iBAAiBQ,GAC3C,MAEF,KAAKxM,EAAYyM,SACjB,KAAKzM,EAAY7Y,SACjB,KAAK6Y,EAAY0M,MACjB,KAAK1M,EAAY5Z,MAAOjH,QAAO,GAEjC,IAAIwtB,EAAgBjmB,EAAQ2D,QAC5B,GAAIsiB,EAEF,IAAK,IAAInB,EAAUC,WAAWkB,GAAgBj4B,EAAI,EAAG+b,EAAI+a,EAAQzqB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACnF,IAAI03B,EAAS5Y,UAAUgY,EAAQ92B,IAC/BL,KAAK23B,iBAAiBI,IAMpB,mBAAmBn3B,EAAc6O,GACvC,IAAI4C,EAAU,IAAIse,EAChB/vB,EACAZ,KAAK+uB,WACL/uB,KAAK4wB,0BAA0BhwB,EAAM,EAAAyB,YAAY4U,QACjD2U,EAAe9O,SAEjBzK,EAAQkmB,QAAQ9oB,GAChBzP,KAAK+uB,WAAW2B,IAAI9vB,EAAMyR,GAIpB,qBAAqB5C,EAAY+oB,GACvC,IAAIlK,EAAiBtuB,KAAKsuB,eAC1BxjB,QAAQ2E,EAAKgpB,iBAAmBnK,EAAehhB,IAAImC,IACnD,IAAI4C,EAAUrS,KAAK4zB,aAAa4E,GAChC,GAAKnmB,EAAL,CACAvH,OAAOuH,EAAQjE,MAAQud,EAAYyI,iBACnC,IAAIsE,EAAe14B,KAAKovB,SAASoI,aAA6BnlB,EAAS,MAClEqmB,IACLA,EAAaC,YAAclpB,EAC3B6e,EAAe5gB,IAAI+B,EAAMipB,KAI3B,wBAAwB93B,EAAc6O,EAAYnO,GAChDwJ,OAAO2E,EAAKmpB,GAAG,IACf,IAAIC,EAAS,IAAIC,EACfl4B,EACAZ,KAAK+uB,WACLnD,EAAelP,KACf1c,KAAK+4B,8BAA8Bn4B,EAAM,EAAAyB,YAAY+d,MAAQ,EAAA/d,YAAY4U,SAE3E4hB,EAAOG,wBAAwB13B,EAAOmO,GACtCzP,KAAK+uB,WAAW2B,IAAI9vB,EAAMi4B,GAIpB,sBAAsBj4B,EAAc6O,EAAYnO,GACtDwJ,OAAO2E,EAAKmpB,GAAG,IACf,IAAIC,EAAS,IAAIC,EACfl4B,EACAZ,KAAK+uB,WACLnD,EAAelP,KACf1c,KAAK+4B,8BAA8Bn4B,EAAM,EAAAyB,YAAY+d,MAAQ,EAAA/d,YAAY4U,SAE3E4hB,EAAOI,sBAAsB33B,EAAOmO,GACpCzP,KAAK+uB,WAAW2B,IAAI9vB,EAAMi4B,GAI5B,aAAaj4B,EAAcyR,GACzB,IAAI8b,EAAiBnuB,KAAKmuB,eAC1B,GAAIA,EAAe7gB,IAAI1M,GAAO,CAC5B,IAAIs4B,EAAWpuB,OAAOqjB,EAAejtB,IAAIN,IAMzC,GAAIs4B,IAAa7mB,EAAS,CACxB,IAAI8mB,EAASC,EAASF,EAAU7mB,GAChC,IAAK8mB,EAcH,OAbItF,EAAkBqF,EAAS9qB,MAC7BpO,KAAKq5B,aACH,EAAAjuB,eAAekuB,uBACfjnB,EAAQijB,eAAe5pB,MACLwtB,EAAUrnB,YAAYjR,KAAK8K,MAC7C9K,GAGFZ,KAAKwmB,MACH,EAAApb,eAAekuB,uBACfjnB,EAAQijB,eAAe5pB,MAAO9K,GAG3ByR,EAETA,EAAU8mB,GAId,OADAhL,EAAezgB,IAAI9M,EAAMyR,GAClBA,EAIT,aAAazR,GACX,IAAI8P,EAAW1Q,KAAKmuB,eACpB,OAAIzd,EAASpD,IAAI1M,GAAckK,OAAO4F,EAASxP,IAAIN,IAC5C,KAIT,cAAcA,GACZ,IAAI8P,EAAW1Q,KAAKmuB,eACpB,GAAIzd,EAASpD,IAAI1M,GAAO,OAAOkK,OAAO4F,EAASxP,IAAIN,IACnD,MAAM,IAAIqI,MAAM,kBAIV,kBAENoiB,EAEAC,GAEA,IAAI4C,EAAcluB,KAAKkuB,YACvB,OAAOA,EAAY5gB,IAAI+d,GAChBvgB,OAAOojB,EAAYhtB,IAAImqB,IACvB6C,EAAY5gB,IAAIge,GAChBxgB,OAAOojB,EAAYhtB,IAAIoqB,IACvB,KAID,cAEN3S,EAEA0S,EAEAC,EAEAoG,GAEA,OAAG,CACD,IAAIoB,EAAc9yB,KAAK+yB,kBAAkB1H,EAAaC,GACtD,IAAKwH,EAAa,OAAO,KAGzB,IAAIzgB,EAAUygB,EAAYyG,aAAa5gB,GACvC,GAAItG,EAAS,OAAOA,EAGpB,GAAIqf,EAAcpkB,IAAIwlB,GAAc,CAClC,IAAI0G,EAAoB1uB,OAAO4mB,EAAcxwB,IAAI4xB,IACjD,GAAI0G,EAAkBlsB,IAAIqL,GAAc,CACtC,IAAI6a,EAAe1oB,OAAO0uB,EAAkBt4B,IAAIyX,IAC5C8gB,EAA0BjG,EAAanI,YAC3C,GAAIoO,EAAyB,CAC3B9gB,EAAc6a,EAAarI,gBAAgB3e,KAC3C6e,EAAcoO,EACdnO,EAAiBxgB,OAAO0oB,EAAalI,gBACrC,SAGA,GADAjZ,EAAUygB,EAAYY,aAAaF,EAAarI,gBAAgB3e,MAC5D6F,EAAS,OAAOA,GAI1B,MAEF,OAAO,KAID,gBAEN4D,EAEAyjB,GAEA,IAAIxlB,EAAQ0X,EAAelP,KAC3B,GAAIzG,EACF,IAAK,IAAI5V,EAAI,EAAG+b,EAAInG,EAAWvJ,OAAQrM,EAAI+b,IAAK/b,EAAG,CACjD,IAAIqf,EAAYzJ,EAAW5V,GACvB+N,EAAO,EAAAN,cAAcqC,SAASuP,EAAU9e,MACxC+b,EAAOiP,EAAe+N,SAASvrB,GAC/BuO,IACEA,GAAQiP,EAAe9O,QACnB4c,EAAgB/c,GAAU+C,EAAUhU,MAAMM,OAAO4tB,UAMrD1lB,GAASyI,EALT3c,KAAKwmB,MACH,EAAApb,eAAeyuB,8BACfna,EAAUhU,MAAOgU,EAAU9e,KAAK8K,MAAMO,YAK/BytB,EAAgB/c,EAKlBzI,EAAQyI,EACjB3c,KAAKwmB,MACH,EAAApb,eAAe0uB,oBACfpa,EAAUhU,OAGZwI,GAASyI,EAVT3c,KAAKwmB,MACH,EAAApb,eAAeyuB,8BACfna,EAAUhU,MAAOgU,EAAU9e,KAAK8K,MAAMO,aAahD,OAAOiI,EAID,gBAENrC,EAEAme,EAEA4B,EAEAC,GAEA,IAAIjxB,EAAOiR,EAAYjR,KAAK4L,KACxB6F,EAAU,IAAI0nB,EAChBn5B,EACAovB,EACAne,EACA7R,KAAKg6B,gBAAgBnoB,EAAYoE,WAC/B2V,EAAe5O,OACf4O,EAAexO,OACfwO,EAAevO,YAGnB,IAAK2S,EAAOU,IAAI9vB,EAAMyR,GAAU,OAAO,KAEvC,IAAI0D,EAAkBlE,EAAYkE,gBAClC,GAAIA,EAAiB,CACnB,IAAIkkB,EAAqBlkB,EAAgBrJ,OAEzC,GAAI2F,EAAQ+iB,aAAaxJ,EAAevO,WAClC4c,GACFj6B,KAAKwmB,MACH,EAAApb,eAAe8uB,8CACf,EAAAhc,MAAMjR,KACJ4E,EAAYjR,KAAK8K,MACjBqK,EAAgBkkB,EAAqB,GAAGvuB,aAIzC,GAAIuuB,EAAoB,CAE7B,IAAK,IAAI55B,EAAI,EAAGA,EAAI45B,IAAsB55B,EACxCL,KAAKm6B,QACH,EAAA/uB,eAAegvB,gBACfrkB,EAAgB1V,GAAGqL,OAGvBmmB,EAAiB7kB,KAAKqF,IAItBR,EAAYxC,aAAauiB,EAAc5kB,KAAKqF,GAGhD,IAAIgoB,EAAqBxoB,EAAYmE,QACrC,IAAK,IAAI3V,EAAI,EAAG+b,EAAIie,EAAmB3tB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACzD,IAAIi6B,EAAoBD,EAAmBh6B,GAC3C,OAAQi6B,EAAkBlsB,MACxB,KAAK,EAAAP,SAASoL,iBACZjZ,KAAKu6B,gBAAkCD,EAAmBjoB,GAC1D,MAEF,KAAK,EAAAxE,SAASsM,kBAAmB,CAC/B,IAAIqgB,EAAuCF,EACvCA,EAAkBG,MAAM,EAAAp4B,YAAYye,IAAM,EAAAze,YAAYwf,KACxD7hB,KAAK06B,mBAAmBF,EAAmBnoB,GAE3CrS,KAAK26B,iBAAiBH,EAAmBnoB,GAE3C,MAEF,KAAK,EAAAxE,SAASoM,0BAA2B,MACzC,QAASnP,QAAO,IAGpB,OAAOuH,EAID,gBAENR,EAEAme,GAEA,IAEI3d,EAFAzR,EAAOiR,EAAYjR,KAAK4L,KACxByJ,EAAapE,EAAYoE,WAEzByjB,EAAgC9N,EAAetO,OAInD,GAHI0S,EAAO4I,GAAG,EAAAv2B,YAAYu4B,WACxBlB,GAAiB9N,EAAe7O,UAE9BlL,EAAY+mB,GAAG,EAAAv2B,YAAYyf,SAY7B,GAXAhX,OAAOklB,EAAO5hB,MAAQud,EAAYkP,qBAClCnB,GAAiB9N,EAAe1O,KAC5BrL,EAAY+mB,GAAG,EAAAv2B,YAAYuf,YAC7B8X,GAAiB9N,EAAe3O,QAElC5K,EAAU,IAAIymB,EACZl4B,EACAovB,EACAhwB,KAAKg6B,gBAAgB/jB,EAAYyjB,GACjC7nB,IAEGme,EAAOU,IAAI9vB,EAAMyR,GAAU,YAShC,GAPAvH,QAAQ+G,EAAY4oB,MAAM,EAAAp4B,YAAYyd,SAAW,EAAAzd,YAAYye,IAAM,EAAAze,YAAYwf,MAC/ExP,EAAU,IAAIyoB,EACZl6B,EACAovB,EACAne,EACA7R,KAAKg6B,gBAAgB/jB,EAAYyjB,KAE9B1J,EAAO+K,YAAYn6B,EAAMyR,GAAU,OAKpC,iBAENR,EAEAme,GAEA,IAAIpvB,EAAOiR,EAAYjR,KAAK4L,KACxBwuB,EAAWnpB,EAAY+mB,GAAG,EAAAv2B,YAAYyf,QACtC4X,EAAgB9N,EAAe3O,OAAS2O,EAAetO,OACtDzL,EAAY+mB,GAAG,EAAAv2B,YAAYwuB,WAC9B6I,GAAiB9N,EAAenO,gBACfmO,EAAelO,gBACfkO,EAAejO,kBAE9BqS,EAAO4I,GAAG,EAAAv2B,YAAYu4B,WACxBlB,GAAiB9N,EAAe7O,UAElC,IAAI1K,EAAU,IAAI8d,EAChBvvB,EACAovB,EACAne,EACA7R,KAAKg6B,gBAAgBnoB,EAAYoE,WAAYyjB,IAE/C,GAAIsB,GAEF,GADAlwB,OAAO+G,EAAYjR,KAAKwN,MAAQ,EAAAP,SAASuE,cACpC4d,EAAOU,IAAI9vB,EAAMyR,GAAU,YAEhC,IAAK2d,EAAO+K,YAAYn6B,EAAMyR,GAAU,OAE1CrS,KAAKi7B,uBAAuBppB,EAAYoE,WAAY5D,EAAS2d,GAIvD,uBAEN/Z,EAEAhU,EAEAi5B,GAEA,GAAIjlB,EACF,IAAK,IAAI5V,EAAI,EAAG+b,EAAInG,EAAWvJ,OAAQrM,EAAI+b,IAAK/b,EAAG,CACjD,IAAIqf,EAA2BzJ,EAAW5V,GAC1C,OAAQqf,EAAUxP,eAChB,KAAK,EAAApC,cAAcqP,SACnB,KAAK,EAAArP,cAAc2P,gBACnB,KAAK,EAAA3P,cAAc4P,gBACnB,KAAK,EAAA5P,cAAc6P,iBAAkB,CACnC,IAAI7N,EAAO4P,EAAUzP,UACjBkrB,EAAUrrB,EAAOA,EAAKpD,OAAS,EACnC,GAAe,GAAXyuB,EAAc,CAChB,IAAIC,EAA0B1b,EAAUzP,UAAW,GACnD,GAAImrB,EAASC,cAAc,EAAAttB,YAAY6G,QAAS,CAC9C,IAAIpI,EAAiC4uB,EAAU95B,MAC3C8M,EAAOsd,EAAaG,cAAcnM,EAAUxP,cAAe1D,GAC/D,GAAI4B,GAAQsd,EAAatJ,QACvBpiB,KAAKwmB,MACH,EAAApb,eAAekwB,2BACfF,EAAS1vB,MAAOc,OAEb,CACL,IAAI+uB,EAAYL,EAAeM,mBAC3BD,EAAUjuB,IAAIc,GAChBpO,KAAKwmB,MACH,EAAApb,eAAeqwB,kCACfL,EAAS1vB,QAGXzJ,EAAUy5B,aAAettB,EACzBmtB,EAAU7tB,IAAIU,EAAMnM,UAIxBjC,KAAKwmB,MACH,EAAApb,eAAeuwB,wBACfP,EAAS1vB,YAIb1L,KAAKwmB,MACH,EAAApb,eAAewwB,+BACflc,EAAUhU,MAAO,IAAKyvB,EAAQlvB,eAUpC,eAEN4F,EAEAme,GAEA,IAAIpvB,EAAOiR,EAAYjR,KAAK4L,KAC5B,GAAIqF,EAAY+mB,GAAG,EAAAv2B,YAAYyf,QAAS,CACtC,IAAI+Z,EAAgB7L,EAAOha,QAC3B,GAAsB,OAAlB6lB,IAA0BA,EAAcvuB,IAAI1M,GAGzC,CACL,IAAIyR,EAAU,IAAIypB,EAAkBl7B,EAAMovB,EAAQne,GAClD,OAAKme,EAAOU,IAAI9vB,EAAMyR,GACfA,EADgC,KALc,CACrD,IAAIA,EAAUvH,OAAO+wB,EAAc36B,IAAIN,IACvC,GAAIyR,EAAQjE,MAAQud,EAAYqM,mBAAoB,OAA0B3lB,OAM3E,CACL,IAAIwpB,EAAgB7L,EAAO8H,gBAC3B,GAAsB,OAAlB+D,IAA0BA,EAAcvuB,IAAI1M,GAGzC,CACL,IAAIyR,EAAU,IAAIypB,EAAkBl7B,EAAMovB,EAAQne,GAClD,OAAKme,EAAO+K,YAAYn6B,EAAMyR,GACvBA,EADwC,KALM,CACrD,IAAIA,EAAUvH,OAAO+wB,EAAc36B,IAAIN,IACvC,GAAIyR,EAAQjE,MAAQud,EAAYqM,mBAAoB,OAA0B3lB,GAWlF,OAJArS,KAAKwmB,MACH,EAAApb,eAAe2wB,qBACflqB,EAAYjR,KAAK8K,MAAO9K,GAEnB,KAID,mBAENiR,EAEAme,GAEA,IAAIhuB,EAAWhC,KAAKg8B,eAAenqB,EAAame,GAChD,GAAKhuB,EAAL,CACA,IAAIpB,EAAOiR,EAAYjR,KAAK4L,KACxByvB,EAAWpqB,EAAY+mB,GAAG,EAAAv2B,YAAYye,KAC1C,GAAImb,GACF,GAAIj6B,EAASk2B,gBAKX,YAJAl4B,KAAKwmB,MACH,EAAApb,eAAe2wB,qBACflqB,EAAYjR,KAAK8K,MAAO9K,QAK5B,GAAIoB,EAASm2B,gBAKX,YAJAn4B,KAAKwmB,MACH,EAAApb,eAAe2wB,qBACflqB,EAAYjR,KAAK8K,MAAO9K,GAK9B,IAAIyR,EAAU,IAAI8d,GACf8L,EAAW,EAAAz5B,cAAgB,EAAAC,eAAiB7B,EAC7CoB,EACA6P,EACA7R,KAAKg6B,gBAAgBnoB,EAAYoE,WAC/B2V,EAAe3O,OAAS2O,EAAetO,SAGvC2e,EACFj6B,EAASk2B,gBAAkB7lB,EAE3BrQ,EAASm2B,gBAAkB9lB,GAKvB,eAENR,EAEAme,GAEA,IAAIpvB,EAAOiR,EAAYjR,KAAK4L,KACxB6F,EAAU,IAAI6pB,EAChBt7B,EACAovB,EACAne,EACA7R,KAAKg6B,gBAAgBnoB,EAAYoE,WAC/B2V,EAAe5O,OACf4O,EAAe3O,OACf2O,EAAe1O,OAGnB,IAAK8S,EAAOU,IAAI9vB,EAAMyR,GAAU,OAAO,KACvC,IAAIqB,EAAS7B,EAAY6B,OACzB,IAAK,IAAIrT,EAAI,EAAG+b,EAAI1I,EAAOhH,OAAQrM,EAAI+b,IAAK/b,EAC1CL,KAAKm8B,oBAAoBzoB,EAAOrT,GAAIgS,GAEtC,OAAOA,EAID,oBAENR,EAEAme,GAEA,IAAIpvB,EAAOiR,EAAYjR,KAAK4L,KACxB6F,EAAU,IAAI+pB,EAChBx7B,EACAovB,EACAne,EACA7R,KAAKg6B,gBAAgBnoB,EAAYoE,WAC/B2V,EAAelP,OAGdsT,EAAOU,IAAI9vB,EAAMyR,GAIhB,kBAENiE,EAEA0Z,EAEA0B,EAEAC,GAEA,IAAI3b,EAAUM,EAAUN,QACxB,GAAIA,EACF,IAAK,IAAI3V,EAAI,EAAG+b,EAAIpG,EAAQtJ,OAAQrM,EAAI+b,IAAK/b,EAC3CL,KAAKq8B,iBAAiBrmB,EAAQ3V,GAAI2vB,EAAQ1Z,EAAUe,aAAcqa,OAE/D,CACL,IAAI4K,EACA3K,EAAkBrkB,IAAI0iB,GAASsM,EAASxxB,OAAO6mB,EAAkBzwB,IAAI8uB,IACpE2B,EAAkBjkB,IAAIsiB,EAAQsM,EAAS,IAC5C,IAAIjR,EAAc/U,EAAUe,aAC5BilB,EAAOtvB,KAAK,IAAIwe,EACdH,EACAA,EAAY5L,SAAS,EAAA1c,cACjBsoB,EAAYte,UAAU,EAAGse,EAAY3e,OAAS,EAAA3J,aAAa2J,QAC3D2e,EAAc,EAAAtoB,aAClB+H,OAAOwL,EAAUQ,SAMf,iBAENihB,EAEA7M,EAEAG,EAEAqG,GAEA,IAAI5Z,EAAYigB,EAAOjgB,UAAUtL,KAC7BmM,EAAcof,EAAOhgB,aAAavL,KAGlC6F,EAAU6Y,EAAUqO,aAAa5gB,GACrC,GAAItG,EACFrS,KAAKwmB,MACH,EAAApb,eAAemxB,4DACfxE,EAAOhgB,aAAarM,MAAOiN,QAK/B,GAAoB,OAAhB0S,EAGF,GAAIhZ,EAAU6Y,EAAUwI,aAAa5b,GACnCoT,EAAUuI,aAAa9a,EAAatG,OAG/B,CACL,IAAIiqB,EACA5K,EAAcpkB,IAAI4d,GAAYoR,EAASxxB,OAAO4mB,EAAcxwB,IAAIgqB,IAC/DwG,EAAchkB,IAAIwd,EAAWoR,EAAS,IAAIv0B,KAC/Cu0B,EAAO5uB,IAAIiL,EAAa,IAAI4S,EAC1BwM,EAAOjgB,UACPigB,EAAOhgB,aACP,KAAM,WAKL,CACL,IAAIukB,EACA5K,EAAcpkB,IAAI4d,GAAYoR,EAASxxB,OAAO4mB,EAAcxwB,IAAIgqB,IAC/DwG,EAAchkB,IAAIwd,EAAWoR,EAAS,IAAIv0B,KAC/Cu0B,EAAO5uB,IAAIiL,EAAa,IAAI4S,EAC1BwM,EAAOjgB,UACPigB,EAAOhgB,aACPsT,EACAA,EAAY5L,SAAS,EAAA1c,cACjBsoB,EAAYte,UAAU,EAAGse,EAAY3e,OAAS,EAAA3J,aAAa2J,QAC3D2e,EAAc,EAAAtoB,gBAKhB,wBAENuT,EAEA0Z,EAEA4B,EAEAC,GAEA,IAAIhgB,EAAcyE,EAAUzE,YACxBQ,EAAkC,KACtC,OAAQR,EAAYzD,MAClB,KAAK,EAAAP,SAAS8I,gBACZtE,EAAUrS,KAAKqyB,eAAgCxgB,EAAame,GAC5D,MAEF,KAAK,EAAAniB,SAASgM,oBACZxH,EAAUrS,KAAKsyB,mBAAwCzgB,EAAame,GACpE,MAEF,KAAK,EAAAniB,SAASsI,iBACZ9D,EAAUrS,KAAKoyB,gBAAkCvgB,EAAame,EAAQ4B,EAAeC,GACrF,MAEF,KAAK,EAAAhkB,SAASkL,qBACZ1G,EAAUrS,KAAKuyB,oBAA0C1gB,EAAame,GACtE,MAEF,KAAK,EAAAniB,SAASwM,qBACZhI,EAAUrS,KAAKwyB,oBAA0C3gB,EAAame,EAAQ4B,EAAeC,GAC7F,MAEF,QAAS/mB,QAAO,GAElB,GAAIuH,EAAS,CACX,IAAI3S,EAAUswB,EAAOtwB,QACrB,GAAKA,GAEH,GAAIA,EAAQ4N,IAAI,WAAY,CAC1B,IAAI4rB,EAAWpuB,OAAOpL,EAAQwB,IAAI,YAOlC,YANAlB,KAAKq5B,aACH,EAAAjuB,eAAekuB,uBACfznB,EAAYjR,KAAK8K,MACjBwtB,EAASrnB,YAAYjR,KAAK8K,MAC1B,iBARQskB,EAAOtwB,QAAUA,EAAU,IAAIqI,IAa7CrI,EAAQgO,IAAI,UAAW2E,IAKnB,kBAENiE,EAEA0Z,EAEAyB,EAEAC,GAEA,IAAIjZ,EAAenC,EAAUmC,aAC7B,GAAIA,EACF,IAAK,IAAIpY,EAAI,EAAG+b,EAAI3D,EAAa/L,OAAQrM,EAAI+b,IAAK/b,EAChDL,KAAKw8B,iBACH/jB,EAAapY,GACb2vB,EACA1Z,EAAUe,aACVoa,EACAC,OAGC,CACL,IAAIhZ,EAAgBpC,EAAUoC,cAC1BA,GACF+Y,EAAczkB,KAAK,IAAIie,EACrB+E,EACAtX,EACA,KACApC,EAAUe,aACVf,EAAUe,aAAe,EAAAtU,gBASzB,iBAEN8O,EAEAme,EAEA3E,EAEAoG,EAEAC,GAEA,IAAIpG,EAAiBD,EAAY5L,SAAS,EAAA1c,cACtCsoB,EAAYte,UAAU,EAAGse,EAAY3e,OAAS,EAAA3J,aAAa2J,QAC3D2e,EAAc,EAAAtoB,aAGdsP,EAAUrS,KAAKmzB,cAActhB,EAAY8G,YAAYnM,KAAM6e,EAAaC,EAAgBoG,GACxFrf,EACF2d,EAAOU,IAAI7e,EAAYjR,KAAK4L,KAAM6F,EAASR,EAAYjR,MAKzD6wB,EAAczkB,KAAK,IAAIie,EACrB+E,EACAne,EAAYjR,KACZiR,EAAY8G,YACZ0S,EACAC,IAKI,mBAENzZ,EAEAme,GAEA,IAAIpvB,EAAOiR,EAAYjR,KAAK4L,KACxBiwB,EAAkB7Q,EAAetO,OAASsO,EAAe9O,QACzDjL,EAAY+mB,GAAG,EAAAv2B,YAAYu4B,SAC7B6B,GAAmB7Q,EAAe7O,UAElC0f,GAAmB7Q,EAAe3O,OAC9BpL,EAAYnG,MAAMM,OAAO4tB,YAC3B6C,GAAmB7Q,EAAe1O,OAGjCrL,EAAY+mB,GAAG,EAAAv2B,YAAYq6B,WAC1B1M,EAAO5hB,MAAQud,EAAYyI,kBAC7BqI,GAAmB7Q,EAAe5O,QAGtC,IAAI3K,EAAU,IAAI8d,EAChBvvB,EACAovB,EACAne,EACA7R,KAAKg6B,gBAAgBnoB,EAAYoE,WAAYwmB,IAE/C,OAAKzM,EAAOU,IAAI9vB,EAAMyR,GACfA,EADgC,KAKjC,oBAENR,EAEAme,GAEA,IAAIpvB,EAAOiR,EAAYjR,KAAK4L,KACxB6F,EAAU,IAAIsqB,EAChB/7B,EACAovB,EACAne,EACA7R,KAAKg6B,gBAAgBnoB,EAAYoE,WAC/B2V,EAAe5O,SAGnB,IAAKgT,EAAOU,IAAI9vB,EAAMyR,GAAU,OAAO,KACvC,IAAIgoB,EAAqBxoB,EAAYmE,QACrC,IAAK,IAAI3V,EAAI,EAAG+b,EAAIie,EAAmB3tB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACzD,IAAIi6B,EAAoBD,EAAmBh6B,GAC3C,OAAQi6B,EAAkBlsB,MACxB,KAAK,EAAAP,SAASoL,iBACZjZ,KAAKu6B,gBAAkCD,EAAmBjoB,GAC1D,MAEF,KAAK,EAAAxE,SAASsM,kBAAmB,CAC/B,IAAIqgB,EAAuCF,EACvCA,EAAkBG,MAAM,EAAAp4B,YAAYye,IAAM,EAAAze,YAAYwf,KACxD7hB,KAAK06B,mBAAmBF,EAAmBnoB,GAE3CrS,KAAK26B,iBAAiBH,EAAmBnoB,GAE3C,MAEF,QAASvH,QAAO,IAGpB,OAAOuH,EAID,oBAENR,EAEAme,EAEA4B,EAEAC,GAEA,IAAIjxB,EAAOiR,EAAYjR,KAAK4L,KACxBowB,EAAW,IAAIC,EACjBj8B,EACAovB,EACAne,EACA7R,KAAKg6B,gBAAgBnoB,EAAYoE,WAAY2V,EAAe5O,SAE9D,IAAKgT,EAAOU,IAAI9vB,EAAMg8B,GAAW,OAAO,KACxC,IAAIvqB,EAAUvH,OAAOklB,EAAO0D,aAAa9yB,IACrCoV,EAAUnE,EAAYmE,QAC1B,IAAK,IAAI3V,EAAI,EAAG+b,EAAIpG,EAAQtJ,OAAQrM,EAAI+b,IAAK/b,EAAG,CAC9C,IAAI03B,EAAS/hB,EAAQ3V,GACrB,OAAQ03B,EAAO3pB,MACb,KAAK,EAAAP,SAASsI,iBACZnW,KAAKoyB,gBAAkC2F,EAAQ6E,EAAUhL,EAAeC,GACxE,MAEF,KAAK,EAAAhkB,SAAS8I,gBACZ3W,KAAKqyB,eAAgC0F,EAAQ6E,GAC7C,MAEF,KAAK,EAAA/uB,SAASgM,oBACZ7Z,KAAKsyB,mBAAwCyF,EAAQ6E,GACrD,MAEF,KAAK,EAAA/uB,SAASkL,qBACZ/Y,KAAKuyB,oBAA0CwF,EAAQ6E,GACvD,MAEF,KAAK,EAAA/uB,SAASwM,qBACZra,KAAKwyB,oBAA0CuF,EAAQ6E,EAAUhL,EAAeC,GAChF,MAEF,KAAK,EAAAhkB,SAASyN,gBACZtb,KAAKyyB,yBAA0CsF,EAAQ6E,GACvD,MAEF,KAAK,EAAA/uB,SAAS2N,SACZxb,KAAKmyB,oBAAuC4F,EAAQ6E,GACpD,MAEF,QAAS9xB,QAAO,IAIpB,OADI8xB,GAAYvqB,GAASyqB,EAAYF,EAAUvqB,GACxCA,EAID,yBAENR,EAEAme,GAEA,IAAIpvB,EAAOiR,EAAYjR,KAAK4L,KACxB6F,EAAU,IAAIse,EAChB/vB,EACAovB,EACAne,EACA7R,KAAKg6B,gBAAgBnoB,EAAYoE,WAAY2V,EAAelP,OAE9DsT,EAAOU,IAAI9vB,EAAMyR,GAIX,oBAENiE,EAEA0Z,GAEA,IAAIvX,EAAenC,EAAUmC,aAC7B,IAAK,IAAIpY,EAAI,EAAG+b,EAAI3D,EAAa/L,OAAQrM,EAAI+b,IAAK/b,EAAG,CACnD,IAAIwR,EAAc4G,EAAapY,GAC3BO,EAAOiR,EAAYjR,KAAK4L,KACxBktB,EAAgB9N,EAAe5O,OAAS4O,EAAe1O,KACvDrL,EAAY+mB,GAAG,EAAAv2B,YAAYie,WAC7BoZ,GAAiB9N,EAAe7O,UAE9BlL,EAAY+mB,GAAG,EAAAv2B,YAAY+d,SAC7BsZ,GAAiB9N,EAAe3O,QAElC,IAAI5K,EAAU,IAAIymB,EAChBl4B,EACAovB,EACAhwB,KAAKg6B,gBAAgBnoB,EAAYoE,WAAYyjB,GAC7C7nB,GAEGme,EAAOU,IAAI9vB,EAAMyR,IAgC1B,oBACE,IAAI0qB,EAAU,IAAIj1B,IAElB,IAAK,IAAIqvB,EAAUC,WAAWp3B,KAAKuuB,gBAAiBluB,EAAI,EAAG+b,EAAI+a,EAAQzqB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACzF,IAAI28B,EAAW7d,UAAUgY,EAAQ92B,IAC5B28B,EAASC,WAAWF,EAAQrM,IAAIsM,GAEvC,OAAOD,GA7rDX,YAksDA,SAAYpR,GAEV,uBAEA,qBAEA,mBAEA,6BAEA,+CAEA,2BAEA,yCAEA,yCAEA,qBAEA,iDAEA,8BAEA,0CAEA,sBAEA,gDAEA,4BAEA,8BAEA,oBAEA,wCAEA,wCAtCF,CAAYA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KA0CvB,SAAYC,GAEV,mBAEA,uBAEA,yCAEA,yCAEA,2CAEA,8BAEA,wBAEA,wBAEA,6BAEA,2BAEA,qBAEA,0BAxBF,CAAYA,EAAA,EAAAA,iBAAA,EAAAA,eAAc,KA2B1B,SAAiBA,GAGC,EAAA+N,SAAhB,SAAyBvrB,GACvB,OAAQA,GACN,KAAK,EAAAN,cAAckP,OAAQ,OAAO4O,EAAe5O,OACjD,KAAK,EAAAlP,cAAcqP,SACnB,KAAK,EAAArP,cAAc2P,gBAAiB,OAAOmO,EAAenO,gBAC1D,KAAK,EAAA3P,cAAc4P,gBAAiB,OAAOkO,EAAelO,gBAC1D,KAAK,EAAA5P,cAAc6P,iBAAkB,OAAOiO,EAAejO,iBAC3D,KAAK,EAAA7P,cAAcuP,UAAW,OAAOuO,EAAevO,UACpD,KAAK,EAAAvP,cAAcsP,OAAQ,OAAOwO,EAAexO,OACjD,KAAK,EAAAtP,cAAcmP,OAAQ,OAAO2O,EAAe3O,OACjD,KAAK,EAAAnP,cAAciP,SAAU,OAAO6O,EAAe7O,SACnD,KAAK,EAAAjP,cAAcgP,QAAS,OAAO8O,EAAe9O,QAClD,KAAK,EAAAhP,cAAcoP,KAAM,OAAO0O,EAAe1O,KAC/C,KAAK,EAAApP,cAAcwP,OAAQ,OAAOsO,EAAetO,OACjD,QAAS,OAAOsO,EAAelP,OAjBrC,CAAiBkP,EAAA,EAAAA,iBAAA,EAAAA,eAAc,KAuB/B,MAAsBsR,EAcpB,YAES9uB,EAEAxN,EAEAquB,EAEAkO,EAEPnN,GARO,KAAA5hB,OAEA,KAAAxN,OAEA,KAAAquB,eAEA,KAAAkO,UAjBT,KAAAjpB,MAAqB,EAAA7R,YAAYqa,KAEjC,KAAAuT,eAAiCrE,EAAelP,KAEhD,KAAA1G,QAA8C,KAE9C,KAAAonB,WAAoC,KAelCp9B,KAAKm9B,QAAUA,EACfn9B,KAAKY,KAAOA,EACZZ,KAAKivB,aAAeA,EAChBe,EACFhwB,KAAKgwB,OAASA,GAEdllB,OAAO9K,KAAKoO,MAAQud,EAAY0R,MAChCr9B,KAAKgwB,OAAShwB,MAKlB,WAEE,IADA,IAAIs9B,EAAmBt9B,OAGrB,IADAs9B,EAAUA,EAAQtN,QACN5hB,MAAQud,EAAY0R,KAAM,OAAaC,EAKvD,GAAG3gB,GAA2B,OAAQ3c,KAAKkU,MAAQyI,IAASA,EAE5D,MAAMzI,GAA4B,OAA+B,IAAvBlU,KAAKkU,MAAQA,GAEvD,IAAIyI,GAA2B3c,KAAKkU,OAASyI,EAE7C,MAAMA,GAA0B3c,KAAKkU,QAAUyI,EAE/C,aAAaA,GAA8B,OAAQ3c,KAAKiwB,eAAiBtT,IAASA,EAGlF,aAAa/b,GACX,IAAIoV,EAAUhW,KAAKgW,QACnB,OAAgB,OAAZA,GAAoBA,EAAQ1I,IAAI1M,GAAckK,OAAOkL,EAAQ9U,IAAIN,IAC9D,KAOT,IAAIA,EAAcyR,EAA0BkrB,EAAuD,MACjG,IAAIC,EAAsBnrB,EAAQR,YAC9BmE,EAAUhW,KAAKgW,QACnB,GAAKA,GACA,GAAIA,EAAQ1I,IAAI1M,GAAO,CAC1B,IAAIs4B,EAAWpuB,OAAOkL,EAAQ9U,IAAIN,IAClC,GAAIs4B,EAASlJ,SAAWhwB,UAEjB,CACL,IAAIm5B,EAASC,EAASF,EAAU7mB,GAChC,IAAI8mB,EAEG,CACL,IAAIsE,EAAqBF,GAErBlrB,EAAQijB,eAcZ,OAbIzB,EAAkBqF,EAAS9qB,MAC7BpO,KAAKm9B,QAAQ9D,aACX,EAAAjuB,eAAekuB,uBACfmE,EAAmB/xB,MACDwtB,EAAU5D,eAAe5pB,MAC3C+xB,EAAmBjxB,MAGrBxM,KAAKm9B,QAAQ3W,MACX,EAAApb,eAAekuB,uBACfmE,EAAmB/xB,MAAO+xB,EAAmBjxB,OAG1C,EAlBP6F,EAAU8mB,SARFn5B,KAAKgW,QAAUA,EAAU,IAAIjO,IA8B3CiO,EAAQtI,IAAI9M,EAAMyR,GAClB,IAAI8qB,EAAUn9B,KAAKm9B,QAMnB,OALI9qB,EAAQjE,MAAQud,EAAY8L,oBAA2CplB,EAASqrB,UAElFP,EAAQhP,eAAezgB,IAAI2E,EAAQ4c,aAAc5c,GACjD8qB,EAAQ/O,sBAAsB1gB,IAAI8vB,EAAqBnrB,KAElD,EAIT,WACE,OAAOrS,KAAKivB,aAAe,UAAYjvB,KAAKoO,KAAKnC,YAjHrD,YAsHA,IAAI0xB,EAAmB,IAAI71B,IAG3B,SAAgB+rB,EAAkBzlB,GAChC,OAAOuvB,EAAiBrwB,IAAIc,GAD9B,sBAKA,MAAsBwvB,UAAwBV,EAG5C,YAEE9uB,EAEAxN,EAEAquB,EAEAkO,EAEAnN,EAEOne,GAEPyM,MAAMlQ,EAAMxN,EAAMquB,EAAckO,EAASnN,GAFlC,KAAAne,cAGP8rB,EAAiBjN,IAAItiB,GAOrBpO,KAAK6R,YAAcA,EACnB7R,KAAKkU,MAAQrC,EAAYqC,MAI3B,0BACE,OAAOlU,KAAK6R,YAAYnG,MAAMM,OAAO4tB,UAIvC,qBACE,OAAO55B,KAAK6R,YAAYjR,KAI1B,qBACE,OAAOZ,KAAK6R,YAAYoE,YAzC5B,oBA8CA,IAAI4nB,EAAgB,IAAI/1B,IAGxB,0BAA+BsG,GAC7B,OAAOyvB,EAAcvwB,IAAIc,IAI3B,MAAsB0vB,UAAqBF,EAKzC,YAEExvB,EAEAxN,EAEAquB,EAEAkO,EAEAnN,EAEAne,GAEAyM,MAAMlQ,EAAMxN,EAAMquB,EAAckO,EAASnN,EAAQne,GAhBnD,KAAApC,KAAa,EAAA6gB,KAAKG,KAiBhBoN,EAAcnN,IAAItiB,GAIpB,QAAQqB,GACN3E,QAAQ9K,KAAK44B,GAAG,EAAAv2B,YAAY07B,WAC5B/9B,KAAKyP,KAAOA,EACZzP,KAAK0N,IAAI,EAAArL,YAAY07B,WA3BzB,iBAgCA,MAAa/O,UAAakO,EAUxB,YAEEC,EAEOnxB,GAEPsS,MACEqN,EAAY0R,KACZrxB,EAAOE,eACPF,EAAOqL,aACP8lB,EACA,MAPK,KAAAnxB,SAXT,KAAAtM,QAA8C,KAE9C,KAAAk4B,YAA6B,KAkB3B53B,KAAKgM,OAASA,EACdlB,QAAQqyB,EAAQjP,YAAY5gB,IAAItN,KAAKivB,eACrCkO,EAAQjP,YAAYxgB,IAAI1N,KAAKivB,aAAcjvB,MAC3C,IAAIg+B,EAAgBh+B,KAAKm9B,QAAQc,mBAC/B,SAAWj+B,KAAKivB,aAChB,IAAI,EAAAiP,UAAUf,EAAS,KAAM,EAAA7M,KAAKG,MAClCzwB,MAEFg+B,EAAc/O,aAAe+O,EAAcp9B,KAC3CZ,KAAKg+B,cAAgBA,EAIvB,IAAIp9B,EAAcyR,EAA0BkrB,EAAuD,MAIjG,OAHIlrB,EAAQ+iB,aAAaxJ,EAAe5O,UACtC3K,EAAUrS,KAAKm9B,QAAQgB,aAAav9B,EAAMyR,MAEvCiM,MAAMoS,IAAI9vB,EAAMyR,EAASkrB,MAC9BlrB,EAAUvH,OAAO9K,KAAK0zB,aAAa9yB,KACvBg4B,GAAG,EAAAv2B,YAAY4U,UAAYsmB,GACrCv9B,KAAKyzB,aACHphB,EAAQzR,KACRyR,IAGG,GAIT,aAAazR,GACX,IAAIyR,EAAUiM,MAAMoV,aAAa9yB,GACjC,GAAIyR,EAAS,OAAOA,EACpB,IAAIulB,EAAc53B,KAAK43B,YACvB,GAAIA,EACF,IAAK,IAAIv3B,EAAI,EAAG+b,EAAIwb,EAAYlrB,OAAQrM,EAAI+b,IAAK/b,EAC/C,GAAIgS,EAAUulB,EAAYv3B,GAAGqzB,aAAa9yB,GAAO,OAAOyR,EAG5D,OAAO,KAIT,OAAOzR,GACL,IAAIyR,EAAUrS,KAAK0zB,aAAa9yB,GAChC,OAAIyR,GACGrS,KAAKm9B,QAAQvJ,aAAahzB,GAInC,aAAaA,EAAcyR,GACzB,IAAI3S,EAAUM,KAAKN,QACdA,IAASM,KAAKN,QAAUA,EAAU,IAAIqI,KAC3CrI,EAAQgO,IAAI9M,EAAMyR,GACdrS,KAAKgM,OAAO4S,YAAc,EAAA5Q,WAAWiR,eAAejf,KAAKm9B,QAAQgB,aAAav9B,EAAMyR,GAI1F,iBAAiByf,GACf,IAAI8F,EAAc53B,KAAK43B,YACvB,GAAKA,GACA,GAAIA,EAAYnqB,SAASqkB,GAAO,YADnB9xB,KAAK43B,YAAcA,EAAc,GAEnDA,EAAY5qB,KAAK8kB,GAInB,aAAalxB,GACX,IAAIlB,EAAUM,KAAKN,QACnB,GAAgB,OAAZA,GAAoBA,EAAQ4N,IAAI1M,GAAO,OAAOkK,OAAOpL,EAAQwB,IAAIN,IACrE,IAAIg3B,EAAc53B,KAAK43B,YACvB,GAAIA,EACF,IAAK,IAAIv3B,EAAI,EAAG+b,EAAIwb,EAAYlrB,OAAQrM,EAAI+b,IAAK/b,EAAG,CAClD,IAAIgS,EAAUulB,EAAYv3B,GAAGk5B,aAAa34B,GAC1C,GAAIyR,EAAS,OAAOA,EAGxB,OAAO,KAIT,oBAAoBzR,EAAcovB,EAAiB7E,GACjD,IAAItZ,EAAc7R,KAAKm9B,QAAQiB,+BAA+Bx9B,GAC9DiR,EAAYjR,KAAOuqB,EACnB,IAAIzpB,EAAK,IAAIm7B,EAAUj8B,EAAMovB,EAAQne,GAGrC,OAFAnQ,EAAGgM,IAAI,EAAArL,YAAYg8B,QACnBr+B,KAAKs+B,uBAAuB58B,GACrBA,EAID,uBAAuBA,GAC7B,IAAIhC,EAAUM,KAAKN,QACnB,GAAIA,EAEF,IAAK,IAAIgzB,EAAQC,SAASjzB,GAAUW,EAAI,EAAG+b,EAAIsW,EAAMhmB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACvE,IAAIk+B,EAAapf,UAAUuT,EAAMryB,IAC7B03B,EAASjtB,OAAOpL,EAAQwB,IAAIq9B,IAChC78B,EAAGgvB,IAAI6N,EAAYxG,GAGvB,IAAIH,EAAc53B,KAAK43B,YACvB,GAAIA,EACF,IAAK,IAAIv3B,EAAI,EAAG+b,EAAIwb,EAAYlrB,OAAQrM,EAAI+b,IAAK/b,EAC/Cu3B,EAAYv3B,GAAGi+B,uBAAuB58B,IA7H9C,SAoIA,MAAaivB,UAAuBmN,EAGlC,YAEEl9B,EAEAovB,EAEAne,EAEAoe,EAAiCrE,EAAelP,MAEhD4B,MACEqN,EAAY6S,eACZ59B,EACA69B,EAAmB79B,EAAMovB,GAAQ,GACjCA,EAAOmN,QACPnN,EACAne,GAEF7R,KAAKiwB,eAAiBA,EAIxB,yBACE,OAAyBjwB,KAAK6R,YAAaiE,eAI7C,eACE,OAAyB9V,KAAK6R,YAAapC,KAI7C,OAAO7O,GACL,OAAOZ,KAAKgwB,OAAO0O,OAAO99B,IApC9B,mBAyCA,MAAai8B,UAAkBe,EAG7B,YAEEh9B,EAEAovB,EAEAne,EAEAoe,EAAiCrE,EAAelP,MAEhD4B,MACEqN,EAAYrK,UACZ1gB,EACA69B,EAAmB79B,EAAMovB,GAAQ,GACjCA,EAAOmN,QACPnN,EACAne,GAEF7R,KAAKiwB,eAAiBA,EAIxB,OAAOrvB,GACL,IAAI+9B,EAAS3+B,KAAK0zB,aAAa9yB,GAC/B,OAAI+9B,GACG3+B,KAAKgwB,OAAO0O,OAAO99B,IA5B9B,cAiCA,MAAas7B,UAAa4B,EAGxB,YAEEl9B,EAEAovB,EAEAne,EAEAoe,EAAiCrE,EAAelP,MAEhD4B,MACEqN,EAAYjL,KACZ9f,EACA69B,EAAmB79B,EAAMovB,GAAQ,GACjCA,EAAOmN,QACPnN,EACAne,GAEF7R,KAAKiwB,eAAiBA,EACtBjwB,KAAKu4B,QAAQ,EAAAjI,KAAKltB,KAIpB,OAAOxC,GACL,IAAI+9B,EAAS3+B,KAAK0zB,aAAa9yB,GAC/B,OAAI+9B,GACG3+B,KAAKgwB,OAAO0O,OAAO99B,IA7B9B,SAkCA,SAAkBg+B,GAEhB,mBAEA,yBAEA,qBANF,CAAkB,EAAAA,oBAAA,EAAAA,kBAAiB,KAUnC,MAAsBC,UAA4Bf,EAUhD,YAEE1vB,EAEAxN,EAEAovB,EAEAne,EAAgDme,EAAOmN,QAAQpE,8BAA8Bn4B,IAE7F0d,MACElQ,EACAxN,EACA69B,EAAmB79B,EAAMovB,GAAQ,GACjCA,EAAOmN,QACPnN,EACAne,GAvBJ,KAAAitB,kBAAiB,EAyBf9+B,KAAKkU,MAAQrC,EAAYqC,MAI3B,eACE,OAA0ClU,KAAK6R,YAAapC,KAI9D,sBACE,OAA0CzP,KAAK6R,YAAanC,YAI9D,wBAAwBpO,EAAYmO,GAClC3E,OAAO2E,EAAKmpB,GAAG,IACf54B,KAAKyP,KAAOA,EACZzP,KAAK8+B,kBAAoB,EACzB9+B,KAAK++B,qBAAuBz9B,EAC5BtB,KAAK0N,IAAI,EAAArL,YAAY+d,MAAQ,EAAA/d,YAAY28B,QAAU,EAAA38B,YAAY07B,UAIjE,sBAAsBz8B,EAAYmO,GAChC3E,OAAO2E,EAAKmpB,GAAG,IACf54B,KAAKyP,KAAOA,EACZzP,KAAK8+B,kBAAoB,EACzB9+B,KAAKi/B,mBAAqB39B,EAC1BtB,KAAK0N,IAAI,EAAArL,YAAY+d,MAAQ,EAAA/d,YAAY28B,QAAU,EAAA38B,YAAY07B,UAIjE,OAAOn9B,GACL,OAAOZ,KAAKgwB,OAAO0O,OAAO99B,IA7D9B,wBAkEA,MAAaw7B,UAAkByC,EAG7B,YAEEj+B,EAEAovB,EAEAne,EAEAoe,EAAiCrE,EAAelP,MAEhD4B,MACEqN,EAAYuT,UACZt+B,EACAovB,EACAne,GAOJ,KAAAstB,aAAoB,EALlBn/B,KAAKiwB,eAAiBA,EACtBjwB,KAAKu4B,QAAQ,EAAAjI,KAAKltB,KAOpB,gBACE,OAA8BpD,KAAK6R,YAAanC,YAIlD,OAAO9O,GACL,OAAOZ,KAAKgwB,OAAO0O,OAAO99B,IAjC9B,cAsCA,MAAak4B,UAAe+F,EAG1B,YAEEj+B,EAEAovB,EAEAC,EAEApe,EAAgDme,EAAOmN,QAAQpE,8BAA8Bn4B,IAE7F0d,MACEqN,EAAY3O,OACZpc,EACAovB,EACAne,GAEF7R,KAAKiwB,eAAiBA,GAnB1B,WAwBA,kBAEE,YAESrvB,EAEA6O,EAEAC,EAAiC,MAJjC,KAAA9O,OAEA,KAAA6O,OAEA,KAAAC,gBAKX,MAAa0vB,UAAcP,EAGzB,YAEEj+B,EAEOy+B,EAEP5vB,EAEAugB,EAEAne,EAAgDme,EAAOmN,QAAQpE,8BAA8Bn4B,IAE7F0d,MACEqN,EAAY2T,MACZ1+B,EACAovB,EACAne,GAZK,KAAAwtB,QAcPr/B,KAAKq/B,MAAQA,EACbv0B,OAAO2E,GAAQ,EAAA6gB,KAAKG,MACpBzwB,KAAKu4B,QAAQ9oB,IAvBjB,UA4BA,MAAa0gB,UAA0ByN,EAWrC,YAEEh9B,EAEAovB,EAEAne,EAEAoe,EAAiCrE,EAAelP,MAEhD4B,MACEqN,EAAY8L,mBACZ72B,EACA69B,EAAmB79B,EAAMovB,EAAQne,EAAY+mB,GAAG,EAAAv2B,YAAYq6B,WAC5D1M,EAAOmN,QACPnN,EACAne,GAxBJ,KAAA6pB,aAA6BhQ,EAAatJ,QAE1C,KAAAmd,UAAyC,KAGjC,KAAAC,gBAAuD,KAqB7Dx/B,KAAKiwB,eAAiBA,EAIxB,yBACE,OAA6BjwB,KAAK6R,YAAaiE,eAIjD,uBACE,OAA6B9V,KAAK6R,YAAa4H,UAIjD,eACE,OAA6BzZ,KAAK6R,YAAa6H,KAIjD,gBACE,OAA6B1Z,KAAK6R,YAAa8H,UAIjD,cACE,IAAIqW,EAAShwB,KAAKgwB,OAClB,OAAOA,EAAO5hB,MAAQud,EAAY5Z,OAC3Bie,EAAO5hB,MAAQud,EAAYqM,oBAAsBhI,EAAOA,OAAO5hB,MAAQud,EAAY5Z,MAI5F,QAAQ0tB,GACN30B,OAAO9K,KAAK44B,GAAG,EAAAv2B,YAAYq6B,WAC3B5xB,QAAQ9K,KAAK09B,SACb,IAAI8B,EAAkBx/B,KAAKw/B,gBAC3B,GAAKA,GACA,GAAIA,EAAgBlyB,IAAImyB,GAAgB,OAAO30B,OAAO00B,EAAgBt+B,IAAIu+B,SADzDz/B,KAAKw/B,gBAAkBA,EAAkB,IAAIz3B,IAEnE,IAAI8J,EAAc7R,KAAK6R,YACvB/G,OAAO+G,EAAYzD,MAAQ,EAAAP,SAASsM,mBACpC,IAAIulB,EAAQ,IAAIvP,EACdnwB,KAAKY,KACL6+B,EACmB5tB,EACnB7R,KAAKiwB,gBAMP,OAJAyP,EAAMxrB,MAAQlU,KAAKkU,MACnBwrB,EAAMhE,aAAe17B,KAAK07B,aAE1B8D,EAAgB9xB,IAAI+xB,EAAeC,GAC5BA,EAIT,oBAAoBC,GAClB,IAAIJ,EAAYv/B,KAAKu/B,UACrB,OAAkB,OAAdA,GAAsBA,EAAUjyB,IAAIqyB,GAAqB70B,OAAOy0B,EAAUr+B,IAAIy+B,IAC3E,KAIT,oBAAoBA,EAAqB3C,GACvC,IAAIuC,EAAYv/B,KAAKu/B,UAChBA,EACAz0B,QAAQy0B,EAAUjyB,IAAIqyB,IADX3/B,KAAKu/B,UAAYA,EAAY,IAAIx3B,IAEjDw3B,EAAU7xB,IAAIiyB,EAAa3C,GAI7B,OAAOp8B,GACL,OAAOZ,KAAKgwB,OAAO0O,OAAO99B,IAlG9B,sBAuGA,MAAasvB,UAAiB4N,EAiC5B,YAEE8B,EAEA39B,EAEAwX,EAEAomB,EAAmD,MAEnDvhB,MACEqN,EAAY7Y,SACZ8sB,EACAnB,EAAmBmB,EAAwB39B,EAAU+tB,OAAQ/tB,EAAU22B,GAAG,EAAAv2B,YAAYq6B,WACtFz6B,EAAUk7B,QACVl7B,EAAU+tB,OACV/tB,EAAU4P,aA1Cd,KAAAiuB,aAAkC,IAAI/3B,IAEtC,KAAAg4B,cAAyB,GAEzB,KAAAC,iBAA2B,GAM3B,KAAAC,eAA0B,GAE1B,KAAAC,IAAmB,EAEnB,KAAAC,oBAA2B,EAE3B,KAAAC,WAA8B,KAG9B,KAAAC,aAAoB,EAEpB,KAAAC,gBAAuB,EAEvB,KAAAC,kBAAyB,EA2FzB,KAAAC,SAA2B,KAC3B,KAAAC,SAA2B,KAC3B,KAAAC,SAA2B,KAC3B,KAAAC,SAA2B,KAC3B,KAAAC,UAA4B,KAC5B,KAAAC,YAA8B,KAC9B,KAAAC,YAA8B,KAG9B,KAAAC,YAAmB,EACnB,KAAAC,WAA2B,KAC3B,KAAAC,WAA4B,KAjF1BjhC,KAAKiC,UAAYA,EACjBjC,KAAKyZ,UAAYA,EACjBzZ,KAAKkU,MAAQjS,EAAUiS,MAAQ,EAAA7R,YAAY07B,SAC3C/9B,KAAKiwB,eAAiBhuB,EAAUguB,eAChCjwB,KAAK6/B,wBAA0BA,EAC/B,IAAI1C,EAAUl7B,EAAUk7B,QAExB,GADAn9B,KAAKyP,KAAO0tB,EAAQpP,QAAQyC,UAAU0Q,WAAWznB,IAC5CxX,EAAU22B,GAAG,EAAAv2B,YAAYu4B,SAAU,CACtC,IAAIuG,EAAa,EACjB,GAAInhC,KAAK44B,GAAG,EAAAv2B,YAAYq6B,UAAW,CACjC,IAAI0E,EAAQ,IAAIhC,EACd,EAAAp8B,YAAYsC,MACZ67B,IACAr2B,OAAO2O,EAAU4nB,UACjBrhC,MAEFA,KAAK8/B,aAAapyB,IAAI,EAAA1K,YAAYsC,MAAO87B,GACzCphC,KAAK+/B,cAAcqB,EAAM/B,OAAS+B,EAEpC,IAAIE,EAAiB7nB,EAAU6nB,eAC/B,IAAK,IAAIjhC,EAAI,EAAG+b,EAAIklB,EAAe50B,OAAQrM,EAAI+b,IAAK/b,EAAG,CACrD,IAAIkhC,EAAgBD,EAAejhC,GAC/BmhC,EAAgB/nB,EAAUgoB,iBAAiBphC,GAC3C+gC,EAAQ,IAAIhC,EACdoC,EACAL,IACAI,EACAvhC,MAEFA,KAAK8/B,aAAapyB,IAAI8zB,EAAeJ,GACrCphC,KAAK+/B,cAAcqB,EAAM/B,OAAS+B,GAGtCphC,KAAK0hC,KAAO,EAAAC,KAAKhgC,OAAO3B,MACxB4hC,EAAwBzE,EAASn9B,MAInC,SAASyP,EAAY7O,EAAsB,KAAMiR,EAA0C,MAEzF,IAAIsvB,EAAanhC,KAAKyZ,UAAU6nB,eAAe50B,OAAS1M,KAAKggC,iBAAiBtzB,OAC1E1M,KAAK44B,GAAG,EAAAv2B,YAAYq6B,aAAayE,EACrC,IAAIrpB,EAAqB,OAATlX,EACZA,EACA,OAASugC,EAAWl1B,WACnB4F,IAAaA,EAAc7R,KAAKm9B,QAAQpE,8BAA8BjhB,IAC3E,IAAIspB,EAAQ,IAAIhC,EACdtnB,EACAqpB,EACA1xB,EACAzP,KACA6R,GAEF,GAAIjR,EAAM,CACR,GAAIZ,KAAK8/B,aAAaxyB,IAAI1M,GAAO,MAAM,IAAIqI,MAAM,wBACjDjJ,KAAK8/B,aAAapyB,IAAI9M,EAAMwgC,GAI9B,OAFAphC,KAAK+/B,cAAcqB,EAAM/B,OAAS+B,EAClCphC,KAAKggC,iBAAiBhzB,KAAKyC,GACpB2xB,EAIT,OAAOxgC,GACL,IAAIihC,EAAS7hC,KAAK8/B,aAClB,OAAI+B,EAAOv0B,IAAI1M,GAAckK,OAAO+2B,EAAO3gC,IAAIN,IACxCZ,KAAKgwB,OAAO0O,OAAO99B,GAkB5B,SAASjB,EAAgBugC,GAMvB,GALAlgC,KAAKkgC,IAAMA,EACXp1B,QAAQ9K,KAAKghC,aAAehhC,KAAKghC,WAAWt0B,QAC5C1M,KAAKghC,WAAa,KAClBhhC,KAAKihC,WAAa,KAClBjhC,KAAKwgC,SAAWxgC,KAAKygC,SAAWzgC,KAAK0gC,SAAW1gC,KAAK2gC,SAAW,KAC5D3gC,KAAKm9B,QAAQpP,QAAQ+T,UAAW,CAClC,IAAI7B,EAAiBjgC,KAAKigC,eAC1B,IAAK,IAAI5/B,EAAI,EAAG+b,EAAI6jB,EAAevzB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACrD,IAAIqL,EAAQu0B,EAAe5/B,GACvB2L,EAASN,EAAMM,OACnBrM,EAAOoiC,iBACL7B,EACAx0B,EAAMqZ,aACN/Y,EAAOuS,eACPvS,EAAOG,OAAOT,EAAMU,OACpBJ,EAAOK,eAvJjB,aA8JA,IA2WW21B,EA3WPC,EAAqB,EAGzB,+BAAoC/E,EAQlC,YAEEzjB,EAEA0jB,GAEA7e,MACEqN,EAAYuW,gBACZ,OAASD,EAAmBh2B,WAC5B,OAASg2B,EAAmBh2B,WAC5BkxB,EACAA,EAAQpO,cAERkT,EACFjiC,KAAKyZ,UAAYA,EACjBzZ,KAAKkU,MAAQ,EAAA7R,YAAY07B,SACzB/9B,KAAKyP,KAAO0tB,EAAQpP,QAAQyC,UAAU0Q,WAAWznB,GAInD,OAAO7Y,GACL,OAAO,OAKX,MAAak6B,UAAuB8C,EAGlC,YAEEh9B,EAEAovB,EAEAne,EAEAoe,EAAiCrE,EAAelP,MAEhD4B,MACEqN,EAAYwW,gBACZvhC,EACA69B,EAAmB79B,EAAMovB,EAAQllB,OAAO+G,EAAY+mB,GAAG,EAAAv2B,YAAYq6B,YACnE1M,EAAOmN,QACPnN,EACAne,GAEF7R,KAAKiwB,eAAiBA,EAIxB,eACE,OAA0BjwB,KAAK6R,YAAapC,KAI9C,sBACE,OAA0BzP,KAAK6R,YAAanC,YAI9C,qBACE,OAA0B1P,KAAK6R,YAAayN,eAI9C,OAAO1e,GACL,OAAOZ,KAAKgwB,OAAO0O,OAAO99B,IAzC9B,mBA8CA,sBAA2Bi+B,EAYzB,YAEE58B,EAEA+tB,EAEAvgB,GAEA6O,MACEqN,EAAY0M,MACZp2B,EAAUrB,KACVovB,EACkC/tB,EAAU4P,aAnBhD,KAAAuwB,cAAqB,EAErB,KAAAC,UAAyB,EAEzB,KAAAC,UAAyB,EAiBvBtiC,KAAKiC,UAAYA,EACjBjC,KAAKkU,MAAQjS,EAAUiS,MACvBlU,KAAKiwB,eAAiBhuB,EAAUguB,eAChCnlB,OAAO2E,GAAQ,EAAA6gB,KAAKG,MACpBzwB,KAAKu4B,QAAQ9oB,GACbmyB,EAAwB5hC,KAAKm9B,QAASn9B,MAIxC,yBACE,OAAOA,KAAKgwB,OAAOf,aAAe,EAAAvsB,mBAAqB,EAAAF,cAAgBxC,KAAKY,KAI9E,yBACE,OAAOZ,KAAKgwB,OAAOf,aAAe,EAAAvsB,mBAAqB,EAAAD,cAAgBzC,KAAKY,OAKhF,MAAak7B,UAA0B8B,EAQrC,YAEEh9B,EAEAovB,EAEAuS,GAEAjkB,MACEqN,EAAYqM,mBACZp3B,EACA69B,EAAmB79B,EAAMovB,EAAQuS,EAAiB3J,GAAG,EAAAv2B,YAAYq6B,WACjE1M,EAAOmN,QACPnN,EACAuS,GAnBJ,KAAArK,gBAA4C,KAE5C,KAAAC,gBAA4C,KAmB1Cn4B,KAAKkU,SAAW,EAAA7R,YAAYye,IAAM,EAAAze,YAAYwf,KAIhD,OAAOjhB,GACL,OAAOZ,KAAKgwB,OAAO0O,OAAO99B,IA7B9B,sBAkCA,yBAA8Bi+B,EAU5B,YAEE58B,EAEA+tB,GAEA1R,MACEqN,EAAYyM,SACZn2B,EAAUrB,KACVovB,EACA/tB,EAAUk7B,QAAQpE,8BAChB92B,EAAUrB,KACVqB,EAAU22B,GAAG,EAAAv2B,YAAYq6B,UACrB,EAAAr6B,YAAYq6B,SACZ,EAAAr6B,YAAYqa,OAnBtB,KAAA8lB,eAAkC,KAElC,KAAAC,eAAkC,KAoBhCziC,KAAKiC,UAAYA,EACjBjC,KAAKkU,MAAQjS,EAAUiS,MACvBlU,KAAKiwB,eAAiBhuB,EAAUguB,eAChC2R,EAAwB5hC,KAAKm9B,QAASn9B,MAIxC,OAAOY,GACL,OAAOZ,KAAKgwB,OAAO0O,OAAO99B,KAK9B,+BAAoCk9B,EAGlC,YAEE9N,GAEA1R,MACEqN,EAAY+W,eACZ,KACA1S,EAAOf,aAAe,KACtBe,EAAOmN,QACPnN,EACAA,EAAOmN,QAAQpE,8BAA8B,OAKjD,kBAAkB4J,GAChB,OAAe3iC,KAAKgwB,OAAQ4S,eAAelX,EAAaK,YAAa4W,GAIvE,kBAAkBA,GAChB,OAAe3iC,KAAKgwB,OAAQ4S,eAAelX,EAAaM,YAAa2W,GAIvE,OAAO/hC,GACL,OAAOZ,KAAKgwB,OAAO0O,OAAO99B,KAK9B,MAAam5B,UAAuB6D,EAelC,YAEEh9B,EAEAovB,EAEAne,EAEAoe,EAAiCrE,EAAelP,KAChDmmB,GAAqB,GAErBvkB,MACEukB,EAAelX,EAAYkP,oBAAsBlP,EAAYyI,gBAC7DxzB,EACA69B,EAAmB79B,EAAMovB,EAAQne,EAAY+mB,GAAG,EAAAv2B,YAAYq6B,WAC5D1M,EAAOmN,QACPnN,EACAne,GA7BJ,KAAAimB,gBAA8C,KAE9C,KAAA3C,cAAuC,KAEvC,KAAA2N,qBAAiD,KAEjD,KAAAtH,mBAA2D,IAAIzzB,IAE/D,KAAAw3B,UAAsC,KAEtC,KAAAwD,UAAiC,IAAIj7B,IAqBnC9H,KAAKiwB,eAAiBA,EAIxB,yBACE,OAA0BjwB,KAAK6R,YAAaiE,eAG9C,kBACE,OAA0B9V,KAAK6R,YAAaxC,YAG9C,sBACE,OAA0BrP,KAAK6R,YAAakE,gBAI9C,qBACE,IAAIke,EAA0Bj0B,KAAKm9B,QAAQlJ,wBAC3C,OAAmC,OAA5BA,GACAj0B,KAAKgjC,QAAQ/O,EAAwBhyB,WAI9C,QAAQghC,GACN,IAAI3F,EAAiCt9B,KACjCqN,EAAO,IAAIvF,IACf,EAAG,CAED,GAAIuF,EAAKC,IAAIgwB,GAAU,MAEvB,GADAjwB,EAAKqjB,IAAI4M,GACLA,IAAY2F,EAAe,OAAO,EACtC3F,EAAUA,EAAQnI,oBACXmI,GACT,OAAO,EAIT,YAAY18B,EAAcyR,GACxB,IAAImrB,EAAsBnrB,EAAQR,YAC9BimB,EAAkB93B,KAAK83B,gBAC3B,GAAKA,GACA,GAAIA,EAAgBxqB,IAAI1M,GAAO,CAClC,IAAIs4B,EAAWpuB,OAAOgtB,EAAgB52B,IAAIN,IACtCu4B,EAASC,EAASF,EAAU7mB,GAChC,IAAK8mB,EAcH,OAbItF,EAAkBqF,EAAS9qB,MAC7BpO,KAAKm9B,QAAQ9D,aACX,EAAAjuB,eAAekuB,uBACfjnB,EAAQijB,eAAe5pB,MACLwtB,EAAUrnB,YAAYjR,KAAK8K,MAC7C2G,EAAQijB,eAAe9oB,MAGzBxM,KAAKm9B,QAAQ3W,MACX,EAAApb,eAAekuB,uBACfjnB,EAAQijB,eAAe5pB,MAAO2G,EAAQijB,eAAe9oB,OAGlD,EAET6F,EAAU8mB,QApBUn5B,KAAK83B,gBAAkBA,EAAkB,IAAI/vB,IA2BnE,OALA+vB,EAAgBpqB,IAAI9M,EAAMyR,GACtBA,EAAQumB,GAAG,EAAAv2B,YAAY4U,SAAWjX,KAAK44B,GAAG,EAAAv2B,YAAYw1B,gBACxDxlB,EAAQ3E,IAAI,EAAArL,YAAYw1B,eAE1B73B,KAAKm9B,QAAQ/O,sBAAsB1gB,IAAI8vB,EAAqBnrB,IACrD,EAIT,oBAAoBstB,GAClB,IAAIJ,EAAYv/B,KAAKu/B,UACrB,OAAkB,OAAdA,GAAsBA,EAAUjyB,IAAIqyB,GAA4BJ,EAAUr+B,IAAIy+B,GAC3E,KAIT,oBAAoBA,EAAqB3C,GACvC,IAAIuC,EAAYv/B,KAAKu/B,UAChBA,EACAz0B,QAAQy0B,EAAUjyB,IAAIqyB,IADX3/B,KAAKu/B,UAAYA,EAAY,IAAIx3B,IAEjDw3B,EAAU7xB,IAAIiyB,EAAa3C,GAI7B,OAAOp8B,GACL,OAAOZ,KAAKgwB,OAAO0O,OAAO99B,IA1H9B,mBA8HA,SAAWohC,GACT,yBACA,yBACA,iCAHF,CAAWA,MAAY,KAOvB,MAAakB,UAAcpF,EAsDzB,YAEE8B,EAEA39B,EAEAyM,EAA+B,KAC/Bm0B,GAAqB,GAErBvkB,MACEukB,EAAelX,EAAY1K,UAAY0K,EAAY5Z,MACnD6tB,EACAnB,EAAmBmB,EAAwB39B,EAAU+tB,OAAQ/tB,EAAU22B,GAAG,EAAAv2B,YAAYq6B,WACtFz6B,EAAUk7B,QACVl7B,EAAU+tB,OACV/tB,EAAU4P,aA9Dd,KAAAsxB,KAAqB,KAErB,KAAAtD,wBAAmD,KAEnD,KAAAuD,iBAAwB,EAExB,KAAAC,oBAAuC,KAEvC,KAAA9H,UAA+C,KAE/C,KAAA+H,eAAwC,KAEhC,KAAAC,IAAW,EAEX,KAAAC,SAAQ,EAEhB,KAAAC,UAAiB,EAEjB,KAAA9K,YAA2B,KA8CzB,IAAIwE,EAAUn9B,KAAKm9B,QAOnB,GANAn9B,KAAKiC,UAAYA,EACjBjC,KAAKkU,MAAQjS,EAAUiS,MACvBlU,KAAKiwB,eAAiBhuB,EAAUguB,eAChCjwB,KAAK0O,cAAgBA,EACrB1O,KAAKu4B,QAAQ4E,EAAQpP,QAAQyC,UAAUkT,QAAQ1jC,QAE1CA,KAAKo1B,aAAaxJ,EAAevO,WAAY,CAChD,IAAImS,EAAK2N,EAAQ1O,cACjBzuB,KAAKujC,IAAM/T,EACX2N,EAAQ5O,eAAe7gB,IAAI8hB,EAAIxvB,MAIjC,IAAI8V,EAAiB7T,EAAUga,mBAC/B,GAAIvN,EAAe,CACjB,IAAIuP,EAAmBvP,EAAchC,OACrC,IAAKoJ,GAAkBmI,GAAoBnI,EAAepJ,OACxD,MAAM,IAAIzD,MAAM,gCAElB,GAAIgV,EAAkB,CACfje,KAAK6/B,0BAAyB7/B,KAAK6/B,wBAA0B,IAAI93B,KACtE,IAAK,IAAI1H,EAAI,EAAGA,EAAI4d,IAAoB5d,EACtCL,KAAK6/B,wBAAwBnyB,IAAIoI,EAAezV,GAAGO,KAAK4L,KAAMkC,EAAcrO,UAG3E,GAAuB,OAAnByV,GAA2BA,EAAepJ,OAAS,EAC5D,MAAM,IAAIzD,MAAM,gCAElB24B,EAAwBzE,EAASn9B,MAxEnC,SACE,OAAOA,KAAKujC,IAId,qBACE,OAAOvjC,KAAKiC,UAAU0hC,eAIxB,kBACE,GAAI3jC,KAAK2jC,eAAgB,OAAO,EAChC,IAAIC,EAAc5jC,KAAK0zB,aAAa,UACpC,OAAuB,OAAhBkQ,IACLA,EAAYx1B,MAAQud,EAAY0M,OAE9BuL,EAAYx1B,MAAQud,EAAYyM,UACW,OAAhCwL,EAAapB,kBAGwB,OAAlDxiC,KAAK4iC,eAAelX,EAAaK,cAC2B,OAA5D/rB,KAAK4iC,eAAelX,EAAaO,wBAuDrC,QAAQkX,GACNr4B,QAAQ9K,KAAKmjC,MACbnjC,KAAKmjC,KAAOA,EAGZ,IAAIhO,EAAiCgO,EAAKlhC,UACtC8yB,EAAgB/0B,KAAKiC,UACzB6I,OAAOqqB,GAAiBJ,GACxBI,EAAc4N,UAAUrS,IAAIqE,GAC5B,IAAI8O,EAAsB9O,EAAc+C,gBACxC,GAAI+L,EACF,OAAG,CACD,IAAIC,EAAsB3O,EAAc2C,gBACxC,GAAIgM,EACF,IAAK,IAAIpR,EAAQC,SAASmR,GAAsBzjC,EAAI,EAAG+b,EAAIsW,EAAMhmB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACnF,IAAIk+B,EAAa7L,EAAMryB,GACnB03B,EAASjtB,OAAOg5B,EAAoB5iC,IAAIq9B,IACxCsF,EAAoBv2B,IAAIixB,IAC1BxG,EAAOrqB,IAAI,EAAArL,YAAY0hC,SAI7B,IAAIC,EAAgB7O,EAAcA,cAClC,IAAK6O,EAAe,MACpB7O,EAAgB6O,EAKpB,IAAIC,EAAyBd,EAAKtD,wBAClC,GAAIoE,EAAwB,CAC1B,IAAIpE,EAA0B7/B,KAAK6/B,wBAEnC,IAAK,IAAInN,EAAQC,SAASsR,GAAyB5jC,EAAI,EAAG+b,EAAIsW,EAAMhmB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACtF,IAAI6jC,EAAW/kB,UAAUuT,EAAMryB,IAC3B8jC,EAAWr5B,OAAOm5B,EAAuB/iC,IAAIgjC,IAC5CrE,EAGOA,EAAwBvyB,IAAI42B,IACtCrE,EAAwBnyB,IAAIw2B,EAAUC,IAHtCnkC,KAAK6/B,wBAA0BA,EAA0B,IAAI93B,IAC7D83B,EAAwBnyB,IAAIw2B,EAAUC,MAS9C,eAAeC,GACb,IAAI9G,EAAwBt9B,KAC5B,EAAG,CACD,GAAIs9B,GAAW8G,EAAQ,OAAO,EAC9B9G,EAAUA,EAAQ6F,WACX7F,GACT,OAAO,EAIT,eAAelvB,EAAoB+Q,GAAkB,GACnD,GAAIA,EACF,OAAQ/Q,GACN,KAAKsd,EAAaK,YAAa,CAC7B,IAAIsY,EAAoBrkC,KAAK4iC,eAAelX,EAAaO,uBACzD,GAAIoY,EAAmB,OAAOA,EAC9B,MAEF,KAAK3Y,EAAaM,YAAa,CAC7B,IAAIqY,EAAoBrkC,KAAK4iC,eAAelX,EAAaQ,uBACzD,GAAImY,EAAmB,OAAOA,EAC9B,MAEF,QAASv5B,QAAO,GAGpB,IAAIkyB,EAAyBh9B,KAC7B,EAAG,CACD,IAAIu7B,EAAYyB,EAASzB,UACzB,GAAIA,EAAW,CACb,IAAI+I,EAAW/I,EAAUr6B,IAAIkN,GAC7B,GAAIk2B,EAAU,OAAOA,EAEvBtH,EAAWA,EAASmG,WACbnG,GACT,OAAO,KAIT,OAAOp8B,GACL,OAAOZ,KAAKgwB,OAAO0O,OAAO99B,GAI5B,SAAS2jC,GACP,IAAIvuB,EAAUlL,OAAO9K,KAAKgW,SAC1BlL,OAAOkL,EAAQ1I,IAAIi3B,IACnB,IAAIC,EAAiBxuB,EAAQ9U,IAAIqjC,GAEjC,OADAz5B,OAAO05B,EAAMp2B,MAAQud,EAAY0M,OAClBmM,EAAOpC,aAIxB,WAAcxhC,EAAcU,EAAUguB,EAAoBmV,GACxD,IAAIpyB,EAAUrS,KAAK0zB,aAAa9yB,GAChC,GAAgB,OAAZyR,GAAoBA,EAAQjE,MAAQud,EAAY0M,MAAO,CACzD,IAAIqM,EAAuBryB,EACvBkd,EAASkV,EAAaC,EAActC,aACxC,OAAQsC,EAAcj1B,KAAKrB,MACzB,KAAK,EACL,KAAK,EAEH,OADA,EAAAu2B,QAAQvhC,IAAI9B,GAAQguB,EAAQC,GACrB,EAET,KAAK,EACL,KAAK,EAEH,OADA,EAAAqV,SAASxhC,IAAI9B,GAAQguB,EAAQC,GACtB,EAET,KAAK,EACL,KAAK,EAEH,OADA,EAAAG,SAAStsB,IAAI9B,GAAQguB,EAAQC,GACtB,EAET,KAAK,EACL,KAAK,EAGH,OAFAzkB,QAAQ9K,KAAKm9B,QAAQpP,QAAQgD,UAC7B,EAAArB,SAAStsB,IAAI9B,GAAQguB,EAAQC,GACtB,EAET,KAAK,GAEH,OADA,EAAAsV,SAAShhC,IAAIvC,GAAQguB,EAAQC,GACtB,EAET,KAAK,GAEH,OADA,EAAAuV,SAAShhC,IAAIxC,GAAQguB,EAAQC,GACtB,GAKb,OADAzkB,QAAO,GACA,EAIT,QAAQ7I,GACN,OAAOjC,KAAKiC,UAAU+gC,QAAQ/gC,GAIhC,mBAAmB8iC,GACjB,IAAIzH,EAAwBt9B,KAC5B,EAAG,CACD,GAAIs9B,EAAQr7B,YAAc8iC,EAAmB,OAAOzH,EAAQ5uB,cAC5D4uB,EAAUA,EAAQ6F,WACX7F,GACT,OAAO,KAIT,oBACE,IAAIA,EAAiBt9B,KACjBm9B,EAAUn9B,KAAKm9B,QACflH,EAAiBkH,EAAQlH,eAC7B,GAAIj2B,KAAKgjC,QAAQ/M,GACf,OAAOj2B,KAAKglC,mBAAmB/O,GAAiB,GAElD,IAAIC,EAAuBiH,EAAQjH,qBACnC,GAAIl2B,KAAKgjC,QAAQ9M,GACf,OAAOl2B,KAAKglC,mBAAmB9O,GAAuB,GAGxD,IADA,IAAI+O,EAAc9H,EAAQlJ,wBACnBqJ,EAAQ6F,OAAS8B,GACtB3H,EAAUxyB,OAAOwyB,EAAQ6F,MAE3B,IAAIlhC,EAAYq7B,EAAQr7B,UACxB,OAAQA,EAAUrB,KAAKiM,WAAW,IAChC,KAAK,GACH,GAAI5K,GAAak7B,EAAQtI,kBAAmB,OAAO,EAAAvE,KAAKzsB,IACxD,GAAI5B,GAAak7B,EAAQrI,kBAAmB,OAAO,EAAAxE,KAAKxsB,IACxD,MAEF,KAAK,GACH,GAAI7B,GAAak7B,EAAQhJ,iBAAkB,OAAO,EAAA7D,KAAKptB,GACvD,GAAIjB,GAAak7B,EAAQ9I,kBAAmB,OAAO,EAAA/D,KAAKntB,IACxD,GAAIlB,GAAak7B,EAAQ7I,kBAAmB,OAAO,EAAAhE,KAAKltB,IACxD,GAAInB,GAAak7B,EAAQ5I,kBAAmB,OAAO,EAAAjE,KAAKjtB,IACxD,MAEF,KAAK,GACH,GAAIpB,GAAak7B,EAAQ3I,iBAAkB,OAAO,EAAAlE,KAAK/sB,GACvD,GAAItB,GAAak7B,EAAQ1I,wBAAyB,OAAO,EAAAnE,KAAK/sB,GAC9D,GAAItB,GAAak7B,EAAQzI,kBAAmB,OAAO,EAAApE,KAAK9sB,IACxD,GAAIvB,GAAak7B,EAAQxI,kBAAmB,OAAO,EAAArE,KAAK7sB,IACxD,GAAIxB,GAAak7B,EAAQvI,kBAAmB,OAAO,EAAAtE,KAAK5sB,IAK5D,OADAoH,QAAO,GACA,EAAAwlB,KAAKG,KAId,gBACE,IAAIyU,EAAUllC,KAAKwjC,SACnB,GAAe,GAAX0B,EAAiC,CACnC,IAAIC,EAAWnlC,KAAKolC,SAASplC,MACfA,KAAKwjC,SAAW0B,EAA1BC,EAAoC,EACT,EAEjC,OAAkB,GAAXD,EAID,SAASG,EAAcC,EAAqB,IAAIx9B,KAWtD,GAAIw9B,EAAOh4B,IAAItN,MAAO,OAAO,EAI7B,IAAIs9B,EAHJgI,EAAO5U,IAAI1wB,MAIX,IAkBIm1B,EAlBA2C,EAAkB93B,KAAKgW,QAC3B,GAAI8hB,EAEF,IAAK,IAAIX,EAAUC,WAAWU,GAAkBz3B,EAAI,EAAG+b,EAAI+a,EAAQzqB,OAAQrM,EAAI+b,IAAK/b,EAAG,CACrF,IAAI03B,EAAS5Y,UAAUgY,EAAQ92B,IAC/B,GAAI03B,EAAO3pB,MAAQud,EAAY0M,MAAO,CACpC,IAAIkN,EAAoBxN,EAAQtoB,KAChC,GAAI81B,EAAU3M,GAAG,MAC8B,QAAxC0E,EAAUiI,EAAU9M,kBACvB6E,IAAY+H,GACZ/H,EAAQ8H,SAASC,EAAOC,IACvB,OAAO,GAUlB,GAAsD,QAAjDnQ,EAAgBn1B,KAAKm9B,QAAQlH,iBAA4Bj2B,KAAKiC,UAAU+gC,QAAQ7N,GAAgB,CACnG,IAAIzmB,EAAgB5D,OAAO9K,KAAKglC,mBAAmB7P,IAEnD,GADArqB,OAA+B,GAAxB4D,EAAchC,QAE6B,QAA/C4wB,EAAU5uB,EAAc,GAAG+pB,kBAE1B6E,IAAY+H,GACZ/H,EAAQ8H,SAASC,EAAOC,IAE1B,OAAO,OAGJ,GAAoD,QAA/CnQ,EAAgBn1B,KAAKm9B,QAAQhH,eAA0Bn2B,KAAKiC,UAAU+gC,QAAQ7N,GAAgB,CACxG,IAAIzmB,EAAgB5D,OAAO9K,KAAKglC,mBAAmB7P,IAEnD,GADArqB,OAA+B,GAAxB4D,EAAchC,QAE6B,QAA/C4wB,EAAU5uB,EAAc,GAAG+pB,kBAE1B6E,IAAY+H,GACZ/H,EAAQ8H,SAASC,EAAOC,IAE1B,OAAO,OAGJ,GAAoD,QAA/CnQ,EAAgBn1B,KAAKm9B,QAAQ/G,eAA0Bp2B,KAAKiC,UAAU+gC,QAAQ7N,GAAgB,CACxG,IAAIzmB,EAAgB5D,OAAO9K,KAAKglC,mBAAmB7P,IAEnD,GADArqB,OAA+B,GAAxB4D,EAAchC,QAE6B,QAA/C4wB,EAAU5uB,EAAc,GAAG+pB,kBAE1B6E,IAAY+H,GACZ/H,EAAQ8H,SAASC,EAAOC,IAE1B,OAAO,EACT,GACkD,QAA/ChI,EAAU5uB,EAAc,GAAG+pB,kBAE1B6E,IAAY+H,GACZ/H,EAAQ8H,SAASC,EAAOC,IAE1B,OAAO,EAEX,OAAO,GA1YX,UA+YA,MAAa3I,UAA2B5C,EAGtC,YACEn5B,EACAovB,EACAne,EACAoe,GAEA3R,MACE1d,EACAovB,EACAne,EACAoe,GACA,IAdN,uBAsCA,SAAS2R,EAAwBzE,EAAkB9qB,GACjDvH,QAAQqyB,EAAQ9O,gBAAgB/gB,IAAI+E,EAAQ4c,eAC5CkO,EAAQ9O,gBAAgB3gB,IAAI2E,EAAQ4c,aAAc5c,GAIpD,SAAS+mB,EAASoM,EAAgBC,GAIhC,GADA36B,OAAO06B,EAAMrI,UAAYsI,EAAMtI,SAC3BsI,EAAMzvB,QAAS,OAAO,KAC1B,IAAImjB,EAAiC,KACrC,OAAQqM,EAAMp3B,MACZ,KAAKud,EAAY8L,mBACf,OAAQgO,EAAMr3B,MACZ,KAAKud,EAAYrK,UACfwb,EAAY2I,EAAOD,GACnBrM,EAA0BqM,EAC1B,MAEF,KAAK7Z,EAAY6S,eACVgH,EAAMpI,aACToI,EAAMpI,WAA6BqI,EACnC3I,EAAY2I,EAAOD,GACnBrM,EAA0BqM,GAKhC,MAEF,KAAK7Z,EAAYyI,gBACjB,KAAKzI,EAAYjL,KACf,GAAI+kB,EAAMr3B,MAAQud,EAAYrK,UAAW,CACvCwb,EAAY2I,EAAOD,GACnBrM,EAA0BqM,EAC1B,MAEF,MAEF,KAAK7Z,EAAYrK,UACf,OAAQmkB,EAAMr3B,MACZ,KAAKud,EAAYjL,KACjB,KAAKiL,EAAYyI,gBACjB,KAAKzI,EAAY8L,mBACfqF,EAAY0I,EAAOC,GACnBtM,EAA0BsM,EAC1B,MAEF,KAAK9Z,EAAYrK,UACfwb,EAAY2I,EAAOD,GACnBrM,EAA0BqM,EAC1B,MAEF,KAAK7Z,EAAY6S,eACVgH,EAAMpI,aACToI,EAAMpI,WAA6BqI,EACnC3I,EAAY2I,EAAOD,GACnBrM,EAA0BqM,GAKhC,MAEF,KAAK7Z,EAAY3O,OACXyoB,EAAMr3B,MAAQud,EAAY6S,iBACvBgH,EAAMpI,aACToI,EAAMpI,WAA6BqI,EACnC3I,EAAY2I,EAAOD,GACnBrM,EAA0BqM,IAG9B,MAEF,KAAK7Z,EAAY6S,eACf,OAAQiH,EAAMr3B,MACZ,KAAKud,EAAY3O,OACjB,KAAK2O,EAAY8L,mBACjB,KAAK9L,EAAYrK,UACVmkB,EAAMrI,aACTqI,EAAMrI,WAA6BoI,EACnC1I,EAAY0I,EAAOC,GACnBtM,EAA0BsM,IAQpC,GAAItM,EAAQ,EACUqM,EAAM5M,GAAG,EAAAv2B,YAAY4U,SAAWuuB,EAAMpQ,aAAaxJ,EAAe5O,WAClEyoB,EAAM7M,GAAG,EAAAv2B,YAAY4U,SAAWwuB,EAAMrQ,aAAaxJ,EAAe5O,UAEpFwoB,EAAMrI,QAAQ3W,MACZ,EAAApb,eAAes6B,kFACfvM,EAAO7D,eAAe5pB,MAAOytB,EAAO7D,eAAe9oB,MAIzD,OAAO2sB,EAIT,SAAS2D,EAAY6I,EAAcC,GACjC,IAAIC,EAAaF,EAAI3vB,QACrB,GAAI6vB,EAAY,CACd,IAAIC,EAAcF,EAAK5vB,QAClB8vB,IAAaF,EAAK5vB,QAAU8vB,EAAc,IAAI/9B,KAEnD,IAAK,IAAI2qB,EAAQC,SAASkT,GAAaxlC,EAAI,EAAG+b,EAAIsW,EAAMhmB,OAAQrM,EAAI+b,IAAK/b,EAAG,CAC1E,IAAIk+B,EAAapf,UAAUuT,EAAMryB,IAC7B03B,EAASjtB,OAAO+6B,EAAW3kC,IAAIq9B,IACnCuH,EAAYp4B,IAAI6wB,EAAYxG,KAMlC,SAAgB0G,EAAmB79B,EAAcovB,EAAiB+V,EAAkBC,GAAiB,GACnG,OAAQhW,EAAO5hB,MACb,KAAKud,EAAY0R,KACf,OAAI2I,EAAiBplC,EACdovB,EAAOf,aAAe,EAAA3sB,eAAiB1B,EAEhD,KAAK+qB,EAAY7Y,SACf,OAAIkzB,EAAiBplC,GACrBkK,QAAQi7B,GACD/V,EAAOf,aAAe,EAAArsB,gBAAkBhC,GAEjD,QACE,OAAO69B,EAAmBzO,EAAOpvB,KAAMovB,EAAOA,OAAQA,EAAO4I,GAAG,EAAAv2B,YAAYq6B,UAAWsJ,IAC/ED,EAAa,EAAArjC,mBAAqB,EAAAC,kBAAoB/B,GAvJpE,0BAA+BsiC,EAG7B,YACEtD,EACA39B,EACAyM,EAAwB,IAExB4P,MACEshB,EACA39B,EACAyM,GACA,KA8HN,wB,8EC58HA,aACA,QAoBA,IAAiBu3B,EAeLC,EAeAC,EAg3DAC,GA94DZ,SAAiBH,GACF,EAAAI,KAAmB,EACnB,EAAAC,YAA0B,EAC1B,EAAAx/B,IAAkB,EAClB,EAAAC,IAAkB,EAClB,EAAAQ,IAAkB,EAClB,EAAAC,IAAkB,EAClB,EAAAC,KAAmB,EACnB,EAAA8+B,QAAsB,EACtB,EAAA7+B,OAAqB,EACrB,EAAA8+B,QAAsB,EACtB,EAAAC,OAAqB,GACrB,EAAAC,MAAoB,EAZnC,CAAiBT,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAe3B,SAAYC,GACV,iBACA,yBACA,uCACA,+CACA,yBACA,gCACA,0BACA,8CACA,6BACA,yCACA,iCACA,oBAZF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAexB,SAAYC,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,oBACA,kBACA,kCACA,sCACA,8BACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,gCACA,4BACA,gCACA,gCACA,oBACA,kBACA,0BACA,8BACA,0BACA,kBACA,sBACA,0BACA,0BACA,8BACA,oCAjDF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAoDxB,SAAYQ,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,4BACA,4BACA,8BACA,oDACA,oDACA,oDACA,oDACA,kDACA,kDACA,kDACA,kDACA,oDACA,uDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDAjHF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KAoHnB,SAAYC,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,iDACA,iDACA,iDACA,iDACA,qCA/KF,CAAY,EAAAA,WAAA,EAAAA,SAAQ,KAkLpB,SAAYC,GACV,+BACA,+BAFF,CAAY,EAAAA,SAAA,EAAAA,OAAM,KAKlB,SAAYC,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBANF,CAAY,EAAAA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IAAKoE,EAAKpD,OAAOT,aAItCkxB,EAAQ3W,MACN,EAAApb,eAAeuwB,wBACf7P,EAAIpgB,SAKVyxB,EAAQ3W,MACN,EAAApb,eAAeuwB,wBACf7P,EAAIpgB,YAIRyxB,EAAQ3W,MACN,EAAApb,eAAe69E,wCACfvpE,EAAUhU,MAAO,IAAK,MAK5B,IAAIwpF,EACAC,EAGJ,SAASkH,EAAsBrzD,GAE7B,OADAl+B,OAAO,EAAA2gC,kBAAkBzC,IAAS,EAAA/C,WAAWn/B,KAAO,EAAA2kC,kBAAkBzC,IAAS,EAAA/C,WAAWK,aACtF,EAAA+E,gBAAgBrC,IAAS,EAAA7C,aAAawP,MACjC,EAAAkf,iBAAiB7rB,GACpB,EACA,EAEC,I,8EC9lUT,SAAY59B,GACV,2CACA,mDACA,yCACA,6DACA,iJACA,qGACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,uFACA,6IACA,uIACA,uIACA,+GACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,4D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AOA,EAAK/J,UAAU8R,EAAM,IACjBnS,OACX,WAKRmS,IAEF,OAAOpS,EAAM,EAAIqK,EAAO,IAc1B,SAAgBw1G,EAAQpgH,GACtB,IAAI2S,EAAM3S,EAAeQ,OACzB,GAAImS,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAxGc,IAwGV3S,EAAeW,WAAW,GAC5B,OAAOX,EAGX,OAAS2S,EAAM,GACb,GA7Gc,IA6GV3S,EAAeW,WAAWgS,GAC5B,OAAO3S,EAAea,UAAU,EAAG8R,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4B3S,EAAwBqgH,GAClD,OAAIrgH,EAAeiL,WAAW,QACrBjL,EAEFgL,EACLo1G,EAAQC,GAAU,EAAAjqH,eAAiB4J,IAKvC,a,8EC3GA,SAAkBsgH,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4B9rH,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,MAAM+rH,EAAS,GAAJ/rH,EACX,OAAO+rH,GAAM,IAAcA,GAAM,KACrB,IAAL/rH,GACK,IAALA,GACAA,EAAI,SAmLqB8K,EAnLY9K,GAoL9B,KAAO8K,EAAO,QACrBkhH,EAAmBlhH,EAAamhH,IAFzC,IAAkCnhH,GA/KlC,8BAAmC9K,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAM+rH,EAAS,GAAJ/rH,EACX,OAAO+rH,GAAM,IAAcA,GAAM,KAC1B/rH,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoB8K,EAzKY9K,GA0K7B,KAAO8K,EAAO,QACrBkhH,EAAmBlhH,EAAaohH,IAFzC,IAAiCphH,GArKjC,MAAMmhH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocBuffer = \"__allocBuffer\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./text\";\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \":\" +\n        source.lineAt(range.start).toString() +\n        \":\" +\n        source.columnAt().toString()\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,i32[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenCodesAtPos = assert(seenInSource.get(range.start));\n          if (seenCodesAtPos.includes(code)) return;\n          seenCodesAtPos.push(code);\n        } else {\n          seenInSource.set(range.start, [ code ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,i32[]>();\n        seenInSource.set(range.start, [ code ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var node = new TypeName();\n    node.kind = NodeKind.TYPENAME;\n    node.range = range;\n    node.identifier = name;\n    node.next = null;\n    return node;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var node = new NamedTypeNode();\n    node.kind = NodeKind.NAMEDTYPE;\n    node.range = range;\n    node.name = name;\n    node.typeArguments = typeArguments;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var node = new FunctionTypeNode();\n    node.kind = NodeKind.FUNCTIONTYPE;\n    node.range = range;\n    node.parameters = parameters;\n    node.returnType = returnType;\n    node.explicitThisType = explicitThisType;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var node = new TypeParameterNode();\n    node.kind = NodeKind.TYPEPARAMETER;\n    node.range = range;\n    node.name = name;\n    node.extendsType = extendsType;\n    node.defaultType = defaultType;\n    return node;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var node = new ParameterNode();\n    node.kind = NodeKind.PARAMETER;\n    node.range = range;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.parameterKind = kind;\n    return node;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var node = new DecoratorNode();\n    node.kind = NodeKind.DECORATOR;\n    node.range = range;\n    node.name = name;\n    node.arguments = args;\n    node.decoratorKind = DecoratorKind.fromNode(name);\n    return node;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.kind = NodeKind.COMMENT;\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = name;\n    node.isQuoted = isQuoted;\n    return node;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = \"\";\n    return node;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var node = new ArrayLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.range = range;\n    node.literalKind = LiteralKind.ARRAY;\n    node.elementExpressions = elements;\n    return node;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var node = new AssertionExpression();\n    node.kind = NodeKind.ASSERTION;\n    node.range = range;\n    node.assertionKind = assertionKind;\n    node.expression = expression;\n    node.toType = toType;\n    return node;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var node = new BinaryExpression();\n    node.kind = NodeKind.BINARY;\n    node.range = range;\n    node.operator = operator;\n    node.left = left;\n    node.right = right;\n    return node;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var node = new CallExpression();\n    node.kind = NodeKind.CALL;\n    node.range = range;\n    node.expression = expression;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var node = new ClassExpression();\n    node.kind = NodeKind.CLASS;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var node = new CommaExpression();\n    node.kind = NodeKind.COMMA;\n    node.range = range;\n    node.expressions = expressions;\n    return node;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var node = new ConstructorExpression();\n    node.kind = NodeKind.CONSTRUCTOR;\n    node.range = range;\n    node.text = \"constructor\";\n    return node;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var node = new ElementAccessExpression();\n    node.kind = NodeKind.ELEMENTACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.elementExpression = element;\n    return node;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var node = new FalseExpression();\n    node.kind = NodeKind.FALSE;\n    node.range = range;\n    node.text = \"false\";\n    return node;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var node = new FloatLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.FLOAT;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var node = new FunctionExpression();\n    node.kind = NodeKind.FUNCTION;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var node = new InstanceOfExpression();\n    node.kind = NodeKind.INSTANCEOF;\n    node.range = range;\n    node.expression = expression;\n    node.isType = isType;\n    return node;\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var node = new IntegerLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.INTEGER;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var node = new NewExpression();\n    node.kind = NodeKind.NEW;\n    node.range = range;\n    node.typeName = typeName;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var node = new NullExpression();\n    node.kind = NodeKind.NULL;\n    node.range = range;\n    node.text = \"null\";\n    return node;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var node = new ObjectLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.OBJECT;\n    node.range = range;\n    node.names = names;\n    node.values = values;\n    return node;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var node = new ParenthesizedExpression();\n    node.kind = NodeKind.PARENTHESIZED;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var node = new PropertyAccessExpression();\n    node.kind = NodeKind.PROPERTYACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.property = property;\n    return node;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var node = new RegexpLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.REGEXP;\n    node.range = range;\n    node.pattern = pattern;\n    node.patternFlags = flags;\n    return node;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var node = new TernaryExpression();\n    node.kind = NodeKind.TERNARY;\n    node.range = range;\n    node.condition = condition;\n    node.ifThen = ifThen;\n    node.ifElse = ifElse;\n    return node;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var node = new StringLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.STRING;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var node = new SuperExpression();\n    node.kind = NodeKind.SUPER;\n    node.range = range;\n    node.text = \"super\";\n    return node;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var node = new ThisExpression();\n    node.kind = NodeKind.THIS;\n    node.range = range;\n    node.text = \"this\";\n    return node;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var node = new TrueExpression();\n    node.kind = NodeKind.TRUE;\n    node.range = range;\n    node.text = \"true\";\n    return node;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var node = new UnaryPostfixExpression();\n    node.kind = NodeKind.UNARYPOSTFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var node = new UnaryPrefixExpression();\n    node.kind = NodeKind.UNARYPREFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var node = new BlockStatement();\n    node.kind = NodeKind.BLOCK;\n    node.range = range;\n    node.statements = statements;\n    return node;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var node = new BreakStatement();\n    node.kind = NodeKind.BREAK;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var node = new ClassDeclaration();\n    node.kind = NodeKind.CLASSDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = identifier;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.implementsTypes = implementsTypes;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var node = new ContinueStatement();\n    node.kind = NodeKind.CONTINUE;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var node = new DoStatement();\n    node.kind = NodeKind.DO;\n    node.range = range;\n    node.statement = statement;\n    node.condition = condition;\n    return node;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var node = new EmptyStatement();\n    node.kind = NodeKind.EMPTY;\n    node.range = range;\n    return node;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var node = new EnumDeclaration();\n    node.kind = NodeKind.ENUMDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.values = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    initializer: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var node = new EnumValueDeclaration();\n    node.kind = NodeKind.ENUMVALUEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.initializer = initializer;\n    return node;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var node = new ExportStatement();\n    node.kind = NodeKind.EXPORT;\n    node.range = range;\n    node.members = members;\n    node.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      node.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      node.internalPath = null;\n    }\n    node.isDeclare = isDeclare;\n    return node;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var node = new ExportDefaultStatement();\n    node.kind = NodeKind.EXPORTDEFAULT;\n    node.declaration = declaration;\n    node.range = range;\n    return node;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var node = new ExportImportStatement();\n    node.kind = NodeKind.EXPORTIMPORT;\n    node.range = range;\n    node.name = name;\n    node.externalName = externalName;\n    return node;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var node = new ExportMember();\n    node.kind = NodeKind.EXPORTMEMBER;\n    node.range = range;\n    node.localName = name;\n    if (!externalName) externalName = name;\n    node.exportedName = externalName;\n    return node;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var node = new ExpressionStatement();\n    node.kind = NodeKind.EXPRESSION;\n    node.range = expression.range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var node = new IfStatement();\n    node.kind = NodeKind.IF;\n    node.range = range;\n    node.condition = condition;\n    node.ifTrue = ifTrue;\n    node.ifFalse = ifFalse;\n    return node;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = decls;\n    node.namespaceName = null;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = mangleInternalPath(normalizedPath);\n    return node;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = null;\n    node.namespaceName = identifier;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = mangleInternalPath(normalizedPath);\n    return node;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var node = new ImportDeclaration();\n    node.kind = NodeKind.IMPORTDECLARATION;\n    node.range = range;\n    node.foreignName = foreignName;\n    if (!name) name = foreignName;\n    node.name = name;\n    return node;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var node = new InterfaceDeclaration();\n    node.kind = NodeKind.INTERFACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var node = new FieldDeclaration();\n    node.kind = NodeKind.FIELDDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var node = new ForStatement();\n    node.kind = NodeKind.FOR;\n    node.range = range;\n    node.initializer = initializer;\n    node.condition = condition;\n    node.incrementor = incrementor;\n    node.statement = statement;\n    return node;\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    var node = new ForOfStatement();\n    node.kind = NodeKind.FOROF;\n    node.range = range;\n    node.variable = variable;\n    node.iterable = iterable;\n    node.statement = statement;\n    return node;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var node = new FunctionDeclaration();\n    node.kind = NodeKind.FUNCTIONDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    node.arrowKind = arrowKind;\n    return node;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var node = new IndexSignatureDeclaration();\n    node.kind = NodeKind.INDEXSIGNATUREDECLARATION;\n    node.range = range;\n    node.keyType = keyType;\n    node.valueType = valueType;\n    node.flags = flags;\n    return node;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var node = new MethodDeclaration();\n    node.kind = NodeKind.METHODDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var node = new NamespaceDeclaration();\n    node.kind = NodeKind.NAMESPACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var node = new ReturnStatement();\n    node.kind = NodeKind.RETURN;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var node = new SwitchStatement();\n    node.kind = NodeKind.SWITCH;\n    node.range = range;\n    node.condition = condition;\n    node.cases = cases;\n    return node;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var node = new SwitchCase();\n    node.kind = NodeKind.SWITCHCASE;\n    node.range = range;\n    node.label = label;\n    node.statements = statements;\n    return node;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var node = new ThrowStatement();\n    node.kind = NodeKind.THROW;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var node = new TryStatement();\n    node.kind = NodeKind.TRY;\n    node.range = range;\n    node.statements = statements;\n    node.catchVariable = catchVariable;\n    node.catchStatements = catchStatements;\n    node.finallyStatements = finallyStatements;\n    return node;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var node = new TypeDeclaration();\n    node.kind = NodeKind.TYPEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.type = alias;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var node = new VariableStatement();\n    node.kind = NodeKind.VARIABLE;\n    node.range = range;\n    node.declarations = declarations;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var node = new VariableDeclaration();\n    node.kind = NodeKind.VARIABLEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators; // inherited\n    return node;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var node = new VoidStatement();\n    node.kind = NodeKind.VOID;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var node = new WhileStatement();\n    node.kind = NodeKind.WHILE;\n    node.range = range;\n    node.condition = condition;\n    node.statement = statement;\n    return node;\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        // @operator.binary, @operator.prefix, @operator.postfix\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  /** Textual name. */\n  text: string;\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL,\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  /** Integer value. */\n  value: i64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.kind = NodeKind.SOURCE;\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Rememberd column number. */\n  private lineColumn: i32 = 0;\n\n  /** Determines the line number at the specified position. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n  variable: Statement;\n  /** Iterable expression being iterated. */\n  iterable: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n  debugInfoRef: usize = 0;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          let start = this.pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && this.pos < this.end &&\n            ((text.charCodeAt(this.pos)) & 0xFC00) == 0xDC00\n          ) ++this.pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, this.pos)\n          );\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) reusableState = null;\n    else state = new State();\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// ├─File                     File, analogous to Source in the AST\n// └─FunctionTarget           Indirectly called function helper (typed)\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Static array prototype reference. */\n  staticArrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocBuffer(size: usize, id: u32, data: usize = 0): usize` */\n  allocBufferInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    this.options = options;\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, id: u32, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, signature, null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    // Initialize only once\n    if (this.initialized) return;\n\n    this.initialized = true;\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let localIdentifier = queuedImport.localIdentifier;\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            localIdentifier.text,\n            element,\n            localIdentifier // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonNames.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonNames.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonNames.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, basePrototype.identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) continue; // explicitly disabled\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    this.staticArrayPrototype = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonNames.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonNames.alloc);\n    this.reallocInstance = this.requireFunction(CommonNames.realloc);\n    this.freeInstance = this.requireFunction(CommonNames.free);\n    this.retainInstance = this.requireFunction(CommonNames.retain);\n    this.releaseInstance = this.requireFunction(CommonNames.release);\n    this.collectInstance = this.requireFunction(CommonNames.collect);\n    this.typeinfoInstance = this.requireFunction(CommonNames.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonNames.instanceof_);\n    this.visitInstance = this.requireFunction(CommonNames.visit);\n    this.allocBufferInstance = this.requireFunction(CommonNames.allocBuffer);\n    this.allocArrayInstance = this.requireFunction(CommonNames.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? assert(filesByName.get(foreignPath))\n         : filesByName.has(foreignPathAlt)\n         ? assert(filesByName.get(foreignPathAlt))\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.arguments;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var cyclics = new Set<Class>();\n    // TODO: for (let instance of this.managedClasses.values()) {\n    for (let _values = Map_values(this.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element, localIdentifier: IdentifierExpression): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt()\n        );\n      }\n    }\n  }\n}\n\nvar nextFunctionTarget = 0;\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      \"~sig\" + nextFunctionTarget.toString(),\n      \"~sig\" + nextFunctionTarget.toString(),\n      program,\n      program.nativeFile\n    );\n    ++nextFunctionTarget;\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n\n    // Remember extendees and mark overloaded methods virtual\n    var basePrototype: ClassPrototype  = base.prototype;\n    var thisPrototype = this.prototype;\n    assert(basePrototype != thisPrototype);\n    basePrototype.extendees.add(thisPrototype);\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _keys = Map_keys(baseInstanceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = _keys[i];\n            let member = assert(baseInstanceMembers.get(memberName));\n            if (thisInstanceMembers.has(memberName)) {\n              member.set(CommonFlags.VIRTUAL);\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      switch (fieldInstance.type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.f32ArrayPrototype) return Type.f32;\n        if (prototype == program.f64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.i8ArrayPrototype) return Type.i8;\n        if (prototype == program.i16ArrayPrototype) return Type.i16;\n        if (prototype == program.i32ArrayPrototype) return Type.i32;\n        if (prototype == program.i64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.u8ArrayPrototype) return Type.u8;\n        if (prototype == program.u8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.u16ArrayPrototype) return Type.u16;\n        if (prototype == program.u32ArrayPrototype) return Type.u32;\n        if (prototype == program.u64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.is(TypeFlags.REFERENCE)) {\n            if ((current = fieldType.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = []\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport type NativeType = usize;\nexport namespace NativeType {\n  export const None: NativeType = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: NativeType = 1 /* _BinaryenTypeUnreachable */;\n  export const I32: NativeType = 2 /* _BinaryenTypeInt32 */;\n  export const I64: NativeType = 3 /* _BinaryenTypeInt64 */;\n  export const F32: NativeType = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: NativeType = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: NativeType = 6 /* _BinaryenTypeVec128 */;\n  export const Funcref: NativeType = 7 /* _BinaryenTypeFuncref */;\n  export const Anyref: NativeType = 8 /* _BinaryenTypeAnyref */;\n  export const Nullref: NativeType = 9 /* _BinaryenTypeNullref */;\n  export const Exnref: NativeType = 10 /* _BinaryenTypeExnref */;\n  export const Auto: NativeType = -1 /* _BinaryenTypeAuto */;\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  All = 1023 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  Host = 20 /* _BinaryenHostId */,\n  Nop = 21 /* _BinaryenNopId */,\n  Unreachable = 22 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 24 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 23 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 25 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 26 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 27 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 28 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 29 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 30 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 31 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 32 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 33 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 34 /* _BinaryenMemoryInitId */,\n  DataDrop = 35 /* _BinaryenDataDropId */,\n  MemoryCopy = 36 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 37 /* _BinaryenMemoryFillId */,\n  Push = 38 /* _BinaryenPushId */,\n  Pop = 39 /* _BinaryenPopId */,\n  RefNull = 40 /* _BinaryenRefNullId */,\n  RefIsNull = 41 /* _BinaryenRefIsNullId */,\n  RefFunc = 42 /* _BinaryenRefFuncId */,\n  Try = 43 /* _BinaryenTryId */,\n  Throw = 44 /* _BinaryenThrowId */,\n  Rethrow = 45 /* _BinaryenRethrowId */,\n  BrOnExn = 46 /* _BinaryenBrOnExnId */,\n  TupleMake = 47 /* _BinaryenTupleMakeId */,\n  TupleExtract = 48 /* _BinaryenTupleExtractId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  AbsI8x16 = 67 /* __BinaryenAbsVecI8x16 */,\n  NegI8x16 = 68 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 69 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  BitmaskI8x16 = 71 /* __BinaryenBitmaskVecI8x16 */,\n  AbsI16x8 = 72 /* __BinaryenAbsVecI16x8 */,\n  NegI16x8 = 73 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 74 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 75 /* _BinaryenAllTrueVecI16x8 */,\n  BitmaskI16x8 = 76 /* _BinaryenBitmaskVecI16x8 */,\n  AbsI32x4 = 77 /* _BinaryenAbsVecI32x4 */,\n  NegI32x4 = 78 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 79 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 80 /* _BinaryenAllTrueVecI32x4 */,\n  BitmaskI32x4 = 81 /* _BinaryenBitmaskVecI32x4 */,\n  NegI64x2 = 82 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 83 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 84 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 85 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 86 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 87 /* _BinaryenSqrtVecF32x4 */,\n  AbsF64x2 = 88 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 89 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 90 /* _BinaryenSqrtVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 91 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 92 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 93 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 94 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 95 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 96 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 97 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 98 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 99 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 100 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 101 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 102 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 103 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 104 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 105 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 106 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrU32 = 11 /* _BinaryenShrUInt32 */,\n  ShrI32 = 12 /* _BinaryenShrSInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrU64 = 36 /* _BinaryenShrUInt64 */,\n  ShrI64 = 37 /* _BinaryenShrSInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n  AddF32x4 = 156 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 157 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 158 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 159 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 160 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 161 /* _BinaryenMaxVecF32x4 */,\n  AddF64x2 = 162 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 163 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 164 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 165 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 166 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 167 /* _BinaryenMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 168 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 169 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 170 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 171 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 172 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum HostOp {\n  MemorySize = 0 /* _BinaryenMemorySize */,\n  MemoryGrow = 1 /* _BinaryenMemoryGrow */,\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: i64;\n\n  static create(buffer: Uint8Array, offset: i64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = binaryen._BinaryenModuleCreate();\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var module = new Module();\n    var cArr = allocU8Array(buffer);\n    module.ref = binaryen._BinaryenModuleRead(cArr, buffer.length);\n    binaryen._free(changetype<usize>(cArr));\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType);\n      binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // tuples (pseudo instructions)\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, params, results, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, params, results);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      binaryen._BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      binaryen._BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(names);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(names[i]);\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = binaryen._BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = binaryen._BinaryenGetShrinkLevel();\n    var previousDebugInfo = binaryen._BinaryenGetDebugInfo();\n    binaryen._BinaryenSetOptimizeLevel(4);\n    binaryen._BinaryenSetShrinkLevel(0);\n    binaryen._BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = binaryen._BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocPtrArray([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    binaryen._BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = binaryen._BinaryenFunctionGetBody(func);\n    if (binaryen._BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = binaryen._BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    binaryen._BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(previousShrinkLevel);\n    binaryen._BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var ret = new BinaryModule();\n    ret.output = readBuffer(binaryPtr, binaryLen);\n    ret.sourceMap = readString(sourceMapPtr);\n    binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return ret;\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStrings), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (<u32>binaryen._BinaryenExpressionGetType(expr)) {\n          case <u32>NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case <u32>NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case <u32>NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case <u32>NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case <u32>NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case <u32>NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType {\n  // TODO: unify this on Binaryen's side?\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return createType(types);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = binaryen._RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  Any = 2047 /* _BinaryenSideEffectAny */,\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var ptr = binaryen._malloc(u32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = u32s.length; i < k; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var ptr = binaryen._malloc(ptrs.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = ptrs.length; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: i32): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n  // return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i: Index = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i: Index = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i: Index = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      for (let i: Index = 0, n = binaryen._BinaryenTupleMakeGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenTupleMakeGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Any host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is a host type. */\n  HOST = 1 << 11\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    var cachedNullableType = this.cachedNullableType;\n    if (!cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      cachedNullableType.nonNullableType = this;\n      cachedNullableType.classReference = this.classReference;       // either a class reference\n      cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Any host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.HOST       |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames !== null && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) {\n      return (<FunctionTarget>element).type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return assert(wrapperClasses.get(type));\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, variableLikeElement.type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterInstance = this.resolveFunction( // reports\n          assert(propertyPrototype.getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = assert(wrapperClasses.get(returnType));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return assert(members.get(propertyName)); // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      while (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          node.range\n        );\n        return null;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return assert(wrapperClasses.get(intType));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return assert(wrapperClasses.get(fltType));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.classReference;\n        if (ctxType.is(TypeFlags.REFERENCE) && classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.is(TypeFlags.REFERENCE) &&\n          !elementType.is(TypeFlags.HOST) // TODO: anyref isn't nullable as-is\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        return (<FunctionTarget>target).signature.returnType;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return assert(wrapperClasses.get(Type.bool));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Class[] = [];\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.push(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.includes(base)) return instance;\n    }\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var instanceMembers = instance.members;\n    if (!instanceMembers) instance.members = instanceMembers = new Map();\n\n    // Alias base members\n    var pendingClasses = this.resolveClassPending;\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.includes(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let baseMemberName = unchecked(_keys[i]);\n          let baseMember = assert(baseMembers.get(baseMemberName));\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyPrototype = <PropertyPrototype>member;\n            let propertyInstance = new Property(propertyPrototype, instance);\n            let getterPrototype = propertyPrototype.getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = propertyPrototype.setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.nextMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n      if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          assert(instance.contextualTypeArguments),\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    var pendingIndex = pendingClasses.indexOf(instance);\n    assert(~pendingIndex); // must be pending\n    pendingClasses.splice(pendingIndex, 1);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    var derivedPendingClasses = new Array<Class>();\n    for (let i = 0, k = pendingClasses.length; i < k; ++i) {\n      let pending = pendingClasses[i];\n      if (instance == pending.base) derivedPendingClasses.push(pending);\n    }\n    for (let i = 0, k = derivedPendingClasses.length; i < k; ++i) {\n      this.finishResolveClass(derivedPendingClasses[i], reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow always calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 13,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.parentFunction = this.parentFunction;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toNativeType()) {\n      case <u32>NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case <u32>NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++).toString(), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (<u32>local.type.toNativeType()) {\n      case <u32>NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Exnref: {\n        let tempExnrefs = parentFunction.tempExnrefs;\n        if (tempExnrefs) temps = tempExnrefs;\n        else parentFunction.tempExnrefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ALLOCATES) { // can become conditional\n      if (otherFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (otherFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ALLOCATES) {\n      if (rightFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (rightFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        let newFlags = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n        if (leftFlags & LocalFlags.RETAINED) {\n          if (rightFlags & LocalFlags.RETAINED) {\n            newFlags |= LocalFlags.RETAINED;\n          } else {\n            newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n          }\n        } else if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        } else {\n          newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n        }\n        thisLocalFlags[i] = newFlags;\n      }\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.is(TypeFlags.REFERENCE)) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        if (name == program.retainInstance.internalName) {\n          // __retain just passes through the argument\n          this.inheritNonnullIfTrue(getCallOperand(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>NativeType.I32: { value = getConstValueI32(expr); break; }\n          case <u32>NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ALLOCATES)) sb.push(\"ALLOCATES\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ALLOCATES)) sb.push(\"CONDITIONALLY_ALLOCATES\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set<i32>()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects,\n  createType\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  /** Compiler reference. */\n  compiler: Compiler;\n  /** Prototype being called. */\n  prototype: FunctionPrototype;\n  /** Provided type arguments. */\n  typeArguments: Type[] | null;\n  /** Provided operands. */\n  operands: Expression[];\n  /** Contextual type. */\n  contextualType: Type;\n  /** Respective call expression. */\n  reportNode: CallExpression;\n  /** Whether originating from inline assembly. */\n  contextIsExact: bool;\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.FLOAT) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type == Type.bool ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.SIGNED) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      let stringInstance = compiler.program.stringInstance;\n      if (stringInstance !== null && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.signatureReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classType = type.classReference;\n  if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classType.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classType.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classType.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.is(TypeFlags.REFERENCE)) {\n    let classReference = resultType.classReference;\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      let signatureReference = resultType.signatureReference;\n      if (signatureReference) {\n        value = \"Function\";\n      } else {\n        value = \"Anyref\";\n      }\n    }\n  } else {\n    switch (resultType.kind) {\n      case TypeKind.BOOL: { value = \"bool\"; break; }\n      case TypeKind.I8: { value = \"i8\"; break; }\n      case TypeKind.U8: { value = \"u8\"; break; }\n      case TypeKind.I16: { value = \"i16\"; break; }\n      case TypeKind.U16: { value = \"u16\"; break; }\n      case TypeKind.I32: { value = \"i32\"; break; }\n      case TypeKind.U32: { value = \"u32\"; break; }\n      case TypeKind.F32: { value = \"f32\"; break; }\n      case TypeKind.I64: { value = \"i64\"; break; }\n      case TypeKind.U64: { value = \"u64\"; break; }\n      case TypeKind.F64: { value = \"f64\"; break; }\n      case TypeKind.ISIZE: { value = \"isize\"; break; }\n      case TypeKind.USIZE: { value = \"usize\"; break; }\n      case TypeKind.V128: { value = \"v128\"; break; }\n      case TypeKind.ANYREF: { value = \"anyref\"; break; }\n      default: assert(false);\n      case TypeKind.VOID: { value = \"void\"; break; }\n    }\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let signatureReference = type.signatureReference;\n    if (signatureReference) {\n      return module.i32(signatureReference.id);\n    }\n    let classReference = type.classReference;\n    if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      return module.i32(classReference.id);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotlI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotrI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                isWasm64 ? module.i64(63) : module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0),\n                module.i64(63)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return hasSideEffects(arg0)\n          ? module.block(null, [\n              module.drop(arg0),\n              module.i32(0)\n            ], NativeType.I32)\n          : module.i32(0);\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return hasSideEffects(arg0)\n          ? module.block(null, [\n              module.drop(arg0),\n              module.i32(1)\n            ], NativeType.I32)\n          : module.i32(1);\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (operands.length == 4) {\n    immAlign = evaluateImmediateOffset(operands[3], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[3].range, \"Alignment\"\n      );\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    arg2 = compiler.convertExpression(arg2,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[2]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType // ^\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.host(HostOp.MemorySize);\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  return module.host(HostOp.MemoryGrow, null, [\n    compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n  ]);\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // if the assertion can be proven statically, omit it\n  if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n    switch (<u32>getExpressionType(arg0)) {\n      case <u32>NativeType.I32: {\n        if (getConstValueI32(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        if (getConstValueF32(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        if (getConstValueF64(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // return ifTrueish if assertions are disabled\n  if (compiler.options.noAssert) {\n    if (contextualType == Type.void) { // simplify if dropped anyway\n      compiler.currentType = Type.void;\n      return module.nop();\n    }\n    return arg0;\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0),\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0),\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    ctx.reportNode.typeArgumentsRange\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.classReference;\n  if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI8(getConstValueI32(expr), bytes, i);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI16(getConstValueI32(expr), bytes, i << 1);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI32(getConstValueI32(expr), bytes, i << 2);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I64);\n      let off = i << 3;\n      writeI32(getConstValueI64Low(expr), bytes, off);\n      writeI32(getConstValueI64High(expr), bytes, off + 4);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.F32);\n      writeF32(getConstValueF32(expr), bytes, i << 2);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.F64);\n      writeF64(getConstValueF64(expr), bytes, i << 3);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  if (getExpressionId(arg1) == ExpressionId.Const) {\n    assert(getExpressionType(arg1) == NativeType.I32);\n    idx = getConstValueI32(arg1);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  if (getExpressionId(arg1) == ExpressionId.Const) {\n    assert(getExpressionType(arg1) == NativeType.I32);\n    idx = getConstValueI32(arg1);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(argN) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(argN) == NativeType.I32);\n          let idx = getConstValueI32(argN);\n          if (idx < 0 || idx > maxIdx) {\n            compiler.error(\n              DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n              operand.range, \"Lane index\", \"0\", maxIdx.toString()\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      return module.unreachable();\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      return module.unreachable();\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AnyTrueI64x2\n            : UnaryOp.AnyTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instance.type.isManaged);\n    assert(instanceId == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\")) !== null) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        let visitThisType = assert(visitSig.thisType);\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n          let member = unchecked(_values[j]);\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ instanceId ]);\n    blocks.push(block);\n  }\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    let base = instance.base;\n    if (base) relooper.addBranch(blocks[instanceId], blocks[base.id]);\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.is(TypeFlags.INTEGER | TypeFlags.VALUE)) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.Binaryen || (global.Binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonNames,\n  INDEX_SUFFIX,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Static table start offset. */\n  tableBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: i32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: string[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled library functions. */\n  lazyLibraryFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create();\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    module.setFeatures(featureFlags);\n  }\n\n  initializeProgram(): void {\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize(this.options);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // check and perform this program initialization if it hasn't been done\n    this.initializeProgram();\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        // TODO: for (let classInstance of cyclicClasses) {\n        for (let _values = Set_values(cyclicClasses), i = 0, k = _values.length; i < k; ++i) {\n          let classInstance = unchecked(_values[i]);\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy library functions\n    var lazyLibraryFunctions = this.lazyLibraryFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyLibraryFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyLibraryFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyLibraryFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    this.setupVirtualLookupTables();\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      ExportNames.memory,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTable, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  private setupVirtualLookupTables(): void {\n    // TODO: :-)\n    var program = this.program;\n    var virtualCalls = this.virtualCalls;\n\n    // Virtual instance methods in the function table are potentially called virtually\n    var functionTable = this.functionTable;\n    var elementsByName = program.elementsByName;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instanceName = unchecked(functionTable[i]);\n      if (elementsByName.has(instanceName)) { // otherwise ~anonymous\n        let instance = assert(elementsByName.get(instanceName));\n        if (instance.is(CommonFlags.INSTANCE | CommonFlags.VIRTUAL)) {\n          assert(instance.kind == ElementKind.FUNCTION);\n          virtualCalls.add(<Function>instance);\n        }\n      }\n    }\n\n    // Inject a virtual lookup table into each function potentially called virtually\n    // TODO: for (let instance of virtualCalls.values()) {\n    for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      this.warning(\n        DiagnosticCode.Function_0_is_possibly_called_virtually_which_is_not_yet_supported,\n        instance.identifierNode.range, instance.internalName\n      );\n    }\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionInstances = (<FunctionPrototype>element).instances;\n        if (functionInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classInstances = (<ClassPrototype>element).instances;\n        if (classInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.ensureModuleExport(GETTER_PREFIX + name, getterPrototype, prefix);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.ensureModuleExport(SETTER_PREFIX + name, setterPrototype, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        let signature = functionInstance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          functionInstance = this.ensureTrampoline(functionInstance);\n          this.ensureBuiltinArgumentsLength();\n        }\n        if (functionInstance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(functionInstance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getter = propertyInstance.getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = propertyInstance.setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport(fieldInstance.internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport(fieldInstance.internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (instance) this.compileClass(instance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) {\n          assert(!getterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(getterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) {\n          assert(!setterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          let origInitExpr = initExpr;\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n          if (this.skippedAutoreleases.has(origInitExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n          }\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyLibraryFunctions.add(instance);\n        return true;\n      }\n    }\n\n    var previousType = this.currentType;\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      let body = module.flatten(stmts, instance.signature.returnType.toNativeType());\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        body = module.block(\"vtable\", [ body ], getExpressionType(body));\n      }\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        body\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract function\n    } else if (instance.is(CommonFlags.ABSTRACT)) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n      this.virtualCalls.add(instance);\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitializationInConstructor(classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (functionInstance) this.compileFunction(functionInstance);\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyPrototype = <PropertyPrototype>element;\n            let getterPrototype = propertyPrototype.getterPrototype;\n            if (getterPrototype) {\n              assert(!getterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(getterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            let setterPrototype = propertyPrototype.setterPrototype;\n            if (setterPrototype) {\n              assert(!setterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(setterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (functionInstance) this.compileFunction(functionInstance);\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType))\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType))\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance.id, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, id, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (<u32>nativeType) {\n      case <u32>NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.nextMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance.id, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(instance: Function): i32 {\n    assert(instance.is(CommonFlags.COMPILED));\n    var index = instance.functionTableIndex;\n    if (index >= 0) return index;\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    index = tableBase + functionTable.length;\n    if (!instance.is(CommonFlags.TRAMPOLINE) && instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      instance = this.ensureTrampoline(instance);\n    }\n    functionTable.push(instance.internalName);\n    instance.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        labelNode.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current !== null && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(statement.condition, Type.i32),\n          this.currentType\n        )\n      );\n      let condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          bodyStmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        if (hasSideEffects(condExpr)) {\n          bodyStmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(condition, Type.bool),\n          this.currentType\n        )\n      );\n      condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          stmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        if (hasSideEffects(condExpr)) {\n          return module.block(null, [\n            module.drop(condExpr),\n            this.compileStatement(ifTrue)\n          ]);\n        }\n        return this.compileStatement(ifTrue);\n      }\n      case ConditionKind.FALSE: {\n        if (hasSideEffects(condExpr)) {\n          return ifFalse\n            ? module.block(null, [\n                module.drop(condExpr),\n                this.compileStatement(ifFalse)\n              ])\n            : module.drop(condExpr);\n        }\n        return ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      if (elseTerminates && !thenTerminates) {\n        flow.inherit(thenFlow);\n      } else {\n        flow.inheritMutual(thenFlow, elseFlow);\n      }\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length > 0) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr != 0 && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString()\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = assert(scopedLocals.get(name));\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.is(TypeFlags.REFERENCE) || toType.is(TypeFlags.REFERENCE)) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.is(TypeFlags.NULLABLE) && !toType.is(TypeFlags.NULLABLE)) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.is(TypeFlags.POINTER) && !toType.is(TypeFlags.POINTER)) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        leftExpr = this.convertExpression(leftExpr,\n          leftType, leftType = commonType,\n          false, true, // !\n          left\n        );\n        rightExpr = this.convertExpression(rightExpr,\n          rightType, rightType = commonType,\n          false, true, // !\n          right\n        );\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f32PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f64PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyPrototype.internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.WILL_RETAIN);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        if (\n          fieldInstance.is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode !== null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, fieldInstance.internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert(propertyPrototype.getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        assert(valueType == returnType);\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        assert(propertyInstance.parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>propertyInstance.parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), classInstance.type);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let valueType = setterInstance.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), classInstance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(classInstance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = getterInstance.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (!valueType.is(TypeFlags.NULLABLE) || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          module.local_get(localIndex, type.toNativeType()),\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          module.global_get(global.internalName, nativeType),\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = assert(classInstance.base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.flatten(stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression; // compileCallDirect may reset\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        return this.compileCallDirect(\n          functionInstance,\n          expression.arguments,\n          expression,\n          functionInstance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low(local.constantIntegerValue));\n          } else {\n            indexArg = module.local_get(local.index, NativeType.I32);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          indexArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            fieldInstance.memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, fieldType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        let functionTarget = <FunctionTarget>target;\n        signature = functionTarget.signature;\n        indexArg = this.compileExpression(expression.expression, functionTarget.type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterPrototype = assert(propertyPrototype.getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: asc can't see this yet\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var ctx = new BuiltinContext();\n    ctx.compiler = this;\n    ctx.prototype = prototype;\n    ctx.typeArguments = typeArguments;\n    ctx.operands = expression.arguments;\n    ctx.contextualType = contextualType;\n    ctx.reportNode = expression;\n    ctx.contextIsExact = false;\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    if (instance.is(CommonFlags.VIRTUAL)) {\n      this.virtualCalls.add(instance);\n    }\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      trampolineSignature.nativeParams,\n      trampolineSignature.nativeResults,\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureBuiltinArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n      // TODO: Enable this once mutable globals are the default nearly everywhere.\n      // if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n      //   module.addGlobalExport(BuiltinNames.argumentsLength, ExportNames.argumentsLength);\n      // } else {\n        module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n          module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n        );\n        module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n      // }\n    }\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        // TODO: for (let local of scopedLocals.values()) {\n        for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n          let local = unchecked(_values[i]);\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      let localsByIndex = flow.parentFunction.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; ++i) {\n        let local = unchecked(localsByIndex[i]);\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType())\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.is(CommonFlags.VIRTUAL)) {\n      this.virtualCalls.add(instance);\n    }\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        let returnType = this.currentType;\n        if (returnType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, returnType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureBuiltinArgumentsLength();\n          return module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.ensureBuiltinArgumentsLength();\n    var expr = module.block(null, [\n      module.global_set(BuiltinNames.argumentsLength, // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      module.call_indirect(\n        this.options.isWasm64\n          ? module.unary(UnaryOp.WrapI64, indexArg)\n          : indexArg,\n        operands,\n        signature.nativeParams,\n        signature.nativeResults\n      )\n    ], returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            if (!isUnchecked && this.options.pedantic) {\n              this.pedantic(\n                DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n                expression.range\n              );\n            }\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          return module.ref_null();\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitializationInConstructor(classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.flatten(stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.is(TypeFlags.HOST | TypeFlags.REFERENCE)) {\n          this.currentType = Type.anyref;\n          return module.ref_func(functionInstance.internalName);\n        }\n        let index = this.ensureFunctionTableEntry(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      makeMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.classReference;\n    if (actualType.is(TypeFlags.REFERENCE) && classReference !== null) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.is(TypeFlags.NULLABLE)) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.block(null, [\n            module.drop(expr),\n            module.i32(1)\n          ], NativeType.I32);\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    if (contextualType.is(TypeFlags.REFERENCE)) {\n      let classReference = contextualType.classReference;\n      if (classReference !== null && classReference.extends(program.staticArrayPrototype)) {\n        return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n      }\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __allocArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression)\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    assert(contextualType.is(TypeFlags.REFERENCE));\n    var arrayInstance = assert(contextualType.classReference);\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype)![0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr: ExpressionRef;\n      if (expression) {\n        expr = module.precomputeExpression(\n          this.compileExpression(expression, elementType,\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          )\n        );\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n        } else {\n          isStatic = false;\n        }\n      } else {\n        expr = this.makeZero(elementType);\n      }\n      values[i] = expr;\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.runtimeHeaderSize));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __allocBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression)\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression)\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    var isManaged = classReference.type.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = isManaged\n      ? flow.getAutoreleaseLocal(classReference.type)\n      : flow.getTempLocal(classReference.type);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        fieldType.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], fieldInstance.type, Constraints.CONV_IMPLICIT),\n        fieldType.toNativeType(),\n        fieldInstance.memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      isManaged\n        ? this.makeRetain(this.makeAllocation(classReference))\n        : this.makeAllocation(classReference)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classReference.type;\n    return module.flatten(exprs, this.options.nativeSizeType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    var contextualTypeArguments = makeMap(classInstance.contextualTypeArguments);\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        contextualTypeArguments\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance, // bound\n          this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        contextualTypeArguments\n      );\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitializationInConstructor(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (classInstance.type.isUnmanaged || ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n        let thisType = this.currentType;\n        if (thisType.is(TypeFlags.NULLABLE)) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        return module.load(\n          fieldType.byteSize,\n          fieldType.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.is(CommonFlags.STATIC)) {\n          let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n          if (!functionInstance) return module.unreachable();\n          if (!this.compileFunction(functionInstance)) return module.unreachable();\n          this.currentType = functionInstance.type;\n          return module.i32(this.ensureFunctionTableEntry(functionInstance));\n        }\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, functionPrototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = evaluateConditionKind(condExpr);\n    if (condKind == ConditionKind.TRUE) return this.compileExpression(ifThen, ctxType);\n    if (condKind == ConditionKind.FALSE) return this.compileExpression(ifElse, ctxType);\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.ANYREF: return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n    }\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      while (classReference) {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (!this.checkTypeSupported(parameterTypes[i], reportNode.parameters[i])) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.ANYREF: return module.ref_null();\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ANYREF: {\n        // TODO: non-null object might still be considered falseish\n        // i.e. a ref to Boolean(false), Number(0), String(\"\") etc.\n        return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(fieldType, typeNode);\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var stringInstance = program.stringInstance;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type);\n    }\n\n    var filenameArg = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageArg,\n          filenameArg,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(type.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.is(TypeFlags.REFERENCE) && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Evaluates the kind of a boolean condition from its expression. */\nfunction evaluateConditionKind(expr: ExpressionRef): ConditionKind {\n  assert(getExpressionType(expr) == NativeType.I32 || getExpressionType(expr) == NativeType.Unreachable);\n  if (getExpressionId(expr) == ExpressionId.Const) {\n    return getConstValueI32(expr)\n      ? ConditionKind.TRUE\n      : ConditionKind.FALSE;\n  }\n  return ConditionKind.UNKNOWN;\n}\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Function_0_is_possibly_called_virtually_which_is_not_yet_supported = 104,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 105,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Function '{0}' is possibly called virtually, which is not yet supported.\";\n    case 105: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] | null = null\n  ) {\n    super(diagnostics);\n    this.sources = sources ? sources : new Array<Source>();\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!member) return null;\n      members.push(member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && initializer !== null) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators !== null && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n      if (!startPos) startPos = accessStart;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n      if (!startPos) startPos = accessStart;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n      if (!startPos) startPos = accessStart;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n      if (!startPos) startPos = staticStart;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n        if (!startPos) startPos = abstractStart;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT)) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && ((flags & CommonFlags.STATIC) != 0 || isInterface || initializer !== null)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments = new Array<TypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments.length) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() {};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9 // see: https://github.com/WebAssembly/multi-value\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString();\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function(set) {\n  return Array.from(set.values());\n};\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program, options: Options): void {\n  program.initialize(options);\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\n// TODO: When vTables are pulled, perhaps it would be better to extend an ASTWalker\nexport * from \"./extra/ast\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\nexport function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    // TODO: for (let v of original) {\n    for (let _values = Set_values(original), i = 0, k = _values.length; i < k; ++i) {\n      let v = unchecked(_values[i]);\n      cloned.add(v);\n    }\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  IndexSignatureDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  DeclarationStatement,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATUREDECLARATION: {\n        this.visitIndexSignatureDeclaration(<IndexSignatureDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name === value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.arguments);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    this.sb.push(i64_to_string(node.value));\n  }\n\n  visitStringLiteral(str: string, singleQuoted: bool = false): void {\n    var sb = this.sb;\n    var off = 0;\n    var quote = singleQuoted ? \"'\" : \"\\\"\";\n    sb.push(quote);\n    var i = 0;\n    for (let k = str.length; i < k;) {\n      switch (str.charCodeAt(i)) {\n        case CharCode.NULL: {\n          if (i > off) sb.push(str.substring(off, off = i + 1));\n          sb.push(\"\\\\0\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKSPACE: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\b\");\n          break;\n        }\n        case CharCode.TAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\t\");\n          break;\n        }\n        case CharCode.LINEFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\n\");\n          break;\n        }\n        case CharCode.VERTICALTAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\v\");\n          break;\n        }\n        case CharCode.FORMFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\f\");\n          break;\n        }\n        case CharCode.CARRIAGERETURN: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\r\");\n          off = ++i;\n          break;\n        }\n        case CharCode.DOUBLEQUOTE: {\n          if (!singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\\\\"\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.SINGLEQUOTE: {\n          if (singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\'\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.BACKSLASH: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\\\");\n          off = ++i;\n          break;\n        }\n        default: {\n          ++i;\n          break;\n        }\n      }\n    }\n    if (i > off) sb.push(str.substring(off, i));\n    sb.push(quote);\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.arguments);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(statement: Statement): void {\n    this.visitNode(statement);\n    var sb = this.sb;\n    if (\n      !sb.length ||                          // leading EmptyStatement\n      statement.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      statement.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members != null && members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITE_ASSIGNMENT) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignatureDeclaration(node: IndexSignatureDeclaration): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITE_ASSIGNMENT) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.arguments;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n"],"sourceRoot":""}