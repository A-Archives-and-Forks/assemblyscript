{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__21__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","x","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","withRange","emitDiagnostic","Token","Range","NodeKind","DecoratorKind","LiteralKind","SourceKind","kind","LITERAL","NULL","TRUE","FALSE","Node","typeName","TypeName","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","type","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createNamedType","createSimpleTypeName","extendsType","defaultType","elem","TypeParameterNode","initializer","ParameterNode","parameterKind","args","stmt","DecoratorNode","arguments","decoratorKind","fromNode","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","elements","ArrayLiteralExpression","elementExpressions","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","typeArgs","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","element","ElementAccessExpression","elementExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","NewExpression","NullExpression","names","values","ObjectLiteralExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","flags","RegexpLiteralExpression","patternFlags","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","typeParameters","implementsTypes","members","decorators","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","ExportDefaultStatement","externalName","ExportImportStatement","ExportMember","localName","exportedName","ExpressionStatement","ifTrue","ifFalse","IfStatement","decls","ImportStatement","declarations","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureDeclaration","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","alias","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","TypeNode","typeParameterNodes","NAMEDTYPE","typeArgumentNodes","k","hasGenericComponent","FUNCTIONTYPE","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","flag","nameNode","IDENTIFIER","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","PROPERTYACCESS","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","literalKind","FLOAT","INTEGER","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","CALL","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","super","SOURCE","parent","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","createFunctionDeclaration","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","decorator","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","options","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","Source","nativeFile","File","set","internalName","parser","Parser","resolver","Resolver","buffer","offset","classInstance","payloadSize","writeI32","id","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","has","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","isDeclaredElement","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","isAny","GET","SET","initializeProperty","initializeMethod","AMBIENT","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","originalDeclaration","isBound","declaredElements","AcyclicState","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","isImport","ensureGlobal","includes","makeNativeNamespaceDeclaration","memberName","TYPEDEFINITION","mangleInternalName","lookup","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","bound","instanceKey","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","memoryOffset","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","baseName","baseType","isBuiltinArray","lengthField","target","unchecked","uncheckedOverload","overload","fieldName","field","baseOffset","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","NativeType","ExpressionId","binaryen","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeAnyref","_BinaryenTypeExnref","_BinaryenTypeUnreachable","FeatureFlags","_BinaryenFeatureMVP","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenFeatureTailCall","_BinaryenFeatureReferenceTypes","_BinaryenFeatureAll","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenAtomicFenceId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDTernaryId","_BinaryenSIMDShiftId","_BinaryenSIMDLoadId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","_BinaryenTryId","_BinaryenThrowId","_BinaryenRethrowId","_BinaryenBrOnExnId","_BinaryenPushId","_BinaryenPopId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenTruncSatSFloat32ToInt32","_BinaryenTruncSatUFloat32ToInt32","_BinaryenTruncSatSFloat64ToInt32","_BinaryenTruncSatUFloat64ToInt32","_BinaryenTruncSatSFloat32ToInt64","_BinaryenTruncSatUFloat32ToInt64","_BinaryenTruncSatSFloat64ToInt64","_BinaryenTruncSatUFloat64ToInt64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenWidenLowSVecI8x16ToVecI16x8","_BinaryenWidenLowUVecI8x16ToVecI16x8","_BinaryenWidenHighSVecI8x16ToVecI16x8","_BinaryenWidenHighUVecI8x16ToVecI16x8","_BinaryenWidenLowSVecI16x8ToVecI32x4","_BinaryenWidenLowUVecI16x8ToVecI32x4","_BinaryenWidenHighSVecI16x8ToVecI32x4","_BinaryenWidenHighUVecI16x8ToVecI32x4","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAndNotVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenMinSVecI8x16","_BinaryenMinUVecI8x16","_BinaryenMaxSVecI8x16","_BinaryenMaxUVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenMinSVecI16x8","_BinaryenMinUVecI16x8","_BinaryenMaxSVecI16x8","_BinaryenMaxUVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenMinSVecI32x4","_BinaryenMinUVecI32x4","_BinaryenMaxSVecI32x4","_BinaryenMaxUVecI32x4","_BinaryenDotSVecI16x8ToVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","_BinaryenNarrowSVecI16x8ToVecI8x16","_BinaryenNarrowUVecI16x8ToVecI8x16","_BinaryenNarrowSVecI32x4ToVecI16x8","_BinaryenNarrowUVecI32x4ToVecI16x8","_BinaryenSwizzleVec8x16","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","SIMDTernaryOp","_BinaryenBitselectVec128","_BinaryenQFMAVecF32x4","_BinaryenQFMSVecF32x4","_BinaryenQFMAVecF64x2","_BinaryenQFMSVecF64x2","SIMDLoadOp","_BinaryenLoadSplatVec8x16","_BinaryenLoadSplatVec16x8","_BinaryenLoadSplatVec32x4","_BinaryenLoadSplatVec64x2","_BinaryenLoadExtSVec8x8ToVecI16x8","_BinaryenLoadExtUVec8x8ToVecI16x8","_BinaryenLoadExtSVec16x4ToVecI32x4","_BinaryenLoadExtUVec16x4ToVecI32x4","_BinaryenLoadExtSVec32x2ToVecI64x2","_BinaryenLoadExtUVec32x2ToVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_malloc","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","_free","changetype","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","op","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","allocI32Array","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","a","b","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","result","paramTypes","_BinaryenAddFunctionType","_BinaryenGetFunctionTypeBySignature","_BinaryenRemoveFunctionType","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","tempName","typeRef","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","eventType","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","on","_BinaryenSetDebugInfo","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","output","__i32_load8_u","readBuffer","readString","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","getExpressionId","UNLIMITED_MEMORY","UNLIMITED_TABLE","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","ftype","_BinaryenFunctionTypeGetName","_BinaryenFunctionTypeGetNumParams","_BinaryenFunctionTypeGetParam","_BinaryenFunctionTypeGetResult","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInit","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetType","_BinaryenEventGetNumParams","_BinaryenEventGetParam","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","__i32_store","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","hasSideEffects","Nop","Block","If","Drop","Select","needsExplicitUnreachable","Unreachable","Break","numChildren","data","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","Throw","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","Push","_BinaryenPushGetValue","Pop","Host","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","Exnref","types","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","g","e","window","ReportMode","currentThisExpression","currentElementExpression","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","functionTypeNode","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","indexedGet","resolvedType","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","Type_0_is_illegal_in_this_context","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinSymbols","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","baseClass","nameInclTypeParamters","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","fieldInstance","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","IndexSignature","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","SCOPED","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","RETURNED","CONDITIONALLY_RETURNED","inheritConditional","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","numThisLocalFlags","numOtherLocalFlags","min","isLocalFlag","WRAPPED","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Constraints","RuntimeFeatures","Compiler","currentInlineFunctions","currentParent","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","events","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","setFeatures","compile","initialize","startFunctionInstance","startFunctionBody","currentFlow","currentBody","addGlobal","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","if","global_get","return","global_set","funcRef","addFunction","ensureFunctionType","typesToNativeTypes","block","finalize","addFunctionExport","setStart","compileVisitGlobals","compileVisitMembers","removeGlobal","compileRTTI","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","unreachable","addTableImport","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","addGlobalExport","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","load","local_get","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeReplace","store","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","compileElement","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","compileExpression","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","Feature_0_is_not_enabled","initializeInStart","precomputeExpression","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","makeZero","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","binary","AddI32","makeGlobalAssignment","compileFunction","resultType","getFunctionTypeBySignature","addFunctionType","funcType","addEvent","stmts","bodyNode","compileStatements","indexBefore","performAutoreleases","nonNull","isNonnull","temp","local_set","unary","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","addFunctionImport","getFunction","compileClass","staticMembers","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","addMemorySegment","elementType","byteLength","bufferInstance","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","compileFileByPath","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","nop","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condFlow","condExpr","makeIsTrueish","hasScopedLocals","unifyLocalFlags","alwaysFalse","terminates","continues","breaks","fallsThrough","loop","popBreakLabel","unset","alwaysTrue","incrExpr","incrFlow","bodyFlow","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","CONSTANT","contextualType","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","drop","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","info","Expression_is_never_null","local_tee","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","makeRelease","retainLeftInThen","isStrictlyAssignableTo","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","nativeFieldType","nativeThisType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","compileCallIndirect","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","argc","Optional_parameter_must_have_an_initializer","setargc","ensureArgcVar","oldExpr","newExpr","temp1","temp2","getAutoreleaseLocal","tryUndoAutorelease","lengthBefore","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","compileInlineConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","arrayType","tempDataStart","nativeElementType","ensureStaticArrayBuffer","bufferAddress","arraySegment","ensureStaticArrayHeader","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseCtor","allocExpr","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","v128_zero","thisLocalIndex","fieldPrototype","idTemp","idExpr","conditions","single","singleType","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","offsetof","checkArgsOptional","Type_0_has_no_property_1","nameof","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","AbsF32","AbsF64","isNumericLiteral","MaxF32","MaxF64","select","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","immAlign","outType","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","checkFeatureEnabled","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","atomic_rmw","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","memory_size","host","MemorySize","memory_grow","MemoryGrow","memory_copy","memory_fill","isChangeableTo","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","v128_swizzle","SwizzleV8x16","v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","v128_dot","DotI16x8","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_andnot","AndNotV128","v128_not","NotV128","v128_bitselect","simd_ternary","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","isNaN","isFinite","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","blocks","outer","addBlockWithSwitch","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","addBlock","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","isAcyclic","getArrayValueType","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","finish","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","clear","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","createForStatement","elseStatement","createIfStatement","case_","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","Decompiler","functionId","decompiler","decompile","getFunctionName","getFunctionBody","getFunctionParamCount","nativeTypeToType","getFunctionParamType","getFunctionResultType","decompileExpression","nested","getLoopName","getLoopBody","getBreakCondition","getBreakName","getLoadOffset","getLoadPtr","getStoreOffset","getStorePtr","getStoreValue","i64_to_string","getSelectCondition","getDropValue","getReturnValue","getHostOp","getHostOperand","ExportsWalker","includePrivate","seen","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","unknown","numMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","formatDiagnostic","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","getSource","parseFile","nextFile","getDependee","cls","map","isSet","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","valueI64"],"mappings":"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AS,OAAOe,EAAMqR,MAC3B,IAAK,OAAQ,OAAOrR,EAAMskD,KAE5B,MAEF,KAAK,IACH,OAAQrlD,GACN,IAAK,QAAS,OAAOe,EAAMukD,OAKjC,OAAOvkD,EAAMoU,QAGf,SAAgBowC,EAAsBlwC,GACpC,OAAQA,GACN,KAAKtU,EAAMgjB,SACX,KAAKhjB,EAAM4iD,GACX,KAAK5iD,EAAMsN,YACX,KAAKtN,EAAMilB,QACX,KAAKjlB,EAAMmjD,OACX,KAAKnjD,EAAMujD,KACX,KAAKvjD,EAAMkQ,IACX,KAAKlQ,EAAMwiB,IACX,KAAKxiB,EAAMyN,WACX,KAAKzN,EAAM0jD,GACX,KAAK1jD,EAAM2jD,MACX,KAAK3jD,EAAM6jD,OACX,KAAK7jD,EAAMymB,UACX,KAAKzmB,EAAMQ,KACX,KAAKR,EAAM+iB,SACX,KAAK/iB,EAAMyiB,IACX,KAAKziB,EAAMmkD,KACX,KAAKnkD,EAAMoR,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAYpR,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA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KV+mB,EAAQxJ,MACN,EAAA7d,eAAe+lB,wBACfxR,EAAIjU,YAIR+mB,EAAQxJ,MACN,EAAA7d,eAAek5E,wCACfzlE,EAAUnT,MAAO,IAAK,MAK5B,IAAIknE,EACAC,EAGJ,SAAgB6C,EAAQr1E,EAAgBo0E,EAAwB/lE,GAC9D,IAAIjC,EAASgoE,EAAMhoE,OACnB,GAAc,GAAVA,EAAa,OAAOpM,EAAOi4E,MAC/B,GAAc,GAAV7rE,EAAa,CACf,IAAIq/E,EAASrX,EAAM,GACnB,OAAQ,EAAAtxB,gBAAgB2oC,IACtB,KAAK,EAAA5wD,aAAaykB,OAClB,KAAK,EAAAzkB,aAAamxB,MAClB,KAAK,EAAAnxB,aAAaqtB,YAEhB,OAAOujC,EAGX,IAAIC,EAAa,EAAA1lB,kBAAkBylB,GAEnC,OADA/gF,OAAOghF,GAAc,EAAA9wD,WAAWstB,aAAewjC,GAAcr9E,GACtDo9E,EAET,OAAOzrF,EAAO0uE,MAAM,KAAM0F,EAAO/lE,GAjBnC,a,8EC1jSA,SAAYtD,GACV,2CACA,mDACA,yCACA,6DACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGA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,SACA,QACA,QACA,QACA,QACA,S,8EC7OA,oBAAyByyH,EAAUvhG,GAEjC,OADA3pB,OAAO2pB,GAAS,GAAKA,EAAQ,IACtB24F,OACLd,QACE0J,EACAt/D,QACE40D,QACApkG,QAAQuN,KAGZ0qC,WAKJ,qBAA0B62D,EAAUvhG,EAAYwhG,GAE9C,OADAnrH,OAAO2pB,GAAS,GAAKA,EAAQ,IACtBwhG,EACHzJ,OACEwJ,EACAt/D,QACE40D,QACApkG,QAAQuN,KAGZ63F,QACE0J,EACAhJ,QACEt2D,QACE40D,QACApkG,QAAQuN,Q,8EC9BpB,SAAkByhG,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4B/0H,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,MAAMg1H,EAAS,GAAJh1H,EACX,OAAOg1H,GAAM,IAAcA,GAAM,KACrB,IAALh1H,GACK,IAALA,GACAA,EAAI,SAmLqBoK,EAnLYpK,GAoL9B,KAAOoK,EAAO,QACrB6qH,EAAmB7qH,EAAa8qH,IAFzC,IAAkC9qH,GA/KlC,8BAAmCpK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAMg1H,EAAS,GAAJh1H,EACX,OAAOg1H,GAAM,IAAcA,GAAM,KAC1Bh1H,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBoK,EAzKYpK,GA0K7B,KAAOoK,EAAO,QACrB6qH,EAAmB7qH,EAAa+qH,IAFzC,IAAiC/qH,GArKjC,MAAM8qH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__21__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString(10));\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.typeName = typeName;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Checks if the given node represents a numeric (float or integer) literal. */\nexport function isNumericLiteral(node: Expression): bool {\n  if (node.kind == NodeKind.LITERAL) {\n    switch ((<LiteralExpression>node).literalKind) {\n      case LiteralKind.FLOAT:\n      case LiteralKind.INTEGER: return true;\n    }\n  }\n  return false;\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  kind = NodeKind.NEW;\n\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ExportDefaultStatement,\n  Token,\n  ParameterNode\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    this.options = options;\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? elementsByDeclaration.get(declaration)!\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\n      CommonSymbols.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = exports.get(\"default\")!;\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = members.get(name)!;\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              element.identifierNode.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name)!;\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = instanceMembers.get(name)!;\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = binaryen._BinaryenTypeNone(),\n  I32  = binaryen._BinaryenTypeInt32(),\n  I64  = binaryen._BinaryenTypeInt64(),\n  F32  = binaryen._BinaryenTypeFloat32(),\n  F64  = binaryen._BinaryenTypeFloat64(),\n  V128 = binaryen._BinaryenTypeVec128(),\n  Anyref = binaryen._BinaryenTypeAnyref(),\n  Exnref = binaryen._BinaryenTypeExnref(),\n  Unreachable = binaryen._BinaryenTypeUnreachable()\n  // Auto = binaryen._BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  MVP = binaryen._BinaryenFeatureMVP(),\n  Atomics = binaryen._BinaryenFeatureAtomics(),\n  MutableGloabls = binaryen._BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = binaryen._BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = binaryen._BinaryenFeatureSIMD128(),\n  BulkMemory = binaryen._BinaryenFeatureBulkMemory(),\n  SignExt = binaryen._BinaryenFeatureSignExt(),\n  ExceptionHandling = binaryen._BinaryenFeatureExceptionHandling(),\n  TailCall = binaryen._BinaryenFeatureTailCall(),\n  ReferenceTypes = binaryen._BinaryenFeatureReferenceTypes(),\n  All = binaryen._BinaryenFeatureAll()\n}\n\nexport enum ExpressionId {\n  Invalid = binaryen._BinaryenInvalidId(),\n  Block = binaryen._BinaryenBlockId(),\n  If = binaryen._BinaryenIfId(),\n  Loop = binaryen._BinaryenLoopId(),\n  Break = binaryen._BinaryenBreakId(),\n  Switch = binaryen._BinaryenSwitchId(),\n  Call = binaryen._BinaryenCallId(),\n  CallIndirect = binaryen._BinaryenCallIndirectId(),\n  LocalGet = binaryen._BinaryenLocalGetId(),\n  LocalSet = binaryen._BinaryenLocalSetId(),\n  GlobalGet = binaryen._BinaryenGlobalGetId(),\n  GlobalSet = binaryen._BinaryenGlobalSetId(),\n  Load = binaryen._BinaryenLoadId(),\n  Store = binaryen._BinaryenStoreId(),\n  Const = binaryen._BinaryenConstId(),\n  Unary = binaryen._BinaryenUnaryId(),\n  Binary = binaryen._BinaryenBinaryId(),\n  Select = binaryen._BinaryenSelectId(),\n  Drop = binaryen._BinaryenDropId(),\n  Return = binaryen._BinaryenReturnId(),\n  Host = binaryen._BinaryenHostId(),\n  Nop = binaryen._BinaryenNopId(),\n  Unreachable = binaryen._BinaryenUnreachableId(),\n  AtomicCmpxchg = binaryen._BinaryenAtomicCmpxchgId(),\n  AtomicRMW = binaryen._BinaryenAtomicRMWId(),\n  AtomicWait = binaryen._BinaryenAtomicWaitId(),\n  AtomicNotify = binaryen._BinaryenAtomicNotifyId(),\n  AtomicFence = binaryen._BinaryenAtomicFenceId(),\n  SIMDExtract = binaryen._BinaryenSIMDExtractId(),\n  SIMDReplace = binaryen._BinaryenSIMDReplaceId(),\n  SIMDShuffle = binaryen._BinaryenSIMDShuffleId(),\n  SIMDTernary = binaryen._BinaryenSIMDTernaryId(),\n  SIMDShift = binaryen._BinaryenSIMDShiftId(),\n  SIMDLoad = binaryen._BinaryenSIMDLoadId(),\n  MemoryInit = binaryen._BinaryenMemoryInitId(),\n  DataDrop = binaryen._BinaryenDataDropId(),\n  MemoryCopy = binaryen._BinaryenMemoryCopyId(),\n  MemoryFill = binaryen._BinaryenMemoryFillId(),\n  Try = binaryen._BinaryenTryId(),\n  Throw = binaryen._BinaryenThrowId(),\n  Rethrow = binaryen._BinaryenRethrowId(),\n  BrOnExn = binaryen._BinaryenBrOnExnId(),\n  Push = binaryen._BinaryenPushId(),\n  Pop = binaryen._BinaryenPopId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = binaryen._BinaryenClzInt32(),\n  CtzI32 = binaryen._BinaryenCtzInt32(),\n  PopcntI32 = binaryen._BinaryenPopcntInt32(),\n  NegF32 = binaryen._BinaryenNegFloat32(),\n  AbsF32 = binaryen._BinaryenAbsFloat32(),\n  CeilF32 = binaryen._BinaryenCeilFloat32(),\n  FloorF32 = binaryen._BinaryenFloorFloat32(),\n  TruncF32 = binaryen._BinaryenTruncFloat32(),\n  NearestF32 = binaryen._BinaryenNearestFloat32(),\n  SqrtF32 = binaryen._BinaryenSqrtFloat32(),\n  EqzI32 = binaryen._BinaryenEqZInt32(),\n  ClzI64 = binaryen._BinaryenClzInt64(),\n  CtzI64 = binaryen._BinaryenCtzInt64(),\n  PopcntI64 = binaryen._BinaryenPopcntInt64(),\n  NegF64 = binaryen._BinaryenNegFloat64(),\n  AbsF64 = binaryen._BinaryenAbsFloat64(),\n  CeilF64 = binaryen._BinaryenCeilFloat64(),\n  FloorF64 = binaryen._BinaryenFloorFloat64(),\n  TruncF64 = binaryen._BinaryenTruncFloat64(),\n  NearestF64 = binaryen._BinaryenNearestFloat64(),\n  SqrtF64 = binaryen._BinaryenSqrtFloat64(),\n  EqzI64 = binaryen._BinaryenEqZInt64(),\n  ExtendI32 = binaryen._BinaryenExtendSInt32(),\n  ExtendU32 = binaryen._BinaryenExtendUInt32(),\n  WrapI64 = binaryen._BinaryenWrapInt64(),\n  TruncF32ToI32 = binaryen._BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = binaryen._BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = binaryen._BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = binaryen._BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = binaryen._BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = binaryen._BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = binaryen._BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = binaryen._BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = binaryen._BinaryenReinterpretFloat32(),\n  ReinterpretF64 = binaryen._BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = binaryen._BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = binaryen._BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = binaryen._BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = binaryen._BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = binaryen._BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = binaryen._BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = binaryen._BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = binaryen._BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = binaryen._BinaryenPromoteFloat32(),\n  DemoteF64 = binaryen._BinaryenDemoteFloat64(),\n  ReinterpretI32 = binaryen._BinaryenReinterpretInt32(),\n  ReinterpretI64 = binaryen._BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = binaryen._BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = binaryen._BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = binaryen._BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = binaryen._BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = binaryen._BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = binaryen._BinaryenTruncSatSFloat32ToInt32(),\n  TruncF32ToU32Sat = binaryen._BinaryenTruncSatUFloat32ToInt32(),\n  TruncF64ToI32Sat = binaryen._BinaryenTruncSatSFloat64ToInt32(),\n  TruncF64ToU32Sat = binaryen._BinaryenTruncSatUFloat64ToInt32(),\n  TruncF32ToI64Sat = binaryen._BinaryenTruncSatSFloat32ToInt64(),\n  TruncF32ToU64Sat = binaryen._BinaryenTruncSatUFloat32ToInt64(),\n  TruncF64ToI64Sat = binaryen._BinaryenTruncSatSFloat64ToInt64(),\n  TruncF64ToU64Sat = binaryen._BinaryenTruncSatUFloat64ToInt64(),\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = binaryen._BinaryenSplatVecI8x16(),\n  SplatI16x8 = binaryen._BinaryenSplatVecI16x8(),\n  SplatI32x4 = binaryen._BinaryenSplatVecI32x4(),\n  SplatI64x2 = binaryen._BinaryenSplatVecI64x2(),\n  SplatF32x4 = binaryen._BinaryenSplatVecF32x4(),\n  SplatF64x2 = binaryen._BinaryenSplatVecF64x2(),\n  NotV128 = binaryen._BinaryenNotVec128(),\n  NegI8x16 = binaryen._BinaryenNegVecI8x16(),\n  AnyTrueI8x16 = binaryen._BinaryenAnyTrueVecI8x16(),\n  AllTrueI8x16 = binaryen._BinaryenAllTrueVecI8x16(),\n  NegI16x8 = binaryen._BinaryenNegVecI16x8(),\n  AnyTrueI16x8 = binaryen._BinaryenAnyTrueVecI16x8(),\n  AllTrueI16x8 = binaryen._BinaryenAllTrueVecI16x8(),\n  NegI32x4 = binaryen._BinaryenNegVecI32x4(),\n  AnyTrueI32x4 = binaryen._BinaryenAnyTrueVecI32x4(),\n  AllTrueI32x4 = binaryen._BinaryenAllTrueVecI32x4(),\n  NegI64x2 = binaryen._BinaryenNegVecI64x2(),\n  AnyTrueI64x2 = binaryen._BinaryenAnyTrueVecI64x2(),\n  AllTrueI64x2 = binaryen._BinaryenAllTrueVecI64x2(),\n  AbsF32x4 = binaryen._BinaryenAbsVecF32x4(),\n  NegF32x4 = binaryen._BinaryenNegVecF32x4(),\n  SqrtF32x4 = binaryen._BinaryenSqrtVecF32x4(),\n  AbsF64x2 = binaryen._BinaryenAbsVecF64x2(),\n  NegF64x2 = binaryen._BinaryenNegVecF64x2(),\n  SqrtF64x2 = binaryen._BinaryenSqrtVecF64x2(),\n  TruncSatF32x4ToI32x4 = binaryen._BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatF32x4ToU32x4 = binaryen._BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatF64x2ToI64x2 = binaryen._BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatF64x2ToU64x2 = binaryen._BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertI32x4ToF32x4 = binaryen._BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertU32x4ToF32x4 = binaryen._BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertI64x2ToF64x2 = binaryen._BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertU64x2ToF64x2 = binaryen._BinaryenConvertUVecI64x2ToVecF64x2(),\n  WidenLowI8x16ToI16x8 = binaryen._BinaryenWidenLowSVecI8x16ToVecI16x8(),\n  WidenLowU8x16ToU16x8 = binaryen._BinaryenWidenLowUVecI8x16ToVecI16x8(),\n  WidenHighI8x16ToI16x8 = binaryen._BinaryenWidenHighSVecI8x16ToVecI16x8(),\n  WidenHighU8x16ToU16x8 = binaryen._BinaryenWidenHighUVecI8x16ToVecI16x8(),\n  WidenLowI16x8ToI32x4 = binaryen._BinaryenWidenLowSVecI16x8ToVecI32x4(),\n  WidenLowU16x8ToU32x4 = binaryen._BinaryenWidenLowUVecI16x8ToVecI32x4(),\n  WidenHighI16x8ToI32x4 = binaryen._BinaryenWidenHighSVecI16x8ToVecI32x4(),\n  WidenHighU16x8ToU32x4 = binaryen._BinaryenWidenHighUVecI16x8ToVecI32x4()\n}\n\nexport enum BinaryOp {\n  AddI32 = binaryen._BinaryenAddInt32(),\n  SubI32 = binaryen._BinaryenSubInt32(),\n  MulI32 = binaryen._BinaryenMulInt32(),\n  DivI32 = binaryen._BinaryenDivSInt32(),\n  DivU32 = binaryen._BinaryenDivUInt32(),\n  RemI32 = binaryen._BinaryenRemSInt32(),\n  RemU32 = binaryen._BinaryenRemUInt32(),\n  AndI32 = binaryen._BinaryenAndInt32(),\n  OrI32 = binaryen._BinaryenOrInt32(),\n  XorI32 = binaryen._BinaryenXorInt32(),\n  ShlI32 = binaryen._BinaryenShlInt32(),\n  ShrU32 = binaryen._BinaryenShrUInt32(),\n  ShrI32 = binaryen._BinaryenShrSInt32(),\n  RotlI32 = binaryen._BinaryenRotLInt32(),\n  RotrI32 = binaryen._BinaryenRotRInt32(),\n  EqI32 = binaryen._BinaryenEqInt32(),\n  NeI32 = binaryen._BinaryenNeInt32(),\n  LtI32 = binaryen._BinaryenLtSInt32(),\n  LtU32 = binaryen._BinaryenLtUInt32(),\n  LeI32 = binaryen._BinaryenLeSInt32(),\n  LeU32 = binaryen._BinaryenLeUInt32(),\n  GtI32 = binaryen._BinaryenGtSInt32(),\n  GtU32 = binaryen._BinaryenGtUInt32(),\n  GeI32 = binaryen._BinaryenGeSInt32(),\n  GeU32 = binaryen._BinaryenGeUInt32(),\n  AddI64 = binaryen._BinaryenAddInt64(),\n  SubI64 = binaryen._BinaryenSubInt64(),\n  MulI64 = binaryen._BinaryenMulInt64(),\n  DivI64 = binaryen._BinaryenDivSInt64(),\n  DivU64 = binaryen._BinaryenDivUInt64(),\n  RemI64 = binaryen._BinaryenRemSInt64(),\n  RemU64 = binaryen._BinaryenRemUInt64(),\n  AndI64 = binaryen._BinaryenAndInt64(),\n  OrI64 = binaryen._BinaryenOrInt64(),\n  XorI64 = binaryen._BinaryenXorInt64(),\n  ShlI64 = binaryen._BinaryenShlInt64(),\n  ShrU64 = binaryen._BinaryenShrUInt64(),\n  ShrI64 = binaryen._BinaryenShrSInt64(),\n  RotlI64 = binaryen._BinaryenRotLInt64(),\n  RotrI64 = binaryen._BinaryenRotRInt64(),\n  EqI64 = binaryen._BinaryenEqInt64(),\n  NeI64 = binaryen._BinaryenNeInt64(),\n  LtI64 = binaryen._BinaryenLtSInt64(),\n  LtU64 = binaryen._BinaryenLtUInt64(),\n  LeI64 = binaryen._BinaryenLeSInt64(),\n  LeU64 = binaryen._BinaryenLeUInt64(),\n  GtI64 = binaryen._BinaryenGtSInt64(),\n  GtU64 = binaryen._BinaryenGtUInt64(),\n  GeI64 = binaryen._BinaryenGeSInt64(),\n  GeU64 = binaryen._BinaryenGeUInt64(),\n  AddF32 = binaryen._BinaryenAddFloat32(),\n  SubF32 = binaryen._BinaryenSubFloat32(),\n  MulF32 = binaryen._BinaryenMulFloat32(),\n  DivF32 = binaryen._BinaryenDivFloat32(),\n  CopysignF32 = binaryen._BinaryenCopySignFloat32(),\n  MinF32 = binaryen._BinaryenMinFloat32(),\n  MaxF32 = binaryen._BinaryenMaxFloat32(),\n  EqF32 = binaryen._BinaryenEqFloat32(),\n  NeF32 = binaryen._BinaryenNeFloat32(),\n  LtF32 = binaryen._BinaryenLtFloat32(),\n  LeF32 = binaryen._BinaryenLeFloat32(),\n  GtF32 = binaryen._BinaryenGtFloat32(),\n  GeF32 = binaryen._BinaryenGeFloat32(),\n  AddF64 = binaryen._BinaryenAddFloat64(),\n  SubF64 = binaryen._BinaryenSubFloat64(),\n  MulF64 = binaryen._BinaryenMulFloat64(),\n  DivF64 = binaryen._BinaryenDivFloat64(),\n  CopysignF64 = binaryen._BinaryenCopySignFloat64(),\n  MinF64 = binaryen._BinaryenMinFloat64(),\n  MaxF64 = binaryen._BinaryenMaxFloat64(),\n  EqF64 = binaryen._BinaryenEqFloat64(),\n  NeF64 = binaryen._BinaryenNeFloat64(),\n  LtF64 = binaryen._BinaryenLtFloat64(),\n  LeF64 = binaryen._BinaryenLeFloat64(),\n  GtF64 = binaryen._BinaryenGtFloat64(),\n  GeF64 = binaryen._BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = binaryen._BinaryenEqVecI8x16(),\n  NeI8x16 = binaryen._BinaryenNeVecI8x16(),\n  LtI8x16 = binaryen._BinaryenLtSVecI8x16(),\n  LtU8x16 = binaryen._BinaryenLtUVecI8x16(),\n  LeI8x16 = binaryen._BinaryenLeSVecI8x16(),\n  LeU8x16 = binaryen._BinaryenLeUVecI8x16(),\n  GtI8x16 = binaryen._BinaryenGtSVecI8x16(),\n  GtU8x16 = binaryen._BinaryenGtUVecI8x16(),\n  GeI8x16 = binaryen._BinaryenGeSVecI8x16(),\n  GeU8x16 = binaryen._BinaryenGeUVecI8x16(),\n  EqI16x8 = binaryen._BinaryenEqVecI16x8(),\n  NeI16x8 = binaryen._BinaryenNeVecI16x8(),\n  LtI16x8 = binaryen._BinaryenLtSVecI16x8(),\n  LtU16x8 = binaryen._BinaryenLtUVecI16x8(),\n  LeI16x8 = binaryen._BinaryenLeSVecI16x8(),\n  LeU16x8 = binaryen._BinaryenLeUVecI16x8(),\n  GtI16x8 = binaryen._BinaryenGtSVecI16x8(),\n  GtU16x8 = binaryen._BinaryenGtUVecI16x8(),\n  GeI16x8 = binaryen._BinaryenGeSVecI16x8(),\n  GeU16x8 = binaryen._BinaryenGeUVecI16x8(),\n  EqI32x4 = binaryen._BinaryenEqVecI32x4(),\n  NeI32x4 = binaryen._BinaryenNeVecI32x4(),\n  LtI32x4 = binaryen._BinaryenLtSVecI32x4(),\n  LtU32x4 = binaryen._BinaryenLtUVecI32x4(),\n  LeI32x4 = binaryen._BinaryenLeSVecI32x4(),\n  LeU32x4 = binaryen._BinaryenLeUVecI32x4(),\n  GtI32x4 = binaryen._BinaryenGtSVecI32x4(),\n  GtU32x4 = binaryen._BinaryenGtUVecI32x4(),\n  GeI32x4 = binaryen._BinaryenGeSVecI32x4(),\n  GeU32x4 = binaryen._BinaryenGeUVecI32x4(),\n  EqF32x4 = binaryen._BinaryenEqVecF32x4(),\n  NeF32x4 = binaryen._BinaryenNeVecF32x4(),\n  LtF32x4 = binaryen._BinaryenLtVecF32x4(),\n  LeF32x4 = binaryen._BinaryenLeVecF32x4(),\n  GtF32x4 = binaryen._BinaryenGtVecF32x4(),\n  GeF32x4 = binaryen._BinaryenGeVecF32x4(),\n  EqF64x2 = binaryen._BinaryenEqVecF64x2(),\n  NeF64x2 = binaryen._BinaryenNeVecF64x2(),\n  LtF64x2 = binaryen._BinaryenLtVecF64x2(),\n  LeF64x2 = binaryen._BinaryenLeVecF64x2(),\n  GtF64x2 = binaryen._BinaryenGtVecF64x2(),\n  GeF64x2 = binaryen._BinaryenGeVecF64x2(),\n  AndV128 = binaryen._BinaryenAndVec128(),\n  OrV128 = binaryen._BinaryenOrVec128(),\n  XorV128 = binaryen._BinaryenXorVec128(),\n  AndNotV128 = binaryen._BinaryenAndNotVec128(),\n  AddI8x16 = binaryen._BinaryenAddVecI8x16(),\n  AddSatI8x16 = binaryen._BinaryenAddSatSVecI8x16(),\n  AddSatU8x16 = binaryen._BinaryenAddSatUVecI8x16(),\n  SubI8x16 = binaryen._BinaryenSubVecI8x16(),\n  SubSatI8x16 = binaryen._BinaryenSubSatSVecI8x16(),\n  SubSatU8x16 = binaryen._BinaryenSubSatUVecI8x16(),\n  MulI8x16 = binaryen._BinaryenMulVecI8x16(),\n  MinI8x16 = binaryen._BinaryenMinSVecI8x16(),\n  MinU8x16 = binaryen._BinaryenMinUVecI8x16(),\n  MaxI8x16 = binaryen._BinaryenMaxSVecI8x16(),\n  MaxU8x16 = binaryen._BinaryenMaxUVecI8x16(),\n  AddI16x8 = binaryen._BinaryenAddVecI16x8(),\n  AddSatI16x8 = binaryen._BinaryenAddSatSVecI16x8(),\n  AddSatU16x8 = binaryen._BinaryenAddSatUVecI16x8(),\n  SubI16x8 = binaryen._BinaryenSubVecI16x8(),\n  SubSatI16x8 = binaryen._BinaryenSubSatSVecI16x8(),\n  SubSatU16x8 = binaryen._BinaryenSubSatUVecI16x8(),\n  MulI16x8 = binaryen._BinaryenMulVecI16x8(),\n  MinI16x8 = binaryen._BinaryenMinSVecI16x8(),\n  MinU16x8 = binaryen._BinaryenMinUVecI16x8(),\n  MaxI16x8 = binaryen._BinaryenMaxSVecI16x8(),\n  MaxU16x8 = binaryen._BinaryenMaxUVecI16x8(),\n  AddI32x4 = binaryen._BinaryenAddVecI32x4(),\n  SubI32x4 = binaryen._BinaryenSubVecI32x4(),\n  MulI32x4 = binaryen._BinaryenMulVecI32x4(),\n  MinI32x4 = binaryen._BinaryenMinSVecI32x4(),\n  MinU32x4 = binaryen._BinaryenMinUVecI32x4(),\n  MaxI32x4 = binaryen._BinaryenMaxSVecI32x4(),\n  MaxU32x4 = binaryen._BinaryenMaxUVecI32x4(),\n  DotI16x8 = binaryen._BinaryenDotSVecI16x8ToVecI32x4(),\n  AddI64x2 = binaryen._BinaryenAddVecI64x2(),\n  SubI64x2 = binaryen._BinaryenSubVecI64x2(),\n  AddF32x4 = binaryen._BinaryenAddVecF32x4(),\n  SubF32x4 = binaryen._BinaryenSubVecF32x4(),\n  MulF32x4 = binaryen._BinaryenMulVecF32x4(),\n  DivF32x4 = binaryen._BinaryenDivVecF32x4(),\n  MinF32x4 = binaryen._BinaryenMinVecF32x4(),\n  MaxF32x4 = binaryen._BinaryenMaxVecF32x4(),\n  AddF64x2 = binaryen._BinaryenAddVecF64x2(),\n  SubF64x2 = binaryen._BinaryenSubVecF64x2(),\n  MulF64x2 = binaryen._BinaryenMulVecF64x2(),\n  DivF64x2 = binaryen._BinaryenDivVecF64x2(),\n  MinF64x2 = binaryen._BinaryenMinVecF64x2(),\n  MaxF64x2 = binaryen._BinaryenMaxVecF64x2(),\n  NarrowI16x8ToI8x16 = binaryen._BinaryenNarrowSVecI16x8ToVecI8x16(),\n  NarrowU16x8ToU8x16 = binaryen._BinaryenNarrowUVecI16x8ToVecI8x16(),\n  NarrowI32x4ToI16x8 = binaryen._BinaryenNarrowSVecI32x4ToVecI16x8(),\n  NarrowU32x4ToU16x8 = binaryen._BinaryenNarrowUVecI32x4ToVecI16x8(),\n  SwizzleV8x16 = binaryen._BinaryenSwizzleVec8x16()\n}\n\nexport enum HostOp {\n  MemorySize = binaryen._BinaryenMemorySize(),\n  MemoryGrow = binaryen._BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = binaryen._BinaryenAtomicRMWAdd(),\n  Sub = binaryen._BinaryenAtomicRMWSub(),\n  And = binaryen._BinaryenAtomicRMWAnd(),\n  Or = binaryen._BinaryenAtomicRMWOr(),\n  Xor = binaryen._BinaryenAtomicRMWXor(),\n  Xchg = binaryen._BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = binaryen._BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneU8x16 = binaryen._BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneI16x8 = binaryen._BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneU16x8 = binaryen._BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneI32x4 = binaryen._BinaryenExtractLaneVecI32x4(),\n  ExtractLaneI64x2 = binaryen._BinaryenExtractLaneVecI64x2(),\n  ExtractLaneF32x4 = binaryen._BinaryenExtractLaneVecF32x4(),\n  ExtractLaneF64x2 = binaryen._BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = binaryen._BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneI16x8 = binaryen._BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneI32x4 = binaryen._BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneI64x2 = binaryen._BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneF32x4 = binaryen._BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneF64x2 = binaryen._BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = binaryen._BinaryenShlVecI8x16(),\n  ShrI8x16 = binaryen._BinaryenShrSVecI8x16(),\n  ShrU8x16 = binaryen._BinaryenShrUVecI8x16(),\n  ShlI16x8 = binaryen._BinaryenShlVecI16x8(),\n  ShrI16x8 = binaryen._BinaryenShrSVecI16x8(),\n  ShrU16x8 = binaryen._BinaryenShrUVecI16x8(),\n  ShlI32x4 = binaryen._BinaryenShlVecI32x4(),\n  ShrI32x4 = binaryen._BinaryenShrSVecI32x4(),\n  ShrU32x4 = binaryen._BinaryenShrUVecI32x4(),\n  ShlI64x2 = binaryen._BinaryenShlVecI64x2(),\n  ShrI64x2 = binaryen._BinaryenShrSVecI64x2(),\n  ShrU64x2 = binaryen._BinaryenShrUVecI64x2()\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = binaryen._BinaryenBitselectVec128(),\n  QFMAF32x4 = binaryen._BinaryenQFMAVecF32x4(),\n  QFMSF32x4 = binaryen._BinaryenQFMSVecF32x4(),\n  QFMAF64x2 = binaryen._BinaryenQFMAVecF64x2(),\n  QFMSF64x2 = binaryen._BinaryenQFMSVecF64x2()\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = binaryen._BinaryenLoadSplatVec8x16(),\n  LoadSplatV16x8 = binaryen._BinaryenLoadSplatVec16x8(),\n  LoadSplatV32x4 = binaryen._BinaryenLoadSplatVec32x4(),\n  LoadSplatV64x2 = binaryen._BinaryenLoadSplatVec64x2(),\n  LoadI8ToI16x8 = binaryen._BinaryenLoadExtSVec8x8ToVecI16x8(),\n  LoadU8ToU16x8 = binaryen._BinaryenLoadExtUVec8x8ToVecI16x8(),\n  LoadI16ToI32x4 = binaryen._BinaryenLoadExtSVec16x4ToVecI32x4(),\n  LoadU16ToU32x4 = binaryen._BinaryenLoadExtUVec16x4ToVecI32x4(),\n  LoadI32ToI64x2 = binaryen._BinaryenLoadExtSVec32x2ToVecI64x2(),\n  LoadU32ToU64x2 = binaryen._BinaryenLoadExtUVec32x2ToVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = binaryen._BinaryenModuleCreate();\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var module = new Module();\n    var cArr = allocU8Array(buffer);\n    module.ref = binaryen._BinaryenModuleRead(cArr, buffer.length);\n    binaryen._free(changetype<usize>(cArr));\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n      binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, typeName, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // function types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    var ret = binaryen._BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    var ret = binaryen._BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    type: FunctionTypeRef\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, type);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    var typeRef = binaryen._BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n    var ret = binaryen._BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n    binaryen._BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    eventType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, eventType);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      binaryen._BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      binaryen._BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(names[i]);\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = binaryen._BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = binaryen._BinaryenGetShrinkLevel();\n    var previousDebugInfo = binaryen._BinaryenGetDebugInfo();\n    binaryen._BinaryenSetOptimizeLevel(4);\n    binaryen._BinaryenSetShrinkLevel(0);\n    binaryen._BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = binaryen._BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    binaryen._BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = binaryen._BinaryenFunctionGetBody(func);\n    if (binaryen._BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = binaryen._BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    binaryen._BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(previousShrinkLevel);\n    binaryen._BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = binaryen.__i32_load(out);\n      let binaryLen = binaryen.__i32_load(out + 4);\n      sourceMapPtr = binaryen.__i32_load(out + 8);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryLen);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) binaryen._free(cStr);\n      if (binaryPtr) binaryen._free(binaryPtr);\n      if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) binaryen._free(ptr);\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (binaryen._BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// function types\n\nexport function getFunctionTypeName(ftype: FunctionTypeRef): string | null {\n  return readString(binaryen._BinaryenFunctionTypeGetName(ftype));\n}\n\nexport function getFunctionTypeParamCount(ftype: FunctionTypeRef): Index {\n  return binaryen._BinaryenFunctionTypeGetNumParams(ftype);\n}\n\nexport function getFunctionTypeParam(ftype: FunctionTypeRef, index: Index): NativeType {\n  return binaryen._BinaryenFunctionTypeGetParam(ftype, index);\n}\n\nexport function getFunctionTypeResult(ftype: FunctionTypeRef): NativeType {\n  return binaryen._BinaryenFunctionTypeGetResult(ftype);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return binaryen._BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return binaryen._BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResult(func);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInit(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventType(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetType(event));\n}\n\nexport function getEventParamCount(event: EventRef): Index {\n  return binaryen._BinaryenEventGetNumParams(event);\n}\n\nexport function getEventParam(event: EventRef, index: Index): NativeType {\n  return binaryen._BinaryenEventGetParam(event, index);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = binaryen._RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport function hasSideEffects(expr: ExpressionRef): bool {\n  // TODO: there's more\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.LocalGet:\n    case ExpressionId.GlobalGet:\n    case ExpressionId.Const:\n    case ExpressionId.Nop: {\n      return false;\n    }\n    case ExpressionId.Block: {\n      for (let i = 0, k = binaryen._BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n        if (hasSideEffects(binaryen._BinaryenBlockGetChild(expr, i))) return true;\n      }\n      return false;\n    }\n    case ExpressionId.If: {\n      return hasSideEffects(binaryen._BinaryenIfGetCondition(expr))\n          || hasSideEffects(binaryen._BinaryenIfGetIfTrue(expr))\n          || hasSideEffects(binaryen._BinaryenIfGetIfFalse(expr));\n    }\n    case ExpressionId.Unary: {\n      return hasSideEffects(binaryen._BinaryenUnaryGetValue(expr));\n    }\n    case ExpressionId.Binary: {\n      return hasSideEffects(binaryen._BinaryenBinaryGetLeft(expr))\n          || hasSideEffects(binaryen._BinaryenBinaryGetRight(expr));\n    }\n    case ExpressionId.Drop: {\n      return hasSideEffects(binaryen._BinaryenDropGetValue(expr));\n    }\n    case ExpressionId.Select: {\n      return hasSideEffects(binaryen._BinaryenSelectGetIfTrue(expr))\n          || hasSideEffects(binaryen._BinaryenSelectGetIfFalse(expr))\n          || hasSideEffects(binaryen._BinaryenSelectGetCondition(expr));\n    }\n  }\n  return true;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** A host reference. */\n  ANYREF,\n  /** An internal exception reference. */\n  EXNREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.EXNREF: return NativeType.Exnref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: assert(false);\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.ANYREF: return \"a\";\n      case TypeKind.EXNREF: return \"e\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** A host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** An internal exception reference. */\n  static readonly exnref: Type = new Type(TypeKind.EXNREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(10), numArguments.toString(10)\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = contextualTypeArguments.get(name)!;\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type)!;\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n      return type ? type.nonNullableType : null;\n    }\n    return this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType)!;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType)!;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked` behaves like parenthesized\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool)!;\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = ctxTypes;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              let existing = instanceMembers.get(member.name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                existing.declaration.name.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is a function parameter. */\n  PARAMETER = 1 << 1,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 2,\n  /** Local is non-null. */\n  NONNULL = 1 << 3,\n  /** Local is read from. */\n  READFROM = 1 << 4,\n  /** Local is written to. */\n  WRITTENTO = 1 << 5,\n  /** Local is retained. */\n  RETAINED = 1 << 6,\n  /** Local is returned. */\n  RETURNED = 1 << 7,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 8,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 9,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 10,\n  /** Local is conditionally returned. */\n  CONDITIONALLY_RETURNED = 1 << 11,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | PARAMETER\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED\n                  | RETURNED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED\n                  | CONDITIONALLY_RETURNED,\n\n  /** Any written to flag. */\n  ANY_WRITTENTO = WRITTENTO\n                | CONDITIONALLY_WRITTENTO,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED,\n\n  /** Any returned flag. */\n  ANY_RETURNED = RETURNED\n               | CONDITIONALLY_RETURNED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop()!;\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      case NativeType.Anyref: {\n        temps = parentFunction.tempAnyrefs || (parentFunction.tempAnyrefs = []);\n        break;\n      }\n      case NativeType.Exnref: {\n        temps = parentFunction.tempExnrefs || (parentFunction.tempExnrefs = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name)!;\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && scope.has(name)) return scope.get(name)!;\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name)!;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    this.set(other.flags & FlowFlags.ANY_CONDITIONAL);\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      this.setLocalFlag(i, flags & LocalFlags.ANY_CONDITIONAL);\n      if (flags & LocalFlags.RETAINED)  this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM)  this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n      if (flags & LocalFlags.RETURNED)  this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETURNED);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr)))!);\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  EventRef,\n  FeatureFlags,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement,\n  SourceKind\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Registered event types. */\n  events: Map<string, EventRef> = new Map();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    var module = Module.create();\n    this.module = module;\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, Module.UNLIMITED_TABLE, functionTable, module.i32(0));\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.unreachable());\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeReplace(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = elementsByName.get(fromName)!;\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = this.makeZero(type);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Either reuses or creates the event type matching the specified name. */\n  ensureEventType(\n    name: string,\n    parameterTypes: Type[] | null\n  ): EventRef {\n    var events = this.events;\n    if (events.has(name)) return events.get(name)!;\n    var module = this.module;\n    var funcType = this.ensureFunctionType(parameterTypes, Type.void);\n    var eventType = module.addEvent(name, 0, funcType);\n    events.set(name, eventType);\n    return eventType;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED | LocalFlags.PARAMETER);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Not_implemented,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = (<NamespaceDeclaration>statement).members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    // Compile the condition before the body in order to...\n    var condFlow = outerFlow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    assert(!condFlow.hasScopedLocals);\n    // ...unify local states before and after the condition has been executed the first time\n    innerFlow.unifyLocalFlags(condFlow);\n    this.currentFlow = innerFlow;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) {\n      this.performAutoreleases(innerFlow, stmts);\n      if (!alwaysFalse) { // (4)\n        stmts.push(module.br(continueLabel, condExpr));\n      }\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile the incrementor before the body in order to...\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) {\n      let incrFlow = innerFlow.fork();\n      this.currentFlow = incrFlow;\n      incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n      assert(!incrFlow.hasScopedLocals);\n      this.currentFlow = innerFlow;\n      // ...unify local states before and after the incrementor has been executed the first time\n      innerFlow.unifyLocalFlags(incrFlow);\n    }\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var bodyFlow = innerFlow.fork();\n    this.currentFlow = bodyFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; bodyFlow.breakLabel = breakLabel;\n    bodyFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    bodyFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = bodyFlow.is(FlowFlags.TERMINATES);\n    var continues = bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    // Finalize body flow\n    if (fallsThrough) this.performAutoreleases(bodyFlow, stmts);\n    bodyFlow.freeScopedLocals();\n    innerFlow.inherit(bodyFlow);\n    this.currentFlow = innerFlow;\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            let index = getLocalGetIndex(expr);\n            if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n              flow.setLocalFlag(index, LocalFlags.RETURNED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = scopedLocals.get(name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(type);\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(temp.index, expr),\n            module.local_get(temp.index, type.toNativeType()),\n            module.unreachable()\n          );\n          flow.freeTempLocal(temp);\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        assert(valueType == returnType);\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let instance = <Class>(<Property>target).parent;\n        assert(instance.kind == ElementKind.CLASS);\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), instance.type);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let instance = <Class>(<IndexSignature>target).parent;\n        assert(instance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = instance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, instance.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = instance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, instance.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2);\n        let valueType = indexedSet.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), instance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(instance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          module.local_get(localIndex, type.toNativeType()),\n          valueExpr,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          module.global_get(global.internalName, nativeType), // oldRef\n          valueExpr, // newRef\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              module.local_tee(tempValue.index, valueExpr), // newRef\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            valueExpr, // newRef\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression;\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\n        if (!instance) return this.module.unreachable();\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          instance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(oldExpr: ExpressionRef, newExpr: ExpressionRef, alreadyRetained: bool = false): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however makes\n    // it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.block(null, stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, /* finalize */ false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        let returnType = this.currentType;\n        if (returnType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, returnType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      module.call_indirect(\n        this.options.isWasm64\n          ? module.unary(UnaryOp.WrapI64, indexArg)\n          : indexArg,\n        operands,\n        signature.toSignatureString()\n      )\n    ], returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          // TODO: anyref context yields <usize>0\n        }\n        this.currentType = options.usizeType;\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentParent || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          expression.range, \"T\"\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr), arrayType);\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(classReference.type);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.compileFunctionUsingTypeArguments(\n            prototype,\n            [],\n            makeMap<string,Type>(),\n            expression,\n          );\n          if (instance == null) {\n            return module.unreachable();\n          } else {\n            this.currentType = instance.type;\n            return module.i32(this.ensureFunctionTableEntry(instance));\n          }\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      // case TypeKind.ANYREF: {\n      //   TODO: !ref.is_null\n      // }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      if (initializerNode) { // use initializer\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n      } else { // initialize with zero\n        initExpr = this.makeZero(fieldType);\n      }\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    switch (getExpressionId(single)) {\n      case ExpressionId.Return:\n      case ExpressionId.Throw:\n      case ExpressionId.Unreachable: {\n        // type does no matter, terminates anyway\n        return single;\n      }\n    }\n    let singleType = getExpressionType(single);\n    assert(singleType == NativeType.Unreachable || singleType == type);\n    return single;\n  }\n  return module.block(null, stmts, type);\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","const binaryen = global.Binaryen || require(\"binaryen\");\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression,\n  isNumericLiteral\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinSymbols.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinSymbols.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          case TypeKind.EXNREF: { value = \"exnref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let temp1 = flow.getTempLocal(Type.i32);\n            let temp2 = flow.getTempLocal(Type.i32);\n            // (x + (x >> 31)) ^ (x >> 31)\n            let ret = module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I32)\n              ),\n              module.local_get(temp2.index, NativeType.I32)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let temp1 = flow.getTempLocal(options.usizeType);\n            let temp2 = flow.getTempLocal(options.usizeType);\n            let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, options.nativeSizeType)\n              ),\n              module.local_get(temp2.index, options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let temp1 = flow.getTempLocal(Type.i64);\n            let temp2 = flow.getTempLocal(Type.i64);\n            // (x + (x >> 63)) ^ (x >> 63)\n            let ret = module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(temp1.index, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I64)\n              ),\n              module.local_get(temp2.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinSymbols.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinSymbols.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinSymbols.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinSymbols.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinSymbols.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinSymbols.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (!fromType.isChangeableTo(toType)) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        let flow = compiler.currentFlow;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let temp = flow.getTempLocal(type);\n            flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            let ret = module.if(\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.I32),\n              abort\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let temp = flow.getTempLocal(Type.i64);\n            let ret = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let temp = flow.getTempLocal(compiler.options.usizeType);\n            let ret = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, compiler.options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F32: {\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(temp.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(temp.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_swizzle: { // swizzle(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_load_splat: { // load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I16:\n          case TypeKind.U16: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          case TypeKind.F32: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n            }\n            // fall-through\n          }\n          case TypeKind.I64:\n          case TypeKind.U64:\n          case TypeKind.F64: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_load_ext: { // load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n          case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n          case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n          case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_dot: { // dot<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndNotV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n    case BuiltinSymbols.isNaN: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // never NaN\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(0)\n                ], NativeType.I32)\n              : module.i32(0);\n          }\n          // (t = arg0) != t\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF32,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.NeF32,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF64,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.NeF64,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.isFinite: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // always finite\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(1)\n                ], NativeType.I32)\n              : module.i32(1);\n          }\n          // (t = arg0) - t == 0\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF32,\n                module.binary(BinaryOp.SubF32,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n                ),\n                module.f32(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.EqF32,\n              module.binary(BinaryOp.SubF32,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F32)\n              ),\n              module.f32(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF64,\n                module.binary(BinaryOp.SubF64,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n                ),\n                module.f64(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.EqF64,\n              module.binary(BinaryOp.SubF64,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F64)\n              ),\n              module.f64(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n      );\n      return module.unreachable();\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_dot_i16x8_s: return deferASM(BuiltinSymbols.v128_dot, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_swizzle: return deferASM(BuiltinSymbols.v128_swizzle, compiler, null, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v16x8_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v32x4_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v64x2_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u64, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    typeArgument ? [ typeArgument ] : null,\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = compiler.makeZero(stringInstance.type);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift()! : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(name, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier()) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              <IdentifierExpression>next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() {};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__21__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompile(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}